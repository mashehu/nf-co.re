---
import SchemaListing from '@components/schema/SchemaListing.svelte';
import SchemaListingToc from '@components/schema/SchemaListingToc.svelte';
import cache from 'bin/cache.js';
import PipelinePageLayout from '@layouts/PipelinePageLayout.astro';
import pipelines_json from '@public/pipelines.json';

export function getStaticPaths() {
    var paths: { params: { pipeline: string; version: string }; props: { versions: string[]; md_files: string[] } }[] =
        [];
    pipelines_json.remote_workflows.forEach((pipeline) => {
        pipeline.releases.forEach((release) => {
            const md_files = release.doc_files.map((file) => file.replace('docs/', '').replace('.md', ''));
            paths.push({
                params: {
                    pipeline: pipeline.name,
                    version: release.tag_name,
                },
                props: {
                    versions: pipeline.releases.map((release) => release.tag_name),
                    md_files: md_files,
                    description: pipeline.description,
                },
            });
        });
    });
    return paths;
}
const { pipeline, version } = Astro.params;
let headings: {
    depth: number;
    text: string;
    slug: string;
}[] = [];

let { versions, md_files, description } = Astro.props;

const cache_key = `${pipeline}/${version}/nextflow_schema.json`;
let schema = await cache
    .get(cache_key)
    .then((response) => {
        if (response !== undefined) {
            return JSON.parse(response);
        } else {
            return { definitions: [], properties: [] };
        }
    })
    .catch((error) => {
        console.log(error);
        return { definitions: [], properties: [] };
    });

if (schema.definitions && Object.keys(schema.definitions).length > 0) {
    headings = Object.entries(schema.definitions).map(([key, value]) => {
        return {
            slug: key.replaceAll('_', '-'),
            text: value.title,
            depth: 1,
            fa_icon: value.fa_icon,
            hidden: value.properties && Object.values(value.properties).every((prop) => prop.hidden),
        };
    });
} else if (schema.properties && Object.keys(schema.properties).length > 0) {
    schema.definitions = schema.properties; // catching the case where there is no definitions but only properties
}
---

<PipelinePageLayout
    pipeline={pipeline}
    subtitle={description}
    headings={headings}
    version={version}
    versions={versions}
    tabItems={md_files}
>
    <div class="row">
        <div class="col-12 col-md-10">
            <SchemaListing {schema} client:load />
        </div>
        <div class="col-12 col-md-2 toc order-first order-md-last pe-0">
            <SchemaListingToc headings={headings} client:idle />
        </div>
    </div>
</PipelinePageLayout>

<style lang="scss"></style>
