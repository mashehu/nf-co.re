---
import ResultsLayout from '@layouts/ResultsLayout.astro';
import pipelines_json from '@public/pipelines.json';
import cache from 'bin/cache';

export async function getStaticPaths() {
    let paths: {
        params: {
            pipeline: string;
            version: string;
            results_path: string;
        };
        props: {
            content: { Key: string; LastModified: Date; ETag: string; Size: number; StorageClass: string }[];
            commonPrefixes: { Prefix: string }[];
        };
    }[] = [];

    const prefixes = pipelines_json.remote_workflows
        .map((pipeline) => {
            return pipeline.releases
                .filter((rel) => rel.tag_name !== 'dev')
                .map((release) => {
                    return `${pipeline.name}/results-${release.tag_sha}/`;
                });
        })
        .flat();
    const awsResponse = await cache
        .get('aws.json')
        .catch((err) => {
            console.error(err);
        })
        .then((res) => {
            return res;
        });

    const commonPrefixes = awsResponse.commonPrefixes;
    const bucketContents = awsResponse.bucketContents;
    pipelines_json.remote_workflows.forEach(async (pipeline) => {
        pipeline.releases
            .filter((rel) => rel.tag_name !== 'dev')
            .forEach(async (release) => {
                const results_path = 'results-' + release.tag_sha;
                const version = release.tag_name;
                paths.push({
                    params: {
                        pipeline: pipeline.name,
                        version: version,
                        results_path: results_path,
                    },
                    props: {
                        content: bucketContents.filter((item) => {
                            return item.Key.startsWith(`${pipeline.name}/${results_path}/`);
                        }),
                        commonPrefixes: commonPrefixes.filter((item) => {
                            return item.Prefix.startsWith(`${pipeline.name}/${results_path}/`);
                        }),
                    },
                });
            });
    });
    return paths;
}
const { pipeline, version, results_path } = Astro.params;
const { content, commonPrefixes } = Astro.props;
if (version === 'dev') {
    return Astro.redirect(`/${pipeline}/`);
}
---

<ResultsLayout {pipeline} {version} path={results_path} bucketContents={content} {commonPrefixes} />
