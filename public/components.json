{
  "modules": [
    {
      "name": "abacas",
      "path": "modules/nf-core/abacas/meta.yml",
      "type": "module",
      "meta": {
        "name": "abacas",
        "description": "contiguate draft genome assembly",
        "keywords": [
          "genome",
          "assembly",
          "contiguate"
        ],
        "tools": [
          {
            "abacas": {
              "description": "ABACAS is intended to rapidly contiguate (align, order, orientate),\nvisualize and design primers to close gaps on shotgun assembled\ncontigs based on a reference sequence.\n",
              "homepage": "http://abacas.sourceforge.net/documentation.html",
              "documentation": "http://abacas.sourceforge.net/documentation.html",
              "doi": "10.1093/bioinformatics/btp347",
              "licence": [
                "GPL v2-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "scaffold": {
              "type": "file",
              "description": "Fasta file containing scaffold",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA reference file",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "results": {
              "type": "files",
              "description": "List containing abacas output files\n[ 'test.abacas.bin', 'test.abacas.fasta', 'test.abacas.gaps',\n'test.abacas.gaps.tab', 'test.abacas.nucmer.delta',\n'test.abacas.nucmer.filtered.delta', 'test.abacas.nucmer.tiling',\n'test.abacas.tab', 'test.abacas.unused.contigs.out',\n'test.abacas.MULTIFASTA.fa' ]\n",
              "pattern": "*.{abacas}*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "abricate_run",
      "path": "modules/nf-core/abricate/run/meta.yml",
      "type": "module",
      "meta": {
        "name": "abricate_run",
        "description": "Screen assemblies for antimicrobial resistance against multiple databases",
        "keywords": [
          "bacteria",
          "assembly",
          "antimicrobial reistance"
        ],
        "tools": [
          {
            "abricate": {
              "description": "Mass screening of contigs for antibiotic resistance genes",
              "homepage": "https://github.com/tseemann/abricate",
              "documentation": "https://github.com/tseemann/abricate",
              "tool_dev_url": "https://github.com/tseemann/abricate",
              "licence": [
                "GPL v2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "FASTA, GenBank or EMBL formatted file",
              "pattern": "*.{fa,fasta,fna,fa.gz,fasta.gz,fna.gz,gbk,gbk.gz,embl,embl.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Tab-delimited report of results",
              "pattern": "*.{txt}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "abricate_summary",
      "path": "modules/nf-core/abricate/summary/meta.yml",
      "type": "module",
      "meta": {
        "name": "abricate_summary",
        "description": "Screen assemblies for antimicrobial resistance against multiple databases",
        "keywords": [
          "bacteria",
          "assembly",
          "antimicrobial reistance"
        ],
        "tools": [
          {
            "abricate": {
              "description": "Mass screening of contigs for antibiotic resistance genes",
              "homepage": "https://github.com/tseemann/abricate",
              "documentation": "https://github.com/tseemann/abricate",
              "tool_dev_url": "https://github.com/tseemann/abricate",
              "licence": [
                "GPL v2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "FASTA, GenBank or EMBL formatted file",
              "pattern": "*.{fa,fasta,fna,fa.gz,fasta.gz,fna.gz,gbk,gbk.gz,embl,embl.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "Tab-delimited report of aggregated results",
              "pattern": "*.{txt}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "adapterremoval",
      "path": "modules/nf-core/adapterremoval/meta.yml",
      "type": "module",
      "meta": {
        "name": "adapterremoval",
        "description": "Trim sequencing adapters and collapse overlapping reads",
        "keywords": [
          "trimming",
          "adapters",
          "merging",
          "fastq"
        ],
        "tools": [
          {
            "adapterremoval": {
              "description": "The AdapterRemoval v2 tool for merging and clipping reads.",
              "homepage": "https://github.com/MikkelSchubert/adapterremoval",
              "documentation": "https://adapterremoval.readthedocs.io",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n",
              "pattern": "*.{fq,fastq,fq.gz,fastq.gz}"
            }
          },
          {
            "adapterlist": {
              "type": "file",
              "description": "Optional text file containing list of adapters to look for for removal with one adapter per line. Otherwise will look for default adapters (see AdapterRemoval man page), or can be modified to remove user-specified adapters via ext.args."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "singles_truncated": {
              "type": "file",
              "description": "Adapter trimmed FastQ files of either single-end reads, or singleton\n'orphaned' reads from merging of paired-end data (i.e., one of the pair\nwas lost due to filtering thresholds).\n",
              "pattern": "*.truncated.fastq.gz"
            }
          },
          {
            "discarded": {
              "type": "file",
              "description": "Adapter trimmed FastQ files of reads that did not pass filtering\nthresholds.\n",
              "pattern": "*.discarded.fastq.gz"
            }
          },
          {
            "pair1_truncated": {
              "type": "file",
              "description": "Adapter trimmed R1 FastQ files of paired-end reads that did not merge\nwith their respective R2 pair due to long templates. The respective pair\nis stored in 'pair2_truncated'.\n",
              "pattern": "*.pair1.truncated.fastq.gz"
            }
          },
          {
            "pair2_truncated": {
              "type": "file",
              "description": "Adapter trimmed R2 FastQ files of paired-end reads that did not merge\nwith their respective R1 pair due to long templates. The respective pair\nis stored in 'pair1_truncated'.\n",
              "pattern": "*.pair2.truncated.fastq.gz"
            }
          },
          {
            "collapsed": {
              "type": "file",
              "description": "Collapsed FastQ of paired-end reads that successfully merged with their\nrespective R1 pair but were not trimmed.\n",
              "pattern": "*.collapsed.fastq.gz"
            }
          },
          {
            "collapsed_truncated": {
              "type": "file",
              "description": "Collapsed FastQ of paired-end reads that successfully merged with their\nrespective R1 pair and were trimmed of adapter due to sufficient overlap.\n",
              "pattern": "*.collapsed.truncated.fastq.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "AdapterRemoval log file",
              "pattern": "*.settings"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxibor",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "adapterremovalfixprefix",
      "path": "modules/nf-core/adapterremovalfixprefix/meta.yml",
      "type": "module",
      "meta": {
        "name": "adapterremovalfixprefix",
        "description": "Fixes prefixes from AdapterRemoval2 output to make sure no clashing read names are in the output. For use with DeDup.",
        "keywords": [
          "adapterremoval",
          "fastq",
          "dedup"
        ],
        "tools": [
          {
            "adapterremovalfixprefix": {
              "description": "Fixes adapter removal prefixes to make sure no clashing read names are in the output.",
              "homepage": "https://github.com/apeltzer/AdapterRemovalFixPrefix",
              "tool_dev_url": "https://github.com/apeltzer/AdapterRemovalFixPrefix",
              "doi": "10.1186/s13059-016-0918-z",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "FASTQ file from AdapterRemoval2",
              "pattern": "*.{fq.gz,fastq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fixed_fastq": {
              "type": "file",
              "description": "FASTQ file with fixed read prefixes for DeDup",
              "pattern": "*.{fq.gz}"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "admixture",
      "path": "modules/nf-core/admixture/meta.yml",
      "type": "module",
      "meta": {
        "name": "admixture",
        "description": "ADMIXTURE is a program for estimating ancestry in a model-based manner from large autosomal SNP genotype datasets, where the individuals are unrelated (for example, the individuals in a case-control association study).",
        "keywords": [
          "ancestry",
          "population genetics",
          "admixture",
          "reference panels",
          "gwas"
        ],
        "tools": [
          {
            "admixture": {
              "description": "ADMIXTURE is a software tool for maximum likelihood estimation of individual ancestries from multilocus SNP genotype datasets.",
              "homepage": "https://dalexander.github.io/admixture/",
              "documentation": "https://dalexander.github.io/admixture/admixture-manual.pdf",
              "doi": "10.1101/gr.094052.109",
              "licence": "['Free for Academic Use']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed_ped_geno": {
              "type": "file",
              "description": "One of PLINK \".bed\" file or PLINK \".ped\" or EIGENSTRAT \".geno\" file. If you provide \".bed\" then you need to provide \".bim\" and  \"fam\" files. If you provide \".ped\" or \".geno\" then you need to provide a \".map\" file and an empty channel.",
              "pattern": "*.{bed}"
            }
          },
          {
            "bim_map": {
              "type": "file",
              "description": "Mandatory accompanying file. One of PLINK \".bim\" file or PLINK \".map\" file. Provide \".bim\" if \".bed\" is the input. Provide \".map\" if \".ped\" or \".geno\" is the input.",
              "pattern": "*.{bim}"
            }
          },
          {
            "fam": {
              "type": "file",
              "description": "PLINK \".fam\" file. Mandatory if you provide \".bed\" as input. Replace with an empty channel if input is \".ped\" or \".geno\".",
              "pattern": "*.{fam}"
            }
          },
          {
            "K": {
              "type": "value",
              "description": "Belief of the number of ancestral populations.",
              "pattern": "{*}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "Q-ancestry-fractions": {
              "type": "file",
              "description": "Space-delimited files containing ancestry fractions. The output filenames have the number of populations (K) that was assumed for the analysis.",
              "pattern": "*.{Q}"
            }
          },
          {
            "P-allele-frequencies": {
              "type": "file",
              "description": "Space-delimited files containing the allele frequencies of the inferred ancestral populations. The output filenames have the number of populations (K) that was assumed for the analysis.",
              "pattern": "*.{P}"
            }
          }
        ],
        "authors": [
          "@atrigila"
        ]
      }
    },
    {
      "name": "affy_justrma",
      "path": "modules/nf-core/affy/justrma/meta.yml",
      "type": "module",
      "meta": {
        "name": "affy_justrma",
        "description": "Read CEL files into an ExpressionSet and generate a matrix",
        "keywords": [
          "affy",
          "microarray",
          "expression",
          "matrix"
        ],
        "tools": [
          {
            "affy": {
              "description": "Methods for Affymetrix Oligonucleotide Arrays",
              "homepage": "https://www.bioconductor.org/packages/release/bioc/html/affy.html",
              "documentation": "https://www.bioconductor.org/packages/release/bioc/html/affy.html",
              "tool_dev_url": "https://github.com/Bioconductor/affy",
              "doi": "10.1093/bioinformatics/btg405",
              "licence": "['LGPL >=2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "samplesheet": {
              "type": "file",
              "description": "CSV or TSV format sample sheet with sample metadata and CEL file names\n"
            }
          },
          {
            "celfiles_dir": {
              "type": "list",
              "description": "Path to a directory containing CEL files",
              "pattern": "*.{CEL,CEL.gz}"
            }
          },
          {
            "description": {
              "type": "file",
              "description": "Optional description file in MIAME format\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "expression": {
              "type": "file",
              "description": "TSV-format intensity matrix",
              "pattern": "matrix.tsv"
            }
          },
          {
            "annotation": {
              "type": "file",
              "description": "TSV-format annotation table",
              "pattern": "*.annotation.tsv"
            }
          },
          {
            "rds": {
              "type": "file",
              "description": "Serialised ExpressionSet object",
              "pattern": "*.rds"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "agat_convertspgff2gtf",
      "path": "modules/nf-core/agat/convertspgff2gtf/meta.yml",
      "type": "module",
      "meta": {
        "name": "agat_convertspgff2gtf",
        "description": "Converts a GFF/GTF file into a proper GTF file\n",
        "keywords": [
          "genome",
          "gff",
          "gtf",
          "conversion"
        ],
        "tools": [
          {
            "agat": {
              "description": "AGAT is a toolkit for manipulation and getting information from GFF/GTF files",
              "homepage": "https://github.com/NBISweden/AGAT",
              "documentation": "https://agat.readthedocs.io/",
              "tool_dev_url": "https://github.com/NBISweden/AGAT",
              "doi": "10.5281/zenodo.3552717",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "Annotation file in GFF3/GTF format",
              "pattern": "*.{gff, gtf}"
            }
          }
        ],
        "output": [
          {
            "output_gtf": {
              "type": "file",
              "description": "Annotation file in GTF format",
              "pattern": "*.{gtf}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file of the conversion process",
              "pattern": "*.{log}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@toniher"
        ]
      }
    },
    {
      "name": "agat_convertspgxf2gxf",
      "path": "modules/nf-core/agat/convertspgxf2gxf/meta.yml",
      "type": "module",
      "meta": {
        "name": "agat_convertspgxf2gxf",
        "description": "Fixes and standardizes GFF/GTF files and outputs a cleaned GFF/GTF file\n",
        "keywords": [
          "genome",
          "gff",
          "gtf",
          "conversion"
        ],
        "tools": [
          {
            "agat": {
              "description": "AGAT is a toolkit for manipulation and getting information from GFF/GTF files",
              "homepage": "https://github.com/NBISweden/AGAT",
              "documentation": "https://agat.readthedocs.io/",
              "tool_dev_url": "https://github.com/NBISweden/AGAT",
              "doi": "10.5281/zenodo.3552717",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "Annotation file in GFF3/GTF format",
              "pattern": "*.{gff, gtf}"
            }
          }
        ],
        "output": [
          {
            "output_gff": {
              "type": "file",
              "description": "Cleaned annotation file in GFF3 format",
              "pattern": "*.{gff}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file of the conversion process",
              "pattern": "*.{log}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@toniher"
        ]
      }
    },
    {
      "name": "agat_spstatistics",
      "path": "modules/nf-core/agat/spstatistics/meta.yml",
      "type": "module",
      "meta": {
        "name": "agat_spstatistics",
        "description": "Provides different type of statistics in text format from a GFF/GTF annotation file\n",
        "keywords": [
          "genome",
          "gff",
          "gtf",
          "statistics"
        ],
        "tools": [
          {
            "agat": {
              "description": "AGAT is a toolkit for manipulation and getting information from GFF/GTF files",
              "homepage": "https://github.com/NBISweden/AGAT",
              "documentation": "https://agat.readthedocs.io/",
              "tool_dev_url": "https://github.com/NBISweden/AGAT",
              "doi": "10.5281/zenodo.3552717",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "Annotation file in GFF3/GTF format",
              "pattern": "*.{gff, gtf}"
            }
          }
        ],
        "output": [
          {
            "stats_file": {
              "type": "file",
              "description": "Output of Statistics execution",
              "pattern": "*.{txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@toniher"
        ]
      }
    },
    {
      "name": "agat_sqstatbasic",
      "path": "modules/nf-core/agat/sqstatbasic/meta.yml",
      "type": "module",
      "meta": {
        "name": "agat_sqstatbasic",
        "description": "Provides basic statistics in text format from a GFF/GTF annotation file\n",
        "keywords": [
          "genome",
          "gff",
          "gtf",
          "statistics"
        ],
        "tools": [
          {
            "agat": {
              "description": "AGAT is a toolkit for manipulation and getting information from GFF/GTF files",
              "homepage": "https://github.com/NBISweden/AGAT",
              "documentation": "https://agat.readthedocs.io/",
              "tool_dev_url": "https://github.com/NBISweden/AGAT",
              "doi": "10.5281/zenodo.3552717",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "Annotation file in GFF3/GTF format",
              "pattern": "*.{gff, gtf}"
            }
          }
        ],
        "output": [
          {
            "stats_file": {
              "type": "file",
              "description": "Output of Statistics execution",
              "pattern": "*.{txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@toniher"
        ]
      }
    },
    {
      "name": "agrvate",
      "path": "modules/nf-core/agrvate/meta.yml",
      "type": "module",
      "meta": {
        "name": "agrvate",
        "description": "Rapid identification of Staphylococcus aureus agr locus type and agr operon variants",
        "keywords": [
          "fasta",
          "virulence",
          "Staphylococcus aureus"
        ],
        "tools": [
          {
            "agrvate": {
              "description": "Rapid identification of Staphylococcus aureus agr locus type and agr operon variants.",
              "homepage": "https://github.com/VishnuRaghuram94/AgrVATE",
              "documentation": "https://github.com/VishnuRaghuram94/AgrVATE",
              "tool_dev_url": "https://github.com/VishnuRaghuram94/AgrVATE",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "A Staphylococcus aureus fasta file.",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "A summary of the agrvate assessement",
              "pattern": "*-summary.tab"
            }
          },
          {
            "results_dir": {
              "type": "directory",
              "description": "Results of the agrvate assessement",
              "pattern": "*-results"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@abhi18av"
        ]
      }
    },
    {
      "name": "allelecounter",
      "path": "modules/nf-core/allelecounter/meta.yml",
      "type": "module",
      "meta": {
        "name": "allelecounter",
        "description": "Generates a count of coverage of alleles",
        "keywords": [
          "allele",
          "count"
        ],
        "tools": [
          {
            "allelecounter": {
              "description": "Takes a file of locations and a [cr|b]am file and generates a count of coverage of each allele at that location (given any filter settings)",
              "homepage": "https://github.com/cancerit/alleleCount",
              "documentation": "https://github.com/cancerit/alleleCount",
              "tool_dev_url": "https://github.com/cancerit/alleleCount",
              "licence": "A-GPL 3.0"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "loci": {
              "type": "file",
              "description": "loci file <CHR><tab><POS1>",
              "pattern": "*.{tsv}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file. Required when passing CRAM files."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "alleleCount": {
              "type": "file",
              "description": "Allele count file",
              "pattern": "*.{alleleCount}"
            }
          }
        ],
        "authors": [
          "@fullama",
          "@fbdtemme"
        ]
      }
    },
    {
      "name": "ampcombi",
      "path": "modules/nf-core/ampcombi/meta.yml",
      "type": "module",
      "meta": {
        "name": "ampcombi",
        "description": "A tool to parse and summarise results from antimicrobial peptides tools and present functional classification.",
        "keywords": [
          "antimicrobial peptides",
          "amps",
          "parsing",
          "reporting",
          "align",
          "macrel",
          "amplify",
          "hmmsearch",
          "neubi",
          "ampir",
          "DRAMP"
        ],
        "tools": [
          {
            "ampcombi": {
              "description": "This tool parses the results of amp prediction tools into a single table and aligns the hits against a reference database of antimicrobial peptides for functional classifications.",
              "homepage": "https://github.com/Darcy220606/AMPcombi",
              "documentation": "https://github.com/Darcy220606/AMPcombi",
              "tool_dev_url": "https://github.com/Darcy220606/AMPcombi/tree/dev",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "amp_input": {
              "type": "folder or filelist",
              "description": "The path to the directory containing the results for the AMP tools for each sample processed or a list of files corresponding to each file generated by AMP tools."
            }
          },
          {
            "faa_input": {
              "type": "folder or file",
              "description": "The path to the folder or file corresponding to the respective protein fasta files with '.faa' extension. Filenames have to contain the corresponding sample-name, i.e. sample_1.faa",
              "pattern": "*/"
            }
          },
          {
            "amp_database": {
              "type": "directory",
              "description": "The path to the folder containing the fasta and tsv database files.",
              "pattern": "*/"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "An alignment file containing the results from the DIAMOND alignment step done on all AMP hits.",
              "pattern": "/*/*_diamond_matches.txt"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "A file containing the summary report of all predicted AMP hits from all AMP tools given as input and the corresponding taxonomic and functional classification from the alignment step.",
              "pattern": "/*/*_ampcombi.csv"
            }
          },
          {
            "faa": {
              "type": "file",
              "description": "A fasta file containing the amino acid sequences of all predicted AMP hits.",
              "pattern": "/*/*_amp.faa"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "A log file that captures the standard output ina log file. Can be activated by `--log`.",
              "pattern": "*.log"
            }
          },
          {
            "sample_dir": {
              "type": "directory",
              "description": "The output directory that contains the summary output and related alignment files for one sample.",
              "pattern": "/*"
            }
          },
          {
            "results_db": {
              "type": "directory",
              "description": "If the AMP reference database is not provided by the user using the flag `--amp_database', by default the DRAMP database will be downloaded, filtered and stored in this folder.",
              "pattern": "/amp_ref_database"
            }
          },
          {
            "results_db_fasta": {
              "type": "file",
              "description": "AMP reference database fasta file, cleaned of diamond-uncompatible characters.",
              "pattern": "/amp_ref_database/*.clean.fasta"
            }
          },
          {
            "results_db_dmd": {
              "type": "file",
              "description": "AMP reference database converted to DIAMOND database format.",
              "pattern": "/amp_ref_database/*.dmnd"
            }
          },
          {
            "results_db_tsv": {
              "type": "file",
              "description": "AMP reference database in tsv-format with two columns containing header and sequence.",
              "pattern": "/amp_ref_database/*.tsv"
            }
          },
          {
            "summary_csv": {
              "type": "file",
              "description": "A file that concatenates all samples ampcombi summaries. This is activated with `--complete_summary true`.",
              "pattern": "AMPcombi_summary.html"
            }
          },
          {
            "summary_html": {
              "type": "file",
              "description": "A file that concatenates all samples ampcombi summaries. This is activated with `--complete_summary true`.",
              "pattern": "AMPcombi_summary.html"
            }
          }
        ],
        "authors": [
          "@darcy220606",
          "@louperelo"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "ampir",
      "path": "modules/nf-core/ampir/meta.yml",
      "type": "module",
      "meta": {
        "name": "ampir",
        "description": "A fast and user-friendly method to predict antimicrobial peptides (AMPs) from any given size protein dataset. ampir uses a supervised statistical machine learning approach to predict AMPs.",
        "keywords": [
          "ampir",
          "amp",
          "antimicrobial peptide prediction"
        ],
        "tools": [
          {
            "ampir": {
              "description": "A toolkit to predict antimicrobial peptides from protein sequences on a genome-wide scale.",
              "homepage": "https://github.com/Legana/ampir",
              "documentation": "https://cran.r-project.org/web/packages/ampir/index.html",
              "tool_dev_url": "https://github.com/Legana/ampir",
              "doi": "10.1093/bioinformatics/btaa653",
              "licence": [
                "GPL v2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "faa": {
              "type": "file",
              "description": "FASTA file containing amino acid sequences",
              "pattern": "*.{faa,fasta}"
            }
          },
          {
            "model": {
              "type": "string",
              "description": "Built-in model for AMP prediction",
              "pattern": "{precursor,mature}"
            }
          },
          {
            "min_length": {
              "type": "integer",
              "description": "Minimum protein length for which predictions will be generated",
              "pattern": "[0-9]+"
            }
          },
          {
            "min_probability": {
              "type": "number",
              "description": "Cut-off for AMP prediction",
              "pattern": "[0-9].[0-9]+"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "amps_faa": {
              "type": "file",
              "description": "File containing AMP predictions in amino acid FASTA format",
              "pattern": "*.{faa}"
            }
          },
          {
            "amps_tsv": {
              "type": "file",
              "description": "File containing AMP predictions in TSV format",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@jasmezz"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "amplify_predict",
      "path": "modules/nf-core/amplify/predict/meta.yml",
      "type": "module",
      "meta": {
        "name": "amplify_predict",
        "description": "AMPlify is an attentive deep learning model for antimicrobial peptide prediction.",
        "keywords": [
          "antimicrobial peptides",
          "AMPs",
          "prediction",
          "model"
        ],
        "tools": [
          {
            "amplify": {
              "description": "Attentive deep learning model for antimicrobial peptide prediction",
              "homepage": "https://github.com/bcgsc/AMPlify",
              "documentation": "https://github.com/bcgsc/AMPlify",
              "tool_dev_url": "https://github.com/bcgsc/AMPlify",
              "doi": "10.1186/s12864-022-08310-4",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "faa": {
              "type": "file",
              "description": "amino acid sequences fasta",
              "pattern": "*.{fa,fa.gz,faa,faa.gz,fasta,fasta.gz}"
            }
          },
          {
            "model_dir": {
              "type": "directory",
              "description": "Directory of where models are stored (optional)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "amino acid sequences with prediction (AMP, non-AMP) and probability scores",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@louperelo"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "amps",
      "path": "modules/nf-core/amps/meta.yml",
      "type": "module",
      "meta": {
        "name": "amps",
        "description": "Post-processing script of the MaltExtract component of the HOPS package",
        "keywords": [
          "malt",
          "MaltExtract",
          "HOPS",
          "amps",
          "alignment",
          "metagenomics",
          "ancient DNA",
          "aDNA",
          "palaeogenomics",
          "archaeogenomics",
          "microbiome",
          "authentication",
          "damage",
          "edit distance",
          "post Post-processing",
          "visualisation"
        ],
        "tools": [
          {
            "amps": {
              "description": "Post-processing script of the MaltExtract tool for ancient metagenomics",
              "homepage": "https://github.com/rhuebler/HOPS",
              "documentation": "https://github.com/keyfm/amps",
              "tool_dev_url": "https://github.com/keyfm/amps",
              "doi": "10.1186/s13059-019-1903-0",
              "licence": [
                "GPL >=3"
              ]
            }
          }
        ],
        "input": [
          {
            "maltextract_results": {
              "type": "directory",
              "description": "MaltExtract output directory",
              "pattern": "results/"
            }
          },
          {
            "taxon_list": {
              "type": "file",
              "description": "List of target taxa to evaluate used in MaltExtract",
              "pattern": "*.txt"
            }
          },
          {
            "filter": {
              "type": "string",
              "description": "The filter mode used in MaltExtract",
              "pattern": "def_anc|default|scan|ancient|crawl"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "Candidate summary heatmap in MultiQC compatible JSON format",
              "pattern": "heatmap_overview_Wevid.json"
            }
          },
          {
            "summary_pdf": {
              "type": "file",
              "description": "Candidate summary heatmap in PDF format",
              "pattern": "heatmap_overview_Wevid.pdf"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Candidate summary heatmap in TSV format",
              "pattern": "heatmap_overview_Wevid.tsv"
            }
          },
          {
            "candidate_pdfs": {
              "type": "directory",
              "description": "Directory of per sample output PDFs organised by reference",
              "pattern": "pdf_candidate_profiles/"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "amrfinderplus_run",
      "path": "modules/nf-core/amrfinderplus/run/meta.yml",
      "type": "module",
      "meta": {
        "name": "amrfinderplus_run",
        "description": "Identify antimicrobial resistance in gene or protein sequences",
        "keywords": [
          "bacteria",
          "fasta",
          "antibiotic resistance"
        ],
        "tools": [
          {
            "amrfinderplus": {
              "description": "AMRFinderPlus finds antimicrobial resistance and other genes in protein or nucleotide sequences.",
              "homepage": "https://github.com/ncbi/amr/wiki",
              "documentation": "https://github.com/ncbi/amr/wiki",
              "tool_dev_url": "https://github.com/ncbi/amr",
              "doi": "10.1038/s41598-021-91456-0",
              "licence": [
                "Public Domain"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Nucleotide or protein sequences in FASTA format",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz,faa,faa.gz}"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "A compressed tarball of the AMRFinderPlus database to query",
              "pattern": "*.tar.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "AMRFinder+ final report",
              "pattern": "*.tsv"
            }
          },
          {
            "mutation_report": {
              "type": "file",
              "description": "Report of organism-specific point-mutations",
              "pattern": "*-mutations.tsv"
            }
          },
          {
            "tool_version": {
              "type": "string",
              "description": "The version of the tool in string format (useful for downstream tools such as hAMRronization)"
            }
          },
          {
            "db_version": {
              "type": "string",
              "description": "The version of the used database in string format (useful for downstream tools such as hAMRronization)"
            }
          }
        ],
        "authors": [
          "@rpetit3",
          "@louperelo",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "amrfinderplus_update",
      "path": "modules/nf-core/amrfinderplus/update/meta.yml",
      "type": "module",
      "meta": {
        "name": "amrfinderplus_update",
        "description": "Identify antimicrobial resistance in gene or protein sequences",
        "keywords": [
          "bacteria",
          "fasta",
          "antibiotic resistance"
        ],
        "tools": [
          {
            "amrfinderplus": {
              "description": "AMRFinderPlus finds antimicrobial resistance and other genes in protein or nucleotide sequences.",
              "homepage": "https://github.com/ncbi/amr/wiki",
              "documentation": "https://github.com/ncbi/amr/wiki",
              "tool_dev_url": "https://github.com/ncbi/amr",
              "doi": "10.1038/s41598-021-91456-0",
              "licence": [
                "Public Domain"
              ]
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "The latest AMRFinder+ database in a compressed tarball",
              "pattern": "*.tar.gz"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "angsd_contamination",
      "path": "modules/nf-core/angsd/contamination/meta.yml",
      "type": "module",
      "meta": {
        "name": "angsd_contamination",
        "description": "A tool to estimate nuclear contamination in males based on heterozygosity in the female chromosome.",
        "keywords": [
          "angsd",
          "population genetics",
          "nuclear contamination estimate"
        ],
        "tools": [
          {
            "angsd": {
              "description": "ANGSD: Analysis of next generation Sequencing Data",
              "homepage": "http://www.popgen.dk/angsd/",
              "documentation": "http://www.popgen.dk/angsd/",
              "tool_dev_url": "https://github.com/ANGSD/angsd",
              "doi": "10.1186/s12859-014-0356-4",
              "licence": "['GPL v3, MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "icounts": {
              "type": "file",
              "description": "Internal format for dumping binary single chrs. Useful for ANGSD contamination",
              "pattern": "*.icnts.gz"
            }
          },
          {
            "hapmap_file": {
              "type": "file",
              "description": "A list of variable sites to look for heterozygosity."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Contamination estimation output.",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@jbv2"
        ]
      }
    },
    {
      "name": "angsd_docounts",
      "path": "modules/nf-core/angsd/docounts/meta.yml",
      "type": "module",
      "meta": {
        "name": "angsd_docounts",
        "description": "Calculates base frequency statistics across reference positions from BAM.",
        "keywords": [
          "angsd",
          "population genetics",
          "allele counts",
          "doCounts"
        ],
        "tools": [
          {
            "angsd": {
              "description": "ANGSD: Analysis of next generation Sequencing Data",
              "homepage": "http://www.popgen.dk/angsd/",
              "documentation": "http://www.popgen.dk/angsd/",
              "tool_dev_url": "https://github.com/ANGSD/angsd",
              "doi": "10.1186/s12859-014-0356-4",
              "licence": "['GPL v3, MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "A list of BAM or CRAM files",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "List of BAM/CRAM index files",
              "pattern": "*.{bai,csi}"
            }
          },
          {
            "minqfile": {
              "type": "file",
              "description": "File with individual quality score thresholds",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "depth_sample": {
              "type": "file",
              "description": "Distribution of sequencing depths",
              "pattern": "*.depthSample"
            }
          },
          {
            "depth_global": {
              "type": "file",
              "description": "Distribution of sequencing depths",
              "pattern": "*.depthGlobal"
            }
          },
          {
            "qs": {
              "type": "file",
              "description": "Distribution of scores",
              "pattern": "*.qs"
            }
          },
          {
            "pos": {
              "type": "file",
              "description": "Various types of depth statistics (depending on value for -dumpCounts)",
              "pattern": "*.pos.gz"
            }
          },
          {
            "counts": {
              "type": "file",
              "description": "Various types of statistics (related to pos.gz)",
              "pattern": "*.counts.gz"
            }
          },
          {
            "icounts": {
              "type": "file",
              "description": "Internal format for dumping binary single chrs. Useful for ANGSD contamination",
              "pattern": "*.icnts.gz"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "annotsv_annotsv",
      "path": "modules/nf-core/annotsv/annotsv/meta.yml",
      "type": "module",
      "meta": {
        "name": "annotsv_annotsv",
        "description": "Annotation and Ranking of Structural Variation",
        "keywords": [
          "annotation",
          "structural variants",
          "vcf",
          "bed",
          "tsv"
        ],
        "tools": [
          {
            "annotsv": {
              "description": "Annotation and Ranking of Structural Variation",
              "homepage": "https://lbgi.fr/AnnotSV/",
              "documentation": "https://lbgi.fr/AnnotSV/",
              "tool_dev_url": "https://github.com/lgmgeo/AnnotSV",
              "licence": "GPL-3.0"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sv_vcf": {
              "type": "file",
              "description": "A VCF or BED file containing the structural variants to be annotated",
              "pattern": "*.{bed,vcf,vcf.gz}"
            }
          },
          {
            "sv_vcf_index": {
              "type": "file",
              "description": "OPTIONAL - The index for gzipped VCF files",
              "pattern": "*.tbi"
            }
          },
          {
            "candidate_small_variants": {
              "type": "file",
              "description": "OPTIONAL - A file containing candidate small variants",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing annotations information\n"
            }
          },
          {
            "annotations": {
              "type": "directory",
              "description": "The directory containing the annotations (URL to download this will be made available soon)\nFor now this can be downloaded in the way defined in the repo (https://github.com/lgmgeo/AnnotSV#quick-installation)\n"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing candidate genes information\n"
            }
          },
          {
            "candidate_genes": {
              "type": "file",
              "description": "OPTIONAL - A file containing genes (either space-separated, tab-separated or line-break-separated)",
              "pattern": "*.txt"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing candidate false positive SNV information\n"
            }
          },
          {
            "false_positive_snv": {
              "type": "file",
              "description": "OPTIONAL - A VCF file containing small variant candidates",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "meta5": {
              "type": "map",
              "description": "Groovy Map containing candidate gene transcripts information\n"
            }
          },
          {
            "gene_transcripts": {
              "type": "file",
              "description": "OPTIONAL - A file containing the preferred gene transcripts to be used in priority during annotation (either space-separated or tab-separated)",
              "pattern": "*.txt"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "A TSV file containing the annotated variants",
              "pattern": "*.tsv"
            }
          },
          {
            "unannotated_tsv": {
              "type": "file",
              "description": "OPTIONAL - TSV file containing the unannotated variants",
              "pattern": "*.unannotated.tsv"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "OPTIONAL - A VCF file containing the annotated variants (created when `-vcf 1` is specified in the args)\n",
              "pattern": "*.vcf"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "annotsv_installannotations",
      "path": "modules/nf-core/annotsv/installannotations/meta.yml",
      "type": "module",
      "meta": {
        "name": "annotsv_installannotations",
        "description": "Install the AnnotSV annotations",
        "keywords": [
          "annotation",
          "download",
          "installation",
          "structural variants"
        ],
        "tools": [
          {
            "annotsv": {
              "description": "Annotation and Ranking of Structural Variation",
              "homepage": "https://lbgi.fr/AnnotSV/",
              "documentation": "https://lbgi.fr/AnnotSV/",
              "tool_dev_url": "https://github.com/lgmgeo/AnnotSV",
              "licence": "['GPL v3']"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "annotations": {
              "type": "file",
              "description": "A folder containing the annotations",
              "pattern": "AnnotSV_annotations"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "antismash_antismashlite",
      "path": "modules/nf-core/antismash/antismashlite/meta.yml",
      "type": "module",
      "meta": {
        "name": "antismash_antismashlite",
        "description": "antiSMASH allows the rapid genome-wide identification, annotation\nand analysis of secondary metabolite biosynthesis gene clusters.\n",
        "keywords": [
          "secondary metabolites",
          "BGC",
          "biosynthetic gene cluster",
          "genome mining",
          "NRPS",
          "RiPP",
          "antibiotics",
          "prokaryotes",
          "bacteria",
          "eukaryotes",
          "fungi",
          "antismash"
        ],
        "tools": [
          {
            "antismashlite": {
              "description": "antiSMASH - the antibiotics and Secondary Metabolite Analysis SHell",
              "homepage": "https://docs.antismash.secondarymetabolites.org",
              "documentation": "https://docs.antismash.secondarymetabolites.org",
              "tool_dev_url": "https://github.com/antismash/antismash",
              "doi": "10.1093/nar/gkab335",
              "licence": "['AGPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sequence_input": {
              "type": "file",
              "description": "nucleotide sequence file (annotated)",
              "pattern": "*.{gbk, gb, gbff, genbank, embl, fasta, fna}"
            }
          },
          {
            "databases": {
              "type": "directory",
              "description": "Downloaded AntiSMASH databases (e.g. in the AntiSMASH installation directory\n\"data/databases\")\n",
              "pattern": "*/"
            }
          },
          {
            "antismash_dir": {
              "type": "directory",
              "description": "A local copy of an AntiSMASH installation folder. This is required when running with\ndocker and singularity (not required for conda), due to attempted 'modifications' of\nfiles during database checks in the installation directory, something that cannot\nbe done in immutable docker/singularity containers. Therefore, a local installation\ndirectory needs to be mounted (including all modified files from the downloading step)\nto the container as a workaround.\n",
              "pattern": "*/"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "Annotations in GFF3 format (only if sequence_input is in FASTA format)",
              "pattern": "*.gff"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "clusterblast_file": {
              "type": "file",
              "description": "Output of ClusterBlast algorithm",
              "pattern": "clusterblast/*_c*.txt"
            }
          },
          {
            "html_accessory_files": {
              "type": "directory",
              "description": "Accessory files for the HTML output",
              "pattern": "{css/,images/,js/}"
            }
          },
          {
            "knownclusterblast_html": {
              "type": "file",
              "description": "Tables with MIBiG hits in HTML format",
              "pattern": "knownclusterblast/region*/ctg*.html"
            }
          },
          {
            "knownclusterblast_dir": {
              "type": "directory",
              "description": "Directory with MIBiG hits",
              "pattern": "knownclusterblast/"
            }
          },
          {
            "knownclusterblast_txt": {
              "type": "file",
              "description": "Tables with MIBiG hits",
              "pattern": "knownclusterblast/*_c*.txt"
            }
          },
          {
            "svg_files_clusterblast": {
              "type": "file",
              "description": "SVG images showing the % identity of the aligned hits against their queries",
              "pattern": "svg/clusterblast*.svg"
            }
          },
          {
            "svg_files_knownclusterblast": {
              "type": "file",
              "description": "SVG images showing the % identity of the aligned hits against their queries",
              "pattern": "svg/knownclusterblast*.svg"
            }
          },
          {
            "gbk_input": {
              "type": "file",
              "description": "Nucleotide sequence and annotations in GenBank format; converted from input file",
              "pattern": "*.gbk"
            }
          },
          {
            "json_results": {
              "type": "file",
              "description": "Nucleotide sequence and annotations in JSON format; converted from GenBank file (gbk_input)",
              "pattern": "*.json"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Contains all the logging output that antiSMASH produced during its run",
              "pattern": "*.log"
            }
          },
          {
            "zip": {
              "type": "file",
              "description": "Contains a compressed version of the output folder in zip format",
              "pattern": "*.zip"
            }
          },
          {
            "gbk_results": {
              "type": "file",
              "description": "Nucleotide sequence and annotations in GenBank format; one file per antiSMASH hit",
              "pattern": "*region*.gbk"
            }
          },
          {
            "clusterblastoutput": {
              "type": "file",
              "description": "Raw BLAST output of known clusters previously predicted by antiSMASH using the built-in ClusterBlast algorithm",
              "pattern": "clusterblastoutput.txt"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "Graphical web view of results in HTML format",
              "patterN": "index.html"
            }
          },
          {
            "knownclusterblastoutput": {
              "type": "file",
              "description": "Raw BLAST output of known clusters of the MIBiG database",
              "pattern": "knownclusterblastoutput.txt"
            }
          },
          {
            "json_sideloading": {
              "type": "file",
              "description": "Sideloaded annotations of protoclusters and/or subregions (see antiSMASH documentation \"Annotation sideloading\")",
              "pattern": "regions.js"
            }
          }
        ],
        "authors": [
          "@jasmezz"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "antismash_antismashlitedownloaddatabases",
      "path": "modules/nf-core/antismash/antismashlitedownloaddatabases/meta.yml",
      "type": "module",
      "meta": {
        "name": "antismash_antismashlitedownloaddatabases",
        "description": "antiSMASH allows the rapid genome-wide identification, annotation and analysis of secondary metabolite biosynthesis gene clusters. This module downloads the antiSMASH databases for conda and docker/singularity runs.",
        "keywords": [
          "secondary metabolites",
          "BGC",
          "biosynthetic gene cluster",
          "genome mining",
          "NRPS",
          "RiPP",
          "antibiotics",
          "prokaryotes",
          "bacteria",
          "eukaryotes",
          "fungi",
          "antismash",
          "database"
        ],
        "tools": [
          {
            "antismash": {
              "description": "antiSMASH - the antibiotics and Secondary Metabolite Analysis SHell",
              "homepage": "https://docs.antismash.secondarymetabolites.org",
              "documentation": "https://docs.antismash.secondarymetabolites.org",
              "tool_dev_url": "https://github.com/antismash/antismash",
              "doi": "10.1093/nar/gkab335",
              "licence": [
                "AGPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "database_css": {
              "type": "directory",
              "description": "antismash/outputs/html/css folder which is being created during the antiSMASH database downloading step. These files are normally downloaded by download-antismash-databases itself, and must be retrieved by the user by manually running the command with conda or a standalone installation of antiSMASH. Therefore we do not recommend using this module for production pipelines, but rather require users to specify their own local copy of the antiSMASH database in pipelines.\n",
              "pattern": "css"
            }
          },
          {
            "database_detection": {
              "type": "directory",
              "description": "antismash/detection folder which is being created during the antiSMASH database downloading step. These files are normally downloaded by download-antismash-databases itself, and must be retrieved by the user by manually running the command with conda or a standalone installation of antiSMASH. Therefore we do not recommend using this module for production pipelines, but rather require users to specify their own local copy of the antiSMASH database in pipelines.\n",
              "pattern": "detection"
            }
          },
          {
            "database_modules": {
              "type": "directory",
              "description": "antismash/modules folder which is being created during the antiSMASH database downloading step. These files are normally downloaded by download-antismash-databases itself, and must be retrieved by the user by manually running the command with conda or a standalone installation of antiSMASH. Therefore we do not recommend using this module for production pipelines, but rather require users to specify their own local copy of the antiSMASH database in pipelines.\n",
              "pattern": "modules"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "database": {
              "type": "directory",
              "description": "Download directory for antiSMASH databases",
              "pattern": "antismash_db"
            }
          },
          {
            "antismash_dir": {
              "type": "directory",
              "description": "antismash installation folder which is being modified during the antiSMASH database downloading step. The modified files are normally downloaded by download-antismash-databases itself, and must be retrieved by the user by manually running the command with conda or a standalone installation of antiSMASH. Therefore we do not recommend using this module for production pipelines, but rather require users to specify their own local copy of the antiSMASH database and installation folder in pipelines.\n",
              "pattern": "antismash_dir"
            }
          }
        ],
        "authors": [
          "@jasmezz"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "arcashla_extract",
      "path": "modules/nf-core/arcashla/extract/meta.yml",
      "type": "module",
      "meta": {
        "name": "arcashla_extract",
        "description": "Extracts reads mapped to chromosome 6 and any HLA decoys or chromosome 6 alternates.",
        "keywords": [
          "HLA",
          "genotype",
          "RNA-seq"
        ],
        "tools": [
          {
            "arcashla": {
              "description": "arcasHLA performs high resolution genotyping for HLA class I and class II genes from RNA sequencing, supporting both paired and single-end samples.",
              "homepage": "https://github.com/RabadanLab/arcasHLA",
              "documentation": "https://github.com/RabadanLab/arcasHLA",
              "tool_dev_url": "https://github.com/RabadanLab/arcasHLA",
              "doi": "10.1093/bioinformatics/btz474",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file. If the BAM file is not indexed, this tool will run samtools index before extracting reads.",
              "pattern": "*.bam"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "extracted_reads_fastq": {
              "type": "file",
              "description": "FASTQ file(s) containing chromosome 6 reads and related HLA sequences",
              "pattern": "*.fq.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file for run summary",
              "pattern": "*.log"
            }
          },
          {
            "intermediate_sam": {
              "type": "file",
              "description": "Optional intermediate SAM file",
              "pattern": "*.sam"
            }
          },
          {
            "intermediate_bam": {
              "type": "file",
              "description": "Optional intermediate BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "intermediate_sorted_bam": {
              "type": "file",
              "description": "Optional intermediate sorted BAM file",
              "pattern": "*.sorted.bam"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@christopher-mohr"
        ]
      }
    },
    {
      "name": "aria2",
      "path": "modules/nf-core/aria2/meta.yml",
      "type": "module",
      "meta": {
        "name": "aria2",
        "description": "CLI Download utility",
        "keywords": [
          "download"
        ],
        "tools": [
          {
            "aria2": {
              "description": "aria2 is a lightweight multi-protocol & multi-source, cross platform download utility operated in command-line. It supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink.",
              "tool_dev_url": "https://github.com/aria2/aria2/",
              "licence": "['GPL v2']"
            }
          }
        ],
        "input": [
          {
            "source_url": {
              "type": "url",
              "description": "Source URL to be downloaded",
              "pattern": "{http,https}*"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "downloaded_file": {
              "type": "file",
              "description": "Downloaded files from source",
              "pattern": "*.*"
            }
          }
        ],
        "authors": [
          "@JoseEspinosa"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        },
        {
          "name": "proteinfold",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "ariba_getref",
      "path": "modules/nf-core/ariba/getref/meta.yml",
      "type": "module",
      "meta": {
        "name": "ariba_getref",
        "description": "Download and prepare database for Ariba analysis",
        "keywords": [
          "fastq",
          "assembly",
          "resistance",
          "virulence"
        ],
        "tools": [
          {
            "ariba": {
              "description": "ARIBA: Antibiotic Resistance Identification By Assembly",
              "homepage": "https://sanger-pathogens.github.io/ariba/",
              "documentation": "https://sanger-pathogens.github.io/ariba/",
              "tool_dev_url": "https://github.com/sanger-pathogens/ariba",
              "doi": "10.1099/mgen.0.000131",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "db_name": {
              "type": "string",
              "description": "A database to setup up for Ariba"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "An Ariba prepared database",
              "pattern": "*.tar.gz"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "ariba_run",
      "path": "modules/nf-core/ariba/run/meta.yml",
      "type": "module",
      "meta": {
        "name": "ariba_run",
        "description": "Query input FASTQs against Ariba formatted databases",
        "keywords": [
          "fastq",
          "assembly",
          "resistance",
          "virulence"
        ],
        "tools": [
          {
            "ariba": {
              "description": "ARIBA: Antibiotic Resistance Identification By Assembly",
              "homepage": "https://sanger-pathogens.github.io/ariba/",
              "documentation": "https://sanger-pathogens.github.io/ariba/",
              "tool_dev_url": "https://github.com/sanger-pathogens/ariba",
              "doi": "10.1099/mgen.0.000131",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Paired-end reads in FASTQ format",
              "pattern": "*_R[1|2].{fastq.gz,fq.gz}"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "An Ariba prepared database",
              "pattern": "*.tar.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "results": {
              "type": "file",
              "description": "A directory of Ariba analysis outputs",
              "pattern": "*"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "arriba",
      "path": "modules/nf-core/arriba/meta.yml",
      "type": "module",
      "meta": {
        "name": "arriba",
        "description": "Arriba is a command-line tool for the detection of gene fusions from RNA-Seq data.",
        "keywords": [
          "fusion",
          "arriba"
        ],
        "tools": [
          {
            "arriba": {
              "description": "Fast and accurate gene fusion detection from RNA-Seq data",
              "homepage": "https://github.com/suhrig/arriba",
              "documentation": "https://arriba.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/suhrig/arriba",
              "doi": "10.1101/gr.257246.119",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Assembly FASTA file",
              "pattern": "*.{fasta}"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "Annotation GTF file",
              "pattern": "*.{gtf}"
            }
          },
          {
            "blacklist": {
              "type": "file",
              "description": "Blacklist file",
              "pattern": "*.{tsv}"
            }
          },
          {
            "known_fusions": {
              "type": "file",
              "description": "Known fusions file",
              "pattern": "*.{tsv}"
            }
          },
          {
            "structural_variants": {
              "type": "file",
              "description": "Structural variants file",
              "pattern": "*.{tsv}"
            }
          },
          {
            "tags": {
              "type": "file",
              "description": "Tags file",
              "pattern": "*.{tsv}"
            }
          },
          {
            "protein_domains": {
              "type": "file",
              "description": "Protein domains file",
              "pattern": "*.{gff3}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fusions": {
              "type": "file",
              "description": "File contains fusions which pass all of Arriba's filters.",
              "pattern": "*.{fusions.tsv}"
            }
          },
          {
            "fusions_fail": {
              "type": "file",
              "description": "File contains fusions that Arriba classified as an artifact or that are also observed in healthy tissue.",
              "pattern": "*.{fusions.discarded.tsv}"
            }
          }
        ],
        "authors": [
          "@praveenraj2018,@rannick"
        ]
      },
      "pipelines": [
        {
          "name": "rnafusion",
          "version": "2.3.4"
        }
      ]
    },
    {
      "name": "art_illumina",
      "path": "modules/nf-core/art/illumina/meta.yml",
      "type": "module",
      "meta": {
        "name": "art_illumina",
        "description": "Simulation tool to generate synthetic Illumina next-generation sequencing reads",
        "keywords": [
          "fastq",
          "fasta",
          "illumina",
          "simulate"
        ],
        "tools": [
          {
            "art": {
              "description": "ART is a set of simulation tools to generate synthetic next-generation sequencing reads. ART simulates sequencing reads by mimicking real sequencing process with empirical error models or quality profiles summarized from large recalibrated sequencing data. ART can also simulate reads using user own read error model or quality profiles. ",
              "homepage": "https://www.niehs.nih.gov/research/resources/software/biostatistics/art/index.cfm",
              "doi": "10.1093/bioinformatics/btr708",
              "licence": "GPL version 3 license"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file of input DNA/RNA reference",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "sequencing_system": {
              "type": "string",
              "description": "The name of Illumina sequencing system of the built-in profile used for simulation"
            }
          },
          {
            "fold_coverage": {
              "type": "integer",
              "description": "The fold of read coverage to be simulated or number of reads/read pairs generated for each amplicon"
            }
          },
          {
            "read_length": {
              "type": "integer",
              "description": "The length of reads to be simulated"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Simulated reads",
              "pattern": "*.fq.gz"
            }
          },
          {
            "aln": {
              "type": "file",
              "description": "OPTIONAL Alignment file of the simulated reads. Enabled by default, to disable, use -na/--noALN.",
              "pattern": "*.aln"
            }
          },
          {
            "sam": {
              "type": "file",
              "description": "OPTIONAL Alignment file in SAM format of the simulated reads. Enabled with -sam/--samout.",
              "pattern": "*.sam"
            }
          }
        ],
        "authors": [
          "@MarieLataretu"
        ]
      }
    },
    {
      "name": "artic_guppyplex",
      "path": "modules/nf-core/artic/guppyplex/meta.yml",
      "type": "module",
      "meta": {
        "name": "artic_guppyplex",
        "description": "Aggregates fastq files with demultiplexed reads",
        "keywords": [
          "artic",
          "aggregate",
          "demultiplexed reads"
        ],
        "tools": [
          {
            "artic": {
              "description": "ARTIC pipeline - a bioinformatics pipeline for working with virus sequencing data sequenced with nanopore",
              "homepage": "https://artic.readthedocs.io/en/latest/",
              "documentation": "https://artic.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/artic-network/fieldbioinformatics",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq_dir": {
              "type": "directory",
              "description": "Directory containing the fastq files with demultiplexed reads",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Aggregated FastQ files",
              "pattern": "*.{fastq.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "artic_minion",
      "path": "modules/nf-core/artic/minion/meta.yml",
      "type": "module",
      "meta": {
        "name": "artic_minion",
        "description": "Run the alignment/variant-call/consensus logic of the artic pipeline\n",
        "keywords": [
          "artic",
          "aggregate",
          "demultiplexed reads"
        ],
        "tools": [
          {
            "artic": {
              "description": "ARTIC pipeline - a bioinformatics pipeline for working with virus sequencing data sequenced with nanopore",
              "homepage": "https://artic.readthedocs.io/en/latest/",
              "documentation": "https://artic.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/artic-network/fieldbioinformatics",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "FastQ file containing reads",
              "pattern": "*.{fastq.gz}"
            }
          },
          {
            "fast5_dir": {
              "type": "directory",
              "description": "Directory containing MinION FAST5 files",
              "pattern": "*"
            }
          },
          {
            "sequencing_summary": {
              "type": "file",
              "description": "Path to Guppy sequencing summary",
              "pattern": "*.{txt}"
            }
          },
          {
            "primer_scheme_fasta": {
              "type": "file",
              "description": "Sequence of the reference genome used in the scheme in FASTA format\n",
              "pattern": "*.{reference.fasta}"
            }
          },
          {
            "primer_scheme_bed": {
              "type": "file",
              "description": "bed files containing coordinates of each primer in the scheme,\nrelative to the reference genome\n",
              "pattern": "*.{scheme.bed}"
            }
          },
          {
            "medaka_model_file": {
              "type": "file",
              "description": "Medaka model file to use (if option --medaka is set)\n",
              "pattern": "*.hdf5"
            }
          },
          {
            "medaka_model_string": {
              "type": "value",
              "description": "Medaka model string to use (if option --medaka is set)\n",
              "pattern": "*"
            }
          },
          {
            "scheme": {
              "type": "value",
              "description": "Name of the primer scheme"
            }
          },
          {
            "scheme_version": {
              "type": "value",
              "description": "Version of the primer scheme"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "results": {
              "type": "file",
              "description": "Aggregated FastQ files",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.{sorted.bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.{sorted.bai}"
            }
          },
          {
            "bam_trimmed": {
              "type": "file",
              "description": "BAM file with the primers left on",
              "pattern": "*.{trimmed.rg.sorted.bam}"
            }
          },
          {
            "bai_trimmed": {
              "type": "file",
              "description": "BAM index file of bam_trimmed",
              "pattern": "*.{sorted.bai}"
            }
          },
          {
            "bam_primertrimmed": {
              "type": "file",
              "description": "BAM containing reads after primer-binding site trimming",
              "pattern": "*.{trimmed.rg.sorted.bam}"
            }
          },
          {
            "bai_primertrimmed": {
              "type": "file",
              "description": "BAM index file of bam_primertrimmed",
              "pattern": "*.{primertrimmed.rg.sorted.bam.bai}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FAST file with consensus sequence",
              "pattern": "*.{consensus.fasta}"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file containing detected variants passing quality filter",
              "pattern": "*.{pass.vcf.gz}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "VCF index",
              "pattern": "*.{pass.vcf.gz.tbi}"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON file for MultiQC",
              "pattern": "*.json"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "ascat",
      "path": "modules/nf-core/ascat/meta.yml",
      "type": "module",
      "meta": {
        "name": "ascat",
        "description": "copy number profiles of tumour cells.",
        "keywords": [
          "bam",
          "copy number",
          "cram"
        ],
        "tools": [
          {
            "ascat": {
              "description": "ASCAT is a method to derive copy number profiles of tumour cells, accounting for normal cell admixture and tumour aneuploidy. ASCAT infers tumour purity (the fraction of tumour cells) and ploidy (the amount of DNA per tumour cell), expressed as multiples of haploid genomes from SNP array or massively parallel sequencing data, and calculates whole-genome allele-specific copy number profiles (the number of copies of both parental alleles for all SNP loci across the genome).",
              "documentation": "https://github.com/VanLoo-lab/ascat/tree/master/man",
              "tool_dev_url": "https://github.com/VanLoo-lab/ascat",
              "doi": "10.1093/bioinformatics/btaa538",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "args": {
              "type": "map",
              "description": "Groovy Map containing tool parameters. MUST follow the structure/keywords below and be provided via modules.config. Parameters must be set between quotes. (optional) parameters can be removed from the map, if they are not set. For default values, please check the documentation above.\n\n```\n{\n  [\n    \"gender\": \"XX\",\n    \"genomeVersion\": \"hg19\"\n    \"purity\": (optional),\n    \"ploidy\": (optional),\n    \"gc_files\": (optional),\n    \"minCounts\": (optional),\n    \"BED_file\": (optional) but recommended for WES,\n    \"chrom_names\": (optional),\n    \"min_base_qual\": (optional),\n    \"min_map_qual\": (optional),\n    \"ref_fasta\": (optional),\n    \"skip_allele_counting_tumour\": (optional),\n    \"skip_allele_counting_normal\": (optional)\n  ]\n}\n```\n"
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_normal": {
              "type": "file",
              "description": "BAM/CRAM file, must adhere to chr1, chr2, ...chrX notation For modifying chromosome notation in bam files please follow https://josephcckuo.wordpress.com/2016/11/17/modify-chromosome-notation-in-bam-file/.",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "index_normal": {
              "type": "file",
              "description": "index for normal_bam/cram",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "input_tumor": {
              "type": "file",
              "description": "BAM/CRAM file, must adhere to chr1, chr2, ...chrX notation",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "index_tumor": {
              "type": "file",
              "description": "index for tumor_bam/cram",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "allele_files": {
              "type": "file",
              "description": "allele files for ASCAT WGS. Can be downloaded here https://github.com/VanLoo-lab/ascat/tree/master/ReferenceFiles/WGS"
            }
          },
          {
            "loci_files": {
              "type": "file",
              "description": "loci files for ASCAT WGS. Loci files without chromosome notation can be downloaded here https://github.com/VanLoo-lab/ascat/tree/master/ReferenceFiles/WGS Make sure the chromosome notation matches the bam/cram input files. To add the chromosome notation to loci files (hg19/hg38) if necessary, you can run this command `if [[ $(samtools view <your_bam_file.bam> | head -n1 | cut -f3)\\\" == *\\\"chr\\\"* ]]; then for i in {1..22} X; do sed -i 's/^/chr/' G1000_loci_hg19_chr_${i}.txt; done; fi`"
            }
          },
          {
            "bed_file": {
              "type": "file",
              "description": "Bed file for ASCAT WES (optional, but recommended for WES)"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference fasta file (optional)"
            }
          },
          {
            "gc_file": {
              "type": "file",
              "description": "GC correction file (optional) - Used to do logR correction of the tumour sample(s) with genomic GC content"
            }
          },
          {
            "rt_file": {
              "type": "file",
              "description": "replication timing correction file (optional, provide only in combination with gc_file)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "allelefreqs": {
              "type": "file",
              "description": "Files containing allee frequencies per chromosome",
              "pattern": "*{alleleFrequencies_chr*.txt}"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "File containing quality metrics",
              "pattern": "*.{metrics.txt}"
            }
          },
          {
            "png": {
              "type": "file",
              "description": "ASCAT plots",
              "pattern": "*.{png}"
            }
          },
          {
            "purityploidy": {
              "type": "file",
              "description": "File with purity and ploidy data",
              "pattern": "*.{purityploidy.txt}"
            }
          },
          {
            "segments": {
              "type": "file",
              "description": "File with segments data",
              "pattern": "*.{segments.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@aasNGC",
          "@lassefolkersen",
          "@FriederikeHanssen",
          "@maxulysse",
          "@SusiJo"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "assemblyscan",
      "path": "modules/nf-core/assemblyscan/meta.yml",
      "type": "module",
      "meta": {
        "name": "assemblyscan",
        "description": "Assembly summary statistics in JSON format",
        "keywords": [
          "assembly",
          "statistics"
        ],
        "tools": [
          {
            "assemblyscan": {
              "description": "Assembly summary statistics in JSON format",
              "homepage": "https://github.com/rpetit3/assembly-scan",
              "documentation": "https://github.com/rpetit3/assembly-scan",
              "tool_dev_url": "https://github.com/rpetit3/assembly-scan",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "FASTA file for a given assembly",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "Assembly statistics in JSON format",
              "pattern": "*.json"
            }
          }
        ],
        "authors": [
          "@sateeshperi",
          "@mjcipriano"
        ]
      }
    },
    {
      "name": "ataqv_ataqv",
      "path": "modules/nf-core/ataqv/ataqv/meta.yml",
      "type": "module",
      "meta": {
        "name": "ataqv_ataqv",
        "description": "ataqv function of a corresponding ataqv tool",
        "keywords": [
          "ATAC-seq",
          "qc",
          "ataqv"
        ],
        "tools": [
          {
            "ataqv": {
              "description": "ataqv is a toolkit for measuring and comparing ATAC-seq results. It was written to help understand how well ATAC-seq assays have worked, and to make it easier to spot differences that might be caused by library prep or sequencing.",
              "homepage": "https://github.com/ParkerLab/ataqv/blob/master/README.rst",
              "documentation": "https://github.com/ParkerLab/ataqv/blob/master/README.rst",
              "tool_dev_url": "https://github.com/ParkerLab/ataqv",
              "doi": "10.1016/j.cels.2020.02.009",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file with the same prefix as bam file. Required if tss_file input is provided.",
              "pattern": "*.bam.bai"
            }
          },
          {
            "peak_file": {
              "type": "file",
              "description": "A BED file of peaks called for alignments in the BAM file",
              "pattern": "*.bed"
            }
          },
          {
            "organism": {
              "type": "string",
              "description": "The subject of the experiment, which determines the list of autosomes (see \"Reference Genome Configuration\" section at https://github.com/ParkerLab/ataqv)."
            }
          },
          {
            "mito_name": {
              "type": "string",
              "description": "Name of the mitochondrial sequence."
            }
          },
          {
            "tss_file": {
              "type": "file",
              "description": "A BED file of transcription start sites for the experiment organism. If supplied, a TSS enrichment score will be calculated according to the ENCODE data standards. This calculation requires that the BAM file of alignments be indexed.",
              "pattern": "*.bed"
            }
          },
          {
            "excl_regs_file": {
              "type": "file",
              "description": "A BED file containing excluded regions. Peaks or TSS overlapping these will be ignored.",
              "pattern": "*.bed"
            }
          },
          {
            "autosom_ref_file": {
              "type": "file",
              "description": "A file containing autosomal reference names, one per line. The names must match the reference names in the alignment file exactly, or the metrics based on counts of autosomal alignments will be wrong."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "The JSON file to which metrics will be written."
            }
          },
          {
            "problems": {
              "type": "file",
              "description": "If given, problematic reads will be logged to a file per read group, with names derived from the read group IDs, with \".problems\" appended. If no read groups are found, the reads will be written to one file named after the BAM file.",
              "pattern": "*.problems"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@i-pletenev"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        }
      ]
    },
    {
      "name": "ataqv_mkarv",
      "path": "modules/nf-core/ataqv/mkarv/meta.yml",
      "type": "module",
      "meta": {
        "name": "ataqv_mkarv",
        "description": "mkarv function of a corresponding ataqv tool",
        "keywords": [
          "ataqv",
          "ATAC-seq",
          "qc",
          "ataqv",
          "mkarv"
        ],
        "tools": [
          {
            "ataqv": {
              "description": "ataqv is a toolkit for measuring and comparing ATAC-seq results. It was written to help understand how well ATAC-seq assays have worked, and to make it easier to spot differences that might be caused by library prep or sequencing.",
              "homepage": "https://github.com/ParkerLab/ataqv/blob/master/README.rst",
              "documentation": "https://github.com/ParkerLab/ataqv/blob/master/README.rst",
              "tool_dev_url": "https://github.com/ParkerLab/ataqv",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "json": {
              "type": "file",
              "description": "The JSON file with ataqv metrics",
              "pattern": "*.json"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "html": {
              "type": "directory",
              "description": "Web application to visualize results in HTML format",
              "pattern": "*.html"
            }
          }
        ],
        "authors": [
          "@bjlang"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        }
      ]
    },
    {
      "name": "atlas_call",
      "path": "modules/nf-core/atlas/call/meta.yml",
      "type": "module",
      "meta": {
        "name": "atlas_call",
        "description": "generate VCF file from a BAM file using various calling methods",
        "keywords": [
          "atlas",
          "variant calling",
          "vcf",
          "population genetics"
        ],
        "tools": [
          {
            "atlas": {
              "description": "ATLAS, a suite of methods to accurately genotype and estimate genetic diversity",
              "homepage": "https://bitbucket.org/wegmannlab/atlas/wiki/Home",
              "documentation": "https://bitbucket.org/wegmannlab/atlas/wiki/Home",
              "tool_dev_url": "https://bitbucket.org/wegmannlab/atlas",
              "doi": "10.1101/105346",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "A BAM/ file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "The BAI file for the input BAM file",
              "pattern": "*.bai"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference FASTA file used to generate the BAM file",
              "pattern": "*.{fasta,fna,fa}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "The index of the FASTA file used for to generate the BAM file",
              "pattern": "*.fai"
            }
          },
          {
            "recal": {
              "type": "file",
              "description": "Optional recalibration file from atlas recal function in text format",
              "pattern": "*.txt"
            }
          },
          {
            "pmd": {
              "type": "file",
              "description": "Optional PMD file from atlas pmd function in text format",
              "pattern": "*.txt"
            }
          },
          {
            "known_alleles": {
              "type": "file",
              "description": "Optional tab separated text file containing 1-based list of known alleles. See atlas call documentation.",
              "pattern": "*.{txt.tsv}"
            }
          },
          {
            "method": {
              "type": "character",
              "description": "Which variant calling algorithm to use. Some may require additional parameters supplied via ext.args. Check atlas documentation.",
              "pattern": "MLE|Bayesian|allelePresence|randomBase|majorityBase"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "VCF file with variant calls",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "atlas_pmd",
      "path": "modules/nf-core/atlas/pmd/meta.yml",
      "type": "module",
      "meta": {
        "name": "atlas_pmd",
        "description": "Estimate the post-mortem damage patterns of DNA",
        "keywords": [
          "ancient DNA",
          "post mortem damage",
          "bam"
        ],
        "tools": [
          {
            "atlas": {
              "description": "ATLAS, a suite of methods to accurately genotype and estimate genetic diversity",
              "homepage": "https://bitbucket.org/wegmannlab/atlas/wiki/Home",
              "documentation": "https://bitbucket.org/wegmannlab/atlas/wiki/Home",
              "tool_dev_url": "https://bitbucket.org/wegmannlab/atlas",
              "doi": "10.1101/105346",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Single input BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "The BAI file for the input BAM file",
              "pattern": "*.bai"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference genome provided as FASTA file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "The FAI file for the reference genome FASTA file",
              "pattern": "*.fai"
            }
          },
          {
            "pool_rg_txt": {
              "type": "file",
              "description": "Optional. Provide the names of read groups that should be merged for PMD estimation.\nAll read groups that should be pooled listed on one line, separated by any white space.\nOther read groups will be recalibrated separately.\n",
              "pattern": "*.txt"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "empiric": {
              "type": "file",
              "description": "A list of pmd patterns estimated with the empirical method for each readgroup",
              "pattern": "*_PMD_input_Empiric.txt"
            }
          },
          {
            "exponential": {
              "type": "file",
              "description": "A list of pmd patterns estimated with the exponential method for each readgroup",
              "pattern": "*_PMD_input_Exponential.txt"
            }
          },
          {
            "counts": {
              "type": "file",
              "description": "The counts of all possible transitions for each read position\n(or up to a certain position, see specific command length)\n",
              "pattern": "*_PMD_Table_counts.txt"
            }
          },
          {
            "table": {
              "type": "file",
              "description": "For all possible transitions the ratio of the transition counts,\nwhich are taken from the _counts.txt table, over the total amount\nof the base that was mutated, for each position and readgroup\n",
              "pattern": "*_PMD_Table.txt"
            }
          }
        ],
        "authors": [
          "@maxibor",
          "@merszym"
        ]
      }
    },
    {
      "name": "atlas_recal",
      "path": "modules/nf-core/atlas/recal/meta.yml",
      "type": "module",
      "meta": {
        "name": "atlas_recal",
        "description": "gives an estimation of the sequencing bias based on known invariant sites",
        "keywords": [
          "sequencing_bias",
          "ATLAS"
        ],
        "tools": [
          {
            "atlas": {
              "description": "ATLAS, a suite of methods to accurately genotype and estimate genetic diversity",
              "homepage": "https://bitbucket.org/wegmannlab/atlas/wiki/Home",
              "documentation": "https://bitbucket.org/wegmannlab/atlas/wiki/Home",
              "doi": "10.1101/105346",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAI file",
              "pattern": "*.bai"
            }
          },
          {
            "empiric": {
              "type": "file",
              "description": "Optional txt file from PMD estimations (atlas/pmd)",
              "pattern": "*.txt"
            }
          },
          {
            "alleles": {
              "type": "file",
              "description": "Optional bed file with known alleles",
              "pattern": "*.bed"
            }
          },
          {
            "invariant_sites": {
              "type": "file",
              "description": "Optional bed file with invariant site coordinates",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "recal_patterns": {
              "type": "file",
              "description": "file containing the sequencing bias for each of the Read Group pools",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@ltcrod"
        ]
      }
    },
    {
      "name": "atlas_splitmerge",
      "path": "modules/nf-core/atlas/splitmerge/meta.yml",
      "type": "module",
      "meta": {
        "name": "atlas_splitmerge",
        "description": "split single end read groups by length and merge paired end reads",
        "keywords": [
          "split",
          "merge",
          "bam",
          "read group"
        ],
        "tools": [
          {
            "atlas": {
              "description": "ATLAS, a suite of methods to accurately genotype and estimate genetic diversity",
              "homepage": "https://bitbucket.org/wegmannlab/atlas/wiki/Home",
              "documentation": "https://bitbucket.org/wegmannlab/atlas/wiki/Home",
              "tool_dev_url": "https://bitbucket.org/wegmannlab/atlas",
              "doi": "10.1101/105346",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Single input BAM file.",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "The BAI file for the input BAM file",
              "pattern": "*.bai"
            }
          },
          {
            "read_group_setting": {
              "type": "file",
              "description": "TXT file containing the split and merge settings for\neach readgroup. Each line consist of one readgroup,\nsingle/double identifier and the maximum cycle number\nof the sequencer. e.g. \"RG1 single 100\"\n",
              "pattern": "*.txt"
            }
          },
          {
            "blacklist": {
              "type": "file",
              "description": "blacklist.txt (optional), A txt file with blacklisted read names\nthat should be ignored and just written to file, each on a new line\n",
              "pattern": "*.txt"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "A BAM file with suffix_mergedReads.bam",
              "pattern": "*_mergedReads.bam"
            }
          },
          {
            "filelist": {
              "type": "file",
              "description": "A file listing all reads that were filtered out in the merging process with suffix_ignoredReads.txt.gz",
              "pattern": "*.txt.gz"
            }
          }
        ],
        "authors": [
          "@merszym"
        ]
      }
    },
    {
      "name": "atlasgeneannotationmanipulation_gtf2featureannotation",
      "path": "modules/nf-core/atlasgeneannotationmanipulation/gtf2featureannotation/meta.yml",
      "type": "module",
      "meta": {
        "name": "atlasgeneannotationmanipulation_gtf2featureannotation",
        "description": "Generate tables of feature metadata from GTF files",
        "keywords": [
          "gtf",
          "annotation"
        ],
        "tools": [
          {
            "atlasgeneannotationmanipulation": {
              "description": "Scripts for manipulating gene annotation",
              "homepage": "https://github.com/ebi-gene-expression-group/atlas-gene-annotation-manipulation",
              "documentation": "https://github.com/ebi-gene-expression-group/atlas-gene-annotation-manipulation",
              "tool_dev_url": "https://github.com/ebi-gene-expression-group/atlas-gene-annotation-manipulation",
              "licence": "['Apache-2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing information on input GTF file\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing information in input FASTA file\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "gtf annotation file",
              "pattern": "*.{gtf}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "An optional cDNA file for extracting meta info and/or filtering.\n",
              "pattern": "*.{gtf}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "feature_annotation": {
              "type": "file",
              "description": "TSV file with feature annotation",
              "pattern": "*.{tsv}"
            }
          },
          {
            "filtered_cdna": {
              "type": "file",
              "description": "Where --parse-cdnas is specified in ext.args and an input fasta file is\nprovided, filtered sequences are output to the specified file. No file\nwill be output if this is not specified (for example for use of\n--dummy-from-cdnas only). See documentation at\nhttps://github.com/ebi-gene-expression-group/atlas-gene-annotation-manipulation.\n",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "authentict_deam2cont",
      "path": "modules/nf-core/authentict/deam2cont/meta.yml",
      "type": "module",
      "meta": {
        "name": "authentict_deam2cont",
        "description": "Use deamination patterns to estimate contamination in single-stranded libraries",
        "keywords": [
          "authentict",
          "ancientDNA",
          "single-stranded",
          "deamination",
          "contamination",
          "damage"
        ],
        "tools": [
          {
            "authentict": {
              "description": "Estimates present-day DNA contamination in ancient DNA single-stranded libraries.",
              "homepage": "https://github.com/StephanePeyregne/AuthentiCT",
              "documentation": "https://github.com/StephanePeyregne/AuthentiCT",
              "tool_dev_url": "https://github.com/StephanePeyregne/AuthentiCT",
              "doi": "10.1186/s13059-020-02123-y",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file (Mandatory)",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "config": {
              "type": "file",
              "description": "Optional AuthentiCT configuration text file",
              "pattern": "*"
            }
          },
          {
            "positions": {
              "type": "file",
              "description": "Optional text file with positions that sequences should overlap",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Maximum likelihood estimates with associated standard errors",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@scarlhoff",
          "@StephanePeyregne"
        ]
      }
    },
    {
      "name": "backsub",
      "path": "modules/nf-core/backsub/meta.yml",
      "type": "module",
      "meta": {
        "name": "backsub",
        "description": "Pixel-by-pixel channel subtraction scaled by exposure times of pre-stitched `tif` images.",
        "keywords": [
          "background",
          "cycif",
          "autofluorescence",
          "image_analysis",
          "mcmicro",
          "highly_multiplexed_imaging"
        ],
        "tools": [
          {
            "backsub": {
              "description": "Module for pixel-by-pixel channel subtraction scaled by exposure times",
              "homepage": "https://github.com/SchapiroLabor/Background_subtraction",
              "documentation": "https://github.com/SchapiroLabor/Background_subtraction/blob/master/README.md",
              "tool_dev_url": "https://github.com/SchapiroLabor/Background_subtraction",
              "licence": "MIT licence"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "image": {
              "type": "file",
              "description": "Multi-channel image file",
              "pattern": "*.{tif,tiff}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "markerfile": {
              "type": "file",
              "description": "Marker file with channel names, exposure times, and specified background to subtract (and remove to exclude channels from output)",
              "pattern": "*.csv"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "backsub_tif": {
              "type": "file",
              "description": "Background corrected pyramidal ome.tif",
              "pattern": "*.{tif}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "markerout": {
              "type": "file",
              "description": "Marker file adjusted to match the background corrected image",
              "pattern": "*.{csv}"
            }
          }
        ],
        "authors": [
          "@kbestak"
        ]
      }
    },
    {
      "name": "bacphlip",
      "path": "modules/nf-core/bacphlip/meta.yml",
      "type": "module",
      "meta": {
        "name": "bacphlip",
        "description": "A bacteriophage lifestyle prediction tool",
        "keywords": [
          "phage",
          "lifestyle",
          "temperate",
          "virulent",
          "bacphlip",
          "hmmsearch"
        ],
        "tools": [
          {
            "bacphlip": {
              "description": "A Random Forest classifier to predict bacteriophage lifestyle",
              "homepage": "https://github.com/adamhockenberry/bacphlip",
              "documentation": "https://github.com/adamhockenberry/bacphlip",
              "tool_dev_url": "https://github.com/adamhockenberry/bacphlip",
              "doi": "10.7717/peerj.11396",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file containing phage contigs/scaffolds/chromosomes (if it is a multi-FASTA file be sure to add the `--multi_fasta` argument)",
              "pattern": "*.{fasta,fna,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bacphlip_results": {
              "type": "file",
              "description": "TSV file containing Temperate and Virulent scores for each phage sequence",
              "pattern": "*.bacphlip"
            }
          },
          {
            "hmmsearch_results": {
              "type": "file",
              "description": "TSV file containing binary output indicating gene presence/absence based on hmmsearch results",
              "pattern": "*.hmmsearch.tsv"
            }
          }
        ],
        "authors": [
          "@CarsonJM"
        ]
      }
    },
    {
      "name": "bakta_bakta",
      "path": "modules/nf-core/bakta/bakta/meta.yml",
      "type": "module",
      "meta": {
        "name": "bakta_bakta",
        "description": "Annotation of bacterial genomes (isolates, MAGs) and plasmids",
        "keywords": [
          "annotation",
          "fasta",
          "bacteria"
        ],
        "tools": [
          {
            "bakta": {
              "description": "Rapid & standardized annotation of bacterial genomes, MAGs & plasmids.",
              "homepage": "https://github.com/oschwengers/bakta",
              "documentation": "https://github.com/oschwengers/bakta",
              "tool_dev_url": "https://github.com/oschwengers/bakta",
              "doi": "10.1099/mgen.0.000685",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file to be annotated. Has to contain at least a non-empty string dummy value.\n"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "Path to the Bakta database. Must have amrfinderplus database directory already installed within it (in a directory called 'amrfinderplus-db/').\n"
            }
          },
          {
            "proteins": {
              "type": "file",
              "description": "FASTA/GenBank file of trusted proteins to first annotate from (optional)"
            }
          },
          {
            "prodigal_tf": {
              "type": "file",
              "description": "Training file to use for Prodigal (optional)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "genome statistics and annotation summary",
              "pattern": "*.txt"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "annotations as simple human readble tab separated values",
              "pattern": "*.tsv"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "annotations & sequences in GFF3 format",
              "pattern": "*.gff3"
            }
          },
          {
            "gbff": {
              "type": "file",
              "description": "annotations & sequences in (multi) GenBank format",
              "pattern": "*.gbff"
            }
          },
          {
            "embl": {
              "type": "file",
              "description": "annotations & sequences in (multi) EMBL format",
              "pattern": "*.embl"
            }
          },
          {
            "fna": {
              "type": "file",
              "description": "replicon/contig DNA sequences as FASTA",
              "pattern": "*.fna"
            }
          },
          {
            "faa": {
              "type": "file",
              "description": "CDS/sORF amino acid sequences as FASTA",
              "pattern": "*.faa"
            }
          },
          {
            "ffn": {
              "type": "file",
              "description": "feature nucleotide sequences as FASTA",
              "pattern": "*.ffn"
            }
          },
          {
            "hypotheticals_tsv": {
              "type": "file",
              "description": "additional information on hypothetical protein CDS as simple human readble tab separated values",
              "pattern": "*.hypotheticals.tsv"
            }
          },
          {
            "hypotheticals_faa": {
              "type": "file",
              "description": "hypothetical protein CDS amino acid sequences as FASTA",
              "pattern": "*.hypotheticals.faa"
            }
          }
        ],
        "authors": [
          "@rpetit3",
          "@oschwengers",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "bakta_baktadbdownload",
      "path": "modules/nf-core/bakta/baktadbdownload/meta.yml",
      "type": "module",
      "meta": {
        "name": "bakta_baktadbdownload",
        "description": "Downloads BAKTA database from Zenodo",
        "keywords": [
          "bakta",
          "annotation",
          "fasta",
          "bacteria",
          "database",
          "download"
        ],
        "tools": [
          {
            "bakta": {
              "description": "Rapid & standardized annotation of bacterial genomes, MAGs & plasmids",
              "homepage": "https://github.com/oschwengers/bakta",
              "documentation": "https://github.com/oschwengers/bakta",
              "tool_dev_url": "https://github.com/oschwengers/bakta",
              "doi": "10.1099/mgen.0.000685",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "BAKTA database directory",
              "pattern": "db*/"
            }
          }
        ],
        "authors": [
          "@jfy133",
          "@jasmezz"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "bamaligncleaner",
      "path": "modules/nf-core/bamaligncleaner/meta.yml",
      "type": "module",
      "meta": {
        "name": "bamaligncleaner",
        "description": "removes unused references from header of sorted BAM/CRAM files.",
        "keywords": [
          "bam"
        ],
        "tools": [
          {
            "bamaligncleaner": {
              "description": "Removes unaligned references in aligned BAM alignment file",
              "homepage": "https://github.com/maxibor/bamAlignCleaner",
              "documentation": "https://github.com/maxibor/bamAlignCleaner",
              "tool_dev_url": "https://github.com/maxibor/bamAlignCleaner",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "bamcmp",
      "path": "modules/nf-core/bamcmp/meta.yml",
      "type": "module",
      "meta": {
        "name": "bamcmp",
        "description": "Bamcmp (Bam Compare) is a tool for assigning reads between a primary genome and a contamination genome. For instance, filtering out mouse reads from patient derived xenograft mouse models (PDX).",
        "keywords": [
          "filter",
          "xenograft",
          "host",
          "graft",
          "contamination",
          "mouse"
        ],
        "tools": [
          {
            "bamcmp": {
              "description": "Bamcmp is a tool for deconvolving host and graft reads, using two bam files. Reads should be mapped to two genomes, and the mapped, sorted bam files supplied to the tool. It is highly recommended to use the \"-s as\" option not the \"-s mapq\" option, else reads which multimap to the contamination genome will be spuriously kept.",
              "homepage": "https://github.com/CRUKMI-ComputationalBiology/bamcmp",
              "documentation": "https://github.com/CRUKMI-ComputationalBiology/bamcmp",
              "tool_dev_url": "https://github.com/CRUKMI-ComputationalBiology/bamcmp",
              "doi": "10.1158/1541-7786.MCR-16-0431",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "sample": {
              "type": "file",
              "description": "BAM/CRAM/SAM file with the reads aligned to the primary genome (the one you want to keep)",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "contaminant": {
              "type": "file",
              "description": "BAM/CRAM/SAM file with the reads aligned to the contaminant genome (the one you want to filter out)",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Bam file containing the reads which align better to the primary genome.",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Bam file containing the reads which align better to the contaminant genome.",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "authors": [
          "@kmurat1",
          "@sppearce"
        ]
      }
    },
    {
      "name": "bamtools_convert",
      "path": "modules/nf-core/bamtools/convert/meta.yml",
      "type": "module",
      "meta": {
        "name": "bamtools_convert",
        "description": "BamTools provides both a programmer's API and an end-user's toolkit for handling BAM files.",
        "keywords": [
          "bamtools",
          "bamtools/convert",
          "bam",
          "convert",
          "bed",
          "fasta",
          "fastq",
          "json",
          "pileup",
          "sam",
          "yaml"
        ],
        "tools": [
          {
            "bamtools": {
              "description": "C++ API & command-line toolkit for working with BAM data",
              "homepage": "http://github.com/pezmaster31/bamtools",
              "documentation": "https://github.com/pezmaster31/bamtools/wiki",
              "tool_dev_url": "http://github.com/pezmaster31/bamtools",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "out": {
              "type": "file",
              "description": "The data in the asked format (bed, fasta, fastq, json, pileup, sam, yaml)",
              "pattern": "*.{bed,fasta,fastq,json,pileup,sam,yaml}"
            }
          }
        ],
        "authors": [
          "@sguizard"
        ]
      },
      "pipelines": [
        {
          "name": "isoseq",
          "version": "1.1.4"
        }
      ]
    },
    {
      "name": "bamtools_split",
      "path": "modules/nf-core/bamtools/split/meta.yml",
      "type": "module",
      "meta": {
        "name": "bamtools_split",
        "description": "BamTools provides both a programmer's API and an end-user's toolkit for handling BAM files.",
        "keywords": [
          "bamtools",
          "bamtools/split",
          "bam",
          "split",
          "chunk"
        ],
        "tools": [
          {
            "bamtools": {
              "description": "C++ API & command-line toolkit for working with BAM data",
              "homepage": "http://github.com/pezmaster31/bamtools",
              "documentation": "https://github.com/pezmaster31/bamtools/wiki",
              "tool_dev_url": "http://github.com/pezmaster31/bamtools",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "A list of one or more BAM files to merge and then split",
              "pattern": "*.bam"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Several Bam files",
              "pattern": "*.bam"
            }
          }
        ],
        "authors": [
          "@sguizard",
          "@matthdsm"
        ]
      }
    },
    {
      "name": "bamtools_stats",
      "path": "modules/nf-core/bamtools/stats/meta.yml",
      "type": "module",
      "meta": {
        "name": "bamtools_stats",
        "description": "BamTools provides both a programmer's API and an end-user's toolkit for handling BAM files.",
        "keywords": [
          "bamtools",
          "stats",
          "bam"
        ],
        "tools": [
          {
            "bamtools": {
              "description": "C++ API & command-line toolkit for working with BAM data",
              "homepage": "http://github.com/pezmaster31/bamtools",
              "documentation": "https://github.com/pezmaster31/bamtools/wiki",
              "tool_dev_url": "http://github.com/pezmaster31/bamtools",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "File containing alignment statistics",
              "pattern": "*.stats"
            }
          }
        ],
        "authors": [
          "@lescai"
        ]
      },
      "pipelines": [
        {
          "name": "hgtseq",
          "version": "1.1.0"
        }
      ]
    },
    {
      "name": "bamutil_trimbam",
      "path": "modules/nf-core/bamutil/trimbam/meta.yml",
      "type": "module",
      "meta": {
        "name": "bamutil_trimbam",
        "description": "trims the end of reads in a SAM/BAM file, changing read ends to ‘N’ and quality to ‘!’, or by soft clipping",
        "keywords": [
          "bam",
          "trim",
          "clipping",
          "bamUtil",
          "trimBam"
        ],
        "tools": [
          {
            "bamutil": {
              "description": "Programs that perform operations on SAM/BAM files, all built into a single executable, bam.",
              "homepage": "https://genome.sph.umich.edu/wiki/BamUtil",
              "documentation": "https://genome.sph.umich.edu/wiki/BamUtil:_trimBam",
              "tool_dev_url": "https://github.com/statgen/bamUtil",
              "doi": "10.1101/gr.176552.114",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "trim_left": {
              "type": "integer",
              "description": "Number of bases to trim off the right-hand side of a read. Reverse strands are reversed before trimming."
            }
          },
          {
            "trim_right": {
              "type": "integer",
              "description": "Number of bases to trim off the right-hand side of a read. Reverse strands are reversed before trimming."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Trimmed but unsorted BAM file",
              "pattern": "*.bam"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "bandage_image",
      "path": "modules/nf-core/bandage/image/meta.yml",
      "type": "module",
      "meta": {
        "name": "bandage_image",
        "description": "Render an assembly graph in GFA 1.0 format to PNG and SVG image formats",
        "keywords": [
          "gfa",
          "graph",
          "assembly",
          "visualisation"
        ],
        "tools": [
          {
            "bandage": {
              "description": "Bandage - a Bioinformatics Application for Navigating De novo Assembly Graphs Easily\n",
              "homepage": "https://github.com/rrwick/Bandage",
              "documentation": "https://github.com/rrwick/Bandage",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Assembly graph in GFA 1.0 format",
              "pattern": "*.gfa"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "png": {
              "type": "file",
              "description": "Bandage image in PNG format",
              "pattern": "*.png"
            }
          },
          {
            "svg": {
              "type": "file",
              "description": "Bandage image in SVG format",
              "pattern": "*.svg"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@heuermh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bases2fastq",
      "path": "modules/nf-core/bases2fastq/meta.yml",
      "type": "module",
      "meta": {
        "name": "bases2fastq",
        "description": "Demultiplex Element Biosciences bases files",
        "keywords": [
          "demultiplex",
          "element",
          "fastq"
        ],
        "tools": [
          {
            "bases2fastq": {
              "description": "Demultiplexes sequencing data and converts base calls into FASTQ files for secondary analysis",
              "homepage": "https://go.elementbiosciences.com/bases2fastq-download",
              "documentation": "https://www.elementbiosciences.com/resources/user-guides/workflow/bases2fastq",
              "licence": "http://go.elembio.link/eula"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "run_manifest": {
              "type": "file",
              "description": "RunManifest file",
              "pattern": "*.{csv}"
            }
          },
          {
            "run_dir": {
              "type": "directory",
              "description": "Input run directory containing optionally containing a RunManifest.json if run_manifest is not supplied"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sample_fastq": {
              "type": "file",
              "description": "Demultiplexed sample FASTQ files",
              "pattern": "output/Samples/*/*_R*.fastq.gz"
            }
          },
          {
            "sample_json": {
              "type": "file",
              "description": "Demultiplexed sample stats",
              "pattern": "output/Samples/*/*.json"
            }
          },
          {
            "qc_report": {
              "type": "file",
              "description": "QC HTML report",
              "pattern": "output/*.html"
            }
          },
          {
            "run_stats": {
              "type": "file",
              "description": "QC HTML report",
              "pattern": "output/*.html"
            }
          },
          {
            "generated_run_manifest": {
              "type": "file",
              "description": "Updated Run Manifest JSON from the run_manifest csv",
              "pattern": "output/RunManifest.json"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Sample metrics",
              "pattern": "output/Metrics.csv"
            }
          },
          {
            "unassigned": {
              "type": "file",
              "description": "Unassigned Sequences",
              "pattern": "output/UnassignedSequences.csv"
            }
          }
        ],
        "authors": [
          "@Emiller88"
        ]
      },
      "pipelines": [
        {
          "name": "demultiplex",
          "version": "1.3.2"
        }
      ]
    },
    {
      "name": "basicpy",
      "path": "modules/nf-core/basicpy/meta.yml",
      "type": "module",
      "meta": {
        "name": "basicpy",
        "description": "BaSiCPy is a python package for background and shading correction of optical microscopy images. It is developed based on the Matlab version of BaSiC tool with major improvements in the algorithm.",
        "keywords": [
          "illumiation_correction",
          "background_correction",
          "microscopy",
          "imaging"
        ],
        "tools": [
          {
            "basicpy": {
              "description": "BaSiCPy is a python package for background and shading correction of optical microscopy images. It is developed based on the Matlab version of BaSiC tool with major improvements in the algorithm. The container of this tool needs to be initialized with an empty Entrypoint. See the nextflow.config of the tests for details.",
              "homepage": "https://github.com/peng-lab/BaSiCPy",
              "documentation": "https://basicpy.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/peng-lab/BaSiCPy",
              "doi": "10.1038/ncomms14836",
              "licence": "MIT License"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "image": {
              "type": "file",
              "description": "Tiff file to be used for dark and flat field illumination correction",
              "pattern": "*.{tiff,tif}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fields": {
              "type": "file",
              "description": "Tiff fields for dark and flat field illumination correction",
              "pattern": "*.{tiff,tif}"
            }
          }
        ],
        "authors": [
          "@FloWuenne"
        ]
      }
    },
    {
      "name": "bbmap_align",
      "path": "modules/nf-core/bbmap/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "bbmap_align",
        "description": "Align short or PacBio reads to a reference genome using BBMap",
        "keywords": [
          "align",
          "map",
          "fasta",
          "fastq",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "bbmap": {
              "description": "BBMap is a short read aligner, as well as various other bioinformatic tools.",
              "homepage": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "documentation": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "licence": [
                "UC-LBL license (see package)"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "ref": {
              "type": "file",
              "description": "Either \"ref\" a directory containing an index, the name of another directory\nwith a \"ref\" subdirectory containing an index or the name of a fasta formatted\nnucleotide file containg the reference to map to.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.{bam}"
            }
          }
        ],
        "authors": [
          "@erikrikarddaniel"
        ]
      }
    },
    {
      "name": "bbmap_bbduk",
      "path": "modules/nf-core/bbmap/bbduk/meta.yml",
      "type": "module",
      "meta": {
        "name": "bbmap_bbduk",
        "description": "Adapter and quality trimming of sequencing reads",
        "keywords": [
          "trimming",
          "adapter trimming",
          "quality trimming",
          "fastq"
        ],
        "tools": [
          {
            "bbmap": {
              "description": "BBMap is a short read aligner, as well as various other bioinformatic tools.",
              "homepage": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "documentation": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "licence": [
                "UC-LBL license (see package)"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "contaminants": {
              "type": "file",
              "description": "Reference files containing adapter and/or contaminant sequences for sequence kmer matching\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "The trimmed/modified fastq reads",
              "pattern": "*fastq.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Bbduk log file",
              "pattern": "*bbduk.log"
            }
          }
        ],
        "authors": [
          "@MGordon09"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "bbmap_bbnorm",
      "path": "modules/nf-core/bbmap/bbnorm/meta.yml",
      "type": "module",
      "meta": {
        "name": "bbmap_bbnorm",
        "description": "BBNorm is designed to normalize coverage by down-sampling reads over high-depth areas of a genome, to result in a flat coverage distribution.",
        "keywords": [
          "normalization",
          "assembly",
          "coverage"
        ],
        "tools": [
          {
            "bbmap": {
              "description": "BBMap is a short read aligner, as well as various other bioinformatic tools.",
              "homepage": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "documentation": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "tool_dev_url": "https://jgi.doe.gov/data-and-tools/software-tools/bbtools/bb-tools-user-guide/bbnorm-guide/",
              "licence": "BBMap - Bushnell B. - sourceforge.net/projects/bbmap/"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "fastq file",
              "pattern": "*.{fastq,fq}(.gz)?"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "fastq file",
              "pattern": "*.{fastq, fq}.gz"
            }
          }
        ],
        "authors": [
          "@danilodileo"
        ]
      }
    },
    {
      "name": "bbmap_bbsplit",
      "path": "modules/nf-core/bbmap/bbsplit/meta.yml",
      "type": "module",
      "meta": {
        "name": "bbmap_bbsplit",
        "description": "Split sequencing reads by mapping them to multiple references simultaneously",
        "keywords": [
          "align",
          "map",
          "fastq",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "bbmap": {
              "description": "BBMap is a short read aligner, as well as various other bioinformatic tools.",
              "homepage": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "documentation": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "licence": [
                "UC-LBL license (see package)"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "Directory to place generated index",
              "pattern": "*"
            }
          },
          {
            "primary_ref": {
              "type": "file",
              "description": "Path to the primary reference",
              "pattern": "*"
            }
          },
          {
            "other_ref_names": {
              "type": "list",
              "description": "List of other reference ids apart from the primary"
            }
          },
          {
            "other_ref_paths": {
              "type": "list",
              "description": "Path to other references paths corresponding to \"other_ref_names\""
            }
          },
          {
            "only_build_index": {
              "type": "string",
              "description": "true = only build index; false = mapping"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "Directory with index files",
              "pattern": "bbsplit"
            }
          },
          {
            "primary_fastq": {
              "type": "file",
              "description": "Output reads that map to the primary reference",
              "pattern": "*primary*fastq.gz"
            }
          },
          {
            "all_fastq": {
              "type": "file",
              "description": "All reads mapping to any of the references",
              "pattern": "*fastq.gz"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Tab-delimited text file containing mapping statistics",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "bbmap_clumpify",
      "path": "modules/nf-core/bbmap/clumpify/meta.yml",
      "type": "module",
      "meta": {
        "name": "bbmap_clumpify",
        "description": "Create 30% Smaller, Faster Gzipped Fastq Files. And remove duplicates",
        "keywords": [
          "clumping fastqs",
          "smaller fastqs",
          "deduping",
          "fastq"
        ],
        "tools": [
          {
            "bbmap": {
              "description": "BBMap is a short read aligner, as well as various other bioinformatic tools.",
              "homepage": "https://jgi.doe.gov/data-and-tools/software-tools/bbtools/bb-tools-user-guide/clumpify-guide/",
              "documentation": "https://www.biostars.org/p/225338/",
              "licence": [
                "UC-LBL license (see package)"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "The reordered/clumped (and if necessary deduped) fastq reads",
              "pattern": "*.clumped.fastq.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Clumpify log file",
              "pattern": "*clumpify.log"
            }
          }
        ],
        "authors": [
          "@tamuanand"
        ]
      }
    },
    {
      "name": "bbmap_index",
      "path": "modules/nf-core/bbmap/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "bbmap_index",
        "description": "Creates an index from a fasta file, ready to be used by bbmap.sh in mapping mode.",
        "keywords": [
          "map",
          "index",
          "fasta"
        ],
        "tools": [
          {
            "bbmap": {
              "description": "BBMap is a short read aligner, as well as various other bioinformatic tools.",
              "homepage": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "documentation": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "licence": [
                "UC-LBL license (see package)"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "fasta",
              "description": "fasta formatted file with nucleotide sequences",
              "pattern": "*.{fna,fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "Directory with index files",
              "pattern": "ref"
            }
          }
        ],
        "authors": [
          "@daniellundin"
        ]
      }
    },
    {
      "name": "bbmap_pileup",
      "path": "modules/nf-core/bbmap/pileup/meta.yml",
      "type": "module",
      "meta": {
        "name": "bbmap_pileup",
        "description": "Calculates per-scaffold or per-base coverage information from an unsorted sam or bam file.",
        "keywords": [
          "fasta",
          "genome",
          "coverage"
        ],
        "tools": [
          {
            "bbmap": {
              "description": "BBMap is a short read aligner, as well as various other bioinformatic tools.",
              "homepage": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "documentation": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "tool_dev_url": "https://github.com/BioInfoTools/BBMap/blob/master/sh/pileup.sh",
              "licence": [
                "UC-LBL license (see package)"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Per-scaffold coverage info",
              "pattern": "*.stats.txt"
            }
          },
          {
            "hist": {
              "type": "file",
              "description": "Histogram of # occurrences of each depth level",
              "pattern": "*.hist.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Emiller88"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        }
      ]
    },
    {
      "name": "bbmap_sendsketch",
      "path": "modules/nf-core/bbmap/sendsketch/meta.yml",
      "type": "module",
      "meta": {
        "name": "bbmap_sendsketch",
        "description": "Compares query sketches to reference sketches hosted on a remote server via the Internet.",
        "keywords": [
          "taxonomy",
          "classification",
          "sketch",
          "query",
          "fastq",
          "fasta"
        ],
        "tools": [
          {
            "bbmap": {
              "description": "BBMap is a short read aligner, as well as various other bioinformatic tools.",
              "homepage": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "documentation": "https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/",
              "licence": "['UC-LBL license (see package)']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "file": {
              "type": "file",
              "description": "file with nucleotide sequences",
              "pattern": "*.{fna, fa, fasta, fa.gz, fasta.gz, fna.gz, fastq.gz, fastq, fq.gz, fq}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "hits": {
              "type": "txt",
              "description": ".txt file containing hits from a query seuqnce to various reference sequences output",
              "pattern": "*.{txt}"
            }
          }
        ],
        "authors": [
          "@phanhung2"
        ]
      }
    },
    {
      "name": "bcftools_annotate",
      "path": "modules/nf-core/bcftools/annotate/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_annotate",
        "description": "Add or remove annotations.",
        "keywords": [
          "bcftools",
          "annotate",
          "vcf",
          "remove",
          "add"
        ],
        "tools": [
          {
            "annotate": {
              "description": "Add or remove annotations.",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "https://samtools.github.io/bcftools/bcftools.html#annotate",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Query VCF or BCF file, can be either uncompressed or compressed"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Index of the query VCF or BCF file"
            }
          },
          {
            "annotations": {
              "type": "file",
              "description": "Bgzip-compressed file with annotations"
            }
          },
          {
            "annotations_index": {
              "type": "file",
              "description": "Index of the annotations file"
            }
          },
          {
            "header_lines": {
              "type": "file",
              "description": "Contains lines to append to the output VCF header"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed annotated VCF file",
              "pattern": "*{vcf,vcf.gz,bcf,bcf.gz}"
            }
          }
        ],
        "authors": [
          "@projectoriented",
          "@ramprasadn"
        ]
      }
    },
    {
      "name": "bcftools_call",
      "path": "modules/nf-core/bcftools/call/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_call",
        "description": "This command replaces the former bcftools view caller.\nSome of the original functionality has been temporarily lost in the process of transition under htslib, but will be added back on popular demand.\nThe original calling model can be invoked with the -c option.\n",
        "keywords": [
          "variant calling",
          "view",
          "bcftools",
          "VCF"
        ],
        "tools": [
          {
            "view": {
              "description": "View, subset and filter VCF or BCF files by position and filtering expression. Convert between VCF and BCF\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The vcf file to be inspected.\ne.g. 'file.vcf'\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "The tab index for the VCF file to be inspected.\ne.g. 'file.tbi'\n"
            }
          },
          {
            "regions": {
              "type": "file",
              "description": "Optionally, restrict the operation to regions listed in this file.\ne.g. 'file.vcf'\n"
            }
          },
          {
            "targets": {
              "type": "file",
              "description": "Optionally, restrict the operation to regions listed in this file (doesn't rely upon index files)\ne.g. 'file.vcf'\n"
            }
          },
          {
            "samples": {
              "type": "file",
              "description": "Optional, file of sample names to be included or excluded.\ne.g. 'file.tsv'\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF normalized output file",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@abhi18av",
          "@LouisLeNezet"
        ]
      }
    },
    {
      "name": "bcftools_concat",
      "path": "modules/nf-core/bcftools/concat/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_concat",
        "description": "Concatenate VCF files",
        "keywords": [
          "variant calling",
          "concat",
          "bcftools",
          "VCF"
        ],
        "tools": [
          {
            "concat": {
              "description": "Concatenate VCF files.\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcfs": {
              "type": "files",
              "description": "List containing 2 or more vcf files\ne.g. [ 'file1.vcf', 'file2.vcf' ]\n"
            }
          },
          {
            "tbi": {
              "type": "files",
              "description": "List containing 2 or more index files (optional)\ne.g. [ 'file1.tbi', 'file2.tbi' ]\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF concatenated output file",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@abhi18av",
          "@nvnieuwk"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "bcftools_consensus",
      "path": "modules/nf-core/bcftools/consensus/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_consensus",
        "description": "Compresses VCF files",
        "keywords": [
          "variant calling",
          "consensus",
          "VCF"
        ],
        "tools": [
          {
            "consensus": {
              "description": "Create consensus sequence by applying VCF variants to a reference fasta file.\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "tabix index file",
              "pattern": "*.{tbi}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA reference file",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA reference consensus file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bcftools_convert",
      "path": "modules/nf-core/bcftools/convert/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_convert",
        "description": "Converts certain output formats to VCF",
        "keywords": [
          "bcftools",
          "convert",
          "vcf",
          "gvcf"
        ],
        "tools": [
          {
            "bcftools": {
              "description": "BCFtools is a set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.  Most commands accept VCF, bgzipped VCF and BCF with filetype detected automatically even when streaming from a pipe. Indexed VCF and BCF will work in all situations. Un-indexed VCF and BCF and streams will work in most, but not all situations.",
              "homepage": "https://samtools.github.io/bcftools/bcftools.html",
              "documentation": "https://samtools.github.io/bcftools/bcftools.html#convert",
              "tool_dev_url": "https://github.com/samtools/bcftools",
              "doi": "10.1093/gigascience/giab008",
              "licence": "['GPL']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "The input format. Each format needs a seperate parameter to be specified in the `args`:\n- GEN/SAMPLE file: `--gensample2vcf`\n- gVCF file: `--gvcf2vcf`\n- HAP/SAMPLE file: `--hapsample2vcf`\n- HAP/LEGEND/SAMPLE file: `--haplegendsample2vcf`\n- TSV file: `--tsv2vcf`\n",
              "pattern": "*.{gen,sample,g.vcf,hap,legend}{.gz,}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "(Optional) The index for the input files, if needed",
              "pattern": "*.bed"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "(Optional) The reference fasta, only needed for gVCF conversion",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "(Optional) The BED file containing the regions for the VCF file",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf_gz": {
              "type": "file",
              "description": "VCF merged output file (bgzipped) => when `--output-type z` is used",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF merged output file => when `--output-type v` is used",
              "pattern": "*.vcf"
            }
          },
          {
            "bcf_gz": {
              "type": "file",
              "description": "BCF merged output file (bgzipped) => when `--output-type b` is used",
              "pattern": "*.bcf.gz"
            }
          },
          {
            "bcf": {
              "type": "file",
              "description": "BCF merged output file => when `--output-type u` is used",
              "pattern": "*.bcf"
            }
          }
        ],
        "authors": [
          "@nvnieuwk",
          "@ramprasadn"
        ]
      }
    },
    {
      "name": "bcftools_filter",
      "path": "modules/nf-core/bcftools/filter/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_filter",
        "description": "Filters VCF files",
        "keywords": [
          "variant calling",
          "filtering",
          "VCF"
        ],
        "tools": [
          {
            "filter": {
              "description": "Apply fixed-threshold filters to VCF files.\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF input file",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF filtered output file",
              "pattern": "*.{vcf}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bcftools_index",
      "path": "modules/nf-core/bcftools/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_index",
        "description": "Index VCF tools",
        "keywords": [
          "vcf",
          "index",
          "bcftools",
          "csi",
          "tbi"
        ],
        "tools": [
          {
            "bcftools": {
              "description": "BCFtools is a set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.  Most commands accept VCF, bgzipped VCF and BCF with filetype detected automatically even when streaming from a pipe. Indexed VCF and BCF will work in all situations. Un-indexed VCF and BCF and streams will work in most, but not all situations.",
              "homepage": "https://samtools.github.io/bcftools/",
              "documentation": "https://samtools.github.io/bcftools/howtos/index.html",
              "tool_dev_url": "https://github.com/samtools/bcftools",
              "doi": "10.1093/gigascience/giab008",
              "licence": [
                "MIT",
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "VCF": {
              "type": "file",
              "description": "VCF file (optionally GZIPPED)",
              "pattern": "*.{vcf,vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          },
          {
            "csi": {
              "type": "file",
              "description": "Default VCF file index file",
              "pattern": "*.csi"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Alternative VCF file index file for larger files (activated with -t parameter)",
              "pattern": "*.tbi"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "bcftools_isec",
      "path": "modules/nf-core/bcftools/isec/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_isec",
        "description": "Apply set operations to VCF files",
        "keywords": [
          "variant calling",
          "intersect",
          "union",
          "complement",
          "VCF"
        ],
        "tools": [
          {
            "isec": {
              "description": "Computes intersections, unions and complements of VCF files.\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcfs": {
              "type": "files",
              "description": "List containing 2 or more vcf files\ne.g. [ 'file1.vcf', 'file2.vcf' ]\n"
            }
          },
          {
            "tbis": {
              "type": "files",
              "description": "List containing the tbi index files corresponding to the vcfs input files\ne.g. [ 'file1.vcf.tbi', 'file2.vcf.tbi' ]\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "results": {
              "type": "directory",
              "description": "Folder containing the set operations results perform on the vcf files",
              "pattern": "${prefix}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      }
    },
    {
      "name": "bcftools_merge",
      "path": "modules/nf-core/bcftools/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_merge",
        "description": "Merge VCF files",
        "keywords": [
          "variant calling",
          "merge",
          "VCF"
        ],
        "tools": [
          {
            "merge": {
              "description": "Merge VCF files.\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcfs": {
              "type": "file",
              "description": "List containing 2 or more vcf files\ne.g. [ 'file1.vcf', 'file2.vcf' ]\n"
            }
          },
          {
            "tbis": {
              "type": "file",
              "description": "List containing the tbi index files corresponding to the vcfs input files\ne.g. [ 'file1.vcf.tbi', 'file2.vcf.tbi' ]\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "(Optional) The fasta reference file (only necessary for the `--gvcf FILE` parameter)",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "(Optional) The fasta reference file index (only necessary for the `--gvcf FILE` parameter)",
              "pattern": "*.fai"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "(Optional) The bed regions to merge on",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf_gz": {
              "type": "file",
              "description": "VCF merged output file (bgzipped) => when `--output-type z` is used",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF merged output file => when `--output-type v` is used",
              "pattern": "*.vcf"
            }
          },
          {
            "bcf_gz": {
              "type": "file",
              "description": "BCF merged output file (bgzipped) => when `--output-type b` is used",
              "pattern": "*.bcf.gz"
            }
          },
          {
            "bcf": {
              "type": "file",
              "description": "BCF merged output file => when `--output-type u` is used",
              "pattern": "*.bcf"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh",
          "@nvnieuwk",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "bcftools_mpileup",
      "path": "modules/nf-core/bcftools/mpileup/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_mpileup",
        "description": "Compresses VCF files",
        "keywords": [
          "variant calling",
          "mpileup",
          "VCF"
        ],
        "tools": [
          {
            "mpileup": {
              "description": "Generates genotype likelihoods at each genomic position with coverage.\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Input BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Input intervals file. A file (commonly '.bed') containing regions to subset"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA reference file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "save_mpileup": {
              "type": "boolean",
              "description": "Save mpileup file generated by bcftools mpileup"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF gzipped output file",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "tabix index file",
              "pattern": "*.{vcf.gz.tbi}"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Text output file containing stats",
              "pattern": "*{stats.txt}"
            }
          },
          {
            "mpileup": {
              "type": "file",
              "description": "mpileup gzipped output for all positions",
              "pattern": "{*.mpileup.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bcftools_norm",
      "path": "modules/nf-core/bcftools/norm/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_norm",
        "description": "Normalize VCF file",
        "keywords": [
          "normalize",
          "norm",
          "variant calling",
          "VCF"
        ],
        "tools": [
          {
            "norm": {
              "description": "Normalize VCF files.\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The vcf file to be normalized\ne.g. 'file1.vcf'\n",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "An optional index of the VCF file (for when the VCF is compressed)\n",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA reference file",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "One of uncompressed VCF (.vcf), compressed VCF (.vcf.gz), compressed BCF (.bcf.gz) or uncompressed BCF (.bcf) normalized output file",
              "pattern": "*.{vcf,vcf.gz,bcf,bcf.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@abhi18av",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bcftools_pluginscatter",
      "path": "modules/nf-core/bcftools/pluginscatter/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_pluginscatter",
        "description": "Split VCF by chunks or regions, creating multiple VCFs.",
        "keywords": [
          "scatter",
          "vcf",
          "bcf",
          "genomics"
        ],
        "tools": [
          {
            "pluginscatter": {
              "description": "Split VCF by chunks or regions, creating multiple VCFs.\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://samtools.github.io/bcftools/bcftools.html#reheader",
              "doi": "10.1093/gigascience/giab008",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The input VCF to scatter",
              "pattern": "*.{vcf,vcf.gz,bcf,bcf.gz}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Optional index of the input VCF",
              "pattern": "*.tbi"
            }
          },
          {
            "sites_per_chunk": {
              "type": "integer",
              "description": "How many variants should be in each output file\nEither this or `scatter` or `scatter_file` have to be given\n"
            }
          },
          {
            "scatter": {
              "type": "string",
              "description": "A comma delimited list of regions to scatter into\nEither this or `sites_per_chunk` or `scatter_file` have to be given\n"
            }
          },
          {
            "scatter_file": {
              "type": "file",
              "description": "A file containing a region on each line with an optional second column containing the filename\nEither this or `sites_per_chunk` or `scatter` have to be given\n"
            }
          },
          {
            "regions": {
              "type": "file",
              "description": "Optional file containing the regions to work on",
              "pattern": "*.bed"
            }
          },
          {
            "targets": {
              "type": "file",
              "description": "Optional file containing the regions to work on (but streams instead of index-jumping)",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "scatter": {
              "type": "file",
              "description": "The resulting files of the scattering",
              "pattern": "*.{vcf,vcf.gz,bcf,bcf.gz}"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "bcftools_pluginsplit",
      "path": "modules/nf-core/bcftools/pluginsplit/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_pluginsplit",
        "description": "Split VCF by sample, creating single- or multi-sample VCFs.",
        "keywords": [
          "split",
          "vcf",
          "genomics"
        ],
        "tools": [
          {
            "pluginsplit": {
              "description": "Split VCF by sample, creating single- or multi-sample VCFs.\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The VCF file to split",
              "pattern": "*.{vcf,vcf.gz,bcf,bcf.gz}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "OPTIONAL - The index of the input VCF/BCF",
              "pattern": "*.tbi"
            }
          },
          {
            "samples": {
              "type": "file",
              "description": "A tab-separated file determining which samples should be in which output file\ncolumn 1: The sample name(s) in the input file\ncolumn 2: The sample name(s) to use in the output file (use `-` to keep the original name)\ncolumn 3: The name of the output file\nEither this or a groups file should be given\n",
              "pattern": "*"
            }
          },
          {
            "groups": {
              "type": "file",
              "description": "A tab-separated file determining which samples should be in which output file(s)\ncolumn 1: The sample name(s) in the input file\ncolumn 2: The sample name(s) to use in the output file (use `-` to keep the original name)\ncolumn 3: The name of the output file(s)\nEither this or a samples file should be given\n",
              "pattern": "*"
            }
          },
          {
            "regions": {
              "type": "file",
              "description": "A BED file containing regions to use",
              "pattern": "*.bed"
            }
          },
          {
            "targets": {
              "type": "file",
              "description": "A BED file containing regions to use (but streams rather than index-jumps)",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The resulting VCF files from the split",
              "pattern": "*.{vcf,vcf.gz,bcf,bcf.gz}"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "bcftools_query",
      "path": "modules/nf-core/bcftools/query/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_query",
        "description": "Extracts fields from VCF or BCF files and outputs them in user-defined format.",
        "keywords": [
          "query",
          "variant calling",
          "bcftools",
          "VCF"
        ],
        "tools": [
          {
            "query": {
              "description": "Extracts fields from VCF or BCF files and outputs them in user-defined format.\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The vcf file to be qeuried.\n",
              "pattern": "*.{vcf.gz, vcf}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "The tab index for the VCF file to be inspected.\n",
              "pattern": "*.tbi"
            }
          },
          {
            "regions": {
              "type": "file",
              "description": "Optionally, restrict the operation to regions listed in this file.\n"
            }
          },
          {
            "targets": {
              "type": "file",
              "description": "Optionally, restrict the operation to regions listed in this file (doesn't rely upon index files)\n"
            }
          },
          {
            "samples": {
              "type": "file",
              "description": "Optional, file of sample names to be included or excluded.\ne.g. 'file.tsv'\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "BCFTools query output file",
              "pattern": "*.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@abhi18av",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bcftools_reheader",
      "path": "modules/nf-core/bcftools/reheader/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_reheader",
        "description": "Reheader a VCF file",
        "keywords": [
          "reheader",
          "vcf",
          "update header"
        ],
        "tools": [
          {
            "reheader": {
              "description": "Modify header of VCF/BCF files, change sample names.\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://samtools.github.io/bcftools/bcftools.html#reheader",
              "doi": "10.1093/gigascience/giab008",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF/BCF file",
              "pattern": "*.{vcf.gz,vcf,bcf}"
            }
          },
          {
            "header": {
              "type": "file",
              "description": "New header to add to the VCF",
              "pattern": "*.{header.txt}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Fasta index to update header sequences with",
              "pattern": "*.{fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF with updated header, bgzipped per default",
              "pattern": "*.{vcf,vcf.gz,bcf,bcf.gz}"
            }
          }
        ],
        "authors": [
          "@bjohnnyd",
          "@jemten",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "bcftools_roh",
      "path": "modules/nf-core/bcftools/roh/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_roh",
        "description": "A program for detecting runs of homo/autozygosity. Only bi-allelic sites are considered.",
        "keywords": [
          "roh"
        ],
        "tools": [
          {
            "roh": {
              "description": "A program for detecting runs of homo/autozygosity. Only bi-allelic sites are considered.",
              "homepage": "https://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf,.vcf.gz}"
            }
          },
          {
            "af_file": {
              "type": "file",
              "description": "Read allele frequencies from a tab-delimited file containing the columns: CHROM\tPOS\tREF,ALT\tAF."
            }
          },
          {
            "af_file_tbi": {
              "type": "file",
              "description": "tbi index of af_file."
            }
          },
          {
            "genetic_map": {
              "type": "file",
              "description": "Genetic map in the format required also by IMPUTE2."
            }
          },
          {
            "regions_file": {
              "type": "file",
              "description": "Regions can be specified either on command line or in a VCF, BED, or tab-delimited file (the default)."
            }
          },
          {
            "samples_file": {
              "type": "file",
              "description": "File of sample names to include or exclude if prefixed with '^'."
            }
          },
          {
            "targets_file": {
              "type": "file",
              "description": "Targets can be specified either on command line or in a VCF, BED, or tab-delimited file (the default)."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "roh": {
              "type": "file",
              "description": "Contains site-specific and/or per-region runs of homo/autozygosity calls.",
              "pattern": "*.{roh}"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "bcftools_sort",
      "path": "modules/nf-core/bcftools/sort/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_sort",
        "description": "Sorts VCF files",
        "keywords": [
          "sorting",
          "VCF",
          "variant calling"
        ],
        "tools": [
          {
            "sort": {
              "description": "Sort VCF files by coordinates.",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "tool_dev_url": "https://github.com/samtools/bcftools",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The VCF/BCF file to be sorted",
              "pattern": "*.{vcf.gz,vcf,bcf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Sorted VCF file",
              "pattern": "*.{vcf.gz}"
            }
          }
        ],
        "authors": [
          "@Gwennid"
        ]
      },
      "pipelines": [
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bcftools_split",
      "path": "modules/nf-core/bcftools/split/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_split",
        "description": "Split a vcf file into files per chromosome",
        "keywords": [
          "vcf",
          "split",
          "genomics"
        ],
        "tools": [
          {
            "bcftools": {
              "description": "Sort VCF files by coordinates.",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "tool_dev_url": "https://github.com/samtools/bcftools",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed vcf file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Compressed vcf file index",
              "pattern": "*.{tbi,csi}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "split_vcf": {
              "type": "file",
              "description": "Compressed vcf files per chromosome",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@matthdsm",
          "@atrigila"
        ]
      }
    },
    {
      "name": "bcftools_stats",
      "path": "modules/nf-core/bcftools/stats/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_stats",
        "description": "Generates stats from VCF files",
        "keywords": [
          "variant calling",
          "stats",
          "VCF"
        ],
        "tools": [
          {
            "stats": {
              "description": "Parses VCF or BCF and produces text file stats which is suitable for\nmachine processing and can be plotted using plot-vcfstats.\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF input file",
              "pattern": "*.{vcf}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "The tab index for the VCF file to be inspected. Optional: only required when parameter regions is chosen.\n",
              "pattern": "*.tbi"
            }
          },
          {
            "regions": {
              "type": "file",
              "description": "Optionally, restrict the operation to regions listed in this file. (VCF, BED or tab-delimited)\n"
            }
          },
          {
            "targets": {
              "type": "file",
              "description": "Optionally, restrict the operation to regions listed in this file (doesn't rely upon tbi index files)\n"
            }
          },
          {
            "samples": {
              "type": "file",
              "description": "Optional, file of sample names to be included or excluded.\ne.g. 'file.tsv'\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Text output file containing stats",
              "pattern": "*_{stats.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh",
          "@SusiJo"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bcftools_view",
      "path": "modules/nf-core/bcftools/view/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcftools_view",
        "description": "View, subset and filter VCF or BCF files by position and filtering expression. Convert between VCF and BCF",
        "keywords": [
          "variant calling",
          "view",
          "bcftools",
          "VCF"
        ],
        "tools": [
          {
            "view": {
              "description": "View, subset and filter VCF or BCF files by position and filtering expression. Convert between VCF and BCF\n",
              "homepage": "http://samtools.github.io/bcftools/bcftools.html",
              "documentation": "http://www.htslib.org/doc/bcftools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The vcf file to be inspected.\ne.g. 'file.vcf'\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "The tab index for the VCF file to be inspected.\ne.g. 'file.tbi'\n"
            }
          },
          {
            "regions": {
              "type": "file",
              "description": "Optionally, restrict the operation to regions listed in this file.\ne.g. 'file.vcf'\n"
            }
          },
          {
            "targets": {
              "type": "file",
              "description": "Optionally, restrict the operation to regions listed in this file (doesn't rely upon index files)\ne.g. 'file.vcf'\n"
            }
          },
          {
            "samples": {
              "type": "file",
              "description": "Optional, file of sample names to be included or excluded.\ne.g. 'file.tsv'\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF normalized output file",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@abhi18av"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "bcl2fastq",
      "path": "modules/nf-core/bcl2fastq/meta.yml",
      "type": "module",
      "meta": {
        "name": "bcl2fastq",
        "description": "Demultiplex Illumina BCL files",
        "keywords": [
          "demultiplex",
          "illumina",
          "fastq"
        ],
        "tools": [
          {
            "bcl2fastq": {
              "description": "Demultiplex Illumina BCL files",
              "homepage": "https://support.illumina.com/sequencing/sequencing_software/bcl2fastq-conversion-software",
              "documentation": "https://support.illumina.com/content/dam/illumina-support/documents/documentation/software_documentation/bcl2fastq/bcl2fastq2-v2-20-software-guide-15051736-03.pdf",
              "licence": "ILLUMINA"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "samplesheet": {
              "type": "file",
              "description": "Input samplesheet",
              "pattern": "*.{csv}"
            }
          },
          {
            "run_dir": {
              "type": "file",
              "description": "Input run directory containing RunInfo.xml and BCL data\nCould be a directory or a tar of the directory\n"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Demultiplexed sample FASTQ files",
              "pattern": "**_S*_L00?_R?_00?.fastq.gz"
            }
          },
          {
            "fastq_idx": {
              "type": "file",
              "description": "Optional demultiplexed index FASTQ files",
              "pattern": "**_S*_L00?_I?_00?.fastq.gz"
            }
          },
          {
            "undetermined": {
              "type": "file",
              "description": "Optional undetermined sample FASTQ files",
              "pattern": "Undetermined_S0_L00?_R?_00?.fastq.gz"
            }
          },
          {
            "undetermined_idx": {
              "type": "file",
              "description": "Optional undetermined index FASTQ files",
              "pattern": "Undetermined_S0_L00?_I?_00?.fastq.gz"
            }
          },
          {
            "reports": {
              "type": "file",
              "description": "Demultiplexing Reports",
              "pattern": "Reports/*"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Statistics files",
              "pattern": "Stats/*"
            }
          },
          {
            "interop": {
              "type": "file",
              "description": "Interop files",
              "pattern": "*.{bin}"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      },
      "subworkflows": [
        "bcl_demultiplex"
      ],
      "pipelines": [
        {
          "name": "demultiplex",
          "version": "1.3.2"
        }
      ]
    },
    {
      "name": "bclconvert",
      "path": "modules/nf-core/bclconvert/meta.yml",
      "type": "module",
      "meta": {
        "name": "bclconvert",
        "description": "Demultiplex Illumina BCL files",
        "keywords": [
          "demultiplex",
          "illumina",
          "fastq"
        ],
        "tools": [
          {
            "bclconvert": {
              "description": "Demultiplex Illumina BCL files",
              "homepage": "https://support.illumina.com/sequencing/sequencing_software/bcl-convert.html",
              "documentation": "https://support-docs.illumina.com/SW/BCL_Convert/Content/SW/FrontPages/BCL_Convert.htm",
              "licence": "ILLUMINA"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "samplesheet": {
              "type": "file",
              "description": "Input samplesheet",
              "pattern": "*.{csv}"
            }
          },
          {
            "run_dir": {
              "type": "file",
              "description": "Input run directory containing RunInfo.xml and BCL data\nCould be a directory or a tar of the directory\n"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Demultiplexed sample FASTQ files",
              "pattern": "**_S*_L00?_R?_00?.fastq.gz"
            }
          },
          {
            "fastq_idx": {
              "type": "file",
              "description": "Optional demultiplexed index FASTQ files",
              "pattern": "**_S*_L00?_I?_00?.fastq.gz"
            }
          },
          {
            "undetermined": {
              "type": "file",
              "description": "Optional undetermined sample FASTQ files",
              "pattern": "Undetermined_S0_L00?_R?_00?.fastq.gz"
            }
          },
          {
            "undetermined_idx": {
              "type": "file",
              "description": "Optional undetermined index FASTQ files",
              "pattern": "Undetermined_S0_L00?_I?_00?.fastq.gz"
            }
          },
          {
            "reports": {
              "type": "file",
              "description": "Demultiplexing Reports",
              "pattern": "Reports/*.{csv,xml}"
            }
          },
          {
            "logs": {
              "type": "file",
              "description": "Log files",
              "pattern": "Logs/*.{log,txt}"
            }
          },
          {
            "interop": {
              "type": "file",
              "description": "Interop files",
              "pattern": "*.{bin}"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      },
      "subworkflows": [
        "bcl_demultiplex"
      ],
      "pipelines": [
        {
          "name": "demultiplex",
          "version": "1.3.2"
        }
      ]
    },
    {
      "name": "beagle5_beagle",
      "path": "modules/nf-core/beagle5/beagle/meta.yml",
      "type": "module",
      "meta": {
        "name": "beagle5_beagle",
        "description": "Beagle v5.2 is a software package for phasing genotypes and for imputing ungenotyped markers.",
        "keywords": [
          "phasing",
          "imputation"
        ],
        "tools": [
          {
            "beagle5": {
              "description": "Beagle is a software package for phasing genotypes and for imputing ungenotyped markers.",
              "homepage": "https://faculty.washington.edu/browning/beagle/b5_2.html",
              "documentation": "https://faculty.washington.edu/browning/beagle/beagle_5.2_13Oct21.pdf",
              "doi": "10.1016/j.ajhg.2021.08.005; doi:10.1016/j.ajhg.2018.07.015",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "target VCF input file to be imputed and or phased",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "ref": {
              "type": "file",
              "description": "reference panel in bref3 or VCF format",
              "pattern": "*.{vcf,vcf.gz,bref3}"
            }
          },
          {
            "genmap": {
              "type": "file",
              "description": "a PLINK format genetic map with cM units",
              "pattern": "*.{map,map.gz,map.zip}"
            }
          },
          {
            "exclsamples": {
              "type": "file",
              "description": "text file containing samples one sample per line to be excluded from the analysis",
              "pattern": "*.*"
            }
          },
          {
            "exclmarkers": {
              "type": "file",
              "description": "text file containing markers one marker per line to be excluded from the analysis",
              "pattern": "*.*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "bgzip compressed VCF file that contains phased non missing genotypes for all non reference samples",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "a summary of the analysis that includes the Beagle version, the command line arguments, and compute time.",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@ashotmarg"
        ]
      }
    },
    {
      "name": "bedtools_bamtobed",
      "path": "modules/nf-core/bedtools/bamtobed/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_bamtobed",
        "description": "Converts a bam file to a bed12 file.",
        "keywords": [
          "bam",
          "bed",
          "bedtools",
          "bamtobed",
          "converter"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/complement.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Input BAM file",
              "pattern": "*.{bam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Bed file containing genomic intervals.",
              "pattern": "*.{bed}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@yuukiiwa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "ssds",
          "version": "dev"
        }
      ]
    },
    {
      "name": "bedtools_closest",
      "path": "modules/nf-core/bedtools/closest/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_closest",
        "description": "For each feature in A, finds the closest feature (upstream or downstream) in B.",
        "keywords": [
          "bedtools",
          "closest",
          "bed",
          "vcf",
          "gff"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/closest.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_1": {
              "type": "file",
              "description": "The file to find the closest features of",
              "pattern": "*.{bed,vcf,gff}(.gz)?"
            }
          },
          {
            "input_2": {
              "type": "file(s)",
              "description": "The input file(s) to find the closest features from",
              "pattern": "*.{bed,vcf,gff}(.gz)?"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the FASTA reference. Needed when the argument `--sorted` is used",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "The resulting BED file containing the closest features",
              "pattern": "*.{bed,vcf,gff}"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "bedtools_complement",
      "path": "modules/nf-core/bedtools/complement/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_complement",
        "description": "Returns all intervals in a genome that are not covered by at least one interval in the input BED/GFF/VCF file.",
        "keywords": [
          "bed",
          "complement"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/complement.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Input BED file",
              "pattern": "*.{bed}"
            }
          },
          {
            "sizes": {
              "type": "file",
              "description": "File which defines the chromosome lengths for a given genome",
              "pattern": "*.{sizes}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Bed file with all genomic intervals that are not covered by at least one record from the input file.",
              "pattern": "*.{bed}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Emiller88",
          "@sruthipsuresh",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "cutandrun",
          "version": "3.1"
        }
      ]
    },
    {
      "name": "bedtools_coverage",
      "path": "modules/nf-core/bedtools/coverage/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_coverage",
        "description": "computes both the depth and breadth of coverage of features in file B on the features in file A",
        "keywords": [
          "bedtools",
          "coverage",
          "bam",
          "bed",
          "gff",
          "vcf",
          "histogram"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A powerful toolset for genome arithmetic",
              "homepage": "https://bedtools.readthedocs.io/en/latest/index.html",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/bedtools-suite.html",
              "tool_dev_url": "https://github.com/arq5x/bedtools2",
              "doi": "10.1093/bioinformatics/btq033",
              "licence": "['GPL v2', 'MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_A": {
              "type": "file",
              "description": "BAM/BED/GFF/VCF file",
              "pattern": "*.{bam,bed,gff,vcf}"
            }
          },
          {
            "input_B": {
              "type": "file",
              "description": "One or more BAM/BED/GFF/VCF file",
              "pattern": "*.{bam,bed,gff,vcf}"
            }
          },
          {
            "genome_file": {
              "type": "file",
              "description": "Optional reference genome 2 column file that defines the expected chromosome order\nin the input files for use with the -sorted option.\nWhen `genome_file` is provided, `-sorted` option is added to the command.\n",
              "pattern": "*.{fai,txt,chromsizes}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "File containing coverage of sequence alignments",
              "pattern": "*.bed"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@priyanka-surana"
        ]
      }
    },
    {
      "name": "bedtools_genomecov",
      "path": "modules/nf-core/bedtools/genomecov/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_genomecov",
        "description": "Computes histograms (default), per-base reports (-d) and BEDGRAPH (-bg) summaries of feature coverage (e.g., aligned sequences) for a given genome.",
        "keywords": [
          "bed",
          "bam",
          "genomecov",
          "bedtools",
          "histogram"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "BAM/BED/GFF/VCF",
              "pattern": "*.{bam|bed|gff|vcf}"
            }
          },
          {
            "scale": {
              "type": "integer",
              "description": "Number containing the scale factor for the output. Set to 1 to disable. Setting to a value other than 1 will also get the -bg bedgraph output format as this is required for this command switch"
            }
          },
          {
            "sizes": {
              "type": "file",
              "description": "Tab-delimited table of chromosome names in the first column and chromosome sizes in the second column"
            }
          },
          {
            "extension": {
              "type": "string",
              "description": "Extension of the output file (e. g., \".bg\", \".bedgraph\", \".txt\", \".tab\", etc.) It is set arbitrarily by the user and corresponds to the file format which depends on arguments."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "genomecov": {
              "type": "file",
              "description": "Computed genome coverage file",
              "pattern": "*.${extension}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Emiller88",
          "@sruthipsuresh",
          "@drpatelh",
          "@sidorov-si",
          "@chris-cheshire"
        ]
      },
      "pipelines": [
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        }
      ]
    },
    {
      "name": "bedtools_getfasta",
      "path": "modules/nf-core/bedtools/getfasta/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_getfasta",
        "description": "extract sequences in a FASTA file based on intervals defined in a feature file.",
        "keywords": [
          "bed",
          "fasta",
          "getfasta"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/intersect.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "bed": {
              "type": "file",
              "description": "Bed feature file",
              "pattern": "*.{bed}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input fasta file",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "fasta": {
              "type": "file",
              "description": "Output fasta file with extracted sequences",
              "pattern": "*.{fa}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bedtools_intersect",
      "path": "modules/nf-core/bedtools/intersect/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_intersect",
        "description": "Allows one to screen for overlaps between two sets of genomic features.",
        "keywords": [
          "bed",
          "intersect",
          "overlap"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/intersect.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "intervals1": {
              "type": "file",
              "description": "BAM/BED/GFF/VCF",
              "pattern": "*.{bam|bed|gff|vcf}"
            }
          },
          {
            "intervals2": {
              "type": "file",
              "description": "BAM/BED/GFF/VCF",
              "pattern": "*.{bam|bed|gff|vcf}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference chromosome sizes\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "chrom_sizes": {
              "type": "file",
              "description": "Chromosome sizes file",
              "pattern": "*{.sizes,.txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "intersect": {
              "type": "file",
              "description": "File containing the description of overlaps found between the two features",
              "pattern": "*.${extension}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Emiller88",
          "@sruthipsuresh",
          "@drpatelh",
          "@sidorov-si"
        ]
      },
      "pipelines": [
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        }
      ]
    },
    {
      "name": "bedtools_jaccard",
      "path": "modules/nf-core/bedtools/jaccard/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_jaccard",
        "description": "Calculate Jaccard statistic b/w two feature files.",
        "keywords": [
          "vcf",
          "gff",
          "bed",
          "jaccard",
          "intersection",
          "union",
          "statistics"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/intersect.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_a": {
              "type": "file",
              "description": "VCF,GFF or BED file to use with the `-a` option",
              "pattern": "*.{vcf,vcf.gz,bed,bed.gz,gff}"
            }
          },
          {
            "input_b": {
              "type": "file",
              "description": "VCF,GFF or BED file to use with the `-b` option",
              "pattern": "*.{vcf,vcf.gz,bed,bed.gz,gff}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing genome file information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "genome_file": {
              "type": "file",
              "description": "A file containing all the contigs of the genome used to create the input files",
              "pattern": "*.{txt,sizes,fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "TSV file containing the results",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "bedtools_makewindows",
      "path": "modules/nf-core/bedtools/makewindows/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_makewindows",
        "description": "Makes adjacent or sliding windows across a genome or BED file.",
        "keywords": [
          "bed",
          "windows",
          "fai",
          "chunking"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.",
              "homepage": "https://bedtools.readthedocs.io",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/makewindows.html",
              "doi": "10.1093/bioinformatics/btq033",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "regions": {
              "type": "file",
              "description": "BED file OR Genome details file (<chromName><TAB><chromSize>)",
              "pattern": "*.{bed,tab,fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file containing the windows",
              "pattern": "*.bed"
            }
          }
        ],
        "authors": [
          "@kevbrick",
          "@nvnieuwk"
        ]
      },
      "pipelines": [
        {
          "name": "ssds",
          "version": "dev"
        }
      ]
    },
    {
      "name": "bedtools_map",
      "path": "modules/nf-core/bedtools/map/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_map",
        "description": "Allows one to screen for overlaps between two sets of genomic features.",
        "keywords": [
          "bed",
          "vcf",
          "gff",
          "map",
          "bedtools"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/map.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "intervals1": {
              "type": "file",
              "description": "BAM/BED/GFF/VCF",
              "pattern": "*.{bed|gff|vcf}"
            }
          },
          {
            "intervals2": {
              "type": "file",
              "description": "BAM/BED/GFF/VCF",
              "pattern": "*.{bed|gff|vcf}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference chromosome sizes\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "chrom_sizes": {
              "type": "file",
              "description": "Chromosome sizes file",
              "pattern": "*{.sizes,.txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "map": {
              "type": "file",
              "description": "File containing the description of overlaps found between the features in A and the features in B, with statistics",
              "pattern": "*.${extension}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ekushele"
        ]
      }
    },
    {
      "name": "bedtools_maskfasta",
      "path": "modules/nf-core/bedtools/maskfasta/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_maskfasta",
        "description": "masks sequences in a FASTA file based on intervals defined in a feature file.",
        "keywords": [
          "bed",
          "fasta",
          "maskfasta"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/intersect.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Bed feature file",
              "pattern": "*.{bed}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input fasta file",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Output masked fasta file",
              "pattern": "*.{fa}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bedtools_merge",
      "path": "modules/nf-core/bedtools/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_merge",
        "description": "combines overlapping or “book-ended” features in an interval file into a single feature which spans all of the combined features.",
        "keywords": [
          "bed",
          "merge",
          "bedtools",
          "overlapped bed"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/merge.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Input BED file",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Overlapped bed file with combined features",
              "pattern": "*.{bed}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Emiller88",
          "@sruthipsuresh",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bedtools_multiinter",
      "path": "modules/nf-core/bedtools/multiinter/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_multiinter",
        "description": "Identifies common intervals among multiple (and subsets thereof) sorted BED/GFF/VCF files.",
        "keywords": [
          "bedtools",
          "multinterval",
          "bed",
          "vcf",
          "gff"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/multiinter.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "beds": {
              "type": "list",
              "description": "List of files to be merged",
              "pattern": "*.{bed,vcf,gff}"
            }
          },
          {
            "chrom_sizes": {
              "type": "file",
              "description": "Chromosome sizes file",
              "pattern": "*{.sizes,.txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Common interval bed",
              "pattern": "*.{bed}"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "bedtools_shift",
      "path": "modules/nf-core/bedtools/shift/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_shift",
        "description": "Shifts each feature by specific number of bases",
        "keywords": [
          "bed",
          "shiftBed",
          "region",
          "fai",
          "sizes",
          "genome",
          "bases"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/slop.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Input BED file",
              "pattern": "*.{bed}"
            }
          },
          {
            "chrom_sizes": {
              "type": "file",
              "description": "Chromosome sizes file",
              "pattern": "*{.sizes,.txt,.fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Shift BED file",
              "pattern": "*.{bed}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ekushele"
        ]
      }
    },
    {
      "name": "bedtools_slop",
      "path": "modules/nf-core/bedtools/slop/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_slop",
        "description": "Adds a specified number of bases in each direction (unique values may be specified for either -l or -r)",
        "keywords": [
          "bed",
          "slopBed",
          "bedtools"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/slop.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Input BED file",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Slopped BED file",
              "pattern": "*.{bed}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Emiller88",
          "@sruthipsuresh",
          "@drpatelh"
        ]
      }
    },
    {
      "name": "bedtools_sort",
      "path": "modules/nf-core/bedtools/sort/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_sort",
        "description": "Sorts a feature file by chromosome and other criteria.",
        "keywords": [
          "bed",
          "sort",
          "bedtools",
          "chromosome"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/sort.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "BED/BEDGRAPH",
              "pattern": "*.{bed|bedGraph}"
            }
          },
          {
            "genome_file": {
              "type": "file",
              "description": "Optional reference genome 2 column file that defines the expected chromosome order.\n",
              "pattern": "*.{fai,txt,chromsizes}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sorted": {
              "type": "file",
              "description": "Sorted output file",
              "pattern": "*.${extension}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Emiller88",
          "@sruthipsuresh",
          "@drpatelh",
          "@chris-cheshire",
          "@adamrtalbot"
        ]
      },
      "pipelines": [
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "ssds",
          "version": "dev"
        }
      ]
    },
    {
      "name": "bedtools_split",
      "path": "modules/nf-core/bedtools/split/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_split",
        "description": "Split BED files into several smaller BED files",
        "keywords": [
          "bedtools",
          "split",
          "bed"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A powerful toolset for genome arithmetic",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/sort.html",
              "licence": "['MIT', 'GPL v2']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "beds": {
              "type": "file",
              "description": "list of split BED files",
              "pattern": "*.bed"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "bedtools_subtract",
      "path": "modules/nf-core/bedtools/subtract/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_subtract",
        "description": "Finds overlaps between two sets of regions (A and B), removes the overlaps from A and reports the remaining portion of A.",
        "keywords": [
          "bed",
          "gff",
          "vcf",
          "subtract"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/subtract.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "intervals1": {
              "type": "file",
              "description": "BED/GFF/VCF",
              "pattern": "*.{bed|gff|vcf}"
            }
          },
          {
            "intervals2": {
              "type": "file",
              "description": "BED/GFF/VCF",
              "pattern": "*.{bed|gff|vcf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "File containing the difference between the two sets of features",
              "patters": "*.bed"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sidorov-si"
        ]
      }
    },
    {
      "name": "bedtools_unionbedg",
      "path": "modules/nf-core/bedtools/unionbedg/meta.yml",
      "type": "module",
      "meta": {
        "name": "bedtools_unionbedg",
        "description": "Combines multiple BedGraph files into a single file",
        "keywords": [
          "bed",
          "unionBedGraphs",
          "bedGraph",
          "comparisons",
          "combine"
        ],
        "tools": [
          {
            "bedtools": {
              "description": "A set of tools for genomic analysis tasks, specifically enabling genome arithmetic (merge, count, complement) on various file types.\n",
              "documentation": "https://bedtools.readthedocs.io/en/latest/content/tools/slop.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bedgraph": {
              "type": "file",
              "description": "Input BedGraph file: four column BED format, with 4th column with numerical values: integer or real, positive or negative\n",
              "pattern": "*.{bedGraph,bedgraph}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing meta information for the reference chromosome sizes\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "chrom_sizes": {
              "type": "file",
              "description": "Chromosome sizes file",
              "pattern": "*{.sizes,.txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Combined BED file with values from all bedGraph files",
              "pattern": "*.{bed}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ekushele"
        ]
      }
    },
    {
      "name": "bioawk",
      "path": "modules/nf-core/bioawk/meta.yml",
      "type": "module",
      "meta": {
        "name": "bioawk",
        "description": "Bioawk is an extension to Brian Kernighan's awk, adding the support of several common biological data formats.",
        "keywords": [
          "bioawk",
          "fastq",
          "fasta",
          "sam",
          "file manipulation",
          "awk"
        ],
        "tools": [
          {
            "bioawk": {
              "description": "BWK awk modified for biological data",
              "homepage": "https://github.com/lh3/bioawk",
              "documentation": "https://github.com/lh3/bioawk",
              "tool_dev_url": "https://github.com/lh3/bioawk",
              "licence": "['Free software license (https://github.com/lh3/bioawk/blob/master/README.awk#L1)']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Input sequence biological sequence file (optionally gzipped) to be manipulated via program specified in `$args`.",
              "pattern": "*.{bed,gff,sam,vcf,fastq,fasta,tab,bed.gz,gff.gz,sam.gz,vcf.gz,fastq.gz,fasta.gz,tab.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "Manipulated and gzipped version of input sequence file following program specified in `args`.\nFile name will be what is specified in `$prefix`. Do not include `.gz` suffix in `$prefix`! Output files` will be gzipped for you!\n",
              "pattern": "*.gz"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "biobambam_bammarkduplicates2",
      "path": "modules/nf-core/biobambam/bammarkduplicates2/meta.yml",
      "type": "module",
      "meta": {
        "name": "biobambam_bammarkduplicates2",
        "description": "Locate and tag duplicate reads in a BAM file",
        "keywords": [
          "markduplicates",
          "bam",
          "cram"
        ],
        "tools": [
          {
            "biobambam": {
              "description": "biobambam is a set of tools for early stage alignment file processing.\n",
              "homepage": "https://gitlab.com/german.tischler/biobambam2",
              "documentation": "https://gitlab.com/german.tischler/biobambam2/-/blob/master/README.md",
              "doi": "10.1186/1751-0473-9-13",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file with duplicate reads marked/removed",
              "pattern": "*.{bam}"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Duplicate metrics file generated by biobambam",
              "pattern": "*.{metrics.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@muffato"
        ]
      }
    },
    {
      "name": "biobambam_bammerge",
      "path": "modules/nf-core/biobambam/bammerge/meta.yml",
      "type": "module",
      "meta": {
        "name": "biobambam_bammerge",
        "description": "Merge a list of sorted bam files",
        "keywords": [
          "merge",
          "bam"
        ],
        "tools": [
          {
            "biobambam": {
              "description": "biobambam is a set of tools for early stage alignment file processing.\n",
              "homepage": "https://gitlab.com/german.tischler/biobambam2",
              "documentation": "https://gitlab.com/german.tischler/biobambam2/-/blob/master/README.md",
              "doi": "10.1186/1751-0473-9-13",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "List containing 1 or more bam files"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Merged BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bam_index": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*"
            }
          },
          {
            "checksum": {
              "type": "file",
              "description": "Checksum file",
              "pattern": "*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "biobambam_bamsormadup",
      "path": "modules/nf-core/biobambam/bamsormadup/meta.yml",
      "type": "module",
      "meta": {
        "name": "biobambam_bamsormadup",
        "description": "Parallel sorting and duplicate marking",
        "keywords": [
          "markduplicates",
          "sort",
          "bam",
          "cram"
        ],
        "tools": [
          {
            "biobambam": {
              "description": "biobambam is a set of tools for early stage alignment file processing.\n",
              "homepage": "https://gitlab.com/german.tischler/biobambam2",
              "documentation": "https://gitlab.com/german.tischler/biobambam2/-/blob/master/README.md",
              "doi": "10.1186/1751-0473-9-13",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bams": {
              "type": "file",
              "description": "List containing 1 or more bam files"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome in FASTA format (optional)",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM file with duplicate reads marked/removed",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "bam_index": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.{bai}"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Duplicate metrics file generated by biobambam",
              "pattern": "*.{metrics.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "biohansel",
      "path": "modules/nf-core/biohansel/meta.yml",
      "type": "module",
      "meta": {
        "name": "biohansel",
        "description": "Use k-mers to rapidly subtype S. enterica genomes",
        "keywords": [
          "Salmonella enterica",
          "subtyping",
          "prokaryote"
        ],
        "tools": [
          {
            "biohansel": {
              "description": "Subtype Salmonella enterica genomes using 33bp k-mer typing schemes.",
              "homepage": "https://github.com/phac-nml/biohansel",
              "documentation": "https://github.com/phac-nml/biohansel",
              "tool_dev_url": "https://github.com/phac-nml/biohansel",
              "doi": "10.1101/2020.01.10.902056",
              "licence": "['Apache-2.0 license']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "seqs": {
              "type": "file",
              "description": "FASTA or FASTQ",
              "pattern": "*.{fasta.gz,fa.gz,fna.gz,fastq.gz,fq.gz}"
            }
          },
          {
            "scheme_metadata": {
              "type": "file",
              "description": "Scheme subtype metadata table",
              "pattern": "*.{tab,tsv,txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "Tab-delimited subtyping summary output",
              "pattern": "*summary.txt"
            }
          },
          {
            "kmer_results": {
              "type": "file",
              "description": "Tab-delimited subtyping kmer matching output",
              "pattern": "*kmer-results.txt"
            }
          },
          {
            "simple_summary": {
              "type": "file",
              "description": "A simple version of summary output",
              "pattern": "*simple-summary.txt"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "biscuit_align",
      "path": "modules/nf-core/biscuit/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "biscuit_align",
        "description": "Aligns single- or paired-end reads from bisulfite-converted libraries to a reference genome using Biscuit.",
        "keywords": [
          "biscuit",
          "DNA methylation",
          "WGBS",
          "scWGBS",
          "bisulfite sequencing",
          "aligner",
          "bam"
        ],
        "tools": [
          {
            "biscuit": {
              "description": "A utility for analyzing sodium bisulfite conversion-based DNA methylation/modification data",
              "homepage": "https://huishenlab.github.io/biscuit/",
              "documentation": "https://huishenlab.github.io/biscuit/docs/alignment",
              "tool_dev_url": "https://github.com/huishenlab/biscuit",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input fastq files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "Biscuit genome index directory (generated with 'biscuit index')",
              "pattern": "BiscuitIndex"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Output BAM index",
              "pattern": "*.{bai}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@njspix"
        ]
      }
    },
    {
      "name": "biscuit_biscuitblaster",
      "path": "modules/nf-core/biscuit/biscuitblaster/meta.yml",
      "type": "module",
      "meta": {
        "name": "biscuit_blaster",
        "description": "A fast, compact one-liner to produce duplicate-marked, sorted, and indexed BAM files using Biscuit",
        "keywords": [
          "biscuit",
          "DNA methylation",
          "WGBS",
          "scWGBS",
          "bisulfite sequencing",
          "aligner",
          "bam"
        ],
        "tools": [
          {
            "biscuit": {
              "description": "A utility for analyzing sodium bisulfite conversion-based DNA methylation/modification data",
              "homepage": "https://huishenlab.github.io/biscuit/",
              "documentation": "https://huishenlab.github.io/biscuit/biscuitblaster/",
              "tool_dev_url": "https://github.com/huishenlab/biscuit",
              "licence": [
                "MIT"
              ]
            }
          },
          {
            "samblaster": {
              "description": "samblaster is a fast and flexible program for marking duplicates in read-id grouped paired-end SAM files.\nIt can also optionally output discordant read pairs and/or split read mappings to separate SAM files,\nand/or unmapped/clipped reads to a separate FASTQ file.\nBy default, samblaster reads SAM input from stdin and writes SAM to stdout.\n",
              "documentation": "https://github.com/GregoryFaust/samblaster",
              "tool_dev_url": "https://github.com/GregoryFaust/samblaster",
              "doi": "10.1093/bioinformatics/btu314",
              "licence": [
                "MIT"
              ]
            }
          },
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input fastq files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "Biscuit genome index directory (generated with 'biscuit index')",
              "pattern": "BiscuitIndex"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Output BAM index",
              "pattern": "*.{bai}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@njspix"
        ]
      }
    },
    {
      "name": "biscuit_bsconv",
      "path": "modules/nf-core/biscuit/bsconv/meta.yml",
      "type": "module",
      "meta": {
        "name": "biscuit_bsconv",
        "description": "Summarize and/or filter reads based on bisulfite conversion rate",
        "keywords": [
          "biscuit",
          "DNA methylation",
          "WGBS",
          "scWGBS",
          "bisulfite sequencing",
          "aligner",
          "bam",
          "filter"
        ],
        "tools": [
          {
            "biscuit": {
              "description": "A utility for analyzing sodium bisulfite conversion-based DNA methylation/modification data",
              "homepage": "https://huishenlab.github.io/biscuit/",
              "documentation": "https://huishenlab.github.io/biscuit/docs/subcommand_help.html#biscuit-bsconv",
              "tool_dev_url": "https://github.com/huishenlab/biscuit",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file contained mapped reads"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM file index"
            }
          },
          {
            "index": {
              "type": "dir",
              "description": "Biscuit genome index directory (generated with 'biscuit index')",
              "pattern": "BiscuitIndex"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bsconv_bam": {
              "type": "file",
              "description": "Output BAM file containing filtered read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@njspix"
        ]
      }
    },
    {
      "name": "biscuit_epiread",
      "path": "modules/nf-core/biscuit/epiread/meta.yml",
      "type": "module",
      "meta": {
        "name": "biscuit_epiread",
        "description": "Summarizes read-level methylation (and optionally SNV) information from a\nBiscuit BAM file in a standard-compliant BED format.\n",
        "keywords": [
          "biscuit",
          "DNA methylation",
          "WGBS",
          "scWGBS",
          "bisulfite sequencing",
          "aligner",
          "bam"
        ],
        "tools": [
          {
            "biscuit": {
              "description": "A utility for analyzing sodium bisulfite conversion-based DNA methylation/modification data",
              "homepage": "https://huishenlab.github.io/biscuit/",
              "documentation": "https://huishenlab.github.io/biscuit/epiread_format/",
              "tool_dev_url": "https://github.com/huishenlab/biscuit",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Biscuit BAM file"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index"
            }
          },
          {
            "snp_bed": {
              "type": "file",
              "description": "BED file containing SNP information (optional)"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "Biscuit genome index directory (generated with 'biscuit index')",
              "pattern": "BiscuitIndex"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "epiread_bed": {
              "type": "file",
              "description": "Gzipped BED file with methylation (and optionally SNV) information",
              "pattern": "*.{epiread.bed.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@njspix"
        ]
      }
    },
    {
      "name": "biscuit_index",
      "path": "modules/nf-core/biscuit/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "biscuit_index",
        "description": "Indexes a reference genome for use with Biscuit",
        "keywords": [
          "biscuit",
          "DNA methylation",
          "WGBS",
          "scWGBS",
          "bisulfite sequencing",
          "index",
          "reference",
          "fasta"
        ],
        "tools": [
          {
            "biscuit": {
              "description": "A utility for analyzing sodium bisulfite conversion-based DNA methylation/modification data",
              "homepage": "https://huishenlab.github.io/biscuit/",
              "documentation": "https://huishenlab.github.io/biscuit/docs/alignment",
              "tool_dev_url": "https://github.com/huishenlab/biscuit",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          }
        ],
        "output": [
          {
            "index": {
              "type": "dir",
              "description": "Biscuit genome index directory",
              "pattern": "BiscuitIndex"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@njspix"
        ]
      }
    },
    {
      "name": "biscuit_mergecg",
      "path": "modules/nf-core/biscuit/mergecg/meta.yml",
      "type": "module",
      "meta": {
        "name": "biscuit_mergecg",
        "description": "Merges methylation information for opposite-strand C's in a CpG context",
        "keywords": [
          "biscuit",
          "DNA methylation",
          "WGBS",
          "scWGBS",
          "bisulfite sequencing",
          "aligner",
          "bed"
        ],
        "tools": [
          {
            "biscuit": {
              "description": "A utility for analyzing sodium bisulfite conversion-based DNA methylation/modification data",
              "homepage": "https://huishenlab.github.io/biscuit/",
              "documentation": "https://huishenlab.github.io/biscuit/docs/methylextraction.html",
              "tool_dev_url": "https://github.com/huishenlab/biscuit",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Biscuit BED file (output of biscuit vcf2bed)\n"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "Biscuit genome index directory (generated with 'biscuit index')",
              "pattern": "BiscuitIndex"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "mergecg_bed": {
              "type": "file",
              "description": "Gzipped BED file with merged methylation information",
              "pattern": "*.bed.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@njspix"
        ]
      }
    },
    {
      "name": "biscuit_pileup",
      "path": "modules/nf-core/biscuit/pileup/meta.yml",
      "type": "module",
      "meta": {
        "name": "biscuit_pileup",
        "description": "Computes cytosine methylation and callable SNV mutations, optionally in reference to a germline BAM to call somatic variants",
        "keywords": [
          "bisulfite",
          "DNA methylation",
          "pileup",
          "variant calling",
          "WGBS",
          "scWGBS",
          "bam",
          "vcf"
        ],
        "tools": [
          {
            "biscuit": {
              "description": "A utility for analyzing sodium bisulfite conversion-based DNA methylation/modification data",
              "homepage": "https://huishenlab.github.io/biscuit/",
              "documentation": "https://huishenlab.github.io/biscuit/docs/pileup.html",
              "tool_dev_url": "https://github.com/huishenlab/biscuit",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "normal_bams": {
              "type": "file",
              "description": "BAM files to be analyzed. If no tumor_bam file is provided, any number of \"normal\" BAMs may be provided\n(\"normal\" here is just a semantic issue, these BAMs could be from tumor or any other kind of tissue). If a\ntumor BAM file is provided, exactly one normal (germline) BAM must be provided.\n",
              "pattern": "*.{bam}"
            }
          },
          {
            "normal_bais": {
              "type": "file",
              "description": "BAM index file or files corresponding to the provided normal_bams",
              "pattern": "*.{bai}"
            }
          },
          {
            "tumor_bam": {
              "type": "file",
              "description": "Optional. If a tumor BAM file is provided, pileup will run in \"somatic\" mode and will annotate variants with\ntheir somatic state (present in tumor only, present in normal only, present in both, etc). Note that if a\ntumor BAM file is provided, exactly one normal BAM must be provided.\n",
              "pattern": "*.{bam}"
            }
          },
          {
            "tumor_bai": {
              "type": "file",
              "description": "Optional. BAM index file corresponding to provided tumor_bam",
              "pattern": "*.{bai}"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "Biscuit genome index directory (generated with 'biscuit index')",
              "pattern": "BiscuitIndex"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "vcf file with methylation information",
              "pattern": "*.{vcf.gz}"
            }
          }
        ],
        "authors": [
          "@njspix"
        ]
      }
    },
    {
      "name": "biscuit_qc",
      "path": "modules/nf-core/biscuit/qc/meta.yml",
      "type": "module",
      "meta": {
        "name": "biscuit_qc",
        "description": "Perform basic quality control on a BAM file generated with Biscuit",
        "keywords": [
          "biscuit",
          "DNA methylation",
          "WGBS",
          "scWGBS",
          "bisulfite sequencing",
          "index",
          "BAM",
          "quality control"
        ],
        "tools": [
          {
            "biscuit": {
              "description": "A utility for analyzing sodium bisulfite conversion-based DNA methylation/modification data",
              "homepage": "https://huishenlab.github.io/biscuit/",
              "documentation": "https://huishenlab.github.io/biscuit/docs/subcommand_help.html#biscuit-qc",
              "tool_dev_url": "https://github.com/huishenlab/biscuit",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file produced using Biscuit"
            }
          }
        ],
        "output": [
          {
            "biscuit_qc_reports": {
              "type": "file",
              "description": "Summary files containing the following information:\n  - CpG retention by position in read\n  - CpH retention by position in read\n  - Read duplication statistics\n  - Insert size distribution\n  - Distribution of mapping qualities\n  - Proportion of reads mapping to each strand\n  - Read-averaged cytosine conversion rate for CpA, CpC, CpG, and CpT\n",
              "pattern": "*.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@njspix"
        ]
      }
    },
    {
      "name": "biscuit_vcf2bed",
      "path": "modules/nf-core/biscuit/vcf2bed/meta.yml",
      "type": "module",
      "meta": {
        "name": "biscuit_vcf2bed",
        "description": "Summarizes methylation or SNV information from a Biscuit VCF in a\nstandard-compliant BED file.\n",
        "keywords": [
          "biscuit",
          "DNA methylation",
          "WGBS",
          "scWGBS",
          "bisulfite sequencing",
          "aligner",
          "vcf"
        ],
        "tools": [
          {
            "biscuit": {
              "description": "A utility for analyzing sodium bisulfite conversion-based DNA methylation/modification data",
              "homepage": "https://huishenlab.github.io/biscuit/",
              "documentation": "https://huishenlab.github.io/biscuit/docs/methylextraction.html",
              "tool_dev_url": "https://github.com/huishenlab/biscuit",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Biscuit vcf file (output of biscuit pileup)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Gzipped BED file with methylation or SNV information",
              "pattern": "*.{bed.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@njspix"
        ]
      }
    },
    {
      "name": "bismark_align",
      "path": "modules/nf-core/bismark/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "bismark_align",
        "description": "Performs alignment of BS-Seq reads using bismark",
        "keywords": [
          "bismark",
          "3-letter genome",
          "map",
          "methylation",
          "5mC",
          "methylseq",
          "bisulphite",
          "bisulfite",
          "bam"
        ],
        "tools": [
          {
            "bismark": {
              "description": "Bismark is a tool to map bisulfite treated sequencing reads\nand perform methylation calling in a quick and easy-to-use fashion.\n",
              "homepage": "https://github.com/FelixKrueger/Bismark",
              "documentation": "https://github.com/FelixKrueger/Bismark/tree/master/Docs",
              "doi": "10.1093/bioinformatics/btr167",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "index": {
              "type": "dir",
              "description": "Bismark genome index directory",
              "pattern": "BismarkIndex"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "unmapped": {
              "type": "file",
              "description": "Output FastQ file(s) containing unmapped reads",
              "pattern": "*.{fq.gz}"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Bismark alignment reports",
              "pattern": "*{report.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@phue"
        ]
      },
      "pipelines": [
        {
          "name": "methylseq",
          "version": "2.4.0"
        }
      ]
    },
    {
      "name": "bismark_coverage2cytosine",
      "path": "modules/nf-core/bismark/coverage2cytosine/meta.yml",
      "type": "module",
      "meta": {
        "name": "bismark_coverage2cytosine",
        "description": "Relates methylation calls back to genomic cytosine contexts.",
        "keywords": [
          "bismark",
          "consensus",
          "map",
          "methylation",
          "5mC",
          "methylseq",
          "bisulphite",
          "bisulfite",
          "bam",
          "bedGraph"
        ],
        "tools": [
          {
            "bismark": {
              "description": "Bismark is a tool to map bisulfite treated sequencing reads\nand perform methylation calling in a quick and easy-to-use fashion.\n",
              "homepage": "https://github.com/FelixKrueger/Bismark",
              "documentation": "https://github.com/FelixKrueger/Bismark/tree/master/Docs",
              "doi": "10.1093/bioinformatics/btr167",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "coverage_file": {
              "type": "file",
              "description": "A file containing methylation calls per position, in the format produced by bismark_methylation_extractor.\n"
            }
          },
          {
            "index": {
              "type": "dir",
              "description": "Bismark genome index directory",
              "pattern": "BismarkIndex"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "coverage": {
              "type": "file",
              "description": "A file containing methylation calls per position.",
              "pattern": "*.cov.gz"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Genomic cytosine context results.",
              "pattern": "*report.txt.gz"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "Cyotosine context summary report.",
              "pattern": "*cytosine_context_summary.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ewels"
        ]
      },
      "pipelines": [
        {
          "name": "methylseq",
          "version": "2.4.0"
        }
      ]
    },
    {
      "name": "bismark_deduplicate",
      "path": "modules/nf-core/bismark/deduplicate/meta.yml",
      "type": "module",
      "meta": {
        "name": "bismark_deduplicate",
        "description": "Removes alignments to the same position in the genome\nfrom the Bismark mapping output.\n",
        "keywords": [
          "bismark",
          "3-letter genome",
          "map",
          "methylation",
          "5mC",
          "methylseq",
          "bisulphite",
          "bisulfite",
          "bam"
        ],
        "tools": [
          {
            "bismark": {
              "description": "Bismark is a tool to map bisulfite treated sequencing reads\nand perform methylation calling in a quick and easy-to-use fashion.\n",
              "homepage": "https://github.com/FelixKrueger/Bismark",
              "documentation": "https://github.com/FelixKrueger/Bismark/tree/master/Docs",
              "doi": "10.1093/bioinformatics/btr167",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Deduplicated output BAM file containing read alignments",
              "pattern": "*.{deduplicated.bam}"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Bismark deduplication reports",
              "pattern": "*.{deduplication_report.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@phue"
        ]
      },
      "pipelines": [
        {
          "name": "methylseq",
          "version": "2.4.0"
        }
      ]
    },
    {
      "name": "bismark_genomepreparation",
      "path": "modules/nf-core/bismark/genomepreparation/meta.yml",
      "type": "module",
      "meta": {
        "name": "bismark_genomepreparation",
        "description": "Converts a specified reference genome into two different bisulfite\nconverted versions and indexes them for alignments.\n",
        "keywords": [
          "bismark",
          "3-letter genome",
          "index",
          "methylation",
          "5mC",
          "methylseq",
          "bisulphite",
          "bisulfite",
          "fasta"
        ],
        "tools": [
          {
            "bismark": {
              "description": "Bismark is a tool to map bisulfite treated sequencing reads\nand perform methylation calling in a quick and easy-to-use fashion.\n",
              "homepage": "https://github.com/FelixKrueger/Bismark",
              "documentation": "https://github.com/FelixKrueger/Bismark/tree/master/Docs",
              "doi": "10.1093/bioinformatics/btr167",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          }
        ],
        "output": [
          {
            "index": {
              "type": "dir",
              "description": "Bismark genome index directory",
              "pattern": "BismarkIndex"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@phue"
        ]
      },
      "pipelines": [
        {
          "name": "methylseq",
          "version": "2.4.0"
        }
      ]
    },
    {
      "name": "bismark_methylationextractor",
      "path": "modules/nf-core/bismark/methylationextractor/meta.yml",
      "type": "module",
      "meta": {
        "name": "bismark_methylationextractor",
        "description": "Extracts methylation information for individual cytosines from alignments.",
        "keywords": [
          "bismark",
          "consensus",
          "map",
          "methylation",
          "5mC",
          "methylseq",
          "bisulphite",
          "bisulfite",
          "bam",
          "bedGraph"
        ],
        "tools": [
          {
            "bismark": {
              "description": "Bismark is a tool to map bisulfite treated sequencing reads\nand perform methylation calling in a quick and easy-to-use fashion.\n",
              "homepage": "https://github.com/FelixKrueger/Bismark",
              "documentation": "https://github.com/FelixKrueger/Bismark/tree/master/Docs",
              "doi": "10.1093/bioinformatics/btr167",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "index": {
              "type": "dir",
              "description": "Bismark genome index directory",
              "pattern": "BismarkIndex"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bedgraph": {
              "type": "file",
              "description": "Bismark output file containing coverage and methylation metrics",
              "pattern": "*.{bedGraph.gz}"
            }
          },
          {
            "methylation_calls": {
              "type": "file",
              "description": "Bismark output file containing strand-specific methylation calls",
              "pattern": "*.{txt.gz}"
            }
          },
          {
            "coverage": {
              "type": "file",
              "description": "Bismark output file containing coverage metrics",
              "pattern": "*.{cov.gz}"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Bismark splitting reports",
              "pattern": "*_{splitting_report.txt}"
            }
          },
          {
            "mbias": {
              "type": "file",
              "description": "Text file containing methylation bias information",
              "pattern": "*.{M-bias.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@phue"
        ]
      },
      "pipelines": [
        {
          "name": "methylseq",
          "version": "2.4.0"
        }
      ]
    },
    {
      "name": "bismark_report",
      "path": "modules/nf-core/bismark/report/meta.yml",
      "type": "module",
      "meta": {
        "name": "bismark_report",
        "description": "Collects bismark alignment reports",
        "keywords": [
          "bismark",
          "qc",
          "methylation",
          "5mC",
          "methylseq",
          "bisulphite",
          "bisulfite",
          "report"
        ],
        "tools": [
          {
            "bismark": {
              "description": "Bismark is a tool to map bisulfite treated sequencing reads\nand perform methylation calling in a quick and easy-to-use fashion.\n",
              "homepage": "https://github.com/FelixKrueger/Bismark",
              "documentation": "https://github.com/FelixKrueger/Bismark/tree/master/Docs",
              "doi": "10.1093/bioinformatics/btr167",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "align_report": {
              "type": "file",
              "description": "Bismark alignment reports",
              "pattern": "*{report.txt}"
            }
          },
          {
            "splitting_report": {
              "type": "file",
              "description": "Bismark splitting reports",
              "pattern": "*{splitting_report.txt}"
            }
          },
          {
            "dedup_report": {
              "type": "file",
              "description": "Bismark deduplication reports",
              "pattern": "*.{deduplication_report.txt}"
            }
          },
          {
            "mbias": {
              "type": "file",
              "description": "Text file containing methylation bias information",
              "pattern": "*.{txt}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Bismark reports",
              "pattern": "*.{html,txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@phue"
        ]
      },
      "pipelines": [
        {
          "name": "methylseq",
          "version": "2.4.0"
        }
      ]
    },
    {
      "name": "bismark_summary",
      "path": "modules/nf-core/bismark/summary/meta.yml",
      "type": "module",
      "meta": {
        "name": "bismark_summary",
        "description": "Uses Bismark report files of several samples in a run folder\nto generate a graphical summary HTML report.\n",
        "keywords": [
          "bismark",
          "qc",
          "methylation",
          "5mC",
          "methylseq",
          "bisulphite",
          "bisulfite",
          "report",
          "summary"
        ],
        "tools": [
          {
            "bismark": {
              "description": "Bismark is a tool to map bisulfite treated sequencing reads\nand perform methylation calling in a quick and easy-to-use fashion.\n",
              "homepage": "https://github.com/FelixKrueger/Bismark",
              "documentation": "https://github.com/FelixKrueger/Bismark/tree/master/Docs",
              "doi": "10.1093/bioinformatics/btr167",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "bam": {
              "type": "value",
              "description": "Array of Bismark alignment BAM filenames",
              "pattern": "*.bam"
            }
          },
          {
            "align_report": {
              "type": "file",
              "description": "Bismark alignment reports",
              "pattern": "*report.txt"
            }
          },
          {
            "dedup_report": {
              "type": "file",
              "description": "Bismark deduplication reports",
              "pattern": "*.deduplication_report.txt"
            }
          },
          {
            "splitting_report": {
              "type": "file",
              "description": "Bismark splitting reports",
              "pattern": "*splitting_report.txt"
            }
          },
          {
            "mbias": {
              "type": "file",
              "description": "Text file containing methylation bias information",
              "pattern": "*.txt"
            }
          }
        ],
        "output": [
          {
            "summary": {
              "type": "file",
              "description": "Bismark summary",
              "pattern": "*.{html,txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@phue"
        ]
      },
      "pipelines": [
        {
          "name": "methylseq",
          "version": "2.4.0"
        }
      ]
    },
    {
      "name": "blast_blastn",
      "path": "modules/nf-core/blast/blastn/meta.yml",
      "type": "module",
      "meta": {
        "name": "blast_blastn",
        "description": "Queries a BLAST DNA database",
        "keywords": [
          "fasta",
          "blast",
          "blastn",
          "DNA sequence"
        ],
        "tools": [
          {
            "blast": {
              "description": "BLAST finds regions of similarity between biological sequences.\n",
              "homepage": "https://blast.ncbi.nlm.nih.gov/Blast.cgi",
              "documentation": "https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=Blastdocs",
              "doi": "10.1016/S0022-2836(05)80360-2",
              "licence": [
                "US-Government-Work"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input fasta file containing queries sequences",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "Directory containing blast database",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "txt": {
              "type": "file",
              "description": "File containing blastn hits",
              "pattern": "*.{blastn.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "blast_makeblastdb",
      "path": "modules/nf-core/blast/makeblastdb/meta.yml",
      "type": "module",
      "meta": {
        "name": "blast_makeblastdb",
        "description": "Builds a BLAST database",
        "keywords": [
          "fasta",
          "blast",
          "database"
        ],
        "tools": [
          {
            "blast": {
              "description": "BLAST finds regions of similarity between biological sequences.\n",
              "homepage": "https://blast.ncbi.nlm.nih.gov/Blast.cgi",
              "documentation": "https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=Blastdocs",
              "doi": "10.1016/S0022-2836(05)80360-2",
              "licence": [
                "US-Government-Work"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Input fasta file",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "db": {
              "type": "directory",
              "description": "Output directory containing blast database files",
              "pattern": "*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "blast_tblastn",
      "path": "modules/nf-core/blast/tblastn/meta.yml",
      "type": "module",
      "meta": {
        "name": "blast_tblastn",
        "description": "Queries a BLAST DNA database",
        "keywords": [
          "fasta",
          "blast",
          "tblastn",
          "DNA sequence"
        ],
        "tools": [
          {
            "blast": {
              "description": "Protein to Translated Nucleotide BLAST.\n",
              "homepage": "https://blast.ncbi.nlm.nih.gov/Blast.cgi",
              "documentation": "https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=Blastdocs",
              "doi": "10.1016/S0022-2836(05)80360-2",
              "licence": [
                "US-Government-Work"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input fasta file containing queries sequences",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "Directory containing blast database",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "txt": {
              "type": "file",
              "description": "File containing blastn hits",
              "pattern": "*.{tblastn.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@yumisims",
          "@gq2"
        ]
      }
    },
    {
      "name": "bowtie2_align",
      "path": "modules/nf-core/bowtie2/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "bowtie2_align",
        "description": "Align reads to a reference genome using bowtie2",
        "keywords": [
          "align",
          "map",
          "fasta",
          "fastq",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "bowtie2": {
              "description": "Bowtie 2 is an ultrafast and memory-efficient tool for aligning\nsequencing reads to long reference sequences.\n",
              "homepage": "http://bowtie-bio.sourceforge.net/bowtie2/index.shtml",
              "documentation": "http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml",
              "doi": "10.1038/nmeth.1923",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Bowtie2 genome index files",
              "pattern": "*.ebwt"
            }
          },
          {
            "save_unaligned": {
              "type": "boolean",
              "description": "Save reads that do not map to the reference (true) or discard them (false)\n(default: false)\n"
            }
          },
          {
            "sort_bam": {
              "type": "boolean",
              "description": "use samtools sort (true) or samtools view (false)",
              "pattern": "true or false"
            }
          }
        ],
        "output": [
          {
            "aligned": {
              "type": "file",
              "description": "Output BAM/SAM file containing read alignments",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Unaligned FastQ files",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Aligment log",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "crisprseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "hic",
          "version": "2.1.0"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bowtie2_build",
      "path": "modules/nf-core/bowtie2/build/meta.yml",
      "type": "module",
      "meta": {
        "name": "bowtie2_build",
        "description": "Builds bowtie index for reference genome",
        "keywords": [
          "build",
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "bowtie2": {
              "description": "Bowtie 2 is an ultrafast and memory-efficient tool for aligning\nsequencing reads to long reference sequences.\n",
              "homepage": "http://bowtie-bio.sourceforge.net/bowtie2/index.shtml",
              "documentation": "http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml",
              "doi": "10.1038/nmeth.1923",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Bowtie2 genome index files",
              "pattern": "*.bt2"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "crisprseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "hic",
          "version": "2.1.0"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bowtie_align",
      "path": "modules/nf-core/bowtie/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "bowtie_align",
        "description": "Align reads to a reference genome using bowtie",
        "keywords": [
          "align",
          "map",
          "fastq",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "bowtie": {
              "description": "bowtie is a software package for mapping DNA sequences against\na large reference genome, such as the human genome.\n",
              "homepage": "http://bowtie-bio.sourceforge.net/index.shtml",
              "documentation": "http://bowtie-bio.sourceforge.net/manual.shtml",
              "arxiv": "arXiv:1303.3997",
              "licence": [
                "Artistic-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Bowtie genome index files",
              "pattern": "*.ebwt"
            }
          }
        ],
        "output": [
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Unaligned FastQ files",
              "pattern": "*.fastq.gz"
            }
          }
        ],
        "authors": [
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "circrna",
          "version": "dev"
        }
      ]
    },
    {
      "name": "bowtie_build",
      "path": "modules/nf-core/bowtie/build/meta.yml",
      "type": "module",
      "meta": {
        "name": "bowtie_build",
        "description": "Create bowtie index for reference genome",
        "keywords": [
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "bowtie": {
              "description": "bowtie is a software package for mapping DNA sequences against\na large reference genome, such as the human genome.\n",
              "homepage": "http://bowtie-bio.sourceforge.net/index.shtml",
              "documentation": "http://bowtie-bio.sourceforge.net/manual.shtml",
              "arxiv": "arXiv:1303.3997",
              "licence": [
                "Artistic-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          }
        ],
        "output": [
          {
            "index": {
              "type": "file",
              "description": "Bowtie genome index files",
              "pattern": "*.ebwt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kevinmenden",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "circrna",
          "version": "dev"
        }
      ]
    },
    {
      "name": "bracken_bracken",
      "path": "modules/nf-core/bracken/bracken/meta.yml",
      "type": "module",
      "meta": {
        "name": "bracken_bracken",
        "description": "Re-estimate taxonomic abundance of metagenomic samples analyzed by kraken.",
        "keywords": [
          "bracken",
          "metagenomics",
          "abundance",
          "kraken2"
        ],
        "tools": [
          {
            "bracken": {
              "description": "Bracken (Bayesian Reestimation of Abundance with KrakEN) is a highly accurate statistical method that computes the abundance of species in DNA sequences from a metagenomics sample.",
              "homepage": "https://ccb.jhu.edu/software/bracken/",
              "documentation": "https://ccb.jhu.edu/software/bracken/index.shtml?t=manual",
              "tool_dev_url": "https://github.com/jenniferlu717/Bracken",
              "doi": "10.7717/peerj-cs.104",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "kraken_report": {
              "type": "file",
              "description": "TSV file with six columns coming from kraken2 output",
              "pattern": "*.{tsv}"
            }
          },
          {
            "database": {
              "type": "file",
              "description": "Directory containing the kraken2/Bracken files for analysis",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reports": {
              "type": "file",
              "description": "TSV output report of the re-estimated abundances",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@Midnighter"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "bracken_combinebrackenoutputs",
      "path": "modules/nf-core/bracken/combinebrackenoutputs/meta.yml",
      "type": "module",
      "meta": {
        "name": "bracken_combinebrackenoutputs",
        "description": "Combine output of metagenomic samples analyzed by bracken.",
        "keywords": [
          "sort"
        ],
        "tools": [
          {
            "bracken": {
              "description": "Bracken (Bayesian Reestimation of Abundance with KrakEN) is a highly accurate statistical method that computes the abundance of species in DNA sequences from a metagenomics sample.",
              "homepage": "https://ccb.jhu.edu/software/bracken/",
              "documentation": "https://ccb.jhu.edu/software/bracken/index.shtml?t=manual",
              "tool_dev_url": "https://github.com/jenniferlu717/Bracken",
              "doi": "10.7717/peerj-cs.104",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "List of output files from bracken",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Combined output in table format",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "busco",
      "path": "modules/nf-core/busco/meta.yml",
      "type": "module",
      "meta": {
        "name": "busco",
        "description": "Benchmarking Universal Single Copy Orthologs",
        "keywords": [
          "quality control",
          "genome",
          "transcriptome",
          "proteome"
        ],
        "tools": [
          {
            "busco": {
              "description": "BUSCO provides measures for quantitative assessment of genome assembly, gene set, and transcriptome completeness based on evolutionarily informed expectations of gene content from near-universal single-copy orthologs selected from OrthoDB.",
              "homepage": "https://busco.ezlab.org/",
              "documentation": "https://busco.ezlab.org/busco_userguide.html",
              "tool_dev_url": "https://gitlab.com/ezlab/busco",
              "doi": "10.1007/978-1-4939-9173-0_14",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Nucleic or amino acid sequence file in FASTA format.",
              "pattern": "*.{fasta,fna,fa,fasta.gz,fna.gz,fa.gz}"
            }
          },
          {
            "lineage": {
              "type": "string",
              "description": "The BUSCO lineage to use, or \"auto\" to automatically select lineage"
            }
          },
          {
            "busco_lineages_path": {
              "type": "directory",
              "description": "Path to local BUSCO lineages directory."
            }
          },
          {
            "config_file": {
              "type": "file",
              "description": "Path to BUSCO config file."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "batch_summary": {
              "type": "file",
              "description": "Summary of all sequence files analyzed",
              "pattern": "*-busco.batch_summary.txt"
            }
          },
          {
            "short_summaries_txt": {
              "type": "file",
              "description": "Short Busco summary in plain text format",
              "pattern": "short_summary.*.txt"
            }
          },
          {
            "short_summaries_json": {
              "type": "file",
              "description": "Short Busco summary in JSON format",
              "pattern": "short_summary.*.json"
            }
          },
          {
            "busco_dir": {
              "type": "directory",
              "description": "BUSCO lineage specific output",
              "pattern": "*-busco"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@priyanka-surana",
          "@charles-plessy",
          "@mahesh-panchal",
          "@muffato",
          "@jvhagey"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "bwa_aln",
      "path": "modules/nf-core/bwa/aln/meta.yml",
      "type": "module",
      "meta": {
        "name": "bwa_aln",
        "description": "Find SA coordinates of the input reads for bwa short-read mapping",
        "keywords": [
          "bwa",
          "aln",
          "short-read",
          "align",
          "reference",
          "fasta",
          "map",
          "fastq"
        ],
        "tools": [
          {
            "bwa": {
              "description": "BWA is a software package for mapping DNA sequences against\na large reference genome, such as the human genome.\n",
              "homepage": "http://bio-bwa.sourceforge.net/",
              "documentation": "http://bio-bwa.sourceforge.net/",
              "doi": "10.1093/bioinformatics/btp324",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BWA genome index files",
              "pattern": "Directory containing BWA index *.{amb,ann,bwt,pac,sa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sai": {
              "type": "file",
              "description": "Single or paired SA coordinate files",
              "pattern": "*.sai"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "bwa_index",
      "path": "modules/nf-core/bwa/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "bwa_index",
        "description": "Create BWA index for reference genome",
        "keywords": [
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "bwa": {
              "description": "BWA is a software package for mapping DNA sequences against\na large reference genome, such as the human genome.\n",
              "homepage": "http://bio-bwa.sourceforge.net/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "arxiv": "arXiv:1303.3997",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BWA genome index files",
              "pattern": "*.{amb,ann,bwt,pac,sa}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "crisprseq",
          "version": "2.0.0"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "ssds",
          "version": "dev"
        }
      ]
    },
    {
      "name": "bwa_mem",
      "path": "modules/nf-core/bwa/mem/meta.yml",
      "type": "module",
      "meta": {
        "name": "bwa_mem",
        "description": "Performs fastq alignment to a fasta reference using BWA",
        "keywords": [
          "mem",
          "bwa",
          "alignment",
          "map",
          "fastq",
          "bam",
          "sam"
        ],
        "tools": [
          {
            "bwa": {
              "description": "BWA is a software package for mapping DNA sequences against\na large reference genome, such as the human genome.\n",
              "homepage": "http://bio-bwa.sourceforge.net/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "arxiv": "arXiv:1303.3997",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BWA genome index files",
              "pattern": "Directory containing BWA index *.{amb,ann,bwt,pac,sa}"
            }
          },
          {
            "sort_bam": {
              "type": "boolean",
              "description": "use samtools sort (true) or samtools view (false)",
              "pattern": "true or false"
            }
          }
        ],
        "output": [
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@jeremy1805"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "crisprseq",
          "version": "2.0.0"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "ssds",
          "version": "dev"
        }
      ]
    },
    {
      "name": "bwa_sampe",
      "path": "modules/nf-core/bwa/sampe/meta.yml",
      "type": "module",
      "meta": {
        "name": "bwa_sampe",
        "description": "Convert paired-end bwa SA coordinate files to SAM format",
        "keywords": [
          "bwa",
          "aln",
          "short-read",
          "align",
          "reference",
          "fasta",
          "map",
          "sam",
          "bam"
        ],
        "tools": [
          {
            "bwa": {
              "description": "BWA is a software package for mapping DNA sequences against\na large reference genome, such as the human genome.\n",
              "homepage": "http://bio-bwa.sourceforge.net/",
              "documentation": "http://bio-bwa.sourceforge.net/",
              "doi": "10.1093/bioinformatics/btp324",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "FASTQ files specified alongside meta in input channel.",
              "pattern": "*.{fastq,fq}.gz"
            }
          },
          {
            "sai": {
              "type": "file",
              "description": "SAI file specified alongside meta and reads in input channel.",
              "pattern": "*.sai"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "Directory containing BWA index files (amb,ann,bwt,pac,sa) from BWA_INDEX",
              "pattern": "bwa/"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "bwa_samse",
      "path": "modules/nf-core/bwa/samse/meta.yml",
      "type": "module",
      "meta": {
        "name": "bwa_samse",
        "description": "Convert bwa SA coordinate file to SAM format",
        "keywords": [
          "bwa",
          "aln",
          "short-read",
          "align",
          "reference",
          "fasta",
          "map",
          "sam",
          "bam"
        ],
        "tools": [
          {
            "bwa": {
              "description": "BWA is a software package for mapping DNA sequences against\na large reference genome, such as the human genome.\n",
              "homepage": "http://bio-bwa.sourceforge.net/",
              "documentation": "http://bio-bwa.sourceforge.net/",
              "doi": "10.1093/bioinformatics/btp324",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "FASTQ files specified alongside meta in input channel.",
              "pattern": "*.{fastq,fq}.gz"
            }
          },
          {
            "sai": {
              "type": "file",
              "description": "SAI file specified alongside meta and reads in input channel.",
              "pattern": "*.sai"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "Directory containing BWA index files (amb,ann,bwt,pac,sa) from BWA_INDEX",
              "pattern": "bwa/"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "bwamem2_index",
      "path": "modules/nf-core/bwamem2/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "bwamem2_index",
        "description": "Create BWA-mem2 index for reference genome",
        "keywords": [
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "bwamem2": {
              "description": "BWA-mem2 is a software package for mapping DNA sequences against\na large reference genome, such as the human genome.\n",
              "homepage": "https://github.com/bwa-mem2/bwa-mem2",
              "documentation": "https://github.com/bwa-mem2/bwa-mem2#usage",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BWA genome index files",
              "pattern": "*.{0123,amb,ann,bwt.2bit.64,pac}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "bwamem2_mem",
      "path": "modules/nf-core/bwamem2/mem/meta.yml",
      "type": "module",
      "meta": {
        "name": "bwamem2_mem",
        "description": "Performs fastq alignment to a fasta reference using BWA",
        "keywords": [
          "mem",
          "bwa",
          "alignment",
          "map",
          "fastq",
          "bam",
          "sam"
        ],
        "tools": [
          {
            "bwa": {
              "description": "BWA-mem2 is a software package for mapping DNA sequences against\na large reference genome, such as the human genome.\n",
              "homepage": "https://github.com/bwa-mem2/bwa-mem2",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "arxiv": "arXiv:1303.3997",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference/index information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BWA genome index files",
              "pattern": "Directory containing BWA index *.{0132,amb,ann,bwt.2bit.64,pac}"
            }
          },
          {
            "sort_bam": {
              "type": "boolean",
              "description": "use samtools sort (true) or samtools view (false)",
              "pattern": "true or false"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "bwameth_align",
      "path": "modules/nf-core/bwameth/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "bwameth_align",
        "description": "Performs alignment of BS-Seq reads using bwameth",
        "keywords": [
          "bwameth",
          "alignment",
          "3-letter genome",
          "map",
          "methylation",
          "5mC",
          "methylseq",
          "bisulphite",
          "bisulfite",
          "fastq",
          "bam"
        ],
        "tools": [
          {
            "bwameth": {
              "description": "Fast and accurate alignment of BS-Seq reads\nusing bwa-mem and a 3-letter genome.\n",
              "homepage": "https://github.com/brentp/bwa-meth",
              "documentation": "https://github.com/brentp/bwa-meth",
              "arxiv": "arXiv:1401.1129",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "index": {
              "type": "dir",
              "description": "Directory containing bwameth genome index"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@phue"
        ]
      },
      "pipelines": [
        {
          "name": "methylseq",
          "version": "2.4.0"
        }
      ]
    },
    {
      "name": "bwameth_index",
      "path": "modules/nf-core/bwameth/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "bwameth_index",
        "description": "Performs indexing of c2t converted reference genome",
        "keywords": [
          "bwameth",
          "3-letter genome",
          "index",
          "methylseq",
          "bisulphite",
          "bisulfite",
          "fasta"
        ],
        "tools": [
          {
            "bwameth": {
              "description": "Fast and accurate alignment of BS-Seq reads\nusing bwa-mem and a 3-letter genome.\n",
              "homepage": "https://github.com/brentp/bwa-meth",
              "documentation": "https://github.com/brentp/bwa-meth",
              "arxiv": "arXiv:1401.1129",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          }
        ],
        "output": [
          {
            "index": {
              "type": "dir",
              "description": "Directory containing bwameth genome index",
              "pattern": "index"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@phue"
        ]
      },
      "pipelines": [
        {
          "name": "methylseq",
          "version": "2.4.0"
        }
      ]
    },
    {
      "name": "cadd",
      "path": "modules/nf-core/cadd/meta.yml",
      "type": "module",
      "meta": {
        "name": "cadd",
        "description": "CADD is a tool for scoring the deleteriousness of single nucleotide variants as well as insertion/deletions variants in the human genome.",
        "keywords": [
          "cadd",
          "annotate",
          "variants"
        ],
        "tools": [
          {
            "cadd": {
              "description": "CADD scripts release for offline scoring",
              "homepage": "https://cadd.gs.washington.edu/",
              "documentation": "https://github.com/kircherlab/CADD-scripts/blob/master/README.md",
              "tool_dev_url": "https://github.com/kircherlab/CADD-scripts/",
              "doi": "10.1093/nar/gky1016",
              "licence": "['Restricted. Free for non-commercial users.']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Input file for annotation in vcf or vcf.gz format",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "annotation_dir": {
              "type": "file",
              "description": "Path to folder containing the vcf files with precomputed CADD scores.\nThis folder contains the uncompressed files that would otherwise be in data/annotation folder as described in https://github.com/kircherlab/CADD-scripts/#manual-installation.\n",
              "pattern": "*.{vcf,vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Annotated tsv file",
              "pattern": "*.{tsv,tsv.gz}"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      }
    },
    {
      "name": "calder2",
      "path": "modules/nf-core/calder2/meta.yml",
      "type": "module",
      "meta": {
        "name": "calder2",
        "description": "Hierarchical Hi-C compartment computation",
        "keywords": [
          "calder2",
          "genome",
          "topology",
          "compartments",
          "domains",
          "hi-c"
        ],
        "tools": [
          {
            "calder2": {
              "description": "Hierarchical Hi-C compartment computation",
              "homepage": "https://github.com/CSOgroup/CALDER2",
              "documentation": "https://github.com/CSOgroup/CALDER2",
              "tool_dev_url": "https://github.com/CSOgroup/CALDER2",
              "doi": "10.1038/s41467-021-22666-3",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information. E.g. [ id:'test', single_end:false ]"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Path to COOL file",
              "pattern": "*.{cool.mcool}"
            }
          },
          {
            "resolution": {
              "type": "value",
              "description": "In case a .mcool file is provided, which resolution level to use for the analysis"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information. E.g. [ id:'test', single_end:false ]"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "directory",
              "description": "Output folder containing sub-compartment (.tsv/.bed) and domain boundaries calls (.bed)"
            }
          },
          {
            "intermediate_data": {
              "type": "directory",
              "description": "Output folder containing intermediate data produced during the computation"
            }
          }
        ],
        "authors": [
          "@lucananni93"
        ]
      }
    },
    {
      "name": "canu",
      "path": "modules/nf-core/canu/meta.yml",
      "type": "module",
      "meta": {
        "name": "canu",
        "description": "Accurate assembly of segmental duplications, satellites, and allelic variants from high-fidelity long reads.",
        "keywords": [
          "Assembly",
          "pacbio",
          "hifi",
          "nanopore"
        ],
        "tools": [
          {
            "canu": {
              "description": "Canu is a fork of the Celera Assembler designed for high-noise single-molecule sequencing.",
              "homepage": "https://canu.readthedocs.io/en/latest/index.html#",
              "documentation": "https://canu.readthedocs.io/en/latest/tutorial.html",
              "tool_dev_url": "https://github.com/marbl/canu",
              "doi": "10.1101/gr.215087.116",
              "licence": "['GPL v2 and others']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:true ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "fasta/fastq file",
              "pattern": "*.{fasta,fastq}"
            }
          },
          {
            "mode": {
              "type": "value",
              "description": "Canu mode depending on the input data (source and error rate)",
              "pattern": "-pacbio|-nanopore|-pacbio-hifi"
            }
          },
          {
            "genomesize": {
              "type": "value",
              "description": "An estimate of the size of the genome. Common suffices are allowed, for example, 3.7m or 2.8g",
              "pattern": "<number>[g|m|k]"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Most of the analysis reported during assembly",
              "pattern": "*.report"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "Everything which could be assembled and is the full assembly, including both unique, repetitive, and bubble elements.",
              "pattern": "*.contigs.fasta"
            }
          },
          {
            "contigs": {
              "type": "file",
              "description": "Reads and low-coverage contigs which could not be incorporated into the primary assembly.",
              "pattern": "*.unassembled.fasta"
            }
          },
          {
            "corrected_reads": {
              "type": "file",
              "description": "The reads after correction.",
              "pattern": "*.correctedReads.fasta.gz"
            }
          },
          {
            "corrected_trimmed_reads": {
              "type": "file",
              "description": "The corrected reads after overlap based trimming",
              "pattern": "*.trimmedReads.fasta.gz"
            }
          },
          {
            "metadata": {
              "type": "file",
              "description": "(undocumented)",
              "pattern": "*.contigs.layout"
            }
          },
          {
            "contig_position": {
              "type": "file",
              "description": "The position of each read in a contig",
              "pattern": "*.contigs.layout.readToTig"
            }
          },
          {
            "contig_info": {
              "type": "file",
              "description": "A list of the contigs, lengths, coverage, number of reads and other metadata. Essentially the same information provided in the FASTA header line.",
              "pattern": "*.contigs.layout.tigInfo"
            }
          }
        ],
        "authors": [
          "@scorreard"
        ]
      }
    },
    {
      "name": "cat_cat",
      "path": "modules/nf-core/cat/cat/meta.yml",
      "type": "module",
      "meta": {
        "name": "cat_cat",
        "description": "A module for concatenation of gzipped or uncompressed files",
        "keywords": [
          "concatenate",
          "gzip",
          "cat"
        ],
        "tools": [
          {
            "cat": {
              "description": "Just concatenation",
              "documentation": "https://man7.org/linux/man-pages/man1/cat.1.html",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "files_in": {
              "type": "file",
              "description": "List of compressed / uncompressed files",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "file_out": {
              "type": "file",
              "description": "Concatenated file. Will be gzipped if file_out ends with \".gz\"",
              "pattern": "${file_out}"
            }
          }
        ],
        "authors": [
          "@erikrikarddaniel",
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "cat_fastq",
      "path": "modules/nf-core/cat/fastq/meta.yml",
      "type": "module",
      "meta": {
        "name": "cat_fastq",
        "description": "Concatenates fastq files",
        "keywords": [
          "cat",
          "fastq",
          "concatenate"
        ],
        "tools": [
          {
            "cat": {
              "description": "The cat utility reads files sequentially, writing them to the standard output.\n",
              "documentation": "https://www.gnu.org/software/coreutils/manual/html_node/cat-invocation.html",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files to be concatenated.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Merged fastq file",
              "pattern": "*.{merged.fastq.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "crisprseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "genomeannotator",
          "version": "dev"
        },
        {
          "name": "methylseq",
          "version": "2.4.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "smrnaseq",
          "version": "2.2.1"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "cdhit_cdhit",
      "path": "modules/nf-core/cdhit/cdhit/meta.yml",
      "type": "module",
      "meta": {
        "name": "cdhit_cdhit",
        "description": "Cluster protein sequences using sequence similarity",
        "keywords": [
          "cluster",
          "protein",
          "alignment",
          "fasta"
        ],
        "tools": [
          {
            "cdhit": {
              "description": "Clusters and compares protein or nucleotide sequences",
              "homepage": "https://sites.google.com/view/cd-hit/home",
              "documentation": "https://github.com/weizhongli/cdhit/wiki",
              "tool_dev_url": "https://github.com/weizhongli/cdhit",
              "doi": "10.1093/bioinformatics/btl158",
              "licence": "['GPL v2']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sequences": {
              "type": "file",
              "description": "fasta file of sequences to be clustered",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "fasta file of the representative sequences for each cluster",
              "pattern": "*.{fasta}"
            }
          },
          {
            "clusters": {
              "type": "file",
              "description": "List of clusters",
              "pattern": "*.{clstr}"
            }
          }
        ],
        "authors": [
          "@timslittle"
        ]
      }
    },
    {
      "name": "cdhit_cdhitest",
      "path": "modules/nf-core/cdhit/cdhitest/meta.yml",
      "type": "module",
      "meta": {
        "name": "cdhit_cdhitest",
        "description": "Cluster nucleotide sequences using sequence similarity",
        "keywords": [
          "cluster",
          "nucleotide",
          "alignment",
          "fasta"
        ],
        "tools": [
          {
            "cdhit": {
              "description": "Clusters and compares protein or nucleotide sequences",
              "homepage": "https://sites.google.com/view/cd-hit/home",
              "documentation": "https://github.com/weizhongli/cdhit/wiki",
              "tool_dev_url": "https://github.com/weizhongli/cdhit",
              "doi": "10.1093/bioinformatics/btl158",
              "licence": "['GPL v2']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sequences": {
              "type": "file",
              "description": "fasta or fastq file of sequences to be clustered",
              "pattern": "*.{fasta,fastq}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "fasta or fastq file of the representative sequences for each cluster",
              "pattern": "*.{fasta,fastq}"
            }
          },
          {
            "clusters": {
              "type": "file",
              "description": "List of clusters",
              "pattern": "*.{clstr}"
            }
          }
        ],
        "authors": [
          "@Joon-Klaps"
        ]
      }
    },
    {
      "name": "cellpose",
      "path": "modules/nf-core/cellpose/meta.yml",
      "type": "module",
      "meta": {
        "name": "cellpose",
        "description": "cellpose segments cells in images",
        "keywords": [
          "segmentation",
          "image",
          "cellpose"
        ],
        "tools": [
          {
            "cellpose": {
              "description": "cellpose is an anatomical segmentation algorithm written in Python 3 by Carsen Stringer and Marius Pachitariu",
              "homepage": "https://github.com/MouseLand/cellpose",
              "documentation": "https://cellpose.readthedocs.io/en/latest/command.html",
              "tool_dev_url": "https://github.com/MouseLand/cellpose",
              "doi": "10.1038/s41592-022-01663-4",
              "licence": "BSD 3-Clause"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\n(sample id)\n"
            }
          },
          {
            "image": {
              "type": "file",
              "description": "tif file for ready for segmentation",
              "pattern": "*.{tif,tiff}"
            }
          },
          {
            "model": {
              "type": "file",
              "description": "Optional input file. Cellpose 2 model trained by user using human-in-the-loop approach."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\n[sample id]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "mask": {
              "type": "file",
              "description": "labelled mask output from cellpose in tif format",
              "pattern": "*.{tif, tiff}"
            }
          }
        ],
        "authors": [
          "@josenimo"
        ]
      }
    },
    {
      "name": "cellranger_count",
      "path": "modules/nf-core/cellranger/count/meta.yml",
      "type": "module",
      "meta": {
        "name": "cellranger_count",
        "description": "Module to use Cell Ranger's pipelines analyze sequencing data produced from Chromium Single Cell Gene Expression.",
        "keywords": [
          "align",
          "count",
          "reference"
        ],
        "tools": [
          {
            "cellranger": {
              "description": "Cell Ranger by 10x Genomics is a set of analysis pipelines that process Chromium single-cell data to align reads, generate feature-barcode matrices, perform clustering and other secondary analysis, and more.",
              "homepage": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/what-is-cell-ranger",
              "documentation": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_ov",
              "tool_dev_url": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_ov",
              "licence": "10x Genomics EULA"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files. The order of the input files MUST be [\"sample1 R1\", \"sample1 R2\", \"sample2, R1\",\n\"sample2, R2\", ...]. This can usually be achieved by sorting the input files by file name.\n\nBackground: 10x data is always paired-end with R1 containing cell barcode and UMI\nand R2 containing the actual read sequence. Cell Ranger requires files to adhere to the following file-name\nconvention: `${Sample_Name}_S1_L00${Lane_Number}_${R1,R2}_001.fastq.gz`. This module automatically\nrenames files to match this convention based on the order of input files to avoid various\nissues (see https://github.com/nf-core/scrnaseq/issues/241). To avoid mistakes, the module\nthrows an error if a pair of R1 and R2 fastq files does not have the same filename except for the \"_R1\"/\"_R2\" part.\nRenaming the files does not affect the results (see README.md for detailed tests).\n",
              "pattern": "*{R1,R2}*.fastq.gz"
            }
          },
          {
            "reference": {
              "type": "directory",
              "description": "Folder containing all the reference indices needed by Cell Ranger"
            }
          }
        ],
        "output": [
          {
            "outs": {
              "type": "file",
              "description": "Files containing the outputs of Cell Ranger, see official 10X Genomics documentation for a complete list",
              "pattern": "${meta.id}/outs/*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ggabernet",
          "@Emiller88"
        ]
      },
      "pipelines": [
        {
          "name": "scrnaseq",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "cellranger_mkfastq",
      "path": "modules/nf-core/cellranger/mkfastq/meta.yml",
      "type": "module",
      "meta": {
        "name": "cellranger_mkfastq",
        "description": "Module to create FASTQs needed by the 10x Genomics Cell Ranger tool. Uses the cellranger mkfastq command.",
        "keywords": [
          "reference",
          "mkfastq",
          "fastq",
          "illumina",
          "bcl2fastq"
        ],
        "tools": [
          {
            "cellranger": {
              "description": "Cell Ranger by 10x Genomics is a set of analysis pipelines that process Chromium single-cell data to align reads, generate feature-barcode matrices, perform clustering and other secondary analysis, and more.",
              "homepage": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/what-is-cell-ranger",
              "documentation": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_ov",
              "tool_dev_url": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_ov",
              "licence": "10x Genomics EULA"
            }
          }
        ],
        "input": [
          {
            "bcl": {
              "type": "file",
              "description": "Base call files",
              "pattern": "*.bcl.bgzf"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "Sample sheet",
              "pattern": "*.csv"
            }
          }
        ],
        "output": [
          {
            "fastq": {
              "type": "file",
              "description": "Unaligned FastQ files",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ggabernet",
          "@Emiller88",
          "@RHReynolds"
        ]
      }
    },
    {
      "name": "cellranger_mkgtf",
      "path": "modules/nf-core/cellranger/mkgtf/meta.yml",
      "type": "module",
      "meta": {
        "name": "cellranger_mkgtf",
        "description": "Module to build a filtered GTF needed by the 10x Genomics Cell Ranger tool. Uses the cellranger mkgtf command.",
        "keywords": [
          "reference",
          "mkref",
          "index"
        ],
        "tools": [
          {
            "cellranger": {
              "description": "Cell Ranger by 10x Genomics is a set of analysis pipelines that process Chromium single-cell data to align reads, generate feature-barcode matrices, perform clustering and other secondary analysis, and more.",
              "homepage": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/what-is-cell-ranger",
              "documentation": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_ov",
              "tool_dev_url": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_ov",
              "licence": "10x Genomics EULA"
            }
          }
        ],
        "input": [
          {
            "gtf": {
              "type": "file",
              "description": "The reference GTF transcriptome file",
              "pattern": "*.gtf"
            }
          }
        ],
        "output": [
          {
            "gtf": {
              "type": "directory",
              "description": "The filtered GTF transcriptome file",
              "pattern": "*.filtered.gtf"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ggabernet",
          "@Emiller88"
        ]
      },
      "pipelines": [
        {
          "name": "scrnaseq",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "cellranger_mkref",
      "path": "modules/nf-core/cellranger/mkref/meta.yml",
      "type": "module",
      "meta": {
        "name": "cellranger_mkref",
        "description": "Module to build the reference needed by the 10x Genomics Cell Ranger tool. Uses the cellranger mkref command.",
        "keywords": [
          "reference",
          "mkref",
          "index"
        ],
        "tools": [
          {
            "cellranger": {
              "description": "Cell Ranger by 10x Genomics is a set of analysis pipelines that process Chromium single-cell data to align reads, generate feature-barcode matrices, perform clustering and other secondary analysis, and more.",
              "homepage": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/what-is-cell-ranger",
              "documentation": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_ov",
              "tool_dev_url": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_ov",
              "licence": "10x Genomics EULA"
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome FASTA file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "Reference transcriptome GTF file",
              "pattern": "*.gtf"
            }
          },
          {
            "reference_name": {
              "type": "string",
              "description": "The name to give the new reference folder",
              "pattern": "str"
            }
          }
        ],
        "output": [
          {
            "reference": {
              "type": "directory",
              "description": "Folder containing all the reference indices needed by Cell Ranger"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ggabernet"
        ]
      },
      "pipelines": [
        {
          "name": "scrnaseq",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "cellranger_mkvdjref",
      "path": "modules/nf-core/cellranger/mkvdjref/meta.yml",
      "type": "module",
      "meta": {
        "name": "cellranger_mkvdjref",
        "description": "Module to build the VDJ reference needed by the 10x Genomics Cell Ranger tool. Uses the cellranger mkvdjref command.",
        "keywords": [
          "reference",
          "mkvdjref",
          "index",
          "immunoprofiling",
          "single-cell",
          "cellranger"
        ],
        "tools": [
          {
            "cellranger": {
              "description": "Cell Ranger processes data from 10X Genomics Chromium kits. `cellranger vdj` takes FASTQ files from `cellranger mkfastq` or `bcl2fastq` for V(D)J libraries and performs sequence assembly and paired clonotype calling. It uses the Chromium cellular barcodes and UMIs to assemble V(D)J transcripts per cell. Clonotypes and CDR3 sequences are output as a `.vloupe` file which can be loaded into Loupe V(D)J Browser.",
              "homepage": "https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/what-is-cell-ranger",
              "documentation": "https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/advanced/references",
              "tool_dev_url": "https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/advanced/references",
              "licence": "10x Genomics EULA"
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome FASTA file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "genes": {
              "type": "file",
              "description": "Reference transcriptome GTF file",
              "pattern": "*.gtf"
            }
          },
          {
            "genome": {
              "type": "string",
              "description": "The name to give the new reference folder, e.g. `my_vdj_ref`",
              "pattern": "str"
            }
          }
        ],
        "output": [
          {
            "reference": {
              "type": "directory",
              "description": "Folder containing all the reference indices needed by Cell Ranger"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ggabernet",
          "@klkeys"
        ]
      }
    },
    {
      "name": "cellranger_multi",
      "path": "modules/nf-core/cellranger/multi/meta.yml",
      "type": "module",
      "meta": {
        "name": "cellranger_multi",
        "description": "Module to use Cell Ranger's pipelines to analyze sequencing data produced from various Chromium technologies, including Single Cell Gene Expression, Single Cell Immune Profiling, Feature Barcoding, and Cell Multiplexing.",
        "keywords": [
          "align",
          "reference",
          "cellranger",
          "multiomics",
          "gene expression",
          "vdj",
          "antigen capture",
          "antibody capture",
          "crispr"
        ],
        "tools": [
          {
            "cellranger": {
              "description": "Cell Ranger by 10x Genomics is a set of analysis pipelines that process Chromium single-cell data to align reads, generate feature-barcode matrices, perform clustering and other secondary analysis, and more.",
              "homepage": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/what-is-cell-ranger",
              "documentation": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_cp",
              "tool_dev_url": "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_cp",
              "licence": "10X Genomics EULA"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "Cell Ranger config file, in modified CSV format",
              "pattern": "*.csv"
            }
          }
        ],
        "output": [
          {
            "outs": {
              "type": "file",
              "description": "Files containing the outputs of Cell Ranger",
              "pattern": "${meta.id}/outs/*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@klkeys"
        ]
      }
    },
    {
      "name": "cellranger_vdj",
      "path": "modules/nf-core/cellranger/vdj/meta.yml",
      "type": "module",
      "meta": {
        "name": "cellranger_vdj",
        "description": "Module to use Cell Ranger's pipelines analyze sequencing data produced from Chromium Single Cell Immune Profiling.",
        "keywords": [
          "align",
          "vdj",
          "reference",
          "immunoprofiling",
          "single-cell",
          "cellranger"
        ],
        "tools": [
          {
            "cellranger": {
              "description": "Cell Ranger processes data from 10X Genomics Chromium kits. `cellranger vdj` takes FASTQ files from `cellranger mkfastq` or `bcl2fastq` for V(D)J libraries and performs sequence assembly and paired clonotype calling. It uses the Chromium cellular barcodes and UMIs to assemble V(D)J transcripts per cell. Clonotypes and CDR3 sequences are output as a `.vloupe` file which can be loaded into Loupe V(D)J Browser.",
              "homepage": "https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/what-is-cell-ranger",
              "documentation": "https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/tutorial/tutorial-vdj",
              "tool_dev_url": "https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/tutorial/tutorial-vdj",
              "licence": "10x Genomics EULA"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n",
              "pattern": "${Sample_Name}_S1_L00${Lane_Number}_${I1,I2,R1,R2}_001.fastq.gz"
            }
          },
          {
            "reference": {
              "type": "directory",
              "description": "Folder containing all the reference indices needed by Cell Ranger"
            }
          }
        ],
        "output": [
          {
            "outs": {
              "type": "file",
              "description": "Files containing the outputs of Cell Ranger, see official 10X Genomics documentation for a complete list",
              "pattern": "${meta.id}/outs/*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ggabernet",
          "@Emiller88",
          "@klkeys"
        ]
      }
    },
    {
      "name": "centrifuge_centrifuge",
      "path": "modules/nf-core/centrifuge/centrifuge/meta.yml",
      "type": "module",
      "meta": {
        "name": "centrifuge_centrifuge",
        "description": "Classifies metagenomic sequence data",
        "keywords": [
          "classify",
          "metagenomics",
          "fastq",
          "db"
        ],
        "tools": [
          {
            "centrifuge": {
              "description": "Centrifuge is a classifier for metagenomic sequences.",
              "homepage": "https://ccb.jhu.edu/software/centrifuge/",
              "documentation": "https://ccb.jhu.edu/software/centrifuge/manual.shtml",
              "doi": "10.1101/gr.210641.116",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "Path to directory containing centrifuge database files"
            }
          },
          {
            "save_unaligned": {
              "type": "value",
              "description": "If true unmapped fastq files are saved"
            }
          },
          {
            "save_aligned": {
              "type": "value",
              "description": "If true mapped fastq files are saved"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "File containing a classification summary\n",
              "pattern": "*.{report.txt}"
            }
          },
          {
            "results": {
              "type": "file",
              "description": "File containing classification results\n",
              "pattern": "*.{results.txt}"
            }
          },
          {
            "fastq_unmapped": {
              "type": "file",
              "description": "Unmapped fastq files",
              "pattern": "*.unmapped.fastq.gz"
            }
          },
          {
            "fastq_mapped": {
              "type": "file",
              "description": "Mapped fastq files",
              "pattern": "*.mapped.fastq.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sofstam",
          "@jfy133",
          "@sateeshperi"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "centrifuge_kreport",
      "path": "modules/nf-core/centrifuge/kreport/meta.yml",
      "type": "module",
      "meta": {
        "name": "centrifuge_kreport",
        "description": "Creates Kraken-style reports from centrifuge out files",
        "keywords": [
          "metagenomics"
        ],
        "tools": [
          {
            "centrifuge": {
              "description": "Centrifuge is a classifier for metagenomic sequences.",
              "homepage": "https://ccb.jhu.edu/software/centrifuge/",
              "documentation": "https://ccb.jhu.edu/software/centrifuge/manual.shtml",
              "doi": "10.1101/gr.210641.116",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "File containing the centrifuge classification report",
              "pattern": "*.{txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "kreport": {
              "type": "file",
              "description": "File containing kraken-style report from centrifuge\nout files.\n",
              "pattern": "*.{txt}"
            }
          }
        ],
        "authors": [
          "@sofstam",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "checkm_lineagewf",
      "path": "modules/nf-core/checkm/lineagewf/meta.yml",
      "type": "module",
      "meta": {
        "name": "checkm_lineagewf",
        "description": "CheckM provides a set of tools for assessing the quality of genomes recovered from isolates, single cells, or metagenomes.",
        "keywords": [
          "checkm",
          "mag",
          "metagenome",
          "quality",
          "isolates",
          "microbes",
          "single cells",
          "completeness",
          "contamination",
          "bins",
          "genome bins"
        ],
        "tools": [
          {
            "checkm": {
              "description": "Assess the quality of microbial genomes recovered from isolates, single cells, and metagenomes.",
              "homepage": "https://ecogenomics.github.io/CheckM/",
              "documentation": "https://github.com/Ecogenomics/CheckM/wiki",
              "tool_dev_url": "https://github.com/Ecogenomics/CheckM",
              "doi": "10.1101/gr.186072.114",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "One or a list of multiple FASTA files of each bin, with extension defined with the fasta_ext value",
              "pattern": "*.{$fasta_ext}"
            }
          },
          {
            "fasta_ext": {
              "type": "value",
              "description": "The file-type extension suffix of the input FASTA files (e.g., fasta, fna, fa, fas)"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "Optional directory pointing to checkM database to prevent re-downloading"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'sample', bin:'1' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "checkm_output": {
              "type": "directory",
              "description": "CheckM output directory",
              "pattern": "*/"
            }
          },
          {
            "checkm_output": {
              "type": "file",
              "description": "Lineage markfer file",
              "pattern": "lineage.ms"
            }
          },
          {
            "checkm_tsv": {
              "type": "file",
              "description": "CheckM summary completeness statistics table",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "checkm_qa",
      "path": "modules/nf-core/checkm/qa/meta.yml",
      "type": "module",
      "meta": {
        "name": "checkm_qa",
        "description": "CheckM provides a set of tools for assessing the quality of genomes recovered from isolates, single cells, or metagenomes.",
        "keywords": [
          "checkm",
          "mag",
          "metagenome",
          "quality",
          "isolates",
          "microbes",
          "single cells",
          "completeness",
          "contamination",
          "bins",
          "genome bins",
          "qa",
          "quality assurnce"
        ],
        "tools": [
          {
            "checkm": {
              "description": "Assess the quality of microbial genomes recovered from isolates, single cells, and metagenomes.",
              "homepage": "https://ecogenomics.github.io/CheckM/",
              "documentation": "https://github.com/Ecogenomics/CheckM/wiki",
              "tool_dev_url": "https://github.com/Ecogenomics/CheckM",
              "doi": "10.1101/gr.186072.114",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "analysis_dir": {
              "type": "file",
              "description": "Directory containing output of checkm/analyze or checkm/lineage_wf etc.",
              "pattern": "*"
            }
          },
          {
            "marker_file": {
              "type": "file",
              "description": "Marker file specified during checkm/analyze or produced by checkm/{lineage,taxonomy}_wf",
              "pattern": "*.ms"
            }
          },
          {
            "coverage_file": {
              "type": "file",
              "description": "File containing coverage of each sequence (generated by checkm coverage)"
            }
          },
          {
            "exclude_marker_file": {
              "type": "file",
              "description": "File specifying markers to exclude from marker sets"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "Default completeness statistics in various formats, as specified with --out_format (excluding option: 9)",
              "pattern": "*.txt"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Output in fasta format (only if --out_format 9)",
              "pattern": "*.fasta"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "checkv_downloaddatabase",
      "path": "modules/nf-core/checkv/downloaddatabase/meta.yml",
      "type": "module",
      "meta": {
        "name": "checkv_downloaddatabase",
        "description": "Construct the database necessary for checkv's quality assessment",
        "keywords": [
          "checkv",
          "checkm",
          "mag",
          "metagenome",
          "quality",
          "isolates",
          "virus",
          "completeness",
          "contamination",
          "download",
          "database"
        ],
        "tools": [
          {
            "checkv": {
              "description": "Assess the quality of metagenome-assembled viral genomes.",
              "homepage": "https://bitbucket.org/berkeleylab/checkv/src/master/",
              "documentation": "https://bitbucket.org/berkeleylab/checkv/src/master/",
              "tool_dev_url": "https://bitbucket.org/berkeleylab/checkv/src/master/",
              "doi": "10.1038/s41587-020-00774-7",
              "licence": "['BSD License']"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "checkv_db": {
              "type": "directory",
              "description": "directory pointing to database",
              "pattern": "${prefix}/"
            }
          }
        ],
        "authors": [
          "@Joon-Klaps"
        ]
      }
    },
    {
      "name": "checkv_endtoend",
      "path": "modules/nf-core/checkv/endtoend/meta.yml",
      "type": "module",
      "meta": {
        "name": "checkv_endtoend",
        "description": "Assess the quality of metagenome-assembled viral genomes.",
        "keywords": [
          "checkv",
          "checkm",
          "mag",
          "metagenome",
          "quality",
          "isolates",
          "virus",
          "completeness",
          "contamination"
        ],
        "tools": [
          {
            "checkv": {
              "description": "Assess the quality of metagenome-assembled viral genomes.",
              "homepage": "https://bitbucket.org/berkeleylab/checkv/src/master/",
              "documentation": "https://bitbucket.org/berkeleylab/checkv/src/master/",
              "tool_dev_url": "https://bitbucket.org/berkeleylab/checkv/src/master/",
              "doi": "10.1038/s41587-020-00774-7",
              "licence": "['BSD License']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "fasta file",
              "pattern": "*.{fasta,fna,fa}"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "Directory pointing to checkV database"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'sample', bin:'1' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "quality_summary": {
              "type": "file",
              "description": "CheckV's main output containing integrated results from the three main modules (contamination, completeness, complete genomes) with overall quality of contigs",
              "pattern": "${prefix}/quality_summary.tsv"
            }
          },
          {
            "completeness": {
              "type": "file",
              "description": "CheckV's detailed overview table on estimating completeness",
              "pattern": "${prefix}/completeness.tsv"
            }
          },
          {
            "contamination": {
              "type": "file",
              "description": "CheckV's detailed overview table on estimating contamination",
              "pattern": "${prefix}/contamination.tsv"
            }
          },
          {
            "complete_genomes": {
              "type": "file",
              "description": "CheckV's detailed overview table on the identified putative complete genomes",
              "pattern": "${prefix}/complete_genomes.tsv"
            }
          },
          {
            "proviruses": {
              "type": "file",
              "description": "CheckV's extracted proviruses contigs",
              "pattern": "${prefix}/proviruses.fna"
            }
          },
          {
            "viruses": {
              "type": "file",
              "description": "CheckV's extracted virus contigs",
              "pattern": "${prefix}/viruses.fna"
            }
          }
        ],
        "authors": [
          "@Joon-Klaps"
        ]
      }
    },
    {
      "name": "checkv_updatedatabase",
      "path": "modules/nf-core/checkv/updatedatabase/meta.yml",
      "type": "module",
      "meta": {
        "name": "checkv_updatedatabase",
        "description": "Construct the database necessary for checkv's quality assessment",
        "keywords": [
          "checkv",
          "checkm",
          "mag",
          "metagenome",
          "quality",
          "isolates",
          "virus",
          "completeness",
          "contamination"
        ],
        "tools": [
          {
            "checkv": {
              "description": "Assess the quality of metagenome-assembled viral genomes.",
              "homepage": "https://bitbucket.org/berkeleylab/checkv/src/master/",
              "documentation": "https://bitbucket.org/berkeleylab/checkv/src/master/",
              "tool_dev_url": "https://bitbucket.org/berkeleylab/checkv/src/master/",
              "doi": "10.1038/s41587-020-00774-7",
              "licence": "['BSD License']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'sample', bin:'1' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "fasta file containing additional sequences for the existing checkv database",
              "pattern": "*.{fasta,fna,fa}"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "directory pointing to existing checkV database to avoid redownloading the database"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'sample', bin:'1' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "checkv_db": {
              "type": "directory",
              "description": "directory pointing to database"
            }
          }
        ],
        "authors": [
          "@Joon-Klaps"
        ]
      }
    },
    {
      "name": "chopper",
      "path": "modules/nf-core/chopper/meta.yml",
      "type": "module",
      "meta": {
        "name": "chopper",
        "description": "Filter and trim long read data.",
        "keywords": [
          "filter",
          "trimming",
          "fastq",
          "nanopore",
          "qc"
        ],
        "tools": [
          {
            "zcat": {
              "description": "zcat uncompresses either a list of files on the command line or its standard input and writes the uncompressed data on standard output.",
              "documentation": "https://linux.die.net/man/1/zcat",
              "args_id": "$args"
            }
          },
          {
            "chopper": {
              "description": "A rust command line for filtering and trimming long reads.",
              "homepage": "https://github.com/wdecoster/chopper",
              "documentation": "https://github.com/wdecoster/chopper",
              "tool_dev_url": "https://github.com/wdecoster/chopper",
              "doi": "10.1093/bioinformatics/bty149",
              "licence": "['MIT']",
              "args_id": "$args2"
            }
          },
          {
            "gzip": {
              "description": "Gzip reduces the size of the named files using Lempel-Ziv coding (LZ77).",
              "documentation": "https://linux.die.net/man/1/gzip",
              "args_id": "$args3"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "FastQ with reads from long read sequencing e.g. PacBio or ONT",
              "pattern": "*.{fastq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Filtered and trimmed FastQ file",
              "pattern": "*.{fastq.gz}"
            }
          }
        ],
        "authors": [
          "@FynnFreyer"
        ]
      }
    },
    {
      "name": "chromap_chromap",
      "path": "modules/nf-core/chromap/chromap/meta.yml",
      "type": "module",
      "meta": {
        "name": "chromap_chromap",
        "description": "Performs preprocessing and alignment of chromatin fastq files to\nfasta reference files using chromap.\n",
        "keywords": [
          "chromap",
          "alignment",
          "map",
          "fastq",
          "bam",
          "sam",
          "hi-c",
          "atac-seq",
          "chip-seq",
          "trimming",
          "duplicate removal"
        ],
        "tools": [
          {
            "chromap": {
              "description": "Fast alignment and preprocessing of chromatin profiles",
              "homepage": "https://github.com/haowenz/chromap",
              "documentation": "https://github.com/haowenz/chromap",
              "tool_dev_url": "https://github.com/haowenz/chromap",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing information for the fasta\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The fasta reference file.\n"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing information for the index\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Chromap genome index files (*.index)\n"
            }
          },
          {
            "barcodes": {
              "type": "file",
              "description": "Cell barcode files\n"
            }
          },
          {
            "whitelist": {
              "type": "file",
              "description": "Cell barcode whitelist file\n"
            }
          },
          {
            "chr_order": {
              "type": "file",
              "description": "Custom chromosome order\n"
            }
          },
          {
            "pairs_chr_order": {
              "type": "file",
              "description": "Natural chromosome order for pairs flipping\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file",
              "pattern": "*.bed.gz"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "tagAlign": {
              "type": "file",
              "description": "tagAlign file",
              "pattern": "*.tagAlign.gz"
            }
          },
          {
            "pairs": {
              "type": "file",
              "description": "pairs file",
              "pattern": "*.pairs.gz"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal",
          "@joseespinosa"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "chromap_index",
      "path": "modules/nf-core/chromap/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "chromap_index",
        "description": "Indexes a fasta reference genome ready for chromatin profiling.",
        "keywords": [
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "chromap": {
              "description": "Fast alignment and preprocessing of chromatin profiles",
              "homepage": "https://github.com/haowenz/chromap",
              "documentation": "https://github.com/haowenz/chromap",
              "tool_dev_url": "https://github.com/haowenz/chromap",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Fasta reference file."
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Index file of the reference genome",
              "pattern": "*.{index}"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal",
          "@joseespinosa"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "chromograph",
      "path": "modules/nf-core/chromograph/meta.yml",
      "type": "module",
      "meta": {
        "name": "chromograph",
        "description": "Chromograph is a python package to create PNG images from genetics data such as BED and WIG files.",
        "keywords": [
          "chromosome_visualization",
          "bed",
          "wig",
          "png"
        ],
        "tools": [
          {
            "chromograph": {
              "description": "Chromograph is a python package to create PNG images from genetics data such as BED and WIG files.",
              "homepage": "https://github.com/Clinical-Genomics/chromograph",
              "documentation": "https://github.com/Clinical-Genomics/chromograph/blob/master/README.md",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meta5": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meta6": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meta7": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "autozyg": {
              "type": "file",
              "description": "Bed file containing the regions of autozygosity"
            }
          },
          {
            "coverage": {
              "type": "file",
              "description": "Wig file containing the coverage information"
            }
          },
          {
            "exome": {
              "type": "file",
              "description": "Bed file containing the coverage for exome."
            }
          },
          {
            "fracsnp": {
              "type": "file",
              "description": "Wig file containing the fraction of homozygous SNPs"
            }
          },
          {
            "ideogram": {
              "type": "file",
              "description": "Bed file containing information necessary for ideogram plots.\nFormat ['chrom', 'start', 'end', 'name', 'gStain']\n"
            }
          },
          {
            "regions": {
              "type": "file",
              "description": "Bed file containing UPD regions"
            }
          },
          {
            "sites": {
              "type": "file",
              "description": "Bed file containing UPD sites"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "plots": {
              "type": "file",
              "description": "Directory containing the plots in png format",
              "pattern": "*.png"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      }
    },
    {
      "name": "circexplorer2_annotate",
      "path": "modules/nf-core/circexplorer2/annotate/meta.yml",
      "type": "module",
      "meta": {
        "name": "circexplorer2_annotate",
        "description": "Annotate circRNAs detected in the output from CIRCexplorer2 parse",
        "keywords": [
          "circrna",
          "annotate"
        ],
        "tools": [
          {
            "circexplorer2": {
              "description": "Circular RNA analysis toolkits",
              "homepage": "https://github.com/YangLab/CIRCexplorer2/",
              "documentation": "https://circexplorer2.readthedocs.io/en/latest/",
              "doi": "10.1101/gr.202895.115",
              "licence": "['MIT License']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "junctions": {
              "type": "file",
              "description": "Reformatted junctions file",
              "pattern": "*.{junction}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome FASTA file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "gene_annotation": {
              "type": "file",
              "description": "Reformatted GTF file for CIRCexplorer2",
              "pattern": "*.{txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Annotated circRNA TXT file",
              "pattern": "*.{txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@BarryDigby"
        ]
      },
      "pipelines": [
        {
          "name": "circrna",
          "version": "dev"
        }
      ]
    },
    {
      "name": "circexplorer2_parse",
      "path": "modules/nf-core/circexplorer2/parse/meta.yml",
      "type": "module",
      "meta": {
        "name": "circexplorer2_parse",
        "description": "CIRCexplorer2 parses fusion junction files from multiple aligners to prepare them for CIRCexplorer2 annotate.",
        "keywords": [
          "parse",
          "circrna",
          "splice"
        ],
        "tools": [
          {
            "circexplorer2": {
              "description": "Circular RNA analysis toolkit",
              "homepage": "https://github.com/YangLab/CIRCexplorer2/",
              "documentation": "https://circexplorer2.readthedocs.io/en/latest/",
              "doi": "10.1101/gr.202895.115",
              "licence": "['MIT License']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fusions": {
              "type": "file",
              "description": "BAM (BWA), BED (Segemehl), TXT (MapSplice), or Junction (STAR) file. Aligner will be autodetected based on file suffix.",
              "pattern": "*.{bam,junction,bed,txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Standardized fusion junction file suitable for CIRCexplorer2 annotate module.",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@BarryDigby"
        ]
      },
      "pipelines": [
        {
          "name": "circrna",
          "version": "dev"
        }
      ]
    },
    {
      "name": "clippy",
      "path": "modules/nf-core/clippy/meta.yml",
      "type": "module",
      "meta": {
        "name": "clippy",
        "description": "Runs the Clippy CLIP peak caller",
        "keywords": [
          "iCLIP",
          "eCLIP",
          "CLIP"
        ],
        "tools": [
          {
            "clippy": {
              "description": "An intuitive and interactive peak caller for CLIP data",
              "homepage": "https://github.com/ulelab/clippy",
              "documentation": "https://github.com/ulelab/clippy",
              "tool_dev_url": "https://github.com/ulelab/clippy",
              "doi": "10.7554/eLife.84034",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file of crosslinks",
              "pattern": "*.{bed,bed.gz}"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "A GTF file of genes to call peaks on",
              "pattern": "*.{gtf}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "FAI file corresponding to the reference sequence",
              "pattern": "*.{fai}"
            }
          }
        ],
        "output": [
          {
            "peaks": {
              "type": "file",
              "description": "BED file of peaks called by Clippy",
              "pattern": "*_broadPeaks.bed.gz"
            }
          },
          {
            "summits": {
              "type": "file",
              "description": "BED file of peak summits called by Clippy",
              "pattern": "*[0-9].bed.gz"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "*.{version.txt}"
            }
          }
        ],
        "authors": [
          "@marc-jones",
          "@CharlotteAnne"
        ]
      }
    },
    {
      "name": "clonalframeml",
      "path": "modules/nf-core/clonalframeml/meta.yml",
      "type": "module",
      "meta": {
        "name": "clonalframeml",
        "description": "Predict recomination events in bacterial genomes",
        "keywords": [
          "fasta",
          "multiple sequence alignment",
          "recombination"
        ],
        "tools": [
          {
            "clonalframeml": {
              "description": "Efficient inferencing of recombination in bacterial genomes",
              "homepage": "https://github.com/xavierdidelot/ClonalFrameML",
              "documentation": "https://github.com/xavierdidelot/clonalframeml/wiki",
              "tool_dev_url": "https://github.com/xavierdidelot/ClonalFrameML",
              "doi": "10.1371/journal.pcbi.1004041",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "msa": {
              "type": "file",
              "description": "A multiple seqeunce alignmnet in FASTA format",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz}"
            }
          },
          {
            "newick": {
              "type": "file",
              "description": "A Newick formated tree based on multiple sequence alignment",
              "pattern": "*.{newick,treefile,dnd}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "emsim": {
              "type": "file",
              "description": "Bootstrapped values for the three parameters R/theta, nu and delta",
              "pattern": "*.emsim.txt"
            }
          },
          {
            "em": {
              "type": "file",
              "description": "Point estimates for R/theta, nu, delta and the branch lengths",
              "pattern": "*.em.txt"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Sequence reconstructed by maximum likelihood",
              "pattern": "*.ML_sequence.fasta"
            }
          },
          {
            "newick": {
              "type": "file",
              "description": "Tree with all nodes labelled",
              "pattern": "*.labelled_tree.newick"
            }
          },
          {
            "pos_ref": {
              "type": "file",
              "description": "CSV mapping input sequence files to the sequences in the *.ML_sequence.fasta",
              "pattern": "*.position_cross_reference.txt"
            }
          },
          {
            "status": {
              "type": "file",
              "description": "List of reconstructed recombination events",
              "pattern": "*.importation_status.txt"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "cmseq_polymut",
      "path": "modules/nf-core/cmseq/polymut/meta.yml",
      "type": "module",
      "meta": {
        "name": "cmseq_polymut",
        "description": "Calculates polymorphic site rates over protein coding genes",
        "keywords": [
          "polymut",
          "polymorphic",
          "mags",
          "assembly",
          "polymorphic sites",
          "estimation",
          "protein coding genes",
          "cmseq",
          "bam",
          "coverage"
        ],
        "tools": [
          {
            "cmseq": {
              "description": "Set of utilities on sequences and BAM files",
              "homepage": "https://github.com/SegataLab/cmseq",
              "documentation": "https://github.com/SegataLab/cmseq",
              "tool_dev_url": "https://github.com/SegataLab/cmseq",
              "licence": [
                "MIT License"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.bai"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "GFF file used to extract protein-coding genes",
              "pattern": "*.gff"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Optional fasta file to run on a subset of references in the BAM file.",
              "pattern": ".{fa,fasta,fas,fna}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "polymut": {
              "type": "file",
              "description": "Polymut report in `.txt` format.",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@maxibor"
        ]
      }
    },
    {
      "name": "cnvkit_access",
      "path": "modules/nf-core/cnvkit/access/meta.yml",
      "type": "module",
      "meta": {
        "name": "cnvkit_access",
        "description": "Calculate the sequence-accessible coordinates in chromosomes from the given reference genome, output as a BED file.",
        "keywords": [
          "cvnkit",
          "access",
          "fasta",
          "copy number"
        ],
        "tools": [
          {
            "cnvkit": {
              "description": "CNVkit is a Python library and command-line software toolkit to infer and visualize copy number from high-throughput DNA sequencing data.\nIt is designed for use with hybrid capture, including both whole-exome and custom target panels, and short-read sequencing platforms such as Illumina and Ion Torrent.\n",
              "homepage": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "documentation": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "tool_dev_url": "https://github.com/etal/cnvkit",
              "doi": "10.1371/journal.pcbi.1004873",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome FASTA.",
              "pattern": "*.fasta"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "exclude_bed": {
              "type": "file",
              "description": "Additional regions to exclude, in BED format. Can be used multiple times."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "File containing accessible regions.",
              "pattern": "*.{bed}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "cnvkit_antitarget",
      "path": "modules/nf-core/cnvkit/antitarget/meta.yml",
      "type": "module",
      "meta": {
        "name": "cnvkit_antitarget",
        "description": "Derive off-target (“antitarget”) bins from target regions.",
        "keywords": [
          "cvnkit",
          "antitarget",
          "cnv",
          "copy number"
        ],
        "tools": [
          {
            "cnvkit": {
              "description": "CNVkit is a Python library and command-line software toolkit to infer and visualize copy number from high-throughput DNA sequencing data.\nIt is designed for use with hybrid capture, including both whole-exome and custom target panels, and short-read sequencing platforms such as Illumina and Ion Torrent.\n",
              "homepage": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "documentation": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "tool_dev_url": "https://github.com/etal/cnvkit",
              "doi": "10.1371/journal.pcbi.1004873",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "targets": {
              "type": "file",
              "description": "File containing genomic regions",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "File containing off-target regions",
              "pattern": "*.{bed}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@SusiJo"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "cnvkit_batch",
      "path": "modules/nf-core/cnvkit/batch/meta.yml",
      "type": "module",
      "meta": {
        "name": "cnvkit_batch",
        "description": "Copy number variant detection from high-throughput sequencing data",
        "keywords": [
          "cnvkit",
          "bam",
          "fasta",
          "copy number"
        ],
        "tools": [
          {
            "cnvkit": {
              "description": "CNVkit is a Python library and command-line software toolkit to infer and visualize copy number from high-throughput DNA sequencing data. It is designed for use with hybrid capture, including both whole-exome and custom target panels, and short-read sequencing platforms such as Illumina and Ion Torrent.\n",
              "homepage": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "documentation": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tumour": {
              "type": "file",
              "description": "Input tumour sample bam file (or cram)\n"
            }
          },
          {
            "normal": {
              "type": "file",
              "description": "Input normal sample bam file (or cram)\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input reference genome fasta file (only needed for cram_input and/or when normal_samples are provided)\n"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "Input reference genome fasta index (optional, but recommended for cram_input)\n"
            }
          },
          {
            "targetfile": {
              "type": "file",
              "description": "Input target bed file\n"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "Input reference cnn-file (only for germline and tumor-only running)\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "File containing genomic regions",
              "pattern": "*.{bed}"
            }
          },
          {
            "cnn": {
              "type": "file",
              "description": "File containing coverage information",
              "pattern": "*.{cnn}"
            }
          },
          {
            "cnr": {
              "type": "file",
              "description": "File containing copy number ratio information",
              "pattern": "*.{cnr}"
            }
          },
          {
            "cns": {
              "type": "file",
              "description": "File containing copy number segment information",
              "pattern": "*.{cns}"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "File with plot of copy numbers or segments on chromosomes",
              "pattern": "*.{pdf}"
            }
          },
          {
            "png": {
              "type": "file",
              "description": "File with plot of bin-level log2 coverages and segmentation calls",
              "pattern": "*.{png}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kaurravneet4123",
          "@KevinMenden",
          "@MaxUlysse",
          "@drpatelh",
          "@fbdtemme",
          "@lassefolkersen",
          "@SusiJo"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "cnvkit_call",
      "path": "modules/nf-core/cnvkit/call/meta.yml",
      "type": "module",
      "meta": {
        "name": "cnvkit_call",
        "description": "Given segmented log2 ratio estimates (.cns), derive each segment’s absolute integer copy number",
        "keywords": [
          "cnvkit",
          "copy number"
        ],
        "tools": [
          {
            "cnvkit": {
              "description": "CNVkit is a Python library and command-line software toolkit to infer and visualize copy number from high-throughput DNA sequencing data. It is designed for use with hybrid capture, including both whole-exome and custom target panels, and short-read sequencing platforms such as Illumina and Ion Torrent.\n",
              "homepage": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "documentation": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "cns": {
              "type": "file",
              "description": "CNVKit CNS file.",
              "pattern": "*.cns"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Germline VCF file for BAF.",
              "pattern": "*.vcf{,.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "File containing copy number information in new format.",
              "pattern": "*.{bed,vcf,cdt,jtv,seg,interval_count}"
            }
          }
        ],
        "authors": [
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "cnvkit_export",
      "path": "modules/nf-core/cnvkit/export/meta.yml",
      "type": "module",
      "meta": {
        "name": "cnvkit_export",
        "description": "Convert copy number ratio tables (.cnr files) or segments (.cns) to another format.",
        "keywords": [
          "cnvkit",
          "copy number",
          "export"
        ],
        "tools": [
          {
            "cnvkit": {
              "description": "CNVkit is a Python library and command-line software toolkit to infer and visualize copy number from high-throughput DNA sequencing data. It is designed for use with hybrid capture, including both whole-exome and custom target panels, and short-read sequencing platforms such as Illumina and Ion Torrent.\n",
              "homepage": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "documentation": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "cns": {
              "type": "file",
              "description": "CNVKit CNS file.",
              "pattern": "*.cns"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "cns": {
              "type": "file",
              "description": "File containing copy number segment information",
              "pattern": "*.{cns}"
            }
          }
        ],
        "authors": [
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "cnvkit_genemetrics",
      "path": "modules/nf-core/cnvkit/genemetrics/meta.yml",
      "type": "module",
      "meta": {
        "name": "cnvkit_genemetrics",
        "description": "Copy number variant detection from high-throughput sequencing data",
        "keywords": [
          "cnvkit",
          "genemetrics"
        ],
        "tools": [
          {
            "cnvkit": {
              "description": "CNVkit is a Python library and command-line software toolkit to infer and visualize copy number from high-throughput DNA sequencing data. It is designed for use with hybrid capture, including both whole-exome and custom target panels, and short-read sequencing platforms such as Illumina and Ion Torrent.\n",
              "homepage": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "documentation": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "cnr": {
              "type": "file",
              "description": "CNR file",
              "pattern": "*.cnr"
            }
          },
          {
            "cns": {
              "type": "file",
              "description": "CNS file [Optional]",
              "pattern": "*.cns"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "TXT file",
              "pattern": "*.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@marrip"
        ]
      }
    },
    {
      "name": "cnvkit_reference",
      "path": "modules/nf-core/cnvkit/reference/meta.yml",
      "type": "module",
      "meta": {
        "name": "cnvkit_reference",
        "description": "Compile a coverage reference from the given files (normal samples).",
        "keywords": [
          "cnvkit",
          "reference",
          "cnv",
          "copy number"
        ],
        "tools": [
          {
            "cnvkit": {
              "description": "CNVkit is a Python library and command-line software toolkit to infer and visualize copy number from high-throughput DNA sequencing data.\nIt is designed for use with hybrid capture, including both whole-exome and custom target panels, and short-read sequencing platforms such as Illumina and Ion Torrent.\n",
              "homepage": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "documentation": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "tool_dev_url": "https://github.com/etal/cnvkit",
              "doi": "10.1371/journal.pcbi.1004873",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "File containing reference genome",
              "pattern": "*.{fasta}"
            }
          },
          {
            "targets": {
              "type": "file",
              "description": "File containing genomic regions",
              "pattern": "*.{bed}"
            }
          },
          {
            "antitargets": {
              "type": "file",
              "description": "File containing off-target genomic regions",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "File containing a copy-number reference (required for CNV calling in tumor_only mode)",
              "pattern": "*.{cnn}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@SusiJo"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "cnvkit_target",
      "path": "modules/nf-core/cnvkit/target/meta.yml",
      "type": "module",
      "meta": {
        "name": "cnvkit_target",
        "description": "Transform bait intervals into targets more suitable for CNVkit.",
        "keywords": [
          "cnvkit",
          "target",
          "cnv",
          "copy number"
        ],
        "tools": [
          {
            "cnvkit": {
              "description": "CNVkit is a Python library and command-line software toolkit to infer and visualize copy number from high-throughput DNA sequencing data.\nIt is designed for use with hybrid capture, including both whole-exome and custom target panels, and short-read sequencing platforms such as Illumina and Ion Torrent.\n",
              "homepage": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "documentation": "https://cnvkit.readthedocs.io/en/stable/index.html",
              "tool_dev_url": "https://github.com/etal/cnvkit",
              "doi": "10.1371/journal.pcbi.1004873",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "baits": {
              "type": "file",
              "description": "BED or interval file listing the targeted regions.",
              "pattern": "*.{bed}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "annotation": {
              "type": "file",
              "description": "Use gene models from this file to assign names to the target regions.",
              "pattern": "*.{txt,bed,gff3,pil}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "File containing target regions",
              "pattern": "*.{bed}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "cnvpytor_callcnvs",
      "path": "modules/nf-core/cnvpytor/callcnvs/meta.yml",
      "type": "module",
      "meta": {
        "name": "cnvpytor_callcnvs",
        "description": "command line tool for calling CNVs in whole genome sequencing data",
        "keywords": [
          "CNV calling"
        ],
        "tools": [
          {
            "cnvpytor": {
              "description": "calling CNVs using read depth",
              "homepage": "https://github.com/abyzovlab/CNVpytor",
              "documentation": "https://github.com/abyzovlab/CNVpytor",
              "tool_dev_url": "https://github.com/abyzovlab/CNVpytor",
              "doi": "10.1101/2021.01.27.428472v1",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "pytor": {
              "type": "file",
              "description": "pytor file containing partitions of read depth histograms using mean-shift method",
              "pattern": "*.{pytor}"
            }
          },
          {
            "bin_sizes": {
              "type": "string",
              "description": "list of binsizes separated by space e.g. \"1000 10000\" and \"1000\""
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "pytor": {
              "type": "file",
              "description": "pytor files containing cnv calls",
              "pattern": "*.{pytor}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sima-r"
        ]
      }
    },
    {
      "name": "cnvpytor_histogram",
      "path": "modules/nf-core/cnvpytor/histogram/meta.yml",
      "type": "module",
      "meta": {
        "name": "cnvpytor_histogram",
        "description": "calculates read depth histograms",
        "keywords": [
          "cnv calling",
          "histogram"
        ],
        "tools": [
          {
            "cnvpytor": {
              "description": "calling CNVs using read depth",
              "homepage": "https://github.com/abyzovlab/CNVpytor",
              "documentation": "https://github.com/abyzovlab/CNVpytor",
              "tool_dev_url": "https://github.com/abyzovlab/CNVpytor",
              "doi": "10.1101/2021.01.27.428472v1",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "pytor": {
              "type": "file",
              "description": "pytor file containing read depth data",
              "pattern": "*.{pytor}"
            }
          },
          {
            "bin_sizes": {
              "type": "string",
              "description": "list of binsizes separated by space e.g. \"1000 10000\" and \"1000\""
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "pytor": {
              "type": "file",
              "description": "pytor file containing read depth histograms binned based on given bin size(s)",
              "pattern": "*.{pytor}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sima-r",
          "@ramprasadn"
        ]
      }
    },
    {
      "name": "cnvpytor_importreaddepth",
      "path": "modules/nf-core/cnvpytor/importreaddepth/meta.yml",
      "type": "module",
      "meta": {
        "name": "cnvpytor_importreaddepth",
        "description": "command line tool for CNV/CNA analysis. This step imports the read depth data into a root pytor file.",
        "keywords": [
          "read depth",
          "cnv calling"
        ],
        "tools": [
          {
            "cnvpytor -rd": {
              "description": "calling CNVs using read depth",
              "homepage": "https://github.com/abyzovlab/CNVpytor",
              "documentation": "https://github.com/abyzovlab/CNVpytor",
              "tool_dev_url": "https://github.com/abyzovlab/CNVpytor",
              "doi": "10.1101/2021.01.27.428472v1",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "input_file": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "bam file index",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "specifies reference genome file (only for cram file without reference genome)",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "pytor": {
              "type": "file",
              "description": "read depth root file in which read depth data binned to 100 base pair bins will be stored.",
              "pattern": "*.{pytor}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sima-r",
          "@ramprasadn"
        ]
      }
    },
    {
      "name": "cnvpytor_partition",
      "path": "modules/nf-core/cnvpytor/partition/meta.yml",
      "type": "module",
      "meta": {
        "name": "cnvpytor_partition",
        "description": "partitioning read depth histograms",
        "keywords": [
          "cnv calling",
          "partition histograms"
        ],
        "tools": [
          {
            "cnvpytor": {
              "description": "calling CNVs using read depth",
              "homepage": "https://github.com/abyzovlab/CNVpytor",
              "documentation": "https://github.com/abyzovlab/CNVpytor",
              "tool_dev_url": "https://github.com/abyzovlab/CNVpytor",
              "doi": "10.1101/2021.01.27.428472v1",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "pytor": {
              "type": "file",
              "description": "pytor file containing read depth data",
              "pattern": "*.{pytor}"
            }
          },
          {
            "bin_sizes": {
              "type": "string",
              "description": "list of binsizes separated by space e.g. \"1000 10000\" and \"1000\""
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "partitions": {
              "type": "file",
              "description": "pytor file containing partitions of read depth histograms using mean-shift method",
              "pattern": "*.{pytor}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sima-r",
          "@ramprasadn"
        ]
      }
    },
    {
      "name": "cnvpytor_view",
      "path": "modules/nf-core/cnvpytor/view/meta.yml",
      "type": "module",
      "meta": {
        "name": "cnvpytor_view",
        "description": "view function to generate vcfs",
        "keywords": [
          "cnv calling"
        ],
        "tools": [
          {
            "cnvpytor": {
              "description": "calling CNVs using read depth",
              "homepage": "https://github.com/abyzovlab/CNVpytor",
              "documentation": "https://github.com/abyzovlab/CNVpytor",
              "tool_dev_url": "https://github.com/abyzovlab/CNVpytor",
              "doi": "10.1101/2021.01.27.428472v1",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "pytor_files": {
              "type": "file",
              "description": "pytor file containing cnv calls. To merge calls from multiple samples use a list of files.",
              "pattern": "*.{pytor}"
            }
          },
          {
            "bin_sizes": {
              "type": "string",
              "description": "list of binsizes separated by space e.g. \"1000 10000\" and \"1000\""
            }
          },
          {
            "output_format": {
              "type": "string",
              "description": "output format of the cnv calls. Valid entries are \"tsv\", \"vcf\", and \"xls\""
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "tsv file containing cnv calls",
              "pattern": "*.{tsv}"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "vcf file containing cnv calls",
              "pattern": "*.{vcf}"
            }
          },
          {
            "xls": {
              "type": "file",
              "description": "xls file containing cnv calls",
              "pattern": "*.{xls}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sima-r",
          "@ramprasadn"
        ]
      }
    },
    {
      "name": "concoct_concoct",
      "path": "modules/nf-core/concoct/concoct/meta.yml",
      "type": "module",
      "meta": {
        "name": "concoct_concoct",
        "description": "Unsupervised binning of metagenomic contigs by using nucleotide composition - kmer frequencies - and coverage data for multiple samples",
        "keywords": [
          "contigs",
          "fragment",
          "mags",
          "binning",
          "concoct",
          "kmer",
          "nucleotide composition",
          "metagenomics",
          "bins"
        ],
        "tools": [
          {
            "concoct": {
              "description": "Clustering cONtigs with COverage and ComposiTion",
              "homepage": "https://concoct.readthedocs.io/en/latest/index.html",
              "documentation": "https://concoct.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/BinPro/CONCOCT",
              "doi": "10.1038/nmeth.3103",
              "licence": "['FreeBSD']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "coverage": {
              "type": "file",
              "description": "Subcontig coverage TSV table (typically generated with concoct_coverage_table.py)",
              "pattern": "*.tsv"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file containing subcontigs (typically generated with cutup_fasta.py)",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "args_txt": {
              "type": "file",
              "description": "File containing execution parameters",
              "pattern": "*_args.txt"
            }
          },
          {
            "clustering_csv": {
              "type": "file",
              "description": "CSV containing information which subcontig is assigned to which cluster",
              "pattern": "*_clustering_gt1000.csv"
            }
          },
          {
            "log_txt": {
              "type": "file",
              "description": "Log file of tool execution",
              "pattern": "*_log.txt"
            }
          },
          {
            "original_data_csv": {
              "type": "file",
              "description": "Original CONCOCT GT1000 output",
              "pattern": "*_original_data_gt1000.csv"
            }
          },
          {
            "pca_components_csv": {
              "type": "file",
              "description": "Untransformed PCA component values",
              "pattern": "*_PCA_components_data_gt1000.csv"
            }
          },
          {
            "pca_transformed_csv": {
              "type": "file",
              "description": "Transformed PCA compontent values",
              "pattern": "*_PCA_transformed_data_gt1000.csv"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "concoct_concoctcoveragetable",
      "path": "modules/nf-core/concoct/concoctcoveragetable/meta.yml",
      "type": "module",
      "meta": {
        "name": "concoct_concoctcoveragetable",
        "description": "Generate the input coverage table for CONCOCT using a BEDFile",
        "keywords": [
          "contigs",
          "fragment",
          "mags",
          "binning",
          "bed",
          "bam",
          "subcontigs",
          "coverage"
        ],
        "tools": [
          {
            "concoct": {
              "description": "Clustering cONtigs with COverage and ComposiTion",
              "homepage": "https://concoct.readthedocs.io/en/latest/index.html",
              "documentation": "https://concoct.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/BinPro/CONCOCT",
              "doi": "10.1038/nmeth.3103",
              "licence": "['FreeBSD']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file describing where each contig was cut up (typically output from CONCOCT's cut_up_fasta.py)",
              "pattern": "*.bed"
            }
          },
          {
            "bamfiles": {
              "type": "file",
              "description": "A single or list of BAM files of reads mapped back to original contigs (prior cutting up)",
              "pattern": "*.bam"
            }
          },
          {
            "baifiles": {
              "type": "file",
              "description": "A single or list of BAM index files (.bai) corresponding to BAM",
              "pattern": "*.bam"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Contig coverage table",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "concoct_cutupfasta",
      "path": "modules/nf-core/concoct/cutupfasta/meta.yml",
      "type": "module",
      "meta": {
        "name": "concoct_cutupfasta",
        "description": "Cut up fasta file in non-overlapping or overlapping parts of equal length.",
        "keywords": [
          "contigs",
          "fragment",
          "mags",
          "binning",
          "fasta",
          "cut",
          "cut up"
        ],
        "tools": [
          {
            "concoct": {
              "description": "Clustering cONtigs with COverage and ComposiTion",
              "homepage": "https://concoct.readthedocs.io/en/latest/index.html",
              "documentation": "https://concoct.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/BinPro/CONCOCT",
              "doi": "10.1038/nmeth.3103",
              "licence": "['FreeBSD']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "(Uncompressed) FASTA file containing contigs",
              "pattern": "*.{fasta,fna,fa,fas}"
            }
          },
          {
            "bed": {
              "type": "boolean",
              "description": "Specify whether to generate a BED file describing where each contig was cut up"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Cut up fasta file in non-overlapping or overlapping parts of equal length.",
              "pattern": "*.fasta"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Optional BED File containing locations on original contigs where they were cut up.",
              "pattern": "*.bed"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "concoct_extractfastabins",
      "path": "modules/nf-core/concoct/extractfastabins/meta.yml",
      "type": "module",
      "meta": {
        "name": "concoct_extractfastabins",
        "description": "Creates a FASTA file for each new cluster assigned by CONCOCT",
        "keywords": [
          "contigs",
          "fragment",
          "mags",
          "binning",
          "fasta",
          "cut",
          "cut up",
          "bins",
          "merge"
        ],
        "tools": [
          {
            "concoct": {
              "description": "Clustering cONtigs with COverage and ComposiTion",
              "homepage": "https://concoct.readthedocs.io/en/latest/index.html",
              "documentation": "https://concoct.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/BinPro/CONCOCT",
              "doi": "10.1038/nmeth.3103",
              "licence": "['FreeBSD']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "original_fasta": {
              "type": "file",
              "description": "Original input FASTA file to CONOCT cut_up_fasta",
              "pattern": "*.{fasta,fna,fa,fas}"
            }
          },
          {
            "csv": {
              "type": "boolean",
              "description": "Output table of merge_cutup_clustering with new cluster assignments",
              "pattern": ".csv"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA files containing CONCOCT predicted bin clusters, named numerically by CONCOCT cluster ID in a directory called `fasta_bins`",
              "pattern": "*.fa.gz"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "concoct_mergecutupclustering",
      "path": "modules/nf-core/concoct/mergecutupclustering/meta.yml",
      "type": "module",
      "meta": {
        "name": "concoct_mergecutupclustering",
        "description": "Merge consecutive parts of the original contigs original cut up by cut_up_fasta.py",
        "keywords": [
          "contigs",
          "fragment",
          "mags",
          "binning",
          "fasta",
          "cut",
          "cut up",
          "merge"
        ],
        "tools": [
          {
            "concoct": {
              "description": "Clustering cONtigs with COverage and ComposiTion",
              "homepage": "https://concoct.readthedocs.io/en/latest/index.html",
              "documentation": "https://concoct.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/BinPro/CONCOCT",
              "doi": "10.1038/nmeth.3103",
              "licence": "['FreeBSD']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "clustering_csv": {
              "type": "file",
              "description": "Input cutup clustering result. Typically *_gt1000.csv from concoct",
              "pattern": "*.csv"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "Cluster assignments per contig part with concensus cluster",
              "pattern": "*.csv"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "controlfreec_assesssignificance",
      "path": "modules/nf-core/controlfreec/assesssignificance/meta.yml",
      "type": "module",
      "meta": {
        "name": "controlfreec_assesssignificance",
        "description": "Add both Wilcoxon test and Kolmogorov-Smirnov test p-values to each CNV output of FREEC",
        "keywords": [
          "cna",
          "cnv",
          "somatic",
          "single",
          "tumor-only"
        ],
        "tools": [
          {
            "controlfreec/assesssignificance": {
              "description": "Copy number and genotype annotation from whole genome and whole exome sequencing data.",
              "homepage": "http://boevalab.inf.ethz.ch/FREEC",
              "documentation": "http://boevalab.inf.ethz.ch/FREEC/tutorial.html",
              "tool_dev_url": "https://github.com/BoevaLab/FREEC/",
              "doi": "10.1093/bioinformatics/btq635",
              "licence": [
                "GPL >=2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "cnvs": {
              "type": "file",
              "description": "_CNVs file generated by FREEC",
              "pattern": "*._CNVs"
            }
          },
          {
            "ratio": {
              "type": "file",
              "description": "ratio file generated by FREEC",
              "pattern": "*.ratio.txt"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "p_value_txt": {
              "type": "file",
              "description": "CNV file containing p_values for each call",
              "pattern": "*.p.value.txt"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "controlfreec_freec",
      "path": "modules/nf-core/controlfreec/freec/meta.yml",
      "type": "module",
      "meta": {
        "name": "controlfreec_freec",
        "description": "Copy number and genotype annotation from whole genome and whole exome sequencing data",
        "keywords": [
          "cna",
          "cnv",
          "somatic",
          "single",
          "tumor-only"
        ],
        "tools": [
          {
            "controlfreec/freec": {
              "description": "Copy number and genotype annotation from whole genome and whole exome sequencing data.",
              "homepage": "http://boevalab.inf.ethz.ch/FREEC",
              "documentation": "http://boevalab.inf.ethz.ch/FREEC/tutorial.html",
              "tool_dev_url": "https://github.com/BoevaLab/FREEC/",
              "doi": "10.1093/bioinformatics/btq635",
              "licence": [
                "GPL >=2"
              ]
            }
          }
        ],
        "input": [
          {
            "args": {
              "type": "map",
              "description": "Groovy Map containing tool parameters. MUST follow the structure/keywords below and be provided via modules.config.\nParameters marked as (optional) can be removed from the map, if they are not set. All values must be surrounded by quotes, meta map parameters can be set with, i.e. `sex = meta.sex`:\nFor default values, please check the documentation above.\n\n```\n{\n  [\n    \"general\" :[\n        \"bedgraphoutput\": (optional),\n        \"breakpointthreshold\": (optional),\n        \"breakpointtype\": (optional),\n        \"coefficientofvariation\": (optional),\n        \"contamination\": (optional),\n        \"contaminationadjustment\": (optional),\n        \"degree\": (optional),\n        \"forcegccontentnormalization\": (optional),\n        \"gccontentprofile\": (optional),\n        \"intercept\": (optional),\n        \"mincnalength\": (optional),\n        \"minmappabilityperwindow\": (optional),\n        \"minexpectedgc\": (optional),\n        \"maxexpectedgc\": (optional),\n        \"minimalsubclonepresence\": (optional),\n        \"noisydata\": (optional),\n        \"ploidy\": (optional),\n        \"printNA\": (optional),\n        \"readcountthreshold\": (optional),\n        \"sex\": (optional),\n        \"step\": (optional),\n        \"telocentromeric\": (optional),\n        \"uniquematch\": (optional),\n        \"window\": (optional)\n    ],\n    \"control\":[\n        \"inputformat\": (required),\n        \"mateorientation\": (optional),\n    ],\n    \"sample\":[\n        \"inputformat\": (required),\n        \"mateorientation\": (optional),\n    ],\n    \"BAF\":[\n        \"minimalcoverageperposition\": (optional),\n        \"minimalqualityperposition\": (optional),\n        \"shiftinquality\": (optional)\n    ]\n  ]\n}\n```\n"
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "mateFile_normal": {
              "type": "file",
              "description": "File with mapped reads",
              "pattern": "*.{sam,bam,pileup(.gz),bowtie(.gz),eland(.gz),arachne(.gz),psl(.gz),bed(.gz)}"
            }
          },
          {
            "mateFile_tumor": {
              "type": "file",
              "description": "File with mapped reads",
              "pattern": "*.{sam,bam,pileup(.gz),bowtie(.gz),eland(.gz),arachne(.gz),psl(.gz),bed(.gz)}"
            }
          },
          {
            "cpn_normal": {
              "type": "file",
              "description": "Raw copy number profiles (optional)",
              "pattern": "*.cpn"
            }
          },
          {
            "cpn_tumor": {
              "type": "file",
              "description": "Raw copy number profiles (optional)",
              "pattern": "*.cpn"
            }
          },
          {
            "minipileup_normal": {
              "type": "file",
              "description": "miniPileup file from previous run (optional)",
              "pattern": "*.pileup"
            }
          },
          {
            "minipileup_tumor": {
              "type": "file",
              "description": "miniPileup file from previous run (optional)",
              "pattern": "*.pileup"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference file (optional; required if args 'makePileup' is set)",
              "pattern": "*.{fasta,fna,fa}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Fasta index",
              "pattern": "*.fai"
            }
          },
          {
            "snp_position": {
              "type": "file",
              "description": "Path to a BED or VCF file with SNP positions to create a mini pileup file from the initial BAM file provided in mateFile (optional)",
              "pattern": "*.{bed,vcf}"
            }
          },
          {
            "known_snps": {
              "type": "file",
              "description": "File with known SNPs",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "known_snps_tbi": {
              "type": "file",
              "description": "Index of known_snps",
              "pattern": "*.tbi"
            }
          },
          {
            "chr_directory": {
              "type": "file",
              "description": "Path to directory with chromosome fasta files (optional, required if gccontentprofile is not provided)",
              "pattern": "*/"
            }
          },
          {
            "mappability": {
              "type": "file",
              "description": "Contains information of mappable positions (optional)",
              "pattern": "*.gem"
            }
          },
          {
            "target_bed": {
              "type": "file",
              "description": "Sorted bed file containing capture regions (optional)",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bedgraph": {
              "type": "file",
              "description": "Bedgraph format for the UCSC genome browser",
              "pattern": ".bedgraph"
            }
          },
          {
            "control_cpn": {
              "type": "file",
              "description": "files with raw copy number profiles",
              "pattern": "*_control.cpn"
            }
          },
          {
            "sample_cpn": {
              "type": "file",
              "description": "files with raw copy number profiles",
              "pattern": "*_sample.cpn"
            }
          },
          {
            "gcprofile_cpn": {
              "type": "file",
              "description": "file with GC-content profile.",
              "pattern": "GC_profile.*.cpn"
            }
          },
          {
            "BAF": {
              "type": "file",
              "description": "file B-allele frequencies for each possibly heterozygous SNP position",
              "pattern": "*_BAF.txt"
            }
          },
          {
            "CNV": {
              "type": "file",
              "description": "file with coordinates of predicted copy number alterations.",
              "pattern": "*_CNVs"
            }
          },
          {
            "info": {
              "type": "file",
              "description": "parsable file with information about FREEC run",
              "pattern": "*_info.txt"
            }
          },
          {
            "ratio": {
              "type": "file",
              "description": "file with ratios and predicted copy number alterations for each window",
              "pattern": "*_ratio.txt"
            }
          },
          {
            "config": {
              "type": "file",
              "description": "Config file used to run Control-FREEC",
              "pattern": "config.txt"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "controlfreec_freec2bed",
      "path": "modules/nf-core/controlfreec/freec2bed/meta.yml",
      "type": "module",
      "meta": {
        "name": "controlfreec_freec2bed",
        "description": "Plot Freec output",
        "keywords": [
          "cna",
          "cnv",
          "somatic",
          "single",
          "tumor-only"
        ],
        "tools": [
          {
            "controlfreec": {
              "description": "Copy number and genotype annotation from whole genome and whole exome sequencing data.",
              "homepage": "http://boevalab.inf.ethz.ch/FREEC",
              "documentation": "http://boevalab.inf.ethz.ch/FREEC/tutorial.html",
              "tool_dev_url": "https://github.com/BoevaLab/FREEC/",
              "doi": "10.1093/bioinformatics/btq635",
              "licence": [
                "GPL >=2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ratio": {
              "type": "file",
              "description": "ratio file generated by FREEC",
              "pattern": "*.ratio.txt"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Bed file",
              "pattern": "*.bed"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "controlfreec_freec2circos",
      "path": "modules/nf-core/controlfreec/freec2circos/meta.yml",
      "type": "module",
      "meta": {
        "name": "controlfreec_freec2circos",
        "description": "Format Freec output to circos input format",
        "keywords": [
          "cna",
          "cnv",
          "somatic",
          "single",
          "tumor-only"
        ],
        "tools": [
          {
            "controlfreec": {
              "description": "Copy number and genotype annotation from whole genome and whole exome sequencing data.",
              "homepage": "http://boevalab.inf.ethz.ch/FREEC",
              "documentation": "http://boevalab.inf.ethz.ch/FREEC/tutorial.html",
              "tool_dev_url": "https://github.com/BoevaLab/FREEC/",
              "doi": "10.1093/bioinformatics/btq635",
              "licence": [
                "GPL >=2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ratio": {
              "type": "file",
              "description": "ratio file generated by FREEC",
              "pattern": "*.ratio.txt"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "circos": {
              "type": "file",
              "description": "Txt file",
              "pattern": "*.circos.txt"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "controlfreec_makegraph",
      "path": "modules/nf-core/controlfreec/makegraph/meta.yml",
      "type": "module",
      "meta": {
        "name": "controlfreec_makegraph",
        "description": "Plot Freec output",
        "keywords": [
          "cna",
          "cnv",
          "somatic",
          "single",
          "tumor-only"
        ],
        "tools": [
          {
            "controlfreec": {
              "description": "Copy number and genotype annotation from whole genome and whole exome sequencing data.",
              "homepage": "http://boevalab.inf.ethz.ch/FREEC",
              "documentation": "http://boevalab.inf.ethz.ch/FREEC/tutorial.html",
              "tool_dev_url": "https://github.com/BoevaLab/FREEC/",
              "doi": "10.1093/bioinformatics/btq635",
              "licence": [
                "GPL >=2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ratio": {
              "type": "file",
              "description": "ratio file generated by FREEC",
              "pattern": "*.ratio.txt"
            }
          },
          {
            "baf": {
              "type": "file",
              "description": ".BAF file generated by FREEC",
              "pattern": "*.BAF"
            }
          },
          {
            "ploidy": {
              "type": "integer",
              "description": "Ploidy value for which graph should be created"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "png_baf": {
              "type": "file",
              "description": "Image of BAF plot",
              "pattern": "*_BAF.png"
            }
          },
          {
            "png_ratio_log2": {
              "type": "file",
              "description": "Image of ratio log2 plot",
              "pattern": "*_ratio.log2.png"
            }
          },
          {
            "png_ratio": {
              "type": "file",
              "description": "Image of ratio plot",
              "pattern": "*_ratio.png"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "cooler_balance",
      "path": "modules/nf-core/cooler/balance/meta.yml",
      "type": "module",
      "meta": {
        "name": "cooler_balance",
        "description": "Run matrix balancing on a cool file",
        "keywords": [
          "cooler/balance",
          "cooler",
          "cool",
          "cooler"
        ],
        "tools": [
          {
            "cooler": {
              "description": "Sparse binary format for genomic interaction matrices",
              "homepage": "https://open2c.github.io/cooler/",
              "documentation": "https://cooler.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/open2c/cooler",
              "doi": "10.1093/bioinformatics/btz540",
              "licence": [
                "BSD-3-Clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "cool": {
              "type": "file",
              "description": "Path to COOL file",
              "pattern": "*.{cool,mcool}"
            }
          },
          {
            "resolution": {
              "type": "integer",
              "description": "Resolution"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "cool": {
              "type": "file",
              "description": "Output COOL file balancing weigths",
              "pattern": "*.cool"
            }
          }
        ],
        "authors": [
          "@nservant",
          "@muffato"
        ]
      },
      "pipelines": [
        {
          "name": "hic",
          "version": "2.1.0"
        }
      ]
    },
    {
      "name": "cooler_cload",
      "path": "modules/nf-core/cooler/cload/meta.yml",
      "type": "module",
      "meta": {
        "name": "cooler_cload",
        "description": "Create a cooler from genomic pairs and bins",
        "keywords": [
          "cool",
          "cooler",
          "cload",
          "hic"
        ],
        "tools": [
          {
            "cooler": {
              "description": "Sparse binary format for genomic interaction matrices",
              "homepage": "https://open2c.github.io/cooler/",
              "documentation": "https://cooler.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/open2c/cooler",
              "doi": "10.1093/bioinformatics/btz540",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pairs": {
              "type": "file",
              "description": "Path to contacts (i.e. read pairs) file."
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Path to index file of the contacts."
            }
          },
          {
            "cool_bin": {
              "type": "integer",
              "description": "Bins size in bp"
            }
          },
          {
            "chromsizes": {
              "type": "file",
              "description": "Path to a chromsizes file."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          },
          {
            "cool": {
              "type": "file",
              "description": "Output COOL file path",
              "pattern": "*.cool"
            }
          },
          {
            "cool_bin": {
              "type": "integer",
              "description": "Bins size in bp"
            }
          }
        ],
        "authors": [
          "@jianhong",
          "@muffato"
        ]
      },
      "pipelines": [
        {
          "name": "hic",
          "version": "2.1.0"
        }
      ]
    },
    {
      "name": "cooler_digest",
      "path": "modules/nf-core/cooler/digest/meta.yml",
      "type": "module",
      "meta": {
        "name": "cooler_digest",
        "description": "Generate fragment-delimited genomic bins",
        "keywords": [
          "digest",
          "enzyme",
          "cooler"
        ],
        "tools": [
          {
            "cooler": {
              "description": "Sparse binary format for genomic interaction matrices",
              "homepage": "https://open2c.github.io/cooler/",
              "documentation": "https://cooler.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/open2c/cooler",
              "doi": "10.1093/bioinformatics/btz540",
              "licence": [
                "BSD-3-Clause"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Genome assembly FASTA file or folder containing FASTA files (uncompressed).",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "chromsizes": {
              "type": "file",
              "description": "Path to a chromsizes file."
            }
          },
          {
            "enzyme": {
              "type": "string",
              "description": "Name of restriction enzyme. e.g. CviQI.",
              "documentation": "http://biopython.org/DIST/docs/cookbook/Restriction.html"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "A genome segmentation of restriction fragments as a BED file.",
              "pattern": "*.{bed}"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      },
      "pipelines": [
        {
          "name": "hicar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "cooler_dump",
      "path": "modules/nf-core/cooler/dump/meta.yml",
      "type": "module",
      "meta": {
        "name": "cooler_dump",
        "description": "Dump a cooler’s data to a text stream.",
        "keywords": [
          "dump",
          "text",
          "cooler"
        ],
        "tools": [
          {
            "cooler": {
              "description": "Sparse binary format for genomic interaction matrices",
              "homepage": "https://open2c.github.io/cooler/",
              "documentation": "https://cooler.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/open2c/cooler",
              "doi": "10.1093/bioinformatics/btz540",
              "licence": [
                "BSD-3-Clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "cool": {
              "type": "file",
              "description": "Path to COOL file",
              "pattern": "*.{cool,mcool}"
            }
          },
          {
            "resolution": {
              "type": "integer",
              "description": "Resolution"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bedpe": {
              "type": "file",
              "description": "Output text file",
              "pattern": "*.bedpe"
            }
          }
        ],
        "authors": [
          "@jianhong",
          "@muffato"
        ]
      },
      "pipelines": [
        {
          "name": "hic",
          "version": "2.1.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "cooler_makebins",
      "path": "modules/nf-core/cooler/makebins/meta.yml",
      "type": "module",
      "meta": {
        "name": "cooler_makebins",
        "description": "Generate fixed-width genomic bins",
        "keywords": [
          "makebins",
          "cooler",
          "genomic bins"
        ],
        "tools": [
          {
            "cooler": {
              "description": "Sparse binary format for genomic interaction matrices",
              "homepage": "https://open2c.github.io/cooler/",
              "documentation": "https://cooler.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/open2c/cooler",
              "doi": "10.1093/bioinformatics/btz540",
              "licence": [
                "BSD-3-Clause"
              ]
            }
          }
        ],
        "input": [
          {
            "chromsize": {
              "type": "file",
              "description": "Path to chromosome size file"
            }
          },
          {
            "cool_bin": {
              "type": "integer",
              "description": "Resolution (bin size) in base pairs"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Genome segmentation at a fixed resolution as a BED file.",
              "pattern": "*.bed"
            }
          }
        ],
        "authors": [
          "@nservant",
          "@muffato"
        ]
      },
      "pipelines": [
        {
          "name": "hic",
          "version": "2.1.0"
        }
      ]
    },
    {
      "name": "cooler_merge",
      "path": "modules/nf-core/cooler/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "cooler_merge",
        "description": "Merge multiple coolers with identical axes",
        "keywords": [
          "merge",
          "cooler",
          "hic"
        ],
        "tools": [
          {
            "cooler": {
              "description": "Sparse binary format for genomic interaction matrices",
              "homepage": "https://open2c.github.io/cooler/",
              "documentation": "https://cooler.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/open2c/cooler",
              "doi": "10.1093/bioinformatics/btz540",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "cool": {
              "type": "file",
              "description": "Path to COOL file",
              "pattern": "*.{cool,mcool}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          },
          {
            "cool": {
              "type": "file",
              "description": "Path to COOL file",
              "pattern": "*.cool"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      }
    },
    {
      "name": "cooler_zoomify",
      "path": "modules/nf-core/cooler/zoomify/meta.yml",
      "type": "module",
      "meta": {
        "name": "cooler_zoomify",
        "description": "Generate a multi-resolution cooler file by coarsening",
        "keywords": [
          "mcool",
          "cool",
          "cooler"
        ],
        "tools": [
          {
            "cooler": {
              "description": "Sparse binary format for genomic interaction matrices",
              "homepage": "https://open2c.github.io/cooler/",
              "documentation": "https://cooler.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/open2c/cooler",
              "doi": "10.1093/bioinformatics/btz540",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "cool": {
              "type": "file",
              "description": "Path to COOL file",
              "pattern": "*.{cool,mcool}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "mcool": {
              "type": "file",
              "description": "Output mcool file",
              "pattern": "*.mcool"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      },
      "pipelines": [
        {
          "name": "hic",
          "version": "2.1.0"
        }
      ]
    },
    {
      "name": "coreograph",
      "path": "modules/nf-core/coreograph/meta.yml",
      "type": "module",
      "meta": {
        "name": "coreograph",
        "description": "Great....yet another TMA dearray program. What does this one do? Coreograph uses UNet, a deep learning model, to identify complete/incomplete tissue cores on a tissue microarray. It has been trained on 9 TMA slides of different sizes and tissue types.",
        "keywords": [
          "UNet",
          "TMA dearray",
          "Segmentation",
          "Cores"
        ],
        "tools": [
          {
            "coreograph": {
              "description": "A TMA dearray porgram that uses UNet, a deep learning model, to identify complete/incomplete tissue cores on a tissue microarray.",
              "homepage": "https://mcmicro.org/parameters/core.html#coreograph",
              "documentation": "https://mcmicro.org/troubleshooting/tuning/coreograph.html",
              "tool_dev_url": "https://github.com/HMS-IDAC/UNetCoreograph",
              "doi": "10.1038/s41592-021-01308-y",
              "licence": "MIT License"
            }
          }
        ],
        "input": [
          {
            "image": {
              "type": "file",
              "description": "ome.tif/tif file",
              "pattern": "*.{ome.tif,tif}"
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\n"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "cores": {
              "type": "file",
              "description": "Complete/Incomplete tissue cores",
              "pattern": "*.{tif}"
            }
          },
          {
            "masks": {
              "type": "file",
              "description": "Binary masks for the Complete/Incomplete tissue cores",
              "pattern": "./masks/*.{tif}"
            }
          },
          {
            "tma_map": {
              "type": "file",
              "description": "A TMA map showing labels and outlines",
              "pattern": "TMA_MAP.tif"
            }
          },
          {
            "centroids": {
              "type": "file",
              "description": "A text file listing centroids of each core in format Y, X",
              "pattern": "centroidsY-X.txt"
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\n"
            }
          }
        ],
        "authors": [
          "@arozhada",
          "@MargotCh"
        ]
      }
    },
    {
      "name": "crisprcleanr_normalize",
      "path": "modules/nf-core/crisprcleanr/normalize/meta.yml",
      "type": "module",
      "meta": {
        "name": "crisprcleanr_normalize",
        "description": "remove false positives of functional crispr genomics due to CNVs",
        "keywords": [
          "sort",
          "CNV",
          "correction",
          "CRISPR"
        ],
        "tools": [
          {
            "crisprcleanr": {
              "description": "Analysis of CRISPR functional genomics, remove false positive due to CNVs.",
              "homepage": "https://github.com/francescojm/CRISPRcleanR",
              "documentation": "https://github.com/francescojm/CRISPRcleanR/blob/master/Quick_start.pdf",
              "tool_dev_url": "https://github.com/francescojm/CRISPRcleanR/tree/v3.0.0",
              "doi": "10.1186/s12864-018-4989-y",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "count_file": {
              "type": "file",
              "description": "sgRNA raw counts",
              "pattern": "*.tsv"
            }
          },
          {
            "library_file": {
              "type": "file",
              "description": "sgRNA library",
              "pattern": "*.tsv"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "norm_count_file": {
              "type": "file",
              "description": "normalized count file",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@LaurenceKuhl"
        ]
      },
      "pipelines": [
        {
          "name": "crisprseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "crumble",
      "path": "modules/nf-core/crumble/meta.yml",
      "type": "module",
      "meta": {
        "name": "crumble",
        "description": "Controllable lossy compression of BAM/CRAM files",
        "keywords": [
          "compress",
          "bam",
          "sam",
          "cram"
        ],
        "tools": [
          {
            "crumble": {
              "description": "Controllable lossy compression of BAM/CRAM files",
              "homepage": "https://github.com/jkbonfield/crumble",
              "documentation": "https://github.com/jkbonfield/crumble",
              "tool_dev_url": "https://github.com/jkbonfield/crumble",
              "doi": "10.1093/bioinformatics/bty608",
              "licence": "['multiple BSD style licenses']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "keepbed": {
              "type": "file",
              "description": "BED file defining regions to keep quality"
            }
          },
          {
            "bedout": {
              "type": "boolean",
              "description": "set to true to ouput suspicious regions to a BED file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "optional filtered/compressed BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "cram": {
              "type": "file",
              "description": "optional filtered/compressed CRAM file",
              "pattern": "*.{cram}"
            }
          },
          {
            "sam": {
              "type": "file",
              "description": "optional filtered/compressed SAM file",
              "pattern": "*.{sam}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "optional suspicious regions BED file",
              "pattern": "*{bed}"
            }
          }
        ],
        "authors": [
          "@priyanka-surana"
        ]
      }
    },
    {
      "name": "csvtk_concat",
      "path": "modules/nf-core/csvtk/concat/meta.yml",
      "type": "module",
      "meta": {
        "name": "csvtk_concat",
        "description": "Concatenate two or more CSV (or TSV) tables into a single table",
        "keywords": [
          "concatenate",
          "tsv",
          "csv"
        ],
        "tools": [
          {
            "csvtk": {
              "description": "A cross-platform, efficient, practical CSV/TSV toolkit",
              "homepage": "http://bioinf.shenwei.me/csvtk",
              "documentation": "http://bioinf.shenwei.me/csvtk",
              "tool_dev_url": "https://github.com/shenwei356/csvtk",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "CSV/TSV formatted files",
              "pattern": "*.{csv,tsv}"
            }
          },
          {
            "in_format": {
              "type": "string",
              "description": "Input format (csv, tab, or a delimiting character)",
              "pattern": "*"
            }
          },
          {
            "out_format": {
              "type": "string",
              "description": "Output format (csv, tab, or a delimiting character)",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "version.yml"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "Concatenated CSV/TSV file",
              "pattern": "*.{csv,tsv}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "csvtk_split",
      "path": "modules/nf-core/csvtk/split/meta.yml",
      "type": "module",
      "meta": {
        "name": "csvtk_split",
        "description": "Splits CSV/TSV into multiple files according to column values",
        "keywords": [
          "split",
          "csv",
          "tsv"
        ],
        "tools": [
          {
            "csvtk": {
              "description": "CSVTK is a cross-platform, efficient and practical CSV/TSV toolkit that allows rapid data investigation and manipulation.",
              "homepage": "https://bioinf.shenwei.me/csvtk/",
              "documentation": "https://bioinf.shenwei.me/csvtk/",
              "tool_dev_url": "https://github.com/shenwei356/csvtk",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "CSV/TSV file",
              "pattern": "*.{csv,tsv}"
            }
          },
          {
            "in_format": {
              "type": "string",
              "description": "Input format (csv, tab, or a delimiting character)",
              "pattern": "*"
            }
          },
          {
            "out_format": {
              "type": "string",
              "description": "Output format (csv, tab, or a delimiting character)",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "split_csv": {
              "type": "file",
              "description": "Split CSV/TSV file",
              "pattern": "*.{csv,tsv}"
            }
          }
        ],
        "authors": [
          "@SusiJo"
        ]
      }
    },
    {
      "name": "custom_dumpsoftwareversions",
      "path": "modules/nf-core/custom/dumpsoftwareversions/meta.yml",
      "type": "module",
      "meta": {
        "name": "custom_dumpsoftwareversions",
        "description": "Custom module used to dump software versions within the nf-core pipeline template",
        "keywords": [
          "custom",
          "dump",
          "version"
        ],
        "tools": [
          {
            "custom": {
              "description": "Custom module used to dump software versions within the nf-core pipeline template",
              "homepage": "https://github.com/nf-core/tools",
              "documentation": "https://github.com/nf-core/tools",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "versions": {
              "type": "file",
              "description": "YML file containing software versions",
              "pattern": "*.yml"
            }
          }
        ],
        "output": [
          {
            "yml": {
              "type": "file",
              "description": "Standard YML file containing software versions",
              "pattern": "software_versions.yml"
            }
          },
          {
            "mqc_yml": {
              "type": "file",
              "description": "MultiQC custom content YML file containing software versions",
              "pattern": "software_versions_mqc.yml"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@grst"
        ]
      },
      "pipelines": [
        {
          "name": "airrflow",
          "version": "3.1.0"
        },
        {
          "name": "ampliseq",
          "version": "2.6.1"
        },
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "crisprseq",
          "version": "2.0.0"
        },
        {
          "name": "demultiplex",
          "version": "1.3.2"
        },
        {
          "name": "epitopeprediction",
          "version": "2.2.1"
        },
        {
          "name": "fastquorum",
          "version": "dev"
        },
        {
          "name": "fetchngs",
          "version": "1.10.0"
        },
        {
          "name": "funcscan",
          "version": "1.1.2"
        },
        {
          "name": "genomeannotator",
          "version": "dev"
        },
        {
          "name": "genomeassembler",
          "version": "dev"
        },
        {
          "name": "genomeskim",
          "version": "dev"
        },
        {
          "name": "gwas",
          "version": "dev"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "hic",
          "version": "2.1.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "hlatyping",
          "version": "2.0.0"
        },
        {
          "name": "isoseq",
          "version": "1.1.4"
        },
        {
          "name": "mag",
          "version": "2.3.2"
        },
        {
          "name": "metapep",
          "version": "dev"
        },
        {
          "name": "methylseq",
          "version": "2.4.0"
        },
        {
          "name": "mhcquant",
          "version": "2.4.1"
        },
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "nanostring",
          "version": "1.1.1"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "pangenome",
          "version": "dev"
        },
        {
          "name": "proteinfold",
          "version": "1.0.0"
        },
        {
          "name": "quantms",
          "version": "1.1.1"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "scrnaseq",
          "version": "2.3.2"
        },
        {
          "name": "smrnaseq",
          "version": "2.2.1"
        },
        {
          "name": "spatialtranscriptomics",
          "version": "dev"
        },
        {
          "name": "ssds",
          "version": "dev"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "custom_getchromsizes",
      "path": "modules/nf-core/custom/getchromsizes/meta.yml",
      "type": "module",
      "meta": {
        "name": "custom_getchromsizes",
        "description": "Generates a FASTA file of chromosome sizes and a fasta index file",
        "keywords": [
          "fasta",
          "chromosome",
          "indexing"
        ],
        "tools": [
          {
            "samtools": {
              "description": "Tools for dealing with SAM, BAM and CRAM files",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "tool_dev_url": "https://github.com/samtools/samtools",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file",
              "pattern": "*.{fa,fasta,fna,fas}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sizes": {
              "type": "file",
              "description": "File containing chromosome lengths",
              "pattern": "*.{sizes}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "FASTA index file",
              "pattern": "*.{fai}"
            }
          },
          {
            "gzi": {
              "type": "file",
              "description": "Optional gzip index file for compressed inputs",
              "pattern": "*.gzi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@tamara-hodgetts",
          "@chris-cheshire",
          "@muffato"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "hic",
          "version": "2.1.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "custom_matrixfilter",
      "path": "modules/nf-core/custom/matrixfilter/meta.yml",
      "type": "module",
      "meta": {
        "name": "custom_matrixfilter",
        "description": "filter a matrix based on a minimum value and numbers of samples that must pass.",
        "keywords": [
          "matrix",
          "filter"
        ],
        "tools": [
          {
            "matrixfilter": {
              "description": "filter a matrix based on a minimum value and numbers of samples",
              "tool_dev_url": "https://github.com/nf-core/modules/blob/master/modules/nf-core/custom/matrixfilter/main.nf"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing information on matrix to be filtered, at a\nminimum an id. e.g. [ id:'test' ]\n"
            }
          },
          {
            "abundance": {
              "type": "file",
              "description": "Raw TSV or CSV format abundance matrix with features (e.g.\ngenes) by row and observations (e.g. samples) by column. All rownames\nfrom the sample sheet should be present in the columns.\n"
            }
          },
          {
            "samplesheet_meta": {
              "type": "map",
              "description": "Where samplesheet is provided, aroovy Map containing information on\nsample sheet, at a minimum an id.  e.g. [ id:'test' ]\n"
            }
          },
          {
            "samplesheet": {
              "type": "file",
              "description": "Optional CSV or TSV format sample sheet with sample metadata. If\nprovided this is used to infer minimum passing samples from group sizes\npresent (see grouping_variable), but also to validate matrix columns.\nIf not provided, all numeric columns are selected.\n"
            }
          },
          {
            "minimum_abundance": {
              "type": "numeric",
              "description": "Minimum abundance value, supplied via task.ext.args as --minimum_abundance\n",
              "default": 1
            }
          },
          {
            "minimum_samples": {
              "type": "numeric",
              "description": "Minimum observations that must pass the threshold to retain\nthe row/ feature (e.g. gene). Supplied via task.ext.args as\n--minimum_samples\n",
              "default": 1
            }
          },
          {
            "minimum_proportion": {
              "type": "numeric",
              "description": "A minimum proportion of observations that must pass the threshold.\nSupplied via task.ext.args as --minimum_proportion. Overrides\nminimum_samples\n",
              "default": 0
            }
          },
          {
            "grouping_variable": {
              "type": "optional string",
              "description": "Optionally supply a variable from the sample sheet that can be used to\ndefine groups and derive a minimum group size upon which to base\nminimum observation numbers. The rationale being to allow retention of\nfeatures that might be present in only one group. Supplied via\ntask.ext.args as --grouping_variable\n"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing information on experiment.\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "filtered": {
              "type": "file",
              "description": "Filtered version of input matrix",
              "pattern": "*.filtered.tsv"
            }
          }
        ],
        "authors": [
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "custom_sratoolsncbisettings",
      "path": "modules/nf-core/custom/sratoolsncbisettings/meta.yml",
      "type": "module",
      "meta": {
        "name": "sratoolsncbisettings",
        "description": "Test for the presence of suitable NCBI settings or create them on the fly.",
        "keywords": [
          "NCBI",
          "settings",
          "sra-tools",
          "prefetch",
          "fasterq-dump"
        ],
        "tools": [
          {
            "sratools": {
              "description": "SRA Toolkit and SDK from NCBI",
              "homepage": "https://github.com/ncbi/sra-tools",
              "documentation": "https://github.com/ncbi/sra-tools/wiki",
              "tool_dev_url": "https://github.com/ncbi/sra-tools",
              "licence": "['Public Domain']"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "ncbi_settings": {
              "type": "file",
              "description": "An NCBI user settings file.",
              "pattern": "*.mkfg"
            }
          }
        ],
        "authors": [
          "@Midnighter"
        ]
      },
      "pipelines": [
        {
          "name": "fetchngs",
          "version": "1.10.0"
        }
      ]
    },
    {
      "name": "custom_tabulartogseacls",
      "path": "modules/nf-core/custom/tabulartogseacls/meta.yml",
      "type": "module",
      "meta": {
        "name": "custom_tabulartogseacls",
        "description": "Make a GSEA class file (.cls) from tabular inputs",
        "keywords": [
          "gsea",
          "cls",
          "convert",
          "tabular"
        ],
        "tools": [
          {
            "custom": {
              "description": "Make a GSEA class file (.cls) from tabular inputs",
              "tool_dev_url": "https://github.com/nf-core/modules/blob/master/modules/nf-core/custom/tabulartogseacls/main.nf"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing metadata including an id, the sample sheet column\nused to define groups, and optionally a separator to override defaults e.g. [\n  id:'test', variable:'treatment', separator:',' ]. The way these values are\npassed to the associated module parameters is then defined via an ext.args\nspecification for the process from the workflow, like: ext.args = { [\n  \"separator\": \"\\t\", \"variable\": \"$meta.variable\" ] } ('variable' is\ncompulsory here).\n"
            }
          },
          {
            "samples": {
              "type": "file",
              "description": "Tabular (e.g. TSV/CSV) samples file with sample IDs by row and variables by column.",
              "pattern": "*.{csv,tsv}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing metadata e.g. [ id:'test', variable:'treatment',\nseparator:',' ]\n"
            }
          },
          {
            "cls": {
              "type": "file",
              "description": "A categorical class format file (.cls) as defined by the Broad\ndocumentation at\nhttps://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/Data_formats\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "custom_tabulartogseagct",
      "path": "modules/nf-core/custom/tabulartogseagct/meta.yml",
      "type": "module",
      "meta": {
        "name": "custom_tabulartogseagct",
        "description": "Convert a TSV or CSV with features by row and observations by column to a GCT format file as consumed by GSEA",
        "keywords": [
          "gsea",
          "gct",
          "tabular"
        ],
        "tools": [
          {
            "tabulartogseagct": {
              "description": "Convert a TSV or CSV with features by row and observations by column to a GCT format file as consumed by GSEA",
              "tool_dev_url": "https://github.com/nf-core/modules/blob/master/modules/nf-core/custom/tabulartogseagct/main.nf"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing matrix information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "tabular": {
              "type": "file",
              "description": "Tabular (e.g. TSV or CSV file) containing a numeric matrix with features (e.g. genes) by row and samples by column.",
              "pattern": "*.{tsv,csv}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing matrix information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "gct": {
              "type": "file",
              "description": "GCT format version of input TSV",
              "pattern": "*.{gct}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "cutadapt",
      "path": "modules/nf-core/cutadapt/meta.yml",
      "type": "module",
      "meta": {
        "name": "cutadapt",
        "description": "Perform adapter/quality trimming on sequencing reads",
        "keywords": [
          "trimming",
          "adapter trimming",
          "adapters",
          "quality trimming"
        ],
        "tools": [
          {
            "cuatadapt": {
              "description": "Cutadapt finds and removes adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.\n",
              "documentation": "https://cutadapt.readthedocs.io/en/stable/index.html",
              "doi": "10.14806/ej.17.1.200",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "The trimmed/modified fastq reads",
              "pattern": "*fastq.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "cuatadapt log file",
              "pattern": "*cutadapt.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        },
        {
          "name": "crisprseq",
          "version": "2.0.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "cutesv",
      "path": "modules/nf-core/cutesv/meta.yml",
      "type": "module",
      "meta": {
        "name": "cutesv",
        "description": "structural-variant calling with cutesv",
        "keywords": [
          "cutesv",
          "structural-variant calling"
        ],
        "tools": [
          {
            "cutesv": {
              "description": "a clustering-and-refinement method to analyze the signatures to implement sensitive SV detection.",
              "homepage": "https://github.com/tjiangHIT/cuteSV",
              "documentation": "https://github.com/tjiangHIT/cuteSV#readme",
              "tool_dev_url": "https://github.com/tjiangHIT/cuteSV",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Index of BAM file",
              "pattern": "*.bai"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'fasta' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference database in FASTA format\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file containing called variants from CuteSV",
              "pattern": "*.vcf"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@christopher-hakkaart",
          "@yuukiiwa"
        ]
      }
    },
    {
      "name": "damageprofiler",
      "path": "modules/nf-core/damageprofiler/meta.yml",
      "type": "module",
      "meta": {
        "name": "damageprofiler",
        "description": "A Java based tool to determine damage patterns on ancient DNA as a replacement for mapDamage",
        "keywords": [
          "damage",
          "deamination",
          "miscoding lesions",
          "C to T",
          "ancient DNA",
          "aDNA",
          "palaeogenomics",
          "archaeogenomics",
          "palaeogenetics",
          "archaeogenetics"
        ],
        "tools": [
          {
            "damageprofiler": {
              "description": "A Java based tool to determine damage patterns on ancient DNA as a replacement for mapDamage",
              "homepage": "https://github.com/Integrative-Transcriptomics/DamageProfiler",
              "documentation": "https://damageprofiler.readthedocs.io/",
              "tool_dev_url": "https://github.com/Integrative-Transcriptomics/DamageProfiler",
              "doi": "10.1093/bioinformatics/btab190",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "OPTIONAL FASTA reference file",
              "pattern": "*.{fasta,fna,fa}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "OPTIONAL FASTA index file from samtools faidx",
              "pattern": "*.{fai}"
            }
          },
          {
            "specieslist": {
              "type": "file",
              "description": "OPTIONAL text file with list of target reference headers",
              "pattern": "*.{txt}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "results": {
              "type": "dir",
              "description": "DamageProfiler results directory",
              "pattern": "*/*"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "dastool_dastool",
      "path": "modules/nf-core/dastool/dastool/meta.yml",
      "type": "module",
      "meta": {
        "name": "dastool_dastool",
        "description": "DAS Tool binning step.",
        "keywords": [
          "binning",
          "das tool",
          "table",
          "de novo",
          "bins",
          "contigs",
          "assembly",
          "das_tool"
        ],
        "tools": [
          {
            "dastool": {
              "description": "DAS Tool is an automated method that integrates the results\nof a flexible number of binning algorithms to calculate an optimized, non-redundant\nset of bins from a single assembly.\n",
              "homepage": "https://github.com/cmks/DAS_Tool",
              "documentation": "https://github.com/cmks/DAS_Tool",
              "tool_dev_url": "https://github.com/cmks/DAS_Tool",
              "doi": "10.1038/s41564-018-0171-1",
              "licence": [
                "BSD"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "contigs": {
              "type": "file",
              "description": "fasta file",
              "pattern": "*.{fa.gz,fas.gz,fasta.gz}"
            }
          },
          {
            "bins": {
              "type": "file",
              "description": "FastaToContig2Bin tabular file generated with dastool/fastatocontig2bin",
              "pattern": "*.tsv"
            }
          },
          {
            "proteins": {
              "type": "file",
              "description": "Predicted proteins in prodigal fasta format (>scaffoldID_geneNo)",
              "pattern": "*.{fa.gz,fas.gz,fasta.gz}"
            }
          },
          {
            "db_directory": {
              "type": "file",
              "description": "(optional) Directory of single copy gene database."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file of the run",
              "pattern": "*.log"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "Summary of output bins including quality and completeness estimates",
              "pattern": "*summary.txt"
            }
          },
          {
            "contig2bin": {
              "type": "file",
              "description": "Scaffolds to bin file of output bins",
              "pattern": "*.contig2bin.txt"
            }
          },
          {
            "eval": {
              "type": "file",
              "description": "Quality and completeness estimates of input bin sets",
              "pattern": "*.eval"
            }
          },
          {
            "bins": {
              "type": "file",
              "description": "Final refined bins in fasta format",
              "pattern": "*.fa"
            }
          },
          {
            "pdfs": {
              "type": "file",
              "description": "Plots showing the amount of high quality bins and score distribution of bins per method",
              "pattern": "*.pdf"
            }
          },
          {
            "fasta_proteins": {
              "type": "file",
              "description": "Output from prodigal if not already supplied",
              "pattern": "*.proteins.faa"
            }
          },
          {
            "fasta_archaea_scg": {
              "type": "file",
              "description": "Results of archaeal single-copy-gene prediction",
              "pattern": "*.archaea.scg"
            }
          },
          {
            "fasta_bacteria_scg": {
              "type": "file",
              "description": "Results of bacterial single-copy-gene prediction",
              "pattern": "*.bacteria.scg"
            }
          },
          {
            "b6": {
              "type": "file",
              "description": "Results in b6 format",
              "pattern": "*.b6"
            }
          },
          {
            "seqlength": {
              "type": "file",
              "description": "Summary of contig lengths",
              "pattern": "*.seqlength"
            }
          }
        ],
        "authors": [
          "@maxibor",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "dastool_fastatocontig2bin",
      "path": "modules/nf-core/dastool/fastatocontig2bin/meta.yml",
      "type": "module",
      "meta": {
        "name": "dastool_fastatocontig2bin",
        "description": "Helper script to convert a set of bins in fasta format to tabular scaffolds2bin format",
        "keywords": [
          "binning",
          "das tool",
          "table",
          "de novo",
          "bins",
          "contigs",
          "assembly",
          "das_tool"
        ],
        "tools": [
          {
            "dastool": {
              "description": "DAS Tool is an automated method that integrates the results\nof a flexible number of binning algorithms to calculate an optimized, non-redundant\nset of bins from a single assembly.\n",
              "homepage": "https://github.com/cmks/DAS_Tool",
              "documentation": "https://github.com/cmks/DAS_Tool",
              "tool_dev_url": "https://github.com/cmks/DAS_Tool",
              "doi": "10.1038/s41564-018-0171-1",
              "licence": [
                "BSD"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Fasta of list of fasta files recommended to be gathered via with .collect() of bins",
              "pattern": "*.{fa,fa.gz,fas,fas.gz,fna,fna.gz,fasta,fasta.gz}"
            }
          },
          {
            "extension": {
              "type": "val",
              "description": "Fasta file extension (fa | fas | fasta | ...), without .gz suffix, if gzipped input."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fastatocontig2bin": {
              "type": "file",
              "description": "tabular contig2bin file for DAS tool input",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@maxibor",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "dastool_scaffolds2bin",
      "path": "modules/nf-core/dastool/scaffolds2bin/meta.yml",
      "type": "module",
      "meta": {
        "name": "dastool_scaffolds2bin",
        "description": "Helper script to convert a set of bins in fasta format to tabular scaffolds2bin format",
        "keywords": [
          "binning",
          "das tool",
          "table",
          "de novo",
          "bins",
          "contigs",
          "assembly",
          "das_tool"
        ],
        "tools": [
          {
            "dastool": {
              "description": "DAS Tool is an automated method that integrates the results\nof a flexible number of binning algorithms to calculate an optimized, non-redundant\nset of bins from a single assembly.\n",
              "homepage": "https://github.com/cmks/DAS_Tool",
              "documentation": "https://github.com/cmks/DAS_Tool",
              "tool_dev_url": "https://github.com/cmks/DAS_Tool",
              "doi": "10.1038/s41564-018-0171-1",
              "licence": [
                "BSD"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Fasta or list of fasta files recommended to be gathered via with .collect() of bins",
              "pattern": "*.{fa,fa.gz,fas,fas.gz,fna,fna.gz,fasta,fasta.gz}"
            }
          },
          {
            "extension": {
              "type": "val",
              "description": "Fasta file extension (fa | fas | fasta | ...), but without .gz suffix, even if gzipped input."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "scaffolds2bin": {
              "type": "file",
              "description": "tabular scaffolds2bin file for DAS tool input",
              "pattern": "*.scaffolds2bin.tsv"
            }
          }
        ],
        "authors": [
          "@maxibor"
        ]
      }
    },
    {
      "name": "dedup",
      "path": "modules/nf-core/dedup/meta.yml",
      "type": "module",
      "meta": {
        "name": "dedup",
        "description": "DeDup is a tool for read deduplication in paired-end read merging (e.g. for ancient DNA experiments).",
        "keywords": [
          "dedup",
          "deduplication",
          "pcr duplicates",
          "ancient DNA",
          "paired-end",
          "bam"
        ],
        "tools": [
          {
            "dedup": {
              "description": "DeDup is a tool for read deduplication in paired-end read merging (e.g. for ancient DNA experiments).",
              "homepage": "https://github.com/apeltzer/DeDup",
              "documentation": "https://dedup.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/apeltzer/DeDup",
              "doi": "10.1186/s13059-016-0918-z",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/SAM file",
              "pattern": "*.{bam,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Deduplicated BAM file",
              "pattern": "*_rmdup.bam"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON file for MultiQC",
              "pattern": "*.json"
            }
          },
          {
            "hist": {
              "type": "file",
              "description": "Histogram data of amount of deduplication",
              "pattern": "*.hist"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Dedup log information",
              "pattern": "*log"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "deeparg_downloaddata",
      "path": "modules/nf-core/deeparg/downloaddata/meta.yml",
      "type": "module",
      "meta": {
        "name": "deeparg_downloaddata",
        "description": "A deep learning based approach to predict Antibiotic Resistance Genes (ARGs) from metagenomes",
        "keywords": [
          "download",
          "database",
          "deeparg",
          "antimicrobial resistance genes",
          "deep learning",
          "prediction"
        ],
        "tools": [
          {
            "deeparg": {
              "description": "A deep learning based approach to predict Antibiotic Resistance Genes (ARGs) from metagenomes",
              "homepage": "https://bench.cs.vt.edu/deeparg",
              "documentation": "https://bitbucket.org/gusphdproj/deeparg-ss/src/master/",
              "tool_dev_url": "https://bitbucket.org/gusphdproj/deeparg-ss/src/master/",
              "doi": "10.1186/s40168-018-0401-z",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "Directory containing database required for deepARG.",
              "pattern": "db/"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "deeparg_predict",
      "path": "modules/nf-core/deeparg/predict/meta.yml",
      "type": "module",
      "meta": {
        "name": "deeparg_predict",
        "description": "A deep learning based approach to predict Antibiotic Resistance Genes (ARGs) from metagenomes",
        "keywords": [
          "deeparg",
          "antimicrobial resistance",
          "antimicrobial resistance genes",
          "arg",
          "deep learning",
          "prediction",
          "contigs",
          "metagenomes"
        ],
        "tools": [
          {
            "deeparg": {
              "description": "A deep learning based approach to predict Antibiotic Resistance Genes (ARGs) from metagenomes",
              "homepage": "https://bench.cs.vt.edu/deeparg",
              "documentation": "https://bitbucket.org/gusphdproj/deeparg-ss/src/master/",
              "tool_dev_url": "https://bitbucket.org/gusphdproj/deeparg-ss/src/master/",
              "doi": "10.1186/s40168-018-0401-z",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file containing gene-like sequences",
              "pattern": "*.{fasta,fa,fna}"
            }
          },
          {
            "model": {
              "type": "string",
              "description": "Which model to use, depending on input data. Either 'LS' or 'SS' for long or short sequences respectively",
              "pattern": "LS|LS"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "Path to a directory containing the deepARG pre-built models",
              "pattern": "*/"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "daa": {
              "type": "file",
              "description": "Sequences of ARG-like sequences from DIAMOND alignment",
              "pattern": "*.align.daa"
            }
          },
          {
            "daa_tsv": {
              "type": "file",
              "description": "Alignments scores against ARG-like sequences from DIAMOND alignment",
              "pattern": "*.align.daa.tsv"
            }
          },
          {
            "arg": {
              "type": "file",
              "description": "Table containing sequences with an ARG-like probability of more than specified thresholds",
              "pattern": "*.mapping.ARG"
            }
          },
          {
            "potential_arg": {
              "type": "file",
              "description": "Table containing sequences with an ARG-like probability of less than specified thresholds, and requires manual inspection",
              "pattern": "*.mapping.potential.ARG"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "deepbgc_download",
      "path": "modules/nf-core/deepbgc/download/meta.yml",
      "type": "module",
      "meta": {
        "name": "deepbgc_download",
        "description": "Database download module for DeepBGC which detects BGCs in bacterial and fungal genomes using deep learning.",
        "keywords": [
          "database",
          "download",
          "BGC",
          "biosynthetic gene cluster",
          "deep learning",
          "neural network",
          "random forest",
          "genomes",
          "bacteria",
          "fungi"
        ],
        "tools": [
          {
            "deepbgc": {
              "description": "DeepBGC - Biosynthetic Gene Cluster detection and classification",
              "homepage": "https://github.com/Merck/deepbgc",
              "documentation": "https://github.com/Merck/deepbgc",
              "tool_dev_url": "https://github.com/Merck/deepbgc",
              "doi": "10.1093/nar/gkz654",
              "licence": "['MIT']"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "deepbgc_db": {
              "type": "directory",
              "description": "Contains reference database files",
              "pattern": "deepbgc_db"
            }
          }
        ],
        "authors": [
          "@louperelo"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "deepbgc_pipeline",
      "path": "modules/nf-core/deepbgc/pipeline/meta.yml",
      "type": "module",
      "meta": {
        "name": "deepbgc_pipeline",
        "description": "DeepBGC detects BGCs in bacterial and fungal genomes using deep learning.",
        "keywords": [
          "BGC",
          "biosynthetic gene cluster",
          "deep learning",
          "neural network",
          "random forest",
          "genomes",
          "bacteria",
          "fungi"
        ],
        "tools": [
          {
            "deepbgc": {
              "description": "DeepBGC - Biosynthetic Gene Cluster detection and classification",
              "homepage": "https://github.com/Merck/deepbgc",
              "documentation": "https://github.com/Merck/deepbgc",
              "tool_dev_url": "https://github.com/Merck/deepbgc",
              "doi": "10.1093/nar/gkz654",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "genome": {
              "type": "file",
              "description": "FASTA/GenBank/Pfam CSV file",
              "pattern": "*.{fasta,fa,fna,gbk,csv}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "readme": {
              "type": "file",
              "description": "txt file containing description of output files",
              "pattern": "*.{txt}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log output of DeepBGC",
              "pattern": "*.{txt}"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "AntiSMASH JSON file for sideloading",
              "pattern": "*.{json}"
            }
          },
          {
            "bgc_gbk": {
              "type": "file",
              "description": "Sequences and features of all detected BGCs in GenBank format",
              "pattern": "*.{bgc.gbk}"
            }
          },
          {
            "bgc_tsv": {
              "type": "file",
              "description": "Table of detected BGCs and their properties",
              "pattern": "*.{bgc.tsv}"
            }
          },
          {
            "full_gbk": {
              "type": "file",
              "description": "Fully annotated input sequence with proteins, Pfam domains (PFAM_domain features) and BGCs (cluster features)",
              "pattern": "*.{full.gbk}"
            }
          },
          {
            "pfam_tsv": {
              "type": "file",
              "description": "Table of Pfam domains (pfam_id) from given sequence (sequence_id) in genomic order, with BGC detection scores",
              "pattern": "*.{pfam.tsv}"
            }
          },
          {
            "bgc_png": {
              "type": "file",
              "description": "Detected BGCs plotted by their nucleotide coordinates",
              "pattern": "*.{bgc.png}"
            }
          },
          {
            "pr_png": {
              "type": "file",
              "description": "Precision-Recall curve based on predicted per-Pfam BGC scores",
              "pattern": "*.{pr.png}"
            }
          },
          {
            "roc_png": {
              "type": "file",
              "description": "ROC curve based on predicted per-Pfam BGC scores",
              "pattern": "*.{roc.png}"
            }
          },
          {
            "score_png": {
              "type": "file",
              "description": "BGC detection scores of each Pfam domain in genomic order",
              "pattern": "*.{score.png}"
            }
          }
        ],
        "authors": [
          "@louperelo",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "deepcell_mesmer",
      "path": "modules/nf-core/deepcell/mesmer/meta.yml",
      "type": "module",
      "meta": {
        "name": "deepcell_mesmer",
        "description": "Deepcell/mesmer segmentation for whole-cell",
        "keywords": [
          "imaging",
          "spatial_omics",
          "segmentation"
        ],
        "tools": [
          {
            "mesmer": {
              "description": "Deep cell is a collection of tools to segment imaging data",
              "homepage": "https://github.com/vanvalenlab/deepcell-tf",
              "documentation": "https://github.com/vanvalenlab/intro-to-deepcell/tree/master/pretrained_models",
              "tool_dev_url": "https://githu/b.com/vanvalenlab/deepcell-tf",
              "doi": "10.1038/s41587-021-01094-0",
              "licence": "APACHE2"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "img": {
              "type": "file",
              "description": "Multichannel image file",
              "pattern": "*.{tiff,tif,h5,hdf5}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "mask": {
              "type": "file",
              "description": "File containing the mask.",
              "pattern": "*.{tif, tiff}"
            }
          }
        ],
        "authors": [
          "@migueLib",
          "@chiarasch"
        ]
      }
    },
    {
      "name": "deeptools_bamcoverage",
      "path": "modules/nf-core/deeptools/bamcoverage/meta.yml",
      "type": "module",
      "meta": {
        "name": "deeptools_bamcoverage",
        "description": "This tool takes an alignment of reads or fragments as input (BAM file) and generates a coverage track (bigWig or bedGraph) as output.",
        "keywords": [
          "coverage",
          "depth",
          "track"
        ],
        "tools": [
          {
            "deeptools": {
              "description": "A set of user-friendly tools for normalization and visualzation of deep-sequencing data",
              "homepage": "https://deeptools.readthedocs.io/en/develop/content/tools/bamCoverage.html",
              "documentation": "https://deeptools.readthedocs.io/en/develop/content/tools/bamCoverage.html",
              "tool_dev_url": "https://github.com/deeptools/deepTools/",
              "doi": "10.1093/nar/gkw257",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAM/CRAM index file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference file the CRAM file was created with (required with CRAM input)",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "Index of the reference file (optional, but recommended)",
              "pattern": "*.{fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bigWig": {
              "type": "file",
              "description": "BigWig file",
              "pattern": "*.bigWig"
            }
          },
          {
            "bedgraph": {
              "type": "file",
              "description": "Bedgraph file",
              "pattern": "*.bedgraph"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen",
          "@SusiJo"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        }
      ]
    },
    {
      "name": "deeptools_computematrix",
      "path": "modules/nf-core/deeptools/computematrix/meta.yml",
      "type": "module",
      "meta": {
        "name": "deeptools_computematrix",
        "description": "calculates scores per genome regions for other deeptools plotting utilities",
        "keywords": [
          "genome",
          "regions",
          "scores",
          "matrix"
        ],
        "tools": [
          {
            "deeptools": {
              "description": "A set of user-friendly tools for normalization and visualization of deep-sequencing data",
              "documentation": "https://deeptools.readthedocs.io/en/develop/index.html",
              "tool_dev_url": "https://github.com/deeptools/deepTools",
              "doi": "10.1093/nar/gku365",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bigwig": {
              "type": "file",
              "description": "bigwig file containing genomic scores",
              "pattern": "*.{bw,bigwig}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "bed file containing genomic regions",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "matrix": {
              "type": "file",
              "description": "gzipped matrix file needed by the plotHeatmap and plotProfile\ndeeptools utilities\n",
              "pattern": "*.{computeMatrix.mat.gz}"
            }
          },
          {
            "table": {
              "type": "file",
              "description": "tabular file containing the scores of the generated matrix\n",
              "pattern": "*.{computeMatrix.vals.mat.tab}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@jeremy1805",
          "@emiller88",
          "@drpatelh",
          "@joseespinosa"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        }
      ]
    },
    {
      "name": "deeptools_multibamsummary",
      "path": "modules/nf-core/deeptools/multibamsummary/meta.yml",
      "type": "module",
      "meta": {
        "name": "deeptools_multibamsummary",
        "description": "Computes read coverage for genomic regions (bins) across the entire genome.",
        "keywords": [
          "bam",
          "coverage"
        ],
        "tools": [
          {
            "deeptools": {
              "description": "A set of user-friendly tools for normalization and visualization of deep-sequencing data",
              "documentation": "https://deeptools.readthedocs.io/en/develop/index.html",
              "tool_dev_url": "https://github.com/deeptools/deepTools",
              "doi": "10.1093/nar/gku365",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "One or more BAM files",
              "pattern": "*.{bam}"
            }
          },
          {
            "bais": {
              "type": "file",
              "description": "Corresponding BAM file indexes",
              "pattern": "*.bam.bai"
            }
          },
          {
            "labels": {
              "type": "string",
              "description": "User specified labels instead of default labels (file names)."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "matrix": {
              "type": "file",
              "description": "compressed numpy array of read coverage data used by plotCorrelation and plotPCA\ndeeptool utilities\n",
              "pattern": "all_bam.bamSummary.npz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@tamara-hodgetts",
          "@chris-cheshire"
        ]
      },
      "pipelines": [
        {
          "name": "cutandrun",
          "version": "3.1"
        }
      ]
    },
    {
      "name": "deeptools_plotcorrelation",
      "path": "modules/nf-core/deeptools/plotcorrelation/meta.yml",
      "type": "module",
      "meta": {
        "name": "deeptools_plotcorrelation",
        "description": "Visualises sample correlations using a compressed matrix generated by mutlibamsummary or multibigwigsummary as input.",
        "keywords": [
          "corrrelation",
          "matrix",
          "heatmap",
          "scatterplot"
        ],
        "tools": [
          {
            "deeptools": {
              "description": "A set of user-friendly tools for normalization and visualization of deep-sequencing data",
              "documentation": "https://deeptools.readthedocs.io/en/develop/index.html",
              "tool_dev_url": "https://github.com/deeptools/deepTools",
              "doi": "10.1093/nar/gku365",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "matrix": {
              "type": "file",
              "description": "compressed matrix file produced by\nmutlibamsummary or multibigwigsummary\n",
              "pattern": "*.{npz}"
            }
          },
          {
            "method": {
              "type": "value",
              "description": "Correlation coefficient to use for heatmap or scatterplot generation\n",
              "pattern": "{spearman,pearson}"
            }
          },
          {
            "plot_type": {
              "type": "value",
              "description": "Type of output plot to display sample correlation\n",
              "pattern": "{heatmap,scatterplot}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "Output figure containing resulting plot\n",
              "pattern": "*.{plotCorrelation.pdf}"
            }
          },
          {
            "matrix": {
              "type": "file",
              "description": "Tab-separated file containing a matrix of pairwise correlations\n",
              "pattern": "*.{plotCorrelation.mat.tab}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@tamara-hodgetts",
          "@chris-cheshire"
        ]
      },
      "pipelines": [
        {
          "name": "cutandrun",
          "version": "3.1"
        }
      ]
    },
    {
      "name": "deeptools_plotfingerprint",
      "path": "modules/nf-core/deeptools/plotfingerprint/meta.yml",
      "type": "module",
      "meta": {
        "name": "deeptools_plotfingerprint",
        "description": "plots cumulative reads coverages by BAM file",
        "keywords": [
          "plot",
          "fingerprint",
          "cumulative coverage",
          "bam"
        ],
        "tools": [
          {
            "deeptools": {
              "description": "A set of user-friendly tools for normalization and visualization of deep-sequencing data",
              "documentation": "https://deeptools.readthedocs.io/en/develop/index.html",
              "tool_dev_url": "https://github.com/deeptools/deepTools",
              "doi": "10.1093/nar/gku365",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "One or more BAM files",
              "pattern": "*.{bam}"
            }
          },
          {
            "bais": {
              "type": "file",
              "description": "Corresponding BAM file indexes",
              "pattern": "*.bam.bai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "Output figure containing resulting plot\n",
              "pattern": "*.{plotFingerprint.pdf}"
            }
          },
          {
            "matrix": {
              "type": "file",
              "description": "Output file summarizing the read counts per bin\n",
              "pattern": "*.{plotFingerprint.raw.txt}"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "file containing BAM file quality metrics\n",
              "pattern": "*.{qcmetrics.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@emiller88",
          "@drpatelh",
          "@joseespinosa"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "ssds",
          "version": "dev"
        }
      ]
    },
    {
      "name": "deeptools_plotheatmap",
      "path": "modules/nf-core/deeptools/plotheatmap/meta.yml",
      "type": "module",
      "meta": {
        "name": "deeptools_plotheatmap",
        "description": "plots values produced by deeptools_computematrix as a heatmap",
        "keywords": [
          "plot",
          "heatmap",
          "scores",
          "matrix"
        ],
        "tools": [
          {
            "deeptools": {
              "description": "A set of user-friendly tools for normalization and visualization of deep-sequencing data",
              "documentation": "https://deeptools.readthedocs.io/en/develop/index.html",
              "tool_dev_url": "https://github.com/deeptools/deepTools",
              "doi": "10.1093/nar/gku365",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "matrix": {
              "type": "file",
              "description": "gzipped matrix file produced by deeptools_\ncomputematrix deeptools utility\n",
              "pattern": "*.{mat.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "Output figure containing resulting plot\n",
              "pattern": "*.{plotHeatmap.pdf}"
            }
          },
          {
            "matrix": {
              "type": "file",
              "description": "File containing the matrix of values\nused to generate the heatmap\n",
              "pattern": "*.{plotHeatmap.mat.tab}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@emiller88",
          "@drpatelh",
          "@joseespinosa"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        }
      ]
    },
    {
      "name": "deeptools_plotpca",
      "path": "modules/nf-core/deeptools/plotpca/meta.yml",
      "type": "module",
      "meta": {
        "name": "deeptools_plotpca",
        "description": "Generates principal component analysis (PCA) plot using a compressed matrix generated by mutlibamsummary or multibigwigsummary as input.",
        "keywords": [
          "PCA",
          "matrix"
        ],
        "tools": [
          {
            "deeptools": {
              "description": "A set of user-friendly tools for normalization and visualization of deep-sequencing data",
              "documentation": "https://deeptools.readthedocs.io/en/develop/index.html",
              "tool_dev_url": "https://github.com/deeptools/deepTools",
              "doi": "10.1093/nar/gku365",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "matrix": {
              "type": "file",
              "description": "compressed matrix file produced by\nmutlibamsummary or multibigwigsummary\n",
              "pattern": "*.{npz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "Output figure containing resulting plot\n",
              "pattern": "*.{plotPCA.pdf}"
            }
          },
          {
            "tab": {
              "type": "file",
              "description": "Tab file containing data used to generate the PCA plot\n",
              "pattern": "*.{plotPCA.tab}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@tamara-hodgetts",
          "@chris-cheshire"
        ]
      },
      "pipelines": [
        {
          "name": "cutandrun",
          "version": "3.1"
        }
      ]
    },
    {
      "name": "deeptools_plotprofile",
      "path": "modules/nf-core/deeptools/plotprofile/meta.yml",
      "type": "module",
      "meta": {
        "name": "deeptools_plotprofile",
        "description": "plots values produced by deeptools_computematrix as a profile plot",
        "keywords": [
          "plot",
          "profile",
          "scores",
          "matrix"
        ],
        "tools": [
          {
            "deeptools": {
              "description": "A set of user-friendly tools for normalization and visualization of deep-sequencing data",
              "documentation": "https://deeptools.readthedocs.io/en/develop/index.html",
              "tool_dev_url": "https://github.com/deeptools/deepTools",
              "doi": "10.1093/nar/gku365",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "matrix": {
              "type": "file",
              "description": "gzipped matrix file produced by deeptools_\ncomputematrix deeptools utility\n",
              "pattern": "*.{mat.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "Output figure containing resulting plot\n",
              "pattern": "*.{plotProfile.pdf}"
            }
          },
          {
            "matrix": {
              "type": "file",
              "description": "File containing the matrix of values\nused to generate the profile\n",
              "pattern": "*.{plotProfile.mat.tab}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@emiller88",
          "@drpatelh",
          "@joseespinosa"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "deepvariant",
      "path": "modules/nf-core/deepvariant/meta.yml",
      "type": "module",
      "meta": {
        "name": "deepvariant",
        "description": "DeepVariant is an analysis pipeline that uses a deep neural network to call genetic variants from next-generation DNA sequencing data",
        "keywords": [
          "variant calling",
          "machine learning",
          "neural network"
        ],
        "tools": [
          {
            "deepvariant": {
              "description": "DeepVariant is an analysis pipeline that uses a deep neural network to call genetic variants from next-generation DNA sequencing data",
              "homepage": "https://github.com/google/deepvariant",
              "documentation": "https://github.com/google/deepvariant",
              "tool_dev_url": "https://github.com/google/deepvariant",
              "doi": "10.1038/nbt.4235",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.bam/cram"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Index of BAM/CRAM file",
              "pattern": "*.bai/crai"
            }
          },
          {
            "interval": {
              "type": "file",
              "description": "Interval file for targeted regions",
              "pattern": "*.bed"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fai"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "gzi": {
              "type": "file",
              "description": "GZI index of reference fasta file",
              "pattern": "*.gzi"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "gvcf": {
              "type": "file",
              "description": "Compressed GVCF file",
              "pattern": "*.g.vcf.gz"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "*.{version.txt}"
            }
          }
        ],
        "authors": [
          "@abhi18av",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "delly_call",
      "path": "modules/nf-core/delly/call/meta.yml",
      "type": "module",
      "meta": {
        "name": "delly_call",
        "description": "Call structural variants",
        "keywords": [
          "genome",
          "structural",
          "variants",
          "bcf"
        ],
        "tools": [
          {
            "delly": {
              "description": "Structural variant discovery by integrated paired-end and split-read analysis",
              "homepage": "https://github.com/dellytools/delly",
              "documentation": "https://github.com/dellytools/delly/blob/master/README.md",
              "doi": "10.1093/bioinformatics/bts378",
              "licence": [
                "BSD-3-Clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file from alignment must be sorted, indexed, and duplicate marked",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "Index of the BAM/CRAM file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "A BCF/VCF file to genotype with Delly. If this is supplied, the variant calling will be skipped",
              "pattern": "*.{vcf.gz,bcf}"
            }
          },
          {
            "vcf_index": {
              "type": "file",
              "description": "The index of the BCF/VCF file",
              "pattern": "*.{tbi,csi}"
            }
          },
          {
            "exclude_bed": {
              "type": "file",
              "description": "An optional bed file containing regions to exclude from the called VCF",
              "pattern": "*.bed"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file to identify split-reads",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bcf": {
              "type": "file",
              "description": "Called variants in BCF/VCF format. Specify either \"bcf\" or \"vcf\" in ext.suffix to define the output type",
              "pattern": "*.{bcf,vcf.gz}"
            }
          },
          {
            "csi": {
              "type": "file",
              "description": "A generated csi index that matches the bcf output (not generated for vcf files)",
              "pattern": "*.{bcf.csi}"
            }
          }
        ],
        "authors": [
          "@projectoriented",
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "deseq2_differential",
      "path": "modules/nf-core/deseq2/differential/meta.yml",
      "type": "module",
      "meta": {
        "name": "deseq2_differential",
        "description": "runs a differential expression analysis with DESeq2",
        "keywords": [
          "differential",
          "expression",
          "rna-seq",
          "deseq2"
        ],
        "tools": [
          {
            "deseq2": {
              "description": "Differential gene expression analysis based on the negative binomial distribution",
              "homepage": "https://bioconductor.org/packages/release/bioc/html/DESeq2.html",
              "documentation": "https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html",
              "tool_dev_url": "https://github.com/mikelove/DESeq2",
              "doi": "10.1186/s13059-014-0550-8",
              "licence": "['LGPL >=3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing contrast information. This can be used at the\nworkflow level to pass optional parameters to the module, e.g.\n[ id:'contrast1', blocking:'patient' ] passed in as ext.args like:\n'--blocking_variable $meta.blocking'.\n"
            }
          },
          {
            "contrast_variable": {
              "type": "string",
              "description": "The column in the sample sheet that should be used to define groups for\ncomparison\n"
            }
          },
          {
            "reference": {
              "type": "string",
              "description": "The value within the contrast_variable column of the sample sheet that\nshould be used to derive the reference samples\n"
            }
          },
          {
            "target": {
              "type": "string",
              "description": "The value within the contrast_variable column of the sample sheet that\nshould be used to derive the target samples\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy map containing study-wide metadata related to the sample sheet\nand matrix\n"
            }
          },
          {
            "sample": {
              "type": "file",
              "description": "CSV or TSV format sample sheet with sample metadata\n"
            }
          },
          {
            "counts": {
              "type": "file",
              "description": "Raw TSV or CSV format expression matrix as output from the nf-core\nRNA-seq workflow\n"
            }
          },
          {
            "control_genes": {
              "type": "file",
              "description": "Text file listing control genes, one per line\n"
            }
          },
          {
            "control_genes_meta": {
              "type": "file",
              "description": "Meta map describing control genes, e.g. [ id: 'ERCC' ]\n"
            }
          },
          {
            "sizefactors_from_controls": {
              "type": "boolean",
              "description": "Specify if any supplied control genes should just be stripped to\nprevent bias in conventional normalisation (default), or used to\ngenerate the size factors (supplied via task.ext.args like\n'--sizefactors_from_controls TRUE').\n"
            }
          }
        ],
        "output": [
          {
            "results": {
              "type": "file",
              "description": "TSV-format table of differential expression information as output by DESeq2",
              "pattern": "deseq2.results.tsv"
            }
          },
          {
            "dispersion_plot": {
              "type": "file",
              "description": "DESeq2 dispersion plot",
              "pattern": "deseq2.dispersion.png"
            }
          },
          {
            "rdata": {
              "type": "file",
              "description": "Serialised DESeq2 object",
              "pattern": "dds.rld.rds"
            }
          },
          {
            "sizefactors": {
              "type": "file",
              "description": "Size factors",
              "pattern": "deseq2.sizefactors.tsv"
            }
          },
          {
            "normalised_counts": {
              "type": "file",
              "description": "TSV-format counts matrix, normalised to size factors",
              "pattern": "normalised_counts.tsv"
            }
          },
          {
            "variance_stabilised_counts": {
              "type": "file",
              "description": "TSV-format counts matrix, normalised to size factors, with variance stabilisation applied",
              "pattern": "variance_stabilised_counts.tsv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "diamond_blastp",
      "path": "modules/nf-core/diamond/blastp/meta.yml",
      "type": "module",
      "meta": {
        "name": "diamond_blastp",
        "description": "Queries a DIAMOND database using blastp mode",
        "keywords": [
          "fasta",
          "diamond",
          "blastp",
          "DNA sequence"
        ],
        "tools": [
          {
            "diamond": {
              "description": "Accelerated BLAST compatible local sequence aligner",
              "homepage": "https://github.com/bbuchfink/diamond",
              "documentation": "https://github.com/bbuchfink/diamond/wiki",
              "tool_dev_url": "https://github.com/bbuchfink/diamond",
              "doi": "10.1038/s41592-021-01101-x",
              "licence": [
                "GPL v3.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input fasta file containing query sequences",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "Directory containing the protein blast database",
              "pattern": "*"
            }
          },
          {
            "out_ext": {
              "type": "string",
              "description": "Specify the type of output file to be generated. `blast` corresponds to\nBLAST pairwise format. `xml` corresponds to BLAST xml format.\n`txt` corresponds to to BLAST tabular format. `tsv` corresponds to\ntaxonomic classification format.\n",
              "pattern": "blast|xml|txt|daa|sam|tsv|paf"
            }
          },
          {
            "blast_columns": {
              "type": "string",
              "description": "Optional space separated list of DIAMOND tabular BLAST output keywords\nused for in conjunction with the 'txt' out_ext option (--outfmt 6). See\nDIAMOND documnetation for more information.\n"
            }
          }
        ],
        "output": [
          {
            "blast": {
              "type": "file",
              "description": "File containing blastp hits",
              "pattern": "*.{blast}"
            }
          },
          {
            "xml": {
              "type": "file",
              "description": "File containing blastp hits",
              "pattern": "*.{xml}"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "File containing hits in tabular BLAST format.",
              "pattern": "*.{txt}"
            }
          },
          {
            "daa": {
              "type": "file",
              "description": "File containing hits DAA format",
              "pattern": "*.{daa}"
            }
          },
          {
            "sam": {
              "type": "file",
              "description": "File containing aligned reads in SAM format",
              "pattern": "*.{sam}"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab separated file containing taxonomic classification of hits",
              "pattern": "*.{tsv}"
            }
          },
          {
            "paf": {
              "type": "file",
              "description": "File containing aligned reads in pairwise mapping format format",
              "pattern": "*.{paf}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@spficklin",
          "@jfy133"
        ]
      }
    },
    {
      "name": "diamond_blastx",
      "path": "modules/nf-core/diamond/blastx/meta.yml",
      "type": "module",
      "meta": {
        "name": "diamond_blastx",
        "description": "Queries a DIAMOND database using blastx mode",
        "keywords": [
          "fasta",
          "diamond",
          "blastx",
          "DNA sequence"
        ],
        "tools": [
          {
            "diamond": {
              "description": "Accelerated BLAST compatible local sequence aligner",
              "homepage": "https://github.com/bbuchfink/diamond",
              "documentation": "https://github.com/bbuchfink/diamond/wiki",
              "tool_dev_url": "https://github.com/bbuchfink/diamond",
              "doi": "10.1038/s41592-021-01101-x",
              "licence": [
                "GPL v3.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input fasta file containing query sequences",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "Directory containing the nucelotide blast database",
              "pattern": "*"
            }
          },
          {
            "out_ext": {
              "type": "string",
              "description": "Specify the type of output file to be generated. `blast` corresponds to\nBLAST pairwise format. `xml` corresponds to BLAST xml format.\n`txt` corresponds to to BLAST tabular format. `tsv` corresponds to\ntaxonomic classification format.\n",
              "pattern": "blast|xml|txt|daa|sam|tsv|paf"
            }
          }
        ],
        "output": [
          {
            "blast": {
              "type": "file",
              "description": "File containing blastp hits",
              "pattern": "*.{blast}"
            }
          },
          {
            "xml": {
              "type": "file",
              "description": "File containing blastp hits",
              "pattern": "*.{xml}"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "File containing hits in tabular BLAST format.",
              "pattern": "*.{txt}"
            }
          },
          {
            "daa": {
              "type": "file",
              "description": "File containing hits DAA format",
              "pattern": "*.{daa}"
            }
          },
          {
            "sam": {
              "type": "file",
              "description": "File containing aligned reads in SAM format",
              "pattern": "*.{sam}"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab separated file containing taxonomic classification of hits",
              "pattern": "*.{tsv}"
            }
          },
          {
            "paf": {
              "type": "file",
              "description": "File containing aligned reads in pairwise mapping format format",
              "pattern": "*.{paf}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file containing stdout information",
              "pattern": "*.{log}"
            }
          }
        ],
        "authors": [
          "@spficklin",
          "@jfy133",
          "@mjamy"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "diamond_makedb",
      "path": "modules/nf-core/diamond/makedb/meta.yml",
      "type": "module",
      "meta": {
        "name": "diamond_makedb",
        "description": "Builds a DIAMOND database",
        "keywords": [
          "fasta",
          "diamond",
          "index",
          "database"
        ],
        "tools": [
          {
            "diamond": {
              "description": "Accelerated BLAST compatible local sequence aligner",
              "homepage": "https://github.com/bbuchfink/diamond",
              "documentation": "https://github.com/bbuchfink/diamond/wiki",
              "tool_dev_url": "https://github.com/bbuchfink/diamond",
              "doi": "10.1038/s41592-021-01101-x",
              "licence": [
                "GPL v3.0"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Input fasta file",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "db": {
              "type": "file",
              "description": "File of the indexed DIAMOND database",
              "pattern": "*.{dmnd}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@spficklin"
        ]
      }
    },
    {
      "name": "dragmap_align",
      "path": "modules/nf-core/dragmap/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "dragmap_align",
        "description": "Performs fastq alignment to a reference using DRAGMAP",
        "keywords": [
          "alignment",
          "map",
          "fastq",
          "bam",
          "sam"
        ],
        "tools": [
          {
            "dragmap": {
              "description": "Dragmap is the Dragen mapper/aligner Open Source Software.",
              "homepage": "https://github.com/Illumina/dragmap",
              "documentation": "https://github.com/Illumina/dragmap",
              "tool_dev_url": "https://github.com/Illumina/dragmap#basic-command-line-usage",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "hashmap": {
              "type": "file",
              "description": "DRAGMAP hash table",
              "pattern": "Directory containing DRAGMAP hash table *.{cmp,.bin,.txt}"
            }
          }
        ],
        "output": [
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Emiller88"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "dragmap_hashtable",
      "path": "modules/nf-core/dragmap/hashtable/meta.yml",
      "type": "module",
      "meta": {
        "name": "dragmap_hashtable",
        "description": "Create DRAGEN hashtable for reference genome",
        "keywords": [
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "dragmap": {
              "description": "Dragmap is the Dragen mapper/aligner Open Source Software.",
              "homepage": "https://github.com/Illumina/dragmap",
              "documentation": "https://github.com/Illumina/dragmap",
              "tool_dev_url": "https://github.com/Illumina/dragmap#basic-command-line-usage",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "hashmap": {
              "type": "file",
              "description": "DRAGMAP hash table",
              "pattern": "*.{cmp,.bin,.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Emiller88"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "dragonflye",
      "path": "modules/nf-core/dragonflye/meta.yml",
      "type": "module",
      "meta": {
        "name": "dragonflye",
        "description": "Assemble bacterial isolate genomes from Nanopore reads",
        "keywords": [
          "bacterial",
          "assembly",
          "nanopore"
        ],
        "tools": [
          {
            "dragonflye": {
              "description": "Microbial assembly pipeline for Nanopore reads",
              "homepage": "https://github.com/rpetit3/dragonflye",
              "documentation": "https://github.com/rpetit3/dragonflye/blob/main/README.md",
              "licence": [
                "GPL v2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Input Nanopore FASTQ file",
              "pattern": "*.fastq.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "contigs": {
              "type": "file",
              "description": "The final assembly produced by Dragonflye",
              "pattern": "contigs.fa"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Full log file for bug reporting",
              "pattern": "dragonflye.log"
            }
          },
          {
            "raw_contigs": {
              "type": "file",
              "description": "Raw assembly produced by the assembler (Flye, Miniasm, or Raven)",
              "pattern": "{flye,miniasm,raven}.fasta"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Assembly information output by Flye",
              "pattern": "flye-info.txt"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Assembly graph produced by Miniasm, or Raven",
              "pattern": "{miniasm,raven}-unpolished.gfa"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "dshbio_exportsegments",
      "path": "modules/nf-core/dshbio/exportsegments/meta.yml",
      "type": "module",
      "meta": {
        "name": "dshbio_exportsegments",
        "description": "Export assembly segment sequences in GFA 1.0 format to FASTA format",
        "keywords": [
          "gfa",
          "assembly",
          "segment"
        ],
        "tools": [
          {
            "dshbio": {
              "description": "Reads, features, variants, assemblies, alignments, genomic range trees, pangenome\ngraphs, and a bunch of random command line tools for bioinformatics. LGPL version 3\nor later.\n",
              "homepage": "https://github.com/heuermh/dishevelled-bio",
              "documentation": "https://github.com/heuermh/dishevelled-bio",
              "licence": [
                "LGPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Assembly segments in uncompressed or compressed GFA 1.0 format",
              "pattern": "*.{gfa|gfa.bgz|gfa.gz|gfa.zst}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Assembly segment sequences in gzipped FASTA format",
              "pattern": "*.{fa.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@heuermh"
        ]
      }
    },
    {
      "name": "dshbio_filterbed",
      "path": "modules/nf-core/dshbio/filterbed/meta.yml",
      "type": "module",
      "meta": {
        "name": "dshbio_filterbed",
        "description": "Filter features in gzipped BED format",
        "keywords": [
          "bed"
        ],
        "tools": [
          {
            "dshbio": {
              "description": "Reads, features, variants, assemblies, alignments, genomic range trees, pangenome\ngraphs, and a bunch of random command line tools for bioinformatics. LGPL version 3\nor later.\n",
              "homepage": "https://github.com/heuermh/dishevelled-bio",
              "documentation": "https://github.com/heuermh/dishevelled-bio",
              "licence": [
                "LGPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Features in gzipped BED format",
              "pattern": "*.{bed.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Features in gzipped BED format",
              "pattern": "*.{bed.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@heuermh"
        ]
      }
    },
    {
      "name": "dshbio_filtergff3",
      "path": "modules/nf-core/dshbio/filtergff3/meta.yml",
      "type": "module",
      "meta": {
        "name": "dshbio_filtergff3",
        "description": "Filter features in gzipped GFF3 format",
        "keywords": [
          "gff3"
        ],
        "tools": [
          {
            "dshbio": {
              "description": "Reads, features, variants, assemblies, alignments, genomic range trees, pangenome\ngraphs, and a bunch of random command line tools for bioinformatics. LGPL version 3\nor later.\n",
              "homepage": "https://github.com/heuermh/dishevelled-bio",
              "documentation": "https://github.com/heuermh/dishevelled-bio",
              "licence": [
                "LGPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gff3": {
              "type": "file",
              "description": "Features in gzipped GFF3 format",
              "pattern": "*.{gff3.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gff3": {
              "type": "file",
              "description": "Features in gzipped GFF3 format",
              "pattern": "*.{gff3.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@heuermh"
        ]
      }
    },
    {
      "name": "dshbio_splitbed",
      "path": "modules/nf-core/dshbio/splitbed/meta.yml",
      "type": "module",
      "meta": {
        "name": "dshbio_splitbed",
        "description": "Split features in gzipped BED format",
        "keywords": [
          "bed"
        ],
        "tools": [
          {
            "dshbio": {
              "description": "Reads, features, variants, assemblies, alignments, genomic range trees, pangenome\ngraphs, and a bunch of random command line tools for bioinformatics. LGPL version 3\nor later.\n",
              "homepage": "https://github.com/heuermh/dishevelled-bio",
              "documentation": "https://github.com/heuermh/dishevelled-bio",
              "licence": [
                "LGPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Features in gzipped BED format to split",
              "pattern": "*.{bed.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Features in split gzipped BED formatted files",
              "pattern": "*.{bed.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@heuermh"
        ]
      }
    },
    {
      "name": "dshbio_splitgff3",
      "path": "modules/nf-core/dshbio/splitgff3/meta.yml",
      "type": "module",
      "meta": {
        "name": "dshbio_splitgff3",
        "description": "Split features in gzipped GFF3 format",
        "keywords": [
          "gff3"
        ],
        "tools": [
          {
            "dshbio": {
              "description": "Reads, features, variants, assemblies, alignments, genomic range trees, pangenome\ngraphs, and a bunch of random command line tools for bioinformatics. LGPL version 3\nor later.\n",
              "homepage": "https://github.com/heuermh/dishevelled-bio",
              "documentation": "https://github.com/heuermh/dishevelled-bio",
              "licence": [
                "LGPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gff3": {
              "type": "file",
              "description": "Features in gzipped GFF3 format to split",
              "pattern": "*.{gff3.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gff3": {
              "type": "file",
              "description": "Features in split gzipped GFF3 formatted files",
              "pattern": "*.{gff3.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@heuermh"
        ]
      }
    },
    {
      "name": "duphold",
      "path": "modules/nf-core/duphold/meta.yml",
      "type": "module",
      "meta": {
        "name": "duphold",
        "description": "SV callers like lumpy look at split-reads and pair distances to find structural variants. This tool is a fast way to add depth information to those calls. This can be used as additional information for filtering variants; for example we will be skeptical of deletion calls that do not have lower than average coverage compared to regions with similar gc-content.",
        "keywords": [
          "sort"
        ],
        "tools": [
          {
            "duphold": {
              "description": "SV callers like lumpy look at split-reads and pair distances to find structural variants. This tool is a fast way to add depth information to those calls.",
              "homepage": "https://github.com/brentp/duphold",
              "documentation": "https://github.com/brentp/duphold",
              "tool_dev_url": "https://github.com/brentp/duphold",
              "doi": "10.1093/gigascience/giz040",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "aligment_file": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "aligment_file_index": {
              "type": "file",
              "description": "Index of the BAM/CRAM file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "sv_variants": {
              "type": "file",
              "description": "A variants file containing structural variants",
              "pattern": "*.{vcf,bcf}(.gz)?"
            }
          },
          {
            "snp_variants": {
              "type": "file",
              "description": "A variants file containing SNPs",
              "pattern": "*.{vcf,bcf}(.gz)?"
            }
          },
          {
            "snp_variants": {
              "type": "file",
              "description": "The index of the variants file containing SNPs",
              "pattern": "*.tbi"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The output VCF",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "ectyper",
      "path": "modules/nf-core/ectyper/meta.yml",
      "type": "module",
      "meta": {
        "name": "ectyper",
        "description": "In silico prediction of E. coli serotype",
        "keywords": [
          "escherichia coli",
          "fasta",
          "serotype"
        ],
        "tools": [
          {
            "ectyper": {
              "description": "ECtyper is a python program for serotyping E. coli genomes",
              "homepage": "https://github.com/phac-nml/ecoli_serotyping",
              "documentation": "https://github.com/phac-nml/ecoli_serotyping",
              "tool_dev_url": "https://github.com/phac-nml/ecoli_serotyping",
              "licence": [
                "Apache 2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA formatted assembly file",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "ectyper log output",
              "pattern": "*.log"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "ectyper serotyping results in TSV format",
              "pattern": "*.tsv"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Allele report generated from BLAST results",
              "pattern": "*.tst"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "eido_convert",
      "path": "modules/nf-core/eido/convert/meta.yml",
      "type": "module",
      "meta": {
        "name": "eido_convert",
        "description": "Convert any PEP project or Nextflow samplesheet to any format",
        "keywords": [
          "eido",
          "convert",
          "PEP",
          "format",
          "samplesheet"
        ],
        "tools": [
          {
            "eido": {
              "description": "Convert any PEP project or Nextflow samplesheet to any format",
              "homepage": "http://eido.databio.org/en/latest/",
              "documentation": "http://eido.databio.org/en/latest/",
              "doi": "10.1093/gigascience/giab077",
              "licence": "BSD-2-Clause"
            }
          }
        ],
        "input": [
          {
            "samplesheet": {
              "type": "file",
              "description": "Nextflow samplesheet or PEP project",
              "pattern": "*.{yaml,yml,csv}"
            }
          },
          {
            "format": {
              "type": "string",
              "description": "Extension of an output file"
            }
          },
          {
            "pep_input_base_dir": {
              "type": "file",
              "description": "Optional path to the directory where files specified in a PEP config file are stored. Any paths specified in the config will need to be relative to this base directory."
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "samplesheet_converted": {
              "type": "file",
              "description": "PEP project or samplesheet converted to csv file"
            }
          }
        ],
        "authors": [
          "@rafalstepien"
        ]
      }
    },
    {
      "name": "eido_validate",
      "path": "modules/nf-core/eido/validate/meta.yml",
      "type": "module",
      "meta": {
        "name": "eido_validate",
        "description": "Validate samplesheet or PEP config against a schema",
        "keywords": [
          "eido",
          "validate",
          "schema",
          "format",
          "pep"
        ],
        "tools": [
          {
            "validate": {
              "description": "Validate samplesheet or PEP config against a schema.",
              "homepage": "http://eido.databio.org/en/latest/",
              "documentation": "http://eido.databio.org/en/latest/",
              "doi": "10.1093/gigascience/giab077",
              "licence": "BSD-2-Clause"
            }
          }
        ],
        "input": [
          {
            "samplesheet": {
              "type": "file",
              "description": "Samplesheet or PEP file to be validated",
              "pattern": "*.{yaml,yml,csv}"
            }
          },
          {
            "schema": {
              "type": "file",
              "description": "Schema that the samplesheet will be validated against",
              "pattern": "*.{yaml,yml}"
            }
          },
          {
            "pep_input_base_dir": {
              "type": "file",
              "description": "Optional path to the directory where files specified in a PEP config file are stored. Any paths specified in the config will need to be relative to this base directory."
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "File containing validation log.",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@rafalstepien"
        ]
      }
    },
    {
      "name": "eigenstratdatabasetools_eigenstratsnpcoverage",
      "path": "modules/nf-core/eigenstratdatabasetools/eigenstratsnpcoverage/meta.yml",
      "type": "module",
      "meta": {
        "name": "eigenstratdatabasetools_eigenstratsnpcoverage",
        "description": "Provide the SNP coverage of each individual in an eigenstrat formatted dataset.",
        "keywords": [
          "coverage",
          "eigenstrat",
          "eigenstratdatabasetools",
          "snp",
          "snps"
        ],
        "tools": [
          {
            "eigenstratdatabasetools": {
              "description": "A set of tools to compare and manipulate the contents of EingenStrat databases, and to calculate SNP coverage statistics in such databases.",
              "documentation": "https://github.com/TCLamnidis/EigenStratDatabaseTools/README.md",
              "tool_dev_url": "https://github.com/TCLamnidis/EigenStratDatabaseTools",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "geno": {
              "type": "file",
              "description": "An Eigenstrat formatted genotype file",
              "pattern": "*.{geno}"
            }
          },
          {
            "snp": {
              "type": "file",
              "description": "An Eigenstrat formatted snp file",
              "pattern": "*.{snp}"
            }
          },
          {
            "ind": {
              "type": "file",
              "description": "An Eigenstrat formatted individual file",
              "pattern": "*.{ind}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "A TSV table with the number of covered SNPs per individual.",
              "pattern": "*.{tsv}"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "A json table with the number of covered SNPs per individual.",
              "pattern": "*.{json}"
            }
          }
        ],
        "authors": [
          "@TCLamnidis"
        ]
      }
    },
    {
      "name": "eklipse",
      "path": "modules/nf-core/eklipse/meta.yml",
      "type": "module",
      "meta": {
        "name": "eklipse",
        "description": "tool for detection and quantification of large mtDNA rearrangements.",
        "keywords": [
          "eklipse",
          "mitochondria",
          "mtDNA",
          "circos",
          "deletion",
          "SV"
        ],
        "tools": [
          {
            "eklipse": {
              "description": "tool for detection and quantification of large mtDNA rearrangements.",
              "homepage": "https://github.com/dooguypapua/eKLIPse/tree/master",
              "documentation": "https://github.com/dooguypapua/eKLIPse/tree/master",
              "tool_dev_url": "https://github.com/dooguypapua/eKLIPse/tree/master",
              "doi": "10.1038/s41436-018-0350-8",
              "licence": [
                "GNU General Public v3 or later (GPL v3+)"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "MT BAM/SAM file",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "MT BAM/SAM index file",
              "pattern": "*.{bai,sai}"
            }
          },
          {
            "ref_gb": {
              "type": "file",
              "description": "mtDNA reference genome in Genbank format, optional if empty NC_012920.1.gb will be used",
              "pattern": "*.{gb}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "csv file containing deletions",
              "pattern": "*.{csv}"
            }
          },
          {
            "circos": {
              "type": "file",
              "description": "png file with circos plot of mt",
              "pattern": "*.{png}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Lucpen"
        ]
      }
    },
    {
      "name": "elprep_filter",
      "path": "modules/nf-core/elprep/filter/meta.yml",
      "type": "module",
      "meta": {
        "name": "elprep_filter",
        "description": "Filter, sort and markdup sam/bam files, with optional BQSR and variant calling.",
        "keywords": [
          "sort",
          "bam",
          "sam",
          "filter",
          "variant calling"
        ],
        "tools": [
          {
            "elprep": {
              "description": "elPrep is a high-performance tool for preparing .sam/.bam files for variant calling in sequencing pipelines. It can be used as a drop-in replacement for SAMtools/Picard/GATK4.",
              "homepage": "https://github.com/ExaScience/elprep",
              "documentation": "https://github.com/ExaScience/elprep",
              "tool_dev_url": "https://github.com/ExaScience/elprep",
              "doi": "10.1371/journal.pone.0244471",
              "licence": "['AGPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Input SAM/BAM file",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "run_haplotypecaller": {
              "type": "boolean",
              "description": "Run variant calling on the input files. Needed to generate gvcf output."
            }
          },
          {
            "run_bqsr": {
              "type": "boolean",
              "description": "Run BQSR on the input files. Needed to generate recall metrics."
            }
          },
          {
            "reference_sequences": {
              "type": "file",
              "description": "Optional SAM header to replace existing header.",
              "pattern": "*.sam"
            }
          },
          {
            "filter_regions_bed": {
              "type": "file",
              "description": "Optional BED file containing regions to filter.",
              "pattern": "*.bed"
            }
          },
          {
            "reference_elfasta": {
              "type": "file",
              "description": "Elfasta file, required for BQSR and variant calling.",
              "pattern": "*.elfasta"
            }
          },
          {
            "known_sites": {
              "type": "file",
              "description": "Optional elsites file containing known SNPs for BQSR.",
              "pattern": "*.elsites"
            }
          },
          {
            "target_regions_bed": {
              "type": "file",
              "description": "Optional BED file containing target regions for BQSR and variant calling.",
              "pattern": "*.bed"
            }
          },
          {
            "intermediate_bqsr_tables": {
              "type": "file",
              "description": "Optional list of BQSR tables, used when parsing files created by `elprep split`",
              "pattern": "*.table"
            }
          },
          {
            "bqsr_tables_only": {
              "type": "boolean",
              "description": "Write intermediate BQSR tables, used when parsing files created by `elprep split`."
            }
          },
          {
            "get_activity_profile": {
              "type": "boolean",
              "description": "Get the activity profile calculated by the haplotypecaller to the given file in IGV format."
            }
          },
          {
            "get_assembly_regions": {
              "type": "boolean",
              "description": "Get the assembly regions calculated by haplotypecaller to the speficied file in IGV format."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted, markdup, optionally BQSR BAM/SAM file",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Optional duplicate metrics file generated by elprep",
              "pattern": "*.{metrics.txt}"
            }
          },
          {
            "recall": {
              "type": "file",
              "description": "Optional recall metrics file generated by elprep",
              "pattern": "*.{recall}"
            }
          },
          {
            "gvcf": {
              "type": "file",
              "description": "Optional GVCF output file",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "table": {
              "type": "file",
              "description": "Optional intermediate BQSR table output file",
              "pattern": "*.{table}"
            }
          },
          {
            "activity_profile": {
              "type": "file",
              "description": "Optional activity profile output file",
              "pattern": "*.{activity_profile.igv}"
            }
          },
          {
            "assembly_regions": {
              "type": "file",
              "description": "Optional activity regions output file",
              "pattern": "*.{assembly_regions.igv}"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "elprep_merge",
      "path": "modules/nf-core/elprep/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "elprep_merge",
        "description": "Merge split bam/sam chunks in one file",
        "keywords": [
          "bam",
          "sam",
          "merge"
        ],
        "tools": [
          {
            "elprep": {
              "description": "elPrep is a high-performance tool for preparing .sam/.bam files for variant calling in sequencing pipelines. It can be used as a drop-in replacement for SAMtools/Picard/GATK4.",
              "homepage": "https://github.com/ExaScience/elprep",
              "documentation": "https://github.com/ExaScience/elprep",
              "tool_dev_url": "https://github.com/ExaScience/elprep",
              "doi": "10.1371/journal.pone.0244471",
              "licence": "['AGPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "List of BAM/SAM chunks to merge",
              "pattern": "*.{bam,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Merged BAM/SAM file",
              "pattern": "*.{bam,sam}"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "elprep_split",
      "path": "modules/nf-core/elprep/split/meta.yml",
      "type": "module",
      "meta": {
        "name": "elprep_split",
        "description": "Split bam file into manageable chunks",
        "keywords": [
          "bam",
          "split by chromosome"
        ],
        "tools": [
          {
            "elprep": {
              "description": "elPrep is a high-performance tool for preparing .sam/.bam files for variant calling in sequencing pipelines. It can be used as a drop-in replacement for SAMtools/Picard/GATK4.",
              "homepage": "https://github.com/ExaScience/elprep",
              "documentation": "https://github.com/ExaScience/elprep",
              "tool_dev_url": "https://github.com/ExaScience/elprep",
              "doi": "10.1371/journal.pone.0244471",
              "licence": "['AGPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "List of BAM/SAM files",
              "pattern": "*.{bam,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "List of split BAM/SAM files",
              "pattern": "*.{bam,sam}"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "emboss_cons",
      "path": "modules/nf-core/emboss/cons/meta.yml",
      "type": "module",
      "meta": {
        "name": "emboss_cons",
        "description": "cons calculates a consensus sequence from a multiple sequence alignment. To obtain the consensus, the sequence weights and a scoring matrix are used to calculate a score for each amino acid residue or nucleotide at each position in the alignment.",
        "keywords": [
          "emboss",
          "consensus",
          "fasta",
          "multiple sequence alignment",
          "MSA"
        ],
        "tools": [
          {
            "emboss": {
              "description": "The European Molecular Biology Open Software Suite",
              "homepage": "https://www.ebi.ac.uk/Tools/sfc/emboss_seqret/",
              "documentation": "https://emboss.bioinformatics.nl/cgi-bin/emboss/help/seqret",
              "tool_dev_url": "http://emboss.open-bio.org/",
              "doi": "10.1016/s0168-9525(00)02024-2 ",
              "licence": [
                "GPL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Multiple sequence alignment (unzipped)",
              "pattern": "*.{fasta,fa,fas,fsa,seq,mpfa,aln,clustal,clw,msf,phy,phylip,stockholm,sto,msf,afa,afa,a}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "consensus": {
              "type": "file",
              "description": "Consensus sequence calculated from multiple sequence alignment",
              "pattern": "*.fa"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Joon-Klaps"
        ]
      }
    },
    {
      "name": "emboss_seqret",
      "path": "modules/nf-core/emboss/seqret/meta.yml",
      "type": "module",
      "meta": {
        "name": "emboss_seqret",
        "description": "Reads in one or more sequences, converts, filters, or transforms them and writes them out again",
        "keywords": [
          "emboss",
          "gff",
          "embl",
          "genbank",
          "fasta",
          "convert",
          "swissprot"
        ],
        "tools": [
          {
            "emboss": {
              "description": "The European Molecular Biology Open Software Suite",
              "homepage": "https://www.ebi.ac.uk/Tools/sfc/emboss_seqret/",
              "documentation": "https://emboss.bioinformatics.nl/cgi-bin/emboss/help/seqret",
              "tool_dev_url": "http://emboss.open-bio.org/",
              "doi": "10.1016/s0168-9525(00)02024-2 ",
              "licence": [
                "GPL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sequence": {
              "type": "file",
              "description": "Input sequence query",
              "pattern": "*.{gff,em,gb,refseq,pir,swiss,sw,txt}"
            }
          },
          {
            "out_ext": {
              "type": "string",
              "description": "File extension of the output file. Unless otherwise set by a flag in `ext.args`, the extension dictates the output file format."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "outseq": {
              "type": "file",
              "description": "Converted sequence file",
              "pattern": "*"
            }
          }
        ],
        "authors": [
          "@MillironX"
        ]
      }
    },
    {
      "name": "emmtyper",
      "path": "modules/nf-core/emmtyper/meta.yml",
      "type": "module",
      "meta": {
        "name": "emmtyper",
        "description": "EMM typing of Streptococcus pyogenes assemblies",
        "keywords": [
          "fasta",
          "Streptococcus pyogenes",
          "typing"
        ],
        "tools": [
          {
            "emmtyper": {
              "description": "Streptococcus pyogenes in silico EMM typer",
              "homepage": "https://github.com/MDU-PHL/emmtyper",
              "documentation": "https://github.com/MDU-PHL/emmtyper",
              "tool_dev_url": "https://github.com/MDU-PHL/emmtyper",
              "licence": [
                "GNU General Public v3 (GPL v3)"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA assembly file",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab-delimited result file",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "endorspy",
      "path": "modules/nf-core/endorspy/meta.yml",
      "type": "module",
      "meta": {
        "name": "endorspy",
        "description": "endorS.py calculates endogenous DNA from samtools flagstat files and print to screen",
        "keywords": [
          "endogenous DNA",
          "ancient DNA",
          "percent on target",
          "statistics"
        ],
        "tools": [
          {
            "endorspy": {
              "description": "endorS.py calculates percent on target and/or clonality from samtools flagstat files and print to screen",
              "homepage": "https://github.com/aidaanva/endorS.py",
              "documentation": "https://github.com/aidaanva/endorS.py",
              "tool_dev_url": "https://github.com/aidaanva/endorS.py",
              "doi": "10.7717/peerj.10947",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "stats_raw": {
              "type": "file",
              "description": "output of samtools flagstat in a txt file, assumes no quality filtering nor duplicate removal performed"
            }
          },
          {
            "stats_qualityfiltered": {
              "type": "file",
              "description": "output of samtools flagstat in a txt file, assumes some form of quality or length filtering has been performed, must be provided with at least one of the options -r or -d"
            }
          },
          {
            "stats_deduplicated": {
              "type": "file",
              "description": "output of samtools flagstat in a txt file, whereby duplicate removal has been performed on the input reads"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "file with the endogenous DNA calculation tailored for multiQC",
              "pattern": "*_mqc.json"
            }
          }
        ],
        "authors": [
          "@aidaanva"
        ]
      }
    },
    {
      "name": "ensemblvep_download",
      "path": "modules/nf-core/ensemblvep/download/meta.yml",
      "type": "module",
      "meta": {
        "name": "ENSEMBLVEP_DOWNLOAD",
        "description": "Ensembl Variant Effect Predictor (VEP). The cache downloading options are controlled through `task.ext.args`.",
        "keywords": [
          "annotation",
          "cache",
          "download"
        ],
        "tools": [
          {
            "ensemblvep": {
              "description": "VEP determines the effect of your variants (SNPs, insertions, deletions, CNVs\nor structural variants) on genes, transcripts, and protein sequence, as well as regulatory regions.\n",
              "homepage": "https://www.ensembl.org/info/docs/tools/vep/index.html",
              "documentation": "https://www.ensembl.org/info/docs/tools/vep/script/index.html",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "assembly": {
              "type": "string",
              "description": "Genome assembly\n"
            }
          },
          {
            "species": {
              "type": "string",
              "description": "Specie\n"
            }
          },
          {
            "cache_version": {
              "type": "string",
              "description": "cache version\n"
            }
          }
        ],
        "output": [
          {
            "cache": {
              "type": "file",
              "description": "cache",
              "pattern": "*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "ensemblvep_vep",
      "path": "modules/nf-core/ensemblvep/vep/meta.yml",
      "type": "module",
      "meta": {
        "name": "ENSEMBLVEP_VEP",
        "description": "Ensembl Variant Effect Predictor (VEP). The output-file-format is controlled through `task.ext.args`.",
        "keywords": [
          "annotation",
          "vcf",
          "json",
          "tab"
        ],
        "tools": [
          {
            "ensemblvep": {
              "description": "VEP determines the effect of your variants (SNPs, insertions, deletions, CNVs\nor structural variants) on genes, transcripts, and protein sequence, as well as regulatory regions.\n",
              "homepage": "https://www.ensembl.org/info/docs/tools/vep/index.html",
              "documentation": "https://www.ensembl.org/info/docs/tools/vep/script/index.html",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "vcf to annotate\n"
            }
          },
          {
            "custom_extra_files": {
              "type": "file",
              "description": "extra sample-specific files to be used with the `--custom` flag to be configured with ext.args\n(optional)\n"
            }
          },
          {
            "genome": {
              "type": "string",
              "description": "which genome to annotate with\n"
            }
          },
          {
            "species": {
              "type": "string",
              "description": "which species to annotate with\n"
            }
          },
          {
            "cache_version": {
              "type": "integer",
              "description": "which version of the cache to annotate with\n"
            }
          },
          {
            "cache": {
              "type": "file",
              "description": "path to VEP cache (optional)\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing fasta reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "reference FASTA file (optional)\n",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "extra_files": {
              "type": "file",
              "description": "path to file(s) needed for plugins  (optional)\n"
            }
          }
        ],
        "output": [
          {
            "vcf": {
              "type": "file",
              "description": "annotated vcf (optional)\n",
              "pattern": "*.ann.vcf.gz"
            }
          },
          {
            "tab": {
              "type": "file",
              "description": "tab file with annotated variants (optional)\n",
              "pattern": "*.ann.tab.gz"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "json file with annotated variants (optional)\n",
              "pattern": "*.ann.json.gz"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "VEP report file",
              "pattern": "*.html"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxulysse",
          "@matthdsm",
          "@nvnieuwk"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "entrezdirect_esearch",
      "path": "modules/nf-core/entrezdirect/esearch/meta.yml",
      "type": "module",
      "meta": {
        "name": "entrezdirect_esearch",
        "description": "Searches a term in a public NCBI database",
        "keywords": [
          "public datasets",
          "entrez",
          "search",
          "ncbi",
          "database"
        ],
        "tools": [
          {
            "entrezdirect": {
              "description": "Entrez Direct (EDirect) is a method for accessing the NCBI's set of\ninterconnected databases (publication, sequence, structure, gene,\nvariation, expression, etc.) from a UNIX terminal window. Functions\ntake search terms from command line arguments. Individual operations\nare combined to build multi-step queries. Record retrieval and\nformatting normally complete the process.\n",
              "homepage": "https://www.ncbi.nlm.nih.gov/books/NBK179288/",
              "documentation": "https://www.ncbi.nlm.nih.gov/books/NBK25501/",
              "tool_dev_url": "https://www.ncbi.nlm.nih.gov/books/NBK25498/",
              "doi": "10.1016/S0076-6879(96)66012-1",
              "licence": [
                "PUBLIC DOMAIN"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "database": {
              "type": "value",
              "description": "Value must be a valid Entrez database name."
            }
          },
          {
            "term": {
              "type": "value",
              "description": "Entrez text query. All special characters must be URL encoded.\nSpaces may be replaced by '+' signs.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "result_xml": {
              "type": "file",
              "description": "Query result text in XML format",
              "pattern": "*.xml"
            }
          }
        ],
        "authors": [
          "@alxndrdiaz"
        ]
      }
    },
    {
      "name": "entrezdirect_esummary",
      "path": "modules/nf-core/entrezdirect/esummary/meta.yml",
      "type": "module",
      "meta": {
        "name": "entrezdirect_esummary",
        "description": "Queries an NCBI database using Unique Identifier(s)",
        "keywords": [
          "public datasets",
          "ncbi",
          "entrez",
          "metadata",
          "query",
          "database"
        ],
        "tools": [
          {
            "entrezdirect": {
              "description": "Entrez Direct (EDirect) is a method for accessing the NCBI's set of\ninterconnected databases (publication, sequence, structure, gene,\nvariation, expression, etc.) from a UNIX terminal window. Functions\ntake search terms from command line arguments. Individual operations\nare combined to build multi-step queries. Record retrieval and\nformatting normally complete the process.\n",
              "homepage": "https://www.ncbi.nlm.nih.gov/books/NBK179288/",
              "documentation": "https://www.ncbi.nlm.nih.gov/books/NBK25501/",
              "tool_dev_url": "https://www.ncbi.nlm.nih.gov/books/NBK25498/",
              "doi": "10.1016/S0076-6879(96)66012-1",
              "licence": [
                "PUBLIC DOMAIN"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "database": {
              "type": "value",
              "description": "Value must be a valid Entrez database name ('assembly', etc)."
            }
          },
          {
            "uid": {
              "type": "value",
              "description": "Unique Identifier (UID) of record in NCBI database. Cannot be used at the same time as uids_file"
            }
          },
          {
            "uids_file": {
              "type": "file",
              "description": "Text file containing multiple UIDs. Cannot be used at the same time as uid."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "xml": {
              "type": "file",
              "description": "Query result in XML format",
              "pattern": "*.xml"
            }
          }
        ],
        "authors": [
          "@alxndrdiaz"
        ]
      }
    },
    {
      "name": "entrezdirect_xtract",
      "path": "modules/nf-core/entrezdirect/xtract/meta.yml",
      "type": "module",
      "meta": {
        "name": "entrezdirect_xtract",
        "description": "Queries an NCBI database using an UID",
        "keywords": [
          "public datasets",
          "entrez",
          "search",
          "ncbi",
          "database"
        ],
        "tools": [
          {
            "entrezdirect": {
              "description": "Entrez Direct (EDirect) is a method for accessing the NCBI's set of\ninterconnected databases (publication, sequence, structure, gene,\nvariation, expression, etc.) from a UNIX terminal window. Functions\ntake search terms from command line arguments. Individual operations\nare combined to build multi-step queries. Record retrieval and\nformatting normally complete the process.\n",
              "homepage": "https://www.ncbi.nlm.nih.gov/books/NBK179288/",
              "documentation": "https://www.ncbi.nlm.nih.gov/books/NBK25501/",
              "tool_dev_url": "https://www.ncbi.nlm.nih.gov/books/NBK25498/",
              "doi": "10.1016/S0076-6879(96)66012-1",
              "licence": [
                "PUBLIC DOMAIN"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "xml_input": {
              "type": "file",
              "description": "XML text file containing query results from database."
            }
          },
          {
            "pattern": {
              "type": "value",
              "description": "String in xml_input that encloses element to search."
            }
          },
          {
            "element": {
              "type": "value",
              "description": "Space-delimited strings that will be converted to columns."
            }
          },
          {
            "sep": {
              "type": "value",
              "description": "Separator/delimiter between columns (for instance \",\" or \"\\t\")."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "xtract_table": {
              "type": "file",
              "description": "TXT file containing columns searched from element.",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@alxndrdiaz"
        ]
      }
    },
    {
      "name": "epang_place",
      "path": "modules/nf-core/epang/place/meta.yml",
      "type": "module",
      "meta": {
        "name": "epang_place",
        "description": "phylogenetic placement of query sequences in a reference tree",
        "keywords": [
          "phylogeny",
          "phylogenetic placement",
          "sequences"
        ],
        "tools": [
          {
            "epang": {
              "description": "Massively parallel phylogenetic placement of genetic sequences",
              "homepage": "https://github.com/Pbdas/epa-ng",
              "documentation": "https://github.com/Pbdas/epa-ng/wiki/Full-Stack-Example",
              "tool_dev_url": "https://github.com/Pbdas/epa-ng",
              "doi": "10.1093/sysbio/syy054",
              "licence": "['GNU Affero General Public License v3.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "queryaln": {
              "type": "file",
              "description": "aligned query sequences in any supported format including phylip and fasta, may be gzipped",
              "pattern": "*"
            }
          },
          {
            "referencealn": {
              "type": "file",
              "description": "reference alignment in any supported format including phylip and fasta, may be gzipped",
              "pattern": "*"
            }
          },
          {
            "referencetree": {
              "type": "file",
              "description": "newick file containing the reference tree in which query sequences will be placed",
              "pattern": "*"
            }
          },
          {
            "bfastfile": {
              "type": "file",
              "description": "file argument to the --bfast parameter",
              "pattern": "*"
            }
          },
          {
            "binaryfile": {
              "type": "file",
              "description": "file argument to the --binary parameter",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "epang": {
              "type": "directory",
              "description": "directory in which EPA-NG was run"
            }
          },
          {
            "jplace": {
              "type": "file",
              "description": "gzipped file with placement information",
              "pattern": "*.jplace.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "log file from placement",
              "pattern": "*.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@erikrikarddaniel"
        ]
      },
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        }
      ]
    },
    {
      "name": "epang_split",
      "path": "modules/nf-core/epang/split/meta.yml",
      "type": "module",
      "meta": {
        "name": "epang_split",
        "description": "splits an alignment into reference and query parts",
        "keywords": [
          "phylogeny",
          "phylogenetic placement",
          "sequences"
        ],
        "tools": [
          {
            "epang": {
              "description": "Massively parallel phylogenetic placement of genetic sequences",
              "homepage": "https://github.com/Pbdas/epa-ng",
              "documentation": "https://github.com/Pbdas/epa-ng/wiki/Full-Stack-Example",
              "tool_dev_url": "https://github.com/Pbdas/epa-ng",
              "doi": "10.1093/sysbio/syy054",
              "licence": "['GNU Affero General Public License v3.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "refaln": {
              "type": "file",
              "description": "reference alignment in any supported format including phylip and fasta, may be gzipped",
              "pattern": "*.{faa,fna,fa,fasta,fa,phy,aln,alnfaa,alnfna,alnfa,mfa,faa.gz,fna.gz,fa.gz,fasta.gz,fa.gz,phy.gz,aln.gz,alnfaa.gz,alnfna.gz,alnfa.gz,mfa.gz}"
            }
          },
          {
            "fullaln": {
              "type": "file",
              "description": "full alignment in any supported format to split into reference and query alignments",
              "pattern": "*.{faa,fna,fa,fasta,fa,phy,aln,alnfaa,alnfna,alnfa,mfa,faa.gz,fna.gz,fa.gz,fasta.gz,fa.gz,phy.gz,aln.gz,alnfaa.gz,alnfna.gz,alnfa.gz,mfa.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "query": {
              "type": "file",
              "description": "query sequence alignment in gzipped fasta format"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "reference sequence alignment in gzipped fasta format"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@erikrikarddaniel"
        ]
      },
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        }
      ]
    },
    {
      "name": "expansionhunter",
      "path": "modules/nf-core/expansionhunter/meta.yml",
      "type": "module",
      "meta": {
        "name": "expansionhunter",
        "description": "Estimate repeat sizes using NGS data",
        "keywords": [
          "STR",
          "repeat_expansions",
          "bam",
          "cram",
          "vcf",
          "json"
        ],
        "tools": [
          {
            "expansionhunter": {
              "description": "A tool for estimating repeat sizes",
              "homepage": "https://github.com/Illumina/ExpansionHunter",
              "documentation": "https://github.com/Illumina/ExpansionHunter/blob/master/docs/01_Introduction.md",
              "doi": "10.1093/bioinformatics/btz431",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome",
              "pattern": "*.{fna,fa,fasta}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome index",
              "pattern": "*.fai"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "variant_catalog": {
              "type": "file",
              "description": "JSON file with repeat expansion sites to genotype",
              "pattern": "*.json"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', gender:'female' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF with repeat expansions",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON with repeat expansions",
              "pattern": "*.json.gz"
            }
          }
        ],
        "authors": [
          "@jemten"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "expansionhunterdenovo_merge",
      "path": "modules/nf-core/expansionhunterdenovo/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "expansionhunterdenovo_merge",
        "description": "Merge STR profiles into a multi-sample STR profile",
        "keywords": [
          "expansionhunterdenovo",
          "merge",
          "str"
        ],
        "tools": [
          {
            "expansionhunterdenovo": {
              "description": "ExpansionHunter Denovo (EHdn) is a suite of tools for detecting novel expansions of short tandem repeats (STRs).",
              "homepage": "https://github.com/Illumina/ExpansionHunterDenovo",
              "documentation": "https://github.com/Illumina/ExpansionHunterDenovo/blob/master/documentation/00_Introduction.md",
              "tool_dev_url": "https://github.com/Illumina/ExpansionHunterDenovo",
              "licence": "['Apache License 2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "manifest": {
              "type": "file",
              "description": "A tab-delimited file containing the sample name, whether it's case or control\nand the paths to the corresponding STR profiles.\nSee here for an example: https://github.com/Illumina/ExpansionHunterDenovo/blob/master/documentation/06_Merging_profiles.md#manifest-files\n",
              "pattern": "*.{tsv,txt}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference FASTA file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the reference FASTA file",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "merged_profiles": {
              "type": "file",
              "description": "The merged STR profiles",
              "pattern": "*.multisample_profile.json"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "expansionhunterdenovo_profile",
      "path": "modules/nf-core/expansionhunterdenovo/profile/meta.yml",
      "type": "module",
      "meta": {
        "name": "expansionhunterdenovo_profile",
        "description": "Compute genome-wide STR profile",
        "keywords": [
          "expansionhunterdenovo",
          "profile",
          "STR",
          "genome",
          "bam",
          "cram"
        ],
        "tools": [
          {
            "expansionhunterdenovo": {
              "description": "ExpansionHunter Denovo (EHdn) is a suite of tools for detecting novel expansions of short tandem repeats (STRs).",
              "homepage": "https://github.com/Illumina/ExpansionHunterDenovo",
              "documentation": "https://github.com/Illumina/ExpansionHunterDenovo/blob/master/documentation/00_Introduction.md",
              "tool_dev_url": "https://github.com/Illumina/ExpansionHunterDenovo",
              "licence": "['Apache License 2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "alignment_file": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "alignment_index": {
              "type": "file",
              "description": "Index of the BAM/CRAM file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The FASTA reference file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the FASTA reference file",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "locus_tsv": {
              "type": "file",
              "description": "The locus TSV file",
              "pattern": "*.tsv"
            }
          },
          {
            "motif_tsv": {
              "type": "file",
              "description": "The motif TSV file",
              "pattern": "*.tsv"
            }
          },
          {
            "str_profile": {
              "type": "file",
              "description": "The JSON file containing the STR profile",
              "pattern": "*.json"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "falco",
      "path": "modules/nf-core/falco/meta.yml",
      "type": "module",
      "meta": {
        "name": "falco",
        "description": "Run falco on sequenced reads",
        "keywords": [
          "quality control",
          "qc",
          "adapters",
          "fastq"
        ],
        "tools": [
          {
            "fastqc": {
              "description": "falco is a drop-in C++ implementation of FastQC to assess the quality of sequence reads.",
              "homepage": "https://falco.readthedocs.io/",
              "documentation": "https://falco.readthedocs.io/",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "FastQC like report",
              "pattern": "*_{fastqc_report.html}"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "falco report data",
              "pattern": "*_{data.txt}"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "falco summary file",
              "pattern": "*_{summary.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@lucacozzuto"
        ]
      },
      "pipelines": [
        {
          "name": "demultiplex",
          "version": "1.3.2"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "faqcs",
      "path": "modules/nf-core/faqcs/meta.yml",
      "type": "module",
      "meta": {
        "name": "faqcs",
        "description": "Perform adapter and quality trimming on sequencing reads with reporting",
        "keywords": [
          "trimming",
          "quality control",
          "fastq",
          "faqcs"
        ],
        "tools": [
          {
            "faqcs": {
              "description": "FaQCs combines several features of currently available applications into a single, user-friendly process, and includes additional unique capabilities such as filtering the PhiX control sequences, conversion of FASTQ formats, and multi-threading. The original data and trimmed summaries are reported within a variety of graphics and reports, providing a simple way to do data quality control and assurance.\n",
              "homepage": "https://github.com/LANL-Bioinformatics/FaQCs",
              "documentation": "https://github.com/LANL-Bioinformatics/FaQCs",
              "tool_dev_url": "https://github.com/LANL-Bioinformatics/FaQCs",
              "doi": "10.1186/s12859-014-0366-2",
              "licence": [
                "GPLv3 License"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Metadata about the specific run.\nI guess this can be used if you are running many different images in a single nextflow pass?\nI have no clue.\nGroovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "image": {
              "type": "image",
              "description": "Obtained from cellpose documentation: Inputs\nYou can use tiffs or PNGs or JPEGs. We use the image loader from scikit-image.\nSingle plane images can read into data as nY x nX x channels or channels x nY x nX.\nThen the channels settings will take care of reshaping the input appropriately for the network.\nNote the model also rescales the input for each channel so that 0 = 1st percentile of image values and 1 = 99th percentile.\n"
            }
          },
          {
            "image_metadata": {
              "type": "csv",
              "description": "This file will let Cellpose know which channels to use for segmentation.\nThe default will be channel 0.\n"
            }
          },
          {
            "Model_to_use": {
              "type": "string",
              "description": "This will define which model to use.\nThe default will be nuclear.\nAll models from the model zoo should be usable, the exact string has to be passed.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "The trimmed/modified fastq reads",
              "pattern": "*trimmed.fastq.gz"
            }
          },
          {
            "reads_fail": {
              "type": "file",
              "description": "Reads that failed the preprocessing (Optional with --discard args setting)",
              "pattern": "*discard.fastq.gz"
            }
          },
          {
            "reads_unpaired": {
              "type": "file",
              "description": "Reads without matching mates in paired-end files (Optional)",
              "pattern": "*trimmed.unpaired.fastq.gz"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "trimming/qc text stats file",
              "pattern": "*.stats.txt"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "trimming/qc text txt files from --debug option",
              "pattern": "*.txt"
            }
          },
          {
            "statspdf": {
              "type": "file",
              "description": "trimming/qc pdf report file",
              "pattern": "*_qc_report.pdf"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "fastq log file",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@mjcipriano",
          "@sateeshperi",
          "@hseabolt"
        ]
      }
    },
    {
      "name": "fargene",
      "path": "modules/nf-core/fargene/meta.yml",
      "type": "module",
      "meta": {
        "name": "fargene",
        "description": "tool that takes either fragmented metagenomic data or longer sequences as input and predicts and delivers full-length antiobiotic resistance genes as output.",
        "keywords": [
          "antibiotic resistance genes",
          "ARGs",
          "identifier",
          "metagenomic",
          "contigs"
        ],
        "tools": [
          {
            "fargene": {
              "description": "Fragmented Antibiotic Resistance Gene Identifier takes either fragmented metagenomic data or longer sequences as input and predicts and delivers full-length antiobiotic resistance genes as output",
              "homepage": "https://github.com/fannyhb/fargene",
              "documentation": "https://github.com/fannyhb/fargene",
              "tool_dev_url": "https://github.com/fannyhb/fargene",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "uncompressed fasta file or paired-end fastq files containing either genomes or longer contigs as nucleotide or protein sequences (fasta) or fragmented metagenomic reads (fastq)",
              "pattern": "*.{fasta}"
            }
          },
          {
            "hmm_model": {
              "type": "string",
              "description": "name of custom hidden markov model to be used [pre-defined class_a, class_b_1_2, class_b_3, class_c, class_d_1, class_d_2, qnr, tet_efflux, tet_rpg, tet_enzyme]"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "log file",
              "pattern": "*.{log}"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "analysis summary text file",
              "pattern": "*.{txt}"
            }
          },
          {
            "hmm": {
              "type": "file",
              "description": "output from hmmsearch",
              "pattern": "*.{out}"
            }
          },
          {
            "orfs": {
              "type": "file",
              "description": "open reading frames (ORFs)",
              "pattern": "*.{fasta}"
            }
          },
          {
            "orfs_amino": {
              "type": "file",
              "description": "protein translation of open reading frames (ORFs)",
              "pattern": "*.{fasta}"
            }
          },
          {
            "contigs": {
              "type": "file",
              "description": "(complete) contigs that passed the final full-length classification",
              "pattern": "*.{fasta}"
            }
          },
          {
            "contigs_pept": {
              "type": "file",
              "description": "parts of the contigs that passed the final classification step that aligned with the HMM, as amino acid sequences",
              "pattern": "*.{fasta}"
            }
          },
          {
            "filtered": {
              "type": "file",
              "description": "sequences that passed the final classification step, but only the parts that where predicted by the HMM to be part of the gene",
              "pattern": "*.{fasta}"
            }
          },
          {
            "filtered_pept": {
              "type": "file",
              "description": "sequences from filtered.fasta, translated in the same frame as the gene is predicted to be located",
              "pattern": "*.{fasta}"
            }
          },
          {
            "fragments": {
              "type": "file",
              "description": "All quality controlled retrieved fragments that were classified as positive, together with its read-pair, gathered in two files",
              "pattern": "*.{fastq}"
            }
          },
          {
            "trimmed": {
              "type": "file",
              "description": "The quality controlled retrieved fragments from each input file.",
              "pattern": "*.{fasta}"
            }
          },
          {
            "spades": {
              "type": "directory",
              "description": "The output from the SPAdes assembly",
              "pattern": "spades_assembly"
            }
          },
          {
            "metagenome": {
              "type": "file",
              "description": "The FASTQ to FASTA converted input files from metagenomic reads.",
              "pattern": "*.{fasta}"
            }
          },
          {
            "tmp": {
              "type": "file",
              "description": "The from FASTQ to FASTA converted input files and their translated input sequences. Are only saved if option --store-peptides is used.",
              "pattern": "*.{fasta}"
            }
          }
        ],
        "authors": [
          "@louperelo"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "fastani",
      "path": "modules/nf-core/fastani/meta.yml",
      "type": "module",
      "meta": {
        "name": "fastani",
        "description": "Alignment-free computation of average nucleotide Identity (ANI)",
        "keywords": [
          "genome",
          "fasta",
          "ANI"
        ],
        "tools": [
          {
            "fastani": {
              "description": "FastANI is developed for fast alignment-free computation of whole-genome Average Nucleotide Identity (ANI).",
              "homepage": "https://github.com/ParBLiSS/FastANI",
              "documentation": "https://github.com/ParBLiSS/FastANI",
              "tool_dev_url": "https://github.com/ParBLiSS/FastANI",
              "doi": "10.1038/s41467-018-07641-9",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "query": {
              "type": "file",
              "description": "Fasta file(s) to be queried",
              "pattern": "*.fasta"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "Fasta file(s) to be used as reference for the query",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ani": {
              "type": "file",
              "description": "Results of the query",
              "pattern": "*.ani.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@abhi18av"
        ]
      }
    },
    {
      "name": "fastawindows",
      "path": "modules/nf-core/fastawindows/meta.yml",
      "type": "module",
      "meta": {
        "name": "fastawindows",
        "description": "Quickly compute statistics over a fasta file in windows.",
        "keywords": [
          "genome",
          "fasta",
          "tsv",
          "bed"
        ],
        "tools": [
          {
            "fastawindows": {
              "description": "fasta_windows is a tool written for Darwin Tree of Life chromosomal level genome assemblies. The executable takes a fasta formatted file and calculates some statistics of interest in windows",
              "homepage": "https://github.com/tolkit/fasta_windows",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file",
              "pattern": "*.{fa,fasta,fna}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "freq": {
              "type": "file",
              "description": "TSV file with frequencies and statistics",
              "pattern": "*.{tsv}"
            }
          },
          {
            "mononuc": {
              "type": "file",
              "description": "TSV file with mononucleotide counts",
              "pattern": "*.{tsv}"
            }
          },
          {
            "dinuc": {
              "type": "file",
              "description": "TSV file with dinucleotide counts",
              "pattern": "*.{tsv}"
            }
          },
          {
            "trinuc": {
              "type": "file",
              "description": "TSV file with trinucleotide counts",
              "pattern": "*.{tsv}"
            }
          },
          {
            "tetranuc": {
              "type": "file",
              "description": "TSV file with tetranucleotide counts",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@muffato"
        ]
      }
    },
    {
      "name": "fastk_fastk",
      "path": "modules/nf-core/fastk/fastk/meta.yml",
      "type": "module",
      "meta": {
        "name": "fastk_fastk",
        "description": "A fast K-mer counter for high-fidelity shotgun datasets",
        "keywords": [
          "k-mer",
          "count",
          "histogram"
        ],
        "tools": [
          {
            "fastk": {
              "description": "A fast K-mer counter for high-fidelity shotgun datasets",
              "homepage": "https://github.com/thegenemyers/FASTK",
              "tool_dev_url": "https://github.com/thegenemyers/FASTK",
              "licence": "https://github.com/thegenemyers/FASTK/blob/master/LICENSE"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "hist": {
              "type": "file",
              "description": "Histogram of k-mers",
              "pattern": "*.hist"
            }
          },
          {
            "ktab": {
              "type": "file",
              "description": "A sorted table of all canonical k‑mers along with their counts.",
              "pattern": "*.ktab"
            }
          },
          {
            "prof": {
              "type": "file",
              "description": "A k‑mer count profile of each sequence in the input data set.",
              "pattern": "*.prof"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "fastk_histex",
      "path": "modules/nf-core/fastk/histex/meta.yml",
      "type": "module",
      "meta": {
        "name": "fastk_histex",
        "description": "A fast K-mer counter for high-fidelity shotgun datasets",
        "keywords": [
          "k-mer",
          "histogram"
        ],
        "tools": [
          {
            "fastk": {
              "description": "A fast K-mer counter for high-fidelity shotgun datasets",
              "homepage": "https://github.com/thegenemyers/FASTK",
              "tool_dev_url": "https://github.com/thegenemyers/FASTK",
              "licence": "https://github.com/thegenemyers/FASTK/blob/master/LICENSE"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "histogram": {
              "type": "file",
              "description": "A FastK histogram file",
              "pattern": "*.hist"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "hist": {
              "type": "file",
              "description": "A formatted histogram file",
              "pattern": "*.hist"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "fastk_merge",
      "path": "modules/nf-core/fastk/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "fastk_merge",
        "description": "A tool to merge FastK histograms",
        "keywords": [
          "merge",
          "k-mer",
          "histogram",
          "fastk"
        ],
        "tools": [
          {
            "fastk": {
              "description": "A fast K-mer counter for high-fidelity shotgun datasets",
              "homepage": "https://github.com/thegenemyers/FASTK",
              "tool_dev_url": "https://github.com/thegenemyers/FASTK",
              "licence": "https://github.com/thegenemyers/FASTK/blob/master/LICENSE"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastk_hist": {
              "type": "file",
              "description": "A histogram files from the program FastK",
              "pattern": "*.hist"
            }
          },
          {
            "fastk_ktab": {
              "type": "file",
              "description": "Histogram ktab files from the program FastK (option -t)",
              "pattern": "*.ktab*"
            }
          },
          {
            "fastk_prof": {
              "type": "file",
              "description": "Histogram profile files from the program FastK (option -p)",
              "pattern": "*.{prof,pidx}*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fastk_hist": {
              "type": "file",
              "description": "A histogram files from the program FastK",
              "pattern": "*.hist"
            }
          },
          {
            "fastk_ktab": {
              "type": "file",
              "description": "Histogram ktab files from the program FastK (option -t)",
              "pattern": "*.ktab*"
            }
          },
          {
            "fastk_prof": {
              "type": "file",
              "description": "Histogram profile files from the program FastK (option -p)",
              "pattern": "*.{prof,pidx}*"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "fastp",
      "path": "modules/nf-core/fastp/meta.yml",
      "type": "module",
      "meta": {
        "name": "fastp",
        "description": "Perform adapter/quality trimming on sequencing reads",
        "keywords": [
          "trimming",
          "quality control",
          "fastq"
        ],
        "tools": [
          {
            "fastp": {
              "description": "A tool designed to provide fast all-in-one preprocessing for FastQ files. This tool is developed in C++ with multithreading supported to afford high performance.\n",
              "documentation": "https://github.com/OpenGene/fastp",
              "doi": "10.1093/bioinformatics/bty560",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information. Use 'single_end: true' to specify single ended or interleaved FASTQs. Use 'single_end: false' for paired-end reads.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively. If you wish to run interleaved paired-end data,  supply as single-end data\nbut with `--interleaved_in` in your `modules.conf`'s `ext.args` for the module.\n"
            }
          },
          {
            "adapter_fasta": {
              "type": "file",
              "description": "File in FASTA format containing possible adapters to remove.",
              "pattern": "*.{fasta,fna,fas,fa}"
            }
          },
          {
            "save_trimmed_fail": {
              "type": "boolean",
              "description": "Specify true to save files that failed to pass trimming thresholds ending in `*.fail.fastq.gz`"
            }
          },
          {
            "save_merged": {
              "type": "boolean",
              "description": "Specify true to save all merged reads to the a file ending in `*.merged.fastq.gz`"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "The trimmed/modified/unmerged fastq reads",
              "pattern": "*fastp.fastq.gz"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "Results in JSON format",
              "pattern": "*.json"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "Results in HTML format",
              "pattern": "*.html"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "fastq log file",
              "pattern": "*.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reads_fail": {
              "type": "file",
              "description": "Reads the failed the preprocessing",
              "pattern": "*fail.fastq.gz"
            }
          },
          {
            "reads_merged": {
              "type": "file",
              "description": "Reads that were successfully merged",
              "pattern": "*.{merged.fastq.gz}"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "subworkflows": [
        "fastq_fastqc_umitools_fastp",
        "fastq_trim_fastp_fastqc"
      ],
      "pipelines": [
        {
          "name": "airrflow",
          "version": "3.1.0"
        },
        {
          "name": "demultiplex",
          "version": "1.3.2"
        },
        {
          "name": "mag",
          "version": "2.3.2"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "smrnaseq",
          "version": "2.2.1"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "fastqc",
      "path": "modules/nf-core/fastqc/meta.yml",
      "type": "module",
      "meta": {
        "name": "fastqc",
        "description": "Run FastQC on sequenced reads",
        "keywords": [
          "quality control",
          "qc",
          "adapters",
          "fastq"
        ],
        "tools": [
          {
            "fastqc": {
              "description": "FastQC gives general quality metrics about your reads.\nIt provides information about the quality score distribution\nacross your reads, the per base sequence content (%A/C/G/T).\nYou get information about adapter contamination and other\noverrepresented sequences.\n",
              "homepage": "https://www.bioinformatics.babraham.ac.uk/projects/fastqc/",
              "documentation": "https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/",
              "licence": [
                "GPL-2.0-only"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "FastQC report",
              "pattern": "*_{fastqc.html}"
            }
          },
          {
            "zip": {
              "type": "file",
              "description": "FastQC report archive",
              "pattern": "*_{fastqc.zip}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@grst",
          "@ewels",
          "@FelixKrueger"
        ]
      },
      "subworkflows": [
        "fastq_fastqc_umitools_fastp",
        "fastq_fastqc_umitools_trimgalore",
        "fastq_trim_fastp_fastqc"
      ],
      "pipelines": [
        {
          "name": "airrflow",
          "version": "3.1.0"
        },
        {
          "name": "ampliseq",
          "version": "2.6.1"
        },
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "bacass",
          "version": "2.0.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "crisprseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "fastquorum",
          "version": "dev"
        },
        {
          "name": "funcscan",
          "version": "1.1.2"
        },
        {
          "name": "genomeannotator",
          "version": "dev"
        },
        {
          "name": "genomeassembler",
          "version": "dev"
        },
        {
          "name": "genomeskim",
          "version": "dev"
        },
        {
          "name": "gwas",
          "version": "dev"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "hic",
          "version": "2.1.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "hlatyping",
          "version": "2.0.0"
        },
        {
          "name": "liverctanalysis",
          "version": "dev"
        },
        {
          "name": "mag",
          "version": "2.3.2"
        },
        {
          "name": "methylseq",
          "version": "2.4.0"
        },
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "scrnaseq",
          "version": "2.3.2"
        },
        {
          "name": "smrnaseq",
          "version": "2.2.1"
        },
        {
          "name": "spatialtranscriptomics",
          "version": "dev"
        },
        {
          "name": "ssds",
          "version": "dev"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "fastqscan",
      "path": "modules/nf-core/fastqscan/meta.yml",
      "type": "module",
      "meta": {
        "name": "fastqscan",
        "description": "FASTQ summary statistics in JSON format",
        "keywords": [
          "fastq",
          "summary",
          "statistics"
        ],
        "tools": [
          {
            "fastqscan": {
              "description": "FASTQ summary statistics in JSON format",
              "homepage": "https://github.com/rpetit3/fastq-scan",
              "documentation": "https://github.com/rpetit3/fastq-scan",
              "tool_dev_url": "https://github.com/rpetit3/fastq-scan",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "FASTQ file",
              "pattern": "*.{fastq.gz,fq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON formatted file of summary statistics",
              "pattern": "*.json"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "fasttree",
      "path": "modules/nf-core/fasttree/meta.yml",
      "type": "module",
      "meta": {
        "name": "fasttree",
        "description": "Produces a Newick format phylogeny from a multiple sequence alignment. Capable of bacterial genome size alignments.",
        "keywords": [
          "phylogeny",
          "newick"
        ],
        "tools": [
          {
            "fasttree": {
              "description": "FastTree infers approximately-maximum-likelihood phylogenetic trees from alignments of nucleotide or protein sequences",
              "homepage": "http://www.microbesonline.org/fasttree/",
              "documentation": "http://www.microbesonline.org/fasttree/#Usage",
              "licence": [
                "GPL v2"
              ]
            }
          }
        ],
        "input": [
          {
            "alignment": {
              "type": "file",
              "description": "A FASTA format multiple sequence alignment file",
              "pattern": "*.{fasta,fas,fa,mfa}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "phylogeny": {
              "type": "file",
              "description": "A phylogeny in Newick format",
              "pattern": "*.{tre}"
            }
          }
        ],
        "authors": [
          "@aunderwo"
        ]
      }
    },
    {
      "name": "fcs_fcsadaptor",
      "path": "modules/nf-core/fcs/fcsadaptor/meta.yml",
      "type": "module",
      "meta": {
        "name": "fcs_fcsadaptor",
        "description": "Run NCBI's FCS adaptor on assembled genomes",
        "keywords": [
          "assembly",
          "genomics",
          "quality control",
          "contamination",
          "NCBI"
        ],
        "tools": [
          {
            "fcs": {
              "description": "The Foreign Contamination Screening (FCS) tool rapidly detects contaminants from foreign\norganisms in genome assemblies to prepare your data for submission. Therefore, the\nsubmission process to NCBI is faster and fewer contaminated genomes are submitted.\nThis reduces errors in analyses and conclusions, not just for the original data submitter\nbut for all subsequent users of the assembly.\n",
              "homepage": "https://www.ncbi.nlm.nih.gov/data-hub/cgr/data-quality-tools/",
              "documentation": "https://github.com/ncbi/fcs/wiki/FCS-adaptor",
              "tool_dev_url": "https://github.com/ncbi/fcs",
              "licence": "United States Government Work"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "assembly fasta file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "cleaned_assembly": {
              "type": "file",
              "description": "Cleaned assembly in fasta format",
              "pattern": "*.{cleaned_sequences.fa.gz}"
            }
          },
          {
            "adaptor_report": {
              "type": "file",
              "description": "Report of identified adaptors",
              "pattern": "*.{fcs_adaptor_report.txt}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file",
              "pattern": "*.{fcs_adaptor.log}"
            }
          },
          {
            "pipeline_args": {
              "type": "file",
              "description": "Run arguments",
              "pattern": "*.{pipeline_args.yaml}"
            }
          },
          {
            "skipped_trims": {
              "type": "file",
              "description": "Skipped trim information",
              "pattern": "*.{skipped_trims.jsonl}"
            }
          }
        ],
        "authors": [
          "@d4straub"
        ]
      }
    },
    {
      "name": "fcs_fcsgx",
      "path": "modules/nf-core/fcs/fcsgx/meta.yml",
      "type": "module",
      "meta": {
        "name": "fcs_fcsgx",
        "description": "Run FCS-GX on assembled genomes. The contigs of the assembly are searched against a reference database excluding the given taxid.",
        "keywords": [
          "assembly",
          "genomics",
          "quality control",
          "contamination",
          "NCBI"
        ],
        "tools": [
          {
            "fcs": {
              "description": "\"The Foreign Contamination Screening (FCS) tool rapidly detects contaminants from foreign\norganisms in genome assemblies to prepare your data for submission. Therefore, the\nsubmission process to NCBI is faster and fewer contaminated genomes are submitted.\nThis reduces errors in analyses and conclusions, not just for the original data submitter\nbut for all subsequent users of the assembly.\"\n",
              "homepage": "https://www.ncbi.nlm.nih.gov/data-hub/cgr/data-quality-tools/",
              "documentation": "https://github.com/ncbi/fcs/wiki/FCS-GX",
              "tool_dev_url": "https://github.com/ncbi/fcs",
              "licence": "United States Government Work"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', taxid:'6973' ]\n"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "assembly fasta file"
            }
          },
          {
            "database": {
              "type": "file",
              "description": "Files of the database downloaded from the ncbi server, https://ftp.ncbi.nlm.nih.gov/genomes/TOOLS/FCS/database/. All files of one db should be downloaded and given to the process as channel.collect(). The link contains 2 databases, test-only and all. Use all for pipeline usage and test-only for tests."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', taxid:'9606' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fcs_gx_report": {
              "type": "file",
              "description": "Report containing the contig identifier and recommended action (EXCLUDE, TRIM, FIX, REVIEW)",
              "pattern": "*.fcs_gx_report.txt"
            }
          },
          {
            "taxonomy_report": {
              "type": "file",
              "description": "Report containing the contig identifier and mapped contaminant species",
              "pattern": "*.taxonomy.rpt"
            }
          }
        ],
        "authors": [
          "@tillenglert"
        ]
      }
    },
    {
      "name": "ffq",
      "path": "modules/nf-core/ffq/meta.yml",
      "type": "module",
      "meta": {
        "name": "ffq",
        "description": "A command line tool that makes it easier to find sequencing data from the SRA / GEO / ENA.",
        "keywords": [
          "SRA",
          "ENA",
          "GEO",
          "metadata",
          "fetch",
          "public",
          "databases"
        ],
        "tools": [
          {
            "ffq": {
              "description": "A command line tool that makes it easier to find sequencing data from the SRA / GEO / ENA.",
              "homepage": "https://github.com/pachterlab/ffq",
              "documentation": "https://github.com/pachterlab/ffq#usage",
              "tool_dev_url": "https://github.com/pachterlab/ffq",
              "doi": "10.1101/2022.05.18.492548",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "ids": {
              "type": "list",
              "description": "List of supported database ids e.g. SRA / GEO / ENA"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON file containing metadata for ids",
              "pattern": "*.{json}"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      }
    },
    {
      "name": "fgbio_callduplexconsensusreads",
      "path": "modules/nf-core/fgbio/callduplexconsensusreads/meta.yml",
      "type": "module",
      "meta": {
        "name": "fgbio_callduplexconsensusreads",
        "description": "Uses FGBIO CallDuplexConsensusReads to call duplex consensus sequences from reads generated from the same double-stranded source molecule.",
        "keywords": [
          "umi",
          "duplex",
          "fgbio"
        ],
        "tools": [
          {
            "fgbio": {
              "description": "A set of tools for working with genomic and high throughput sequencing data, including UMIs",
              "homepage": "http://fulcrumgenomics.github.io/fgbio/",
              "documentation": "http://fulcrumgenomics.github.io/fgbio/tools/latest/CallDuplexConsensusReads.html",
              "tool_dev_url": "https://github.com/fulcrumgenomics/fgbio",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/SAM file",
              "pattern": "*.{bam,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "consensus BAM file",
              "pattern": "*.bam"
            }
          }
        ],
        "authors": [
          "@lescai"
        ]
      }
    },
    {
      "name": "fgbio_callmolecularconsensusreads",
      "path": "modules/nf-core/fgbio/callmolecularconsensusreads/meta.yml",
      "type": "module",
      "meta": {
        "name": "fgbio_callmolecularconsensusreads",
        "description": "Calls consensus sequences from reads with the same unique molecular tag.",
        "keywords": [
          "UMIs",
          "consensus sequence",
          "bam",
          "sam"
        ],
        "tools": [
          {
            "fgbio": {
              "description": "Tools for working with genomic and high throughput sequencing data.",
              "homepage": "https://github.com/fulcrumgenomics/fgbio",
              "documentation": "http://fulcrumgenomics.github.io/fgbio/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false, collapse:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "The input SAM or BAM file.\n",
              "pattern": "*.{bam,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Output SAM or BAM file to write consensus reads.\n",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sruthipsuresh"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "fgbio_fastqtobam",
      "path": "modules/nf-core/fgbio/fastqtobam/meta.yml",
      "type": "module",
      "meta": {
        "name": "fgbio_fastqtobam",
        "description": "Using the fgbio tools, converts FASTQ files sequenced into unaligned BAM or CRAM files possibly moving the UMI barcode into the RX field of the reads\n",
        "keywords": [
          "fastqtobam",
          "fgbio"
        ],
        "tools": [
          {
            "fgbio": {
              "description": "A set of tools for working with genomic and high throughput sequencing data, including UMIs",
              "homepage": "http://fulcrumgenomics.github.io/fgbio/",
              "documentation": "http://fulcrumgenomics.github.io/fgbio/tools/latest/",
              "tool_dev_url": "https://github.com/fulcrumgenomics/fgbio",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "reads": {
              "type": "file",
              "description": "pair of reads to be converted into BAM file",
              "pattern": "*.{fastq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "*.{version.yml}"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Unaligned, unsorted BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "cram": {
              "type": "file",
              "description": "Unaligned, unsorted CRAM file",
              "pattern": "*.{cram}"
            }
          }
        ],
        "authors": [
          "@lescai",
          "@matthdsm"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "fgbio_filterconsensusreads",
      "path": "modules/nf-core/fgbio/filterconsensusreads/meta.yml",
      "type": "module",
      "meta": {
        "name": "fgbio_filterconsensusreads",
        "description": "Uses FGBIO FilterConsensusReads to filter consensus reads generated by CallMolecularConsensusReads or CallDuplexConsensusReads.",
        "keywords": [
          "fgbio",
          "filter",
          "consensus",
          "umi",
          "duplexumi"
        ],
        "tools": [
          {
            "fgbio": {
              "description": "A set of tools for working with genomic and high throughput sequencing data, including UMIs",
              "homepage": "http://fulcrumgenomics.github.io/fgbio/",
              "documentation": "http://fulcrumgenomics.github.io/fgbio/tools/latest/FilterConsensusReads.html",
              "tool_dev_url": "https://github.com/fulcrumgenomics/fgbio",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Filtered consensus BAM file",
              "pattern": "*.bam"
            }
          }
        ],
        "authors": [
          "@lescai"
        ]
      }
    },
    {
      "name": "fgbio_groupreadsbyumi",
      "path": "modules/nf-core/fgbio/groupreadsbyumi/meta.yml",
      "type": "module",
      "meta": {
        "name": "fgbio_groupreadsbyumi",
        "description": "Groups reads together that appear to have come from the same original molecule.\nReads are grouped by template, and then templates are sorted by the 5’ mapping positions\nof the reads from the template, used from earliest mapping position to latest.\nReads that have the same end positions are then sub-grouped by UMI sequence.\n(!) Note: the MQ tag is required on reads with mapped mates (!)\nThis can be added using samblaster with the optional argument --addMateTags.\n",
        "keywords": [
          "UMI",
          "groupreads",
          "fgbio"
        ],
        "tools": [
          {
            "fgbio": {
              "description": "A set of tools for working with genomic and high throughput sequencing data, including UMIs",
              "homepage": "http://fulcrumgenomics.github.io/fgbio/",
              "documentation": "http://fulcrumgenomics.github.io/fgbio/tools/latest/",
              "tool_dev_url": "https://github.com/fulcrumgenomics/fgbio",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file. Note: the MQ tag is required on reads with mapped mates (!)\n",
              "pattern": "*.bam"
            }
          },
          {
            "strategy": {
              "type": "value",
              "description": "Reguired argument: defines the UMI assignment strategy.\nMust be chosen among: Identity, Edit, Adjacency, Paired.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "UMI-grouped BAM",
              "pattern": "*.bam"
            }
          },
          {
            "histogram": {
              "type": "file",
              "description": "A text file containing the tag family size counts",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@lescai"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "fgbio_sortbam",
      "path": "modules/nf-core/fgbio/sortbam/meta.yml",
      "type": "module",
      "meta": {
        "name": "fgbio_sortbam",
        "description": "Sorts a SAM or BAM file. Several sort orders are available, including coordinate, queryname, random, and randomquery.",
        "keywords": [
          "sort",
          "bam",
          "sam"
        ],
        "tools": [
          {
            "fgbio": {
              "description": "Tools for working with genomic and high throughput sequencing data.",
              "homepage": "https://github.com/fulcrumgenomics/fgbio",
              "documentation": "http://fulcrumgenomics.github.io/fgbio/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false, collapse:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "The input SAM or BAM file to be sorted.\n",
              "pattern": "*.{bam,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Output SAM or BAM file.\n",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sruthipsuresh"
        ]
      }
    },
    {
      "name": "fgbio_zipperbams",
      "path": "modules/nf-core/fgbio/zipperbams/meta.yml",
      "type": "module",
      "meta": {
        "name": "fgbio_zipperbams",
        "description": "FGBIO tool to zip together an unmapped and mapped BAM to transfer metadata into the output BAM",
        "keywords": [
          "fgbio",
          "zipperbams"
        ],
        "tools": [
          {
            "fgbio": {
              "description": "A set of tools for working with genomic and high throughput sequencing data, including UMIs",
              "homepage": "http://fulcrumgenomics.github.io/fgbio/",
              "documentation": "http://fulcrumgenomics.github.io/fgbio/tools/latest/",
              "tool_dev_url": "https://github.com/fulcrumgenomics/fgbio",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "mbam": {
              "type": "file",
              "description": "mapped BAM/SAM file",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "ubam": {
              "type": "file",
              "description": "unmapped BAM file",
              "pattern": "*.bam"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "authors": [
          "@lescai"
        ]
      }
    },
    {
      "name": "filtlong",
      "path": "modules/nf-core/filtlong/meta.yml",
      "type": "module",
      "meta": {
        "name": "filtlong",
        "description": "Filtlong filters long reads based on quality measures or short read data.",
        "keywords": [
          "nanopore",
          "quality control",
          "QC",
          "filtering",
          "long reads",
          "short reads"
        ],
        "tools": [
          {
            "filtlong": {
              "description": "Filtlong is a tool for filtering long reads. It can take a set of long reads and produce a smaller, better subset. It uses both read length (longer is better) and read identity (higher is better) when choosing which reads pass the filter.",
              "homepage": "https://anaconda.org/bioconda/filtlong",
              "tool_dev_url": "https://github.com/rrwick/Filtlong",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "shortreads": {
              "type": "file",
              "description": "fastq file",
              "pattern": "*.{fq,fastq,fq.gz,fastq.gz}"
            }
          },
          {
            "longreads": {
              "type": "file",
              "description": "fastq file",
              "pattern": "*.{fq,fastq,fq.gz,fastq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Filtered (compressed) fastq file",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Standard error logging file containing summary statistics",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@d4straub",
          "@sofstam"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "flash",
      "path": "modules/nf-core/flash/meta.yml",
      "type": "module",
      "meta": {
        "name": "flash",
        "description": "Perform merging of mate paired-end sequencing reads",
        "keywords": [
          "sort",
          "reads merging",
          "merge mate pairs"
        ],
        "tools": [
          {
            "flash": {
              "description": "Merge mates from fragments that are shorter than twice the read length\n",
              "homepage": "https://ccb.jhu.edu/software/FLASH/",
              "doi": "10.1093/bioinformatics/btr507",
              "licence": [
                "GPL v3+"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 2; i.e., paired-end data.\n",
              "pattern": "*fastq.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "The merged fastq reads",
              "pattern": "*fastq.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Erkison"
        ]
      }
    },
    {
      "name": "flye",
      "path": "modules/nf-core/flye/meta.yml",
      "type": "module",
      "meta": {
        "name": "flye",
        "description": "De novo assembler for single molecule sequencing reads",
        "keywords": [
          "assembly",
          "genome",
          "de novo",
          "genome assembler",
          "single molecule"
        ],
        "tools": [
          {
            "flye": {
              "description": "Fast and accurate de novo assembler for single molecule sequencing reads",
              "homepage": "https://github.com/fenderglass/Flye",
              "documentation": "https://github.com/fenderglass/Flye/blob/flye/docs/USAGE.md",
              "tool_dev_url": "https://github.com/fenderglass/Flye",
              "doi": "10.1038/s41592-020-00971-x",
              "licence": "['BSD-3-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Input reads from Oxford Nanopore or PacBio data in FASTA/FASTQ format.",
              "pattern": "*.{fasta,fastq,fasta.gz,fastq.gz,fa,fq,fa.gz,fq.gz}"
            }
          },
          {
            "mode": {
              "type": "value",
              "description": "Flye mode depending on the input data (source and error rate)",
              "pattern": "--pacbio-raw|--pacbio-corr|--pacbio-hifi|--nano-raw|--nano-corr|--nano-hq"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Assembled FASTA file",
              "pattern": "*.fasta.gz"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Repeat graph in gfa format",
              "pattern": "*.gfa.gz"
            }
          },
          {
            "gv": {
              "type": "file",
              "description": "Repeat graph in gv format",
              "pattern": "*.gv.gz"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Extra information and statistics about resulting contigs",
              "pattern": "*.txt"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Flye log file",
              "pattern": "*.log"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "Flye parameters",
              "pattern": "*.json"
            }
          }
        ],
        "authors": [
          "@mirpedrol"
        ]
      }
    },
    {
      "name": "fq_generate",
      "path": "modules/nf-core/fq/generate/meta.yml",
      "type": "module",
      "meta": {
        "name": "fq_generate",
        "description": "fq generate is a FASTQ file pair generator. It creates two reads, formatting names as described by Illumina. While generate creates \"valid\" FASTQ reads, the content of the files are completely random. The sequences do not align to any genome. This requires a seed (--seed) to be supplied in ext.args.\n",
        "keywords": [
          "generate",
          "fastq"
        ],
        "tools": [
          {
            "fq": {
              "description": "fq is a library to generate and validate FASTQ file pairs.",
              "homepage": "https://github.com/stjude-rust-labs/fq",
              "documentation": "https://github.com/stjude-rust-labs/fq",
              "tool_dev_url": "https://github.com/stjude-rust-labs/fq",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Random generated FASTQ files.",
              "pattern": "*_R[12].fastq.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "fq_lint",
      "path": "modules/nf-core/fq/lint/meta.yml",
      "type": "module",
      "meta": {
        "name": "fq_lint",
        "description": "fq lint is a FASTQ file pair validator.",
        "keywords": [
          "lint",
          "fastq"
        ],
        "tools": [
          {
            "fq": {
              "description": "fq is a library to generate and validate FASTQ file pairs.",
              "homepage": "https://github.com/stjude-rust-labs/fq",
              "documentation": "https://github.com/stjude-rust-labs/fq",
              "tool_dev_url": "https://github.com/stjude-rust-labs/fq",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "FASTQ file list",
              "pattern": "*.fastq{,.gz}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "fq_subsample",
      "path": "modules/nf-core/fq/subsample/meta.yml",
      "type": "module",
      "meta": {
        "name": "fq_subsample",
        "description": "fq subsample outputs a subset of records from single or paired FASTQ files. This requires a seed (--seed) to be set in ext.args.",
        "keywords": [
          "fastq",
          "sample"
        ],
        "tools": [
          {
            "fq": {
              "description": "fq is a library to generate and validate FASTQ file pairs.",
              "homepage": "https://github.com/stjude-rust-labs/fq",
              "documentation": "https://github.com/stjude-rust-labs/fq",
              "tool_dev_url": "https://github.com/stjude-rust-labs/fq",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "FASTQ file",
              "pattern": "*.{fq,fastq}{,.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Randomly sampled FASTQ files.",
              "pattern": "*_R[12].fastq.gz"
            }
          }
        ],
        "authors": [
          "@adamrtalbot"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "fqtk",
      "path": "modules/nf-core/fqtk/meta.yml",
      "type": "module",
      "meta": {
        "name": "fqtk",
        "description": "Demultiplex fastq files",
        "keywords": [
          "demultiplex",
          "fastq",
          "rust"
        ],
        "tools": [
          {
            "fqtk": {
              "description": "A toolkit for working with FASTQ files, written in Rust.",
              "homepage": "https://github.com/fulcrumgenomics/fqtk",
              "documentation": "https://github.com/fulcrumgenomics/fqtk",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sample_sheet": {
              "type": "file",
              "description": "Tsv file, with two columns sample_id and barcode",
              "pattern": "*.{tsv}"
            }
          },
          {
            "fastq_readstructure_pairs": {
              "type": "map",
              "description": "List of lists i.e. [[<fastq file name>, <read structure>, <absolute path to fastq directory>],...]"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sample_fastq": {
              "type": "file",
              "description": "Demultiplexed per-sample FASTQ files",
              "pattern": "output/*R*.fastq.gz"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Demultiplexing summary stats; sample_id, barcode templates, frac_templates, ratio_to_mean, ratio_to_best\n",
              "pattern": "output/demux-metrics.txt"
            }
          },
          {
            "most_frequent_unmatched": {
              "type": "file",
              "description": "File containing unmatched fastq records\n",
              "pattern": "output/unmatched*.fq.gz"
            }
          }
        ],
        "authors": [
          "Samantha White @sam-white04"
        ]
      },
      "pipelines": [
        {
          "name": "demultiplex",
          "version": "1.3.2"
        }
      ]
    },
    {
      "name": "freebayes",
      "path": "modules/nf-core/freebayes/meta.yml",
      "type": "module",
      "meta": {
        "name": "freebayes",
        "description": "A haplotype-based variant detector",
        "keywords": [
          "variant caller",
          "SNP",
          "genotyping",
          "somatic variant calling",
          "germline variant calling",
          "bacterial variant calling",
          "bayesian"
        ],
        "tools": [
          {
            "freebayes": {
              "description": "Bayesian haplotype-based polymorphism discovery and genotyping",
              "homepage": "https://github.com/freebayes/freebayes",
              "documentation": "https://github.com/freebayes/freebayes",
              "tool_dev_url": "https://github.com/freebayes/freebayes",
              "doi": "10.48550/arXiv.1207.3907",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "target_bed": {
              "type": "file",
              "description": "Optional - Limit analysis to targets listed in this BED-format FILE.",
              "pattern": "*.bed"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "reference fasta file",
              "pattern": ".{fa,fa.gz,fasta,fasta.gz}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "reference fasta file index",
              "pattern": "*.{fa,fasta}.fai"
            }
          },
          {
            "samples": {
              "type": "file",
              "description": "Optional - Limit analysis to samples listed (one per line) in the FILE.",
              "pattern": "*.txt"
            }
          },
          {
            "populations": {
              "type": "file",
              "description": "Optional - Each line of FILE should list a sample and a population which it is part of.",
              "pattern": "*.txt"
            }
          },
          {
            "cnv": {
              "type": "file",
              "description": "A copy number map BED file, which has either a sample-level ploidy:\nsample_name copy_number\nor a region-specific format:\nseq_name start end sample_name copy_number\n",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "*.{version.txt}"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF file",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "authors": [
          "@maxibor",
          "@FriederikeHanssen",
          "@maxulysse"
        ]
      },
      "subworkflows": [
        "bam_variant_calling_sort_freebayes_bcftools"
      ],
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "freyja_boot",
      "path": "modules/nf-core/freyja/boot/meta.yml",
      "type": "module",
      "meta": {
        "name": "freyja_boot",
        "description": "Bootstrap sample demixing by resampling each site based on a multinomial distribution of read depth across all sites, where the event probabilities were determined by the fraction of the total sample reads found at each site, followed by a secondary resampling at each site according to a multinomial distribution (that is, binomial when there was only one SNV at a site), where event probabilities were determined by the frequencies of each base at the site, and the number of trials is given by the sequencing depth.",
        "keywords": [
          "variants",
          "fasta",
          "deconvolution",
          "wastewater",
          "bootstrapping"
        ],
        "tools": [
          {
            "freyja": {
              "description": "Freyja recovers relative lineage abundances from mixed SARS-CoV-2 samples and provides functionality to analyze lineage dynamics.",
              "homepage": "https://github.com/andersen-lab/Freyja",
              "documentation": "https://github.com/andersen-lab/Freyja/wiki",
              "tool_dev_url": "https://github.com/andersen-lab/Freyja",
              "doi": "10.1038/s41586-022-05049-6",
              "licence": "['BSD-2-Clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "variants": {
              "type": "file",
              "description": "File containing identified variants in a gff-like format",
              "pattern": "*.variants.tsv"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "depths": {
              "type": "file",
              "description": "File containing depth of the variants",
              "pattern": "*.depth.tsv"
            }
          },
          {
            "repeats": {
              "type": "integer",
              "description": "Number of bootstrap repeats to perform"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "barcodes": {
              "type": "file",
              "description": "File containing lineage defining barcodes",
              "pattern": "*barcodes.csv"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "lineages_meta": {
              "type": "file",
              "description": "File containing lineage metadata that correspond to barcodes",
              "pattern": "*lineages.json"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "lineages": {
              "type": "file",
              "description": "a csv file that includes the lineages present and their corresponding abundances",
              "pattern": "*lineages.csv"
            }
          },
          {
            "summarized": {
              "type": "file",
              "description": "a csv file that includes the lineages present but summarized by constellation and their corresponding abundances",
              "pattern": "*summarized.csv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Joon-Klaps"
        ]
      }
    },
    {
      "name": "freyja_demix",
      "path": "modules/nf-core/freyja/demix/meta.yml",
      "type": "module",
      "meta": {
        "name": "freyja_demix",
        "description": "specify the relative abundance of each known haplotype",
        "keywords": [
          "variants",
          "fasta",
          "deconvolution",
          "wastewater"
        ],
        "tools": [
          {
            "freyja": {
              "description": "Freyja recovers relative lineage abundances from mixed SARS-CoV-2 samples and provides functionality to analyze lineage dynamics.",
              "homepage": "https://github.com/andersen-lab/Freyja",
              "documentation": "https://github.com/andersen-lab/Freyja/wiki",
              "tool_dev_url": "https://github.com/andersen-lab/Freyja",
              "doi": "10.1038/s41586-022-05049-6",
              "licence": "['BSD-2-Clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "variants": {
              "type": "file",
              "description": "File containing identified variants in a gff-like format",
              "pattern": "*.variants.tsv"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "depths": {
              "type": "file",
              "description": "File containing depth of the variants",
              "pattern": "*.depth.tsv"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "barcodes": {
              "type": "file",
              "description": "File containing lineage defining barcodes",
              "pattern": "*barcodes.csv"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "lineages_meta": {
              "type": "file",
              "description": "File containing lineage metadata that correspond to barcodes",
              "pattern": "*lineages.json"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "demix": {
              "type": "file",
              "description": "a tsv file that includes the lineages present, their corresponding abundances, and summarization by constellation",
              "pattern": "*.demix.tsv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Joon-Klaps"
        ]
      }
    },
    {
      "name": "freyja_update",
      "path": "modules/nf-core/freyja/update/meta.yml",
      "type": "module",
      "meta": {
        "name": "freyja_update",
        "description": "downloads new versions of the curated SARS-CoV-2 lineage file and barcodes",
        "keywords": [
          "database",
          "variants",
          "UShER"
        ],
        "tools": [
          {
            "freyja": {
              "description": "Freyja recovers relative lineage abundances from mixed SARS-CoV-2 samples and provides functionality to analyze lineage dynamics.",
              "homepage": "https://github.com/andersen-lab/Freyja",
              "documentation": "https://github.com/andersen-lab/Freyja/wiki",
              "tool_dev_url": "https://github.com/andersen-lab/Freyja",
              "doi": "10.1038/s41586-022-05049-6",
              "licence": "['BSD-2-Clause']"
            }
          }
        ],
        "input": [
          {
            "db_name": {
              "type": "string",
              "description": "The name of the database directory"
            }
          }
        ],
        "output": [
          {
            "barcodes": {
              "type": "file",
              "description": "File containing lineage defining barcodes",
              "pattern": "*barcodes.csv"
            }
          },
          {
            "lineages_topology": {
              "type": "file",
              "description": "File containing the lineage topology",
              "pattern": "*lineages.yml"
            }
          },
          {
            "lineages_meta": {
              "type": "file",
              "description": "File containing lineage metadata that correspond to barcodes",
              "pattern": "*lineages.json"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Joon-Klaps"
        ]
      }
    },
    {
      "name": "freyja_variants",
      "path": "modules/nf-core/freyja/variants/meta.yml",
      "type": "module",
      "meta": {
        "name": "freyja_variants",
        "description": "call variant and sequencing depth information of the variant",
        "keywords": [
          "variants",
          "fasta",
          "wastewater"
        ],
        "tools": [
          {
            "freyja": {
              "description": "Freyja recovers relative lineage abundances from mixed SARS-CoV-2 samples and provides functionality to analyze lineage dynamics.",
              "homepage": "https://github.com/andersen-lab/Freyja",
              "documentation": "https://github.com/andersen-lab/Freyja/wiki",
              "tool_dev_url": "https://github.com/andersen-lab/Freyja",
              "doi": "10.1038/s41586-022-05049-6",
              "licence": "['BSD-2-Clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference sequence used for mapping and generating the BAM file",
              "pattern": "*.fa"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "variants": {
              "type": "file",
              "description": "File containing identified variants in a gff-like format",
              "pattern": "*.variants.tsv"
            }
          },
          {
            "depths": {
              "type": "file",
              "description": "File containing depth of the variants",
              "pattern": "*.depth.tsv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Joon-Klaps"
        ]
      }
    },
    {
      "name": "gamma_gamma",
      "path": "modules/nf-core/gamma/gamma/meta.yml",
      "type": "module",
      "meta": {
        "name": "gamma_gamma",
        "description": "Gene Allele Mutation Microbial Assessment",
        "keywords": [
          "gamma",
          "gene-calling"
        ],
        "tools": [
          {
            "gamma": {
              "description": "Tool for Gene Allele Mutation Microbial Assessment",
              "homepage": "https://github.com/rastanton/GAMMA",
              "documentation": "https://github.com/rastanton/GAMMA",
              "tool_dev_url": "https://github.com/rastanton/GAMMA",
              "doi": "10.1093/bioinformatics/btab607",
              "licence": "['Apache License 2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "Database in FASTA format",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "gamma": {
              "type": "file",
              "description": "GAMMA file with annotated gene matches",
              "pattern": "*.{gamma}"
            }
          },
          {
            "psl": {
              "type": "file",
              "description": "PSL file with all gene matches found",
              "pattern": "*.{psl}"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "GFF file",
              "pattern": "*.{gff}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "multifasta file of the gene matches",
              "pattern": "*.{fasta}"
            }
          }
        ],
        "authors": [
          "@sateeshperi",
          "@rastanton",
          "@jvhagey"
        ]
      }
    },
    {
      "name": "gangstr",
      "path": "modules/nf-core/gangstr/meta.yml",
      "type": "module",
      "meta": {
        "name": "gangstr",
        "description": "GangSTR is a tool for genome-wide profiling tandem repeats from short reads.",
        "keywords": [
          "gangstr",
          "STR",
          "bam",
          "cram",
          "vcf"
        ],
        "tools": [
          {
            "gangstr": {
              "description": "GangSTR is a tool for genome-wide profiling tandem repeats from short reads.",
              "homepage": "https://github.com/gymreklab/GangSTR",
              "documentation": "https://github.com/gymreklab/GangSTR",
              "tool_dev_url": "https://github.com/gymreklab/GangSTR",
              "doi": "10.1093/nar/gkz501",
              "licence": "['GPL v3-or-later']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "aligment_files": {
              "type": "file",
              "description": "One or more sorted BAM/CRAM file(s)",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "alignment_indices": {
              "type": "file",
              "description": "The index/indices of the BAM/CRAM file(s)",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "ref_regions": {
              "type": "file",
              "description": "A reference set of regions to genotype in a BED-like format. The file should have following columns:\n1. The name of the chromosome on which the STR is located\n2. The start position of the STR on its chromosome\n3. The end position of the STR on its chromosome\n4. The motif length\n5. The repeat motif\n",
              "pattern": "*.bed"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference FASTA file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the reference FASTA file",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The resulting VCF file containing the genotypes",
              "pattern": "*.vcf"
            }
          },
          {
            "samplestats": {
              "type": "file",
              "description": "A tab-delimited file containing statistics for each sample",
              "pattern": "*.tab"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "ganon_buildcustom",
      "path": "modules/nf-core/ganon/buildcustom/meta.yml",
      "type": "module",
      "meta": {
        "name": "ganon_buildcustom",
        "description": "Build ganon database using custom reference sequences.",
        "keywords": [
          "ganon",
          "metagenomics",
          "profiling",
          "taxonomy",
          "k-mer",
          "database"
        ],
        "tools": [
          {
            "ganon": {
              "description": "ganon classifies short DNA sequences against large sets of genomic reference sequences efficiently",
              "homepage": "https://github.com/pirovc/ganon",
              "documentation": "https://github.com/pirovc/ganon",
              "tool_dev_url": "https://github.com/pirovc/ganon",
              "doi": "10.1093/bioinformatics/btaa458",
              "licence": "['MIT License']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "List of input FASTA files, or a directory containing input FASTA files.\nNote you must supply --input-extension via ext.args if FASTA extensions do not end in the default `fna.gz`.\n",
              "pattern": "*"
            }
          },
          {
            "taxonomy_files": {
              "type": "file",
              "description": "Pre-downloaded taxonomy files of input sequences. See ganon docs for formats"
            }
          },
          {
            "genome_size_files": {
              "type": "file",
              "description": "Pre-downloaded NCBI or GTDB genome size files of input sequences. See ganon docs for formats",
              "pattern": "{species_genome_size.txt.gz,*_metadata.tar.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "ganon database files",
              "pattern": "*.{ibf,tax}"
            }
          },
          {
            "info": {
              "type": "file",
              "description": "Copy of target info generated. Can be used for updating database.",
              "pattern": "*info.tsv"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "ganon_classify",
      "path": "modules/nf-core/ganon/classify/meta.yml",
      "type": "module",
      "meta": {
        "name": "ganon_classify",
        "description": "Classify FASTQ files against ganon database",
        "keywords": [
          "ganon",
          "metagenomics",
          "profiling",
          "taxonomy",
          "k-mer",
          "classification",
          "classify"
        ],
        "tools": [
          {
            "ganon": {
              "description": "ganon classifies short DNA sequences against large sets of genomic reference sequences efficiently",
              "homepage": "https://github.com/pirovc/ganon",
              "documentation": "https://github.com/pirovc/ganon",
              "tool_dev_url": "https://github.com/pirovc/ganon",
              "doi": "10.1093/bioinformatics/btaa458",
              "licence": "['MIT License']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastqs": {
              "type": "file",
              "description": "Single or paired FASTQ files, optionally gzipped",
              "pattern": "*.{fq,fq.gz,fastq,fastq.gz}"
            }
          },
          {
            "dbs": {
              "type": "file",
              "description": "Ganon database files from build or build-custom",
              "pattern": "*.{ibf,tax}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tre": {
              "type": "file",
              "description": "Full ganon report file",
              "pattern": "*.tre"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Plain ganon report file with only targets with match",
              "pattern": "*.rep"
            }
          },
          {
            "lca": {
              "type": "file",
              "description": "Information about the lowest common ancestor match of a given read",
              "pattern": "*.lca"
            }
          },
          {
            "all": {
              "type": "file",
              "description": "Information of all matches to a given read",
              "pattern": "*.all"
            }
          },
          {
            "unc": {
              "type": "file",
              "description": "List of all reads without a hit",
              "pattern": "*.unc"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Text file containing console output from ganon classify",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "ganon_report",
      "path": "modules/nf-core/ganon/report/meta.yml",
      "type": "module",
      "meta": {
        "name": "ganon_report",
        "description": "Generate a ganon report file from the output of ganon classify",
        "keywords": [
          "ganon",
          "metagenomics",
          "profiling",
          "taxonomy",
          "k-mer",
          "classification",
          "report"
        ],
        "tools": [
          {
            "ganon": {
              "description": "ganon classifies short DNA sequences against large sets of genomic reference sequences efficiently",
              "homepage": "https://github.com/pirovc/ganon",
              "documentation": "https://github.com/pirovc/ganon",
              "tool_dev_url": "https://github.com/pirovc/ganon",
              "doi": "10.1093/bioinformatics/btaa458",
              "licence": "['MIT License']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "rep": {
              "type": "file",
              "description": "Input 'repo' files from ganon classify",
              "pattern": "*.rep"
            }
          },
          {
            "dbs": {
              "type": "file",
              "description": "Ganon database files from build or build-custom",
              "pattern": "*.{ibf,tax}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tre": {
              "type": "file",
              "description": "Output ganon report containing taxonomic profile information. Formatting of contents depends on --output-format.",
              "pattern": "*.tre"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "ganon_table",
      "path": "modules/nf-core/ganon/table/meta.yml",
      "type": "module",
      "meta": {
        "name": "ganon_table",
        "description": "Generate a multi-sample report file from the output of ganon report runs",
        "keywords": [
          "ganon",
          "metagenomics",
          "profiling",
          "taxonomy",
          "k-mer",
          "classification",
          "report",
          "table"
        ],
        "tools": [
          {
            "ganon": {
              "description": "ganon classifies short DNA sequences against large sets of genomic reference sequences efficiently",
              "homepage": "https://github.com/pirovc/ganon",
              "documentation": "https://github.com/pirovc/ganon",
              "tool_dev_url": "https://github.com/pirovc/ganon",
              "doi": "10.1093/bioinformatics/btaa458",
              "licence": "['MIT License']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tre": {
              "type": "file",
              "description": "A list of 'tre' files from ganon report",
              "pattern": "*.tre"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Output ganon table containing taxonomic profile information of multiple samples. Formatting of contents depends on --output-format.",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "gappa_examineassign",
      "path": "modules/nf-core/gappa/examineassign/meta.yml",
      "type": "module",
      "meta": {
        "name": "gappa_examineassign",
        "description": "assigns taxonomy to query sequences in phylogenetic placement output",
        "keywords": [
          "phylogeny",
          "phylogenetic placement",
          "classification",
          "taxonomy"
        ],
        "tools": [
          {
            "gappa": {
              "description": "Genesis Applications for Phylogenetic Placement Analysis",
              "homepage": "https://github.com/lczech/gappa",
              "documentation": "https://github.com/lczech/gappa/wiki",
              "tool_dev_url": "https://github.com/lczech/gappa",
              "doi": "10.1093/bioinformatics/btaa070",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "jplace": {
              "type": "file",
              "description": "jplace file output from phylogenetic placement, e.g. EPA-NG, gzipped or not",
              "pattern": "*.{jplace,jplace.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "examineassign": {
              "type": "directory",
              "description": "Execution directory"
            }
          },
          {
            "profile": {
              "type": "file",
              "description": "profile tsv file",
              "pattern": "*profile.tsv"
            }
          },
          {
            "labelled_tree": {
              "type": "file",
              "description": "labelled tree in newick format",
              "pattern": "*labelled_tree.newick"
            }
          },
          {
            "per_query": {
              "type": "file",
              "description": "per query taxonomy assignments in tsv format",
              "pattern": "*per_query.tsv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@erikrikarddaniel"
        ]
      },
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        }
      ]
    },
    {
      "name": "gappa_examinegraft",
      "path": "modules/nf-core/gappa/examinegraft/meta.yml",
      "type": "module",
      "meta": {
        "name": "gappa_examinegraft",
        "description": "grafts query sequences from phylogenetic placement on the reference tree",
        "keywords": [
          "sort"
        ],
        "tools": [
          {
            "gappa": {
              "description": "Genesis Applications for Phylogenetic Placement Analysis",
              "homepage": "https://github.com/lczech/gappa",
              "documentation": "https://github.com/lczech/gappa/wiki",
              "tool_dev_url": "https://github.com/lczech/gappa",
              "doi": "10.1093/bioinformatics/btaa070",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "jplace": {
              "type": "file",
              "description": "jplace file output from phylogenetic placement, e.g. EPA-NG, gzipped or not",
              "pattern": "*.{jplace,jplace.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "newick": {
              "type": "file",
              "description": "phylogenetic tree file in newick format",
              "pattern": "*.newick"
            }
          }
        ],
        "authors": [
          "@erikrikarddaniel"
        ]
      },
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        }
      ]
    },
    {
      "name": "gappa_examineheattree",
      "path": "modules/nf-core/gappa/examineheattree/meta.yml",
      "type": "module",
      "meta": {
        "name": "gappa_examineheattree",
        "description": "colours a phylogeny with placement densities",
        "keywords": [
          "phylogeny",
          "phylogenetic placement",
          "heattree",
          "visualisation"
        ],
        "tools": [
          {
            "gappa": {
              "description": "Genesis Applications for Phylogenetic Placement Analysis",
              "homepage": "https://github.com/lczech/gappa",
              "documentation": "https://github.com/lczech/gappa/wiki",
              "tool_dev_url": "https://github.com/lczech/gappa",
              "doi": "10.1093/bioinformatics/btaa070",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "jplace": {
              "type": "file",
              "description": "jplace file output from phylogenetic placement, e.g. EPA-NG, gzipped or not",
              "pattern": "*.{jplace,jplace.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "newick": {
              "type": "file",
              "description": "phylogenetic tree file in newick format",
              "pattern": "*.newick"
            }
          },
          {
            "nexus": {
              "type": "file",
              "description": "coloured phylogenetic tree file in nexus format",
              "pattern": "*.nexus"
            }
          },
          {
            "phyloxml": {
              "type": "file",
              "description": "coloured phylogenetic tree file in phyloxml format",
              "pattern": "*.phyloxml"
            }
          },
          {
            "svg": {
              "type": "file",
              "description": "coloured phylogenetic tree file in svg format",
              "pattern": "*.svg"
            }
          },
          {
            "colours": {
              "type": "file",
              "description": "colours used in plot",
              "pattern": "*.colours.txt"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "log file from the run",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@erikrikarddaniel"
        ]
      },
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        }
      ]
    },
    {
      "name": "gatk4_annotateintervals",
      "path": "modules/nf-core/gatk4/annotateintervals/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_annotateintervals",
        "description": "Annotates intervals with GC content, mappability, and segmental-duplication content",
        "keywords": [
          "gatk",
          "annotateintervals",
          "intervals",
          "bed",
          "annotation"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "intervals": {
              "type": "file(s)",
              "description": "One or more interval files to annotate",
              "pattern": "*.{interval_list,list,bed}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference FASTA file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the reference FASTA file",
              "pattern": "*.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "The sequence dictionary reference FASTA file",
              "pattern": "*.dict"
            }
          },
          {
            "mappable_regions": {
              "type": "file",
              "description": "Optional - Umap single-read mappability track\nThe track should correspond to the appropriate read length and overlapping intervals must be merged\n",
              "pattern": "*.bed(.gz)?"
            }
          },
          {
            "mappable_regions_tbi": {
              "type": "file",
              "description": "Optional - The index of the gzipped umap single-read mappability track",
              "pattern": "*.bed.gz.tbi"
            }
          },
          {
            "segmental_duplication_regions": {
              "type": "file",
              "description": "Optional - Segmental-duplication track",
              "pattern": "*.bed(.gz)?"
            }
          },
          {
            "segmental_duplication_regions_tbi": {
              "type": "file",
              "description": "Optional - The index of the gzipped segmental-duplication track",
              "pattern": "*.bed.gz.tbi"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "annotated_intervals": {
              "type": "file",
              "description": "The output TSV file with a SAM-style header containing the annotated intervals",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gatk4_applybqsr",
      "path": "modules/nf-core/gatk4/applybqsr/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_applybqsr",
        "description": "Apply base quality score recalibration (BQSR) to a bam file",
        "keywords": [
          "bqsr",
          "bam",
          "base quality score recalibration"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file from alignment",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAI/CRAI file from alignment",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "bqsr_table": {
              "type": "file",
              "description": "Recalibration table from gatk4_baserecalibrator"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Bed file with the genomic regions included in the library (optional)"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Recalibrated BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "cram": {
              "type": "file",
              "description": "Recalibrated CRAM file",
              "pattern": "*.{cram}"
            }
          }
        ],
        "authors": [
          "@yocra3",
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_applybqsrspark",
      "path": "modules/nf-core/gatk4/applybqsrspark/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_applybqsr_spark",
        "description": "Apply base quality score recalibration (BQSR) to a bam file",
        "keywords": [
          "bqsr",
          "bam",
          "gatk"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file from alignment",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAI/CRAI file from alignment",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "bqsr_table": {
              "type": "file",
              "description": "Recalibration table from gatk4_baserecalibrator"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Bed file with the genomic regions included in the library (optional)"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Recalibrated BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "cram": {
              "type": "file",
              "description": "Recalibrated CRAM file",
              "pattern": "*.{cram}"
            }
          }
        ],
        "authors": [
          "@yocra3",
          "@FriederikeHanssen",
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_applyvqsr",
      "path": "modules/nf-core/gatk4/applyvqsr/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_applyvqsr",
        "description": "Apply a score cutoff to filter variants based on a recalibration table.\nAplyVQSR performs the second pass in a two-stage process called Variant Quality Score Recalibration (VQSR).\nSpecifically, it applies filtering to the input variants based on the recalibration table produced\nin the first step by VariantRecalibrator and a target sensitivity value.\n",
        "keywords": [
          "gatk4",
          "applyvqsr",
          "VQSR"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file to be recalibrated, this should be the same file as used for the first stage VariantRecalibrator.",
              "pattern": "*.vcf"
            }
          },
          {
            "vcf_tbi": {
              "type": "file",
              "description": "tabix index for the input vcf file.",
              "pattern": "*.vcf.tbi"
            }
          },
          {
            "recal": {
              "type": "file",
              "description": "Recalibration file produced when the input vcf was run through VariantRecalibrator in stage 1.",
              "pattern": "*.recal"
            }
          },
          {
            "recal_index": {
              "type": "file",
              "description": "Index file for the recalibration file.",
              "pattern": ".recal.idx"
            }
          },
          {
            "tranches": {
              "type": "file",
              "description": "Tranches file produced when the input vcf was run through VariantRecalibrator in stage 1.",
              "pattern": ".tranches"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "vcf": {
              "type": "file",
              "description": "compressed vcf file containing the recalibrated variants.",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index of recalibrated vcf file.",
              "pattern": "*vcf.gz.tbi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions.",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@GCJMackenzie"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_asereadcounter",
      "path": "modules/nf-core/gatk4/asereadcounter/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_asereadcounter",
        "description": "Calculates the allele-specific read counts for alle-specific expression analysis of RNAseq data",
        "keywords": [
          "asereadcounter",
          "gatk4",
          "allele-specific"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "fasta file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "fasta index file",
              "pattern": "*.{fai}"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "dictionary file",
              "pattern": "*.{dict}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "interval file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "output file",
              "pattern": "*.{csv}"
            }
          }
        ],
        "authors": [
          "@Lucpen"
        ]
      }
    },
    {
      "name": "gatk4_baserecalibrator",
      "path": "modules/nf-core/gatk4/baserecalibrator/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_baserecalibrator",
        "description": "Generate recalibration table for Base Quality Score Recalibration (BQSR)",
        "keywords": [
          "sort"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file from alignment",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAI/CRAI file from alignment",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Bed file with the genomic regions included in the library (optional)"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          },
          {
            "known_sites": {
              "type": "file",
              "description": "VCF files with known sites for indels / snps (optional)",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "known_sites_tbi": {
              "type": "file",
              "description": "Tabix index of the known_sites (optional)",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "table": {
              "type": "file",
              "description": "Recalibration table from BaseRecalibrator",
              "pattern": "*.{table}"
            }
          }
        ],
        "authors": [
          "@yocra3",
          "@FriederikeHanssen",
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_baserecalibratorspark",
      "path": "modules/nf-core/gatk4/baserecalibratorspark/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_baserecalibrator_spark",
        "description": "Generate recalibration table for Base Quality Score Recalibration (BQSR)",
        "keywords": [
          "sort",
          "bqsr",
          "gatk"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file from alignment",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAI/CRAI file from alignment",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Bed file with the genomic regions included in the library (optional)"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          },
          {
            "known_sites": {
              "type": "file",
              "description": "VCF files with known sites for indels / snps (optional)",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "known_sites_tbi": {
              "type": "file",
              "description": "Tabix index of the known_sites (optional)",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "table": {
              "type": "file",
              "description": "Recalibration table from BaseRecalibrator",
              "pattern": "*.{table}"
            }
          }
        ],
        "authors": [
          "@yocra3",
          "@FriederikeHanssen",
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_bedtointervallist",
      "path": "modules/nf-core/gatk4/bedtointervallist/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_bedtointervallist",
        "description": "Creates an interval list from a bed file and a reference dict",
        "keywords": [
          "bed",
          "interval list",
          "bedtointervallist"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Input bed file",
              "pattern": "*.bed"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "Sequence dictionary",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "interval_list": {
              "type": "file",
              "description": "gatk interval list file",
              "pattern": "*.interval_list"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kevinmenden",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "gatk4_calculatecontamination",
      "path": "modules/nf-core/gatk4/calculatecontamination/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_calculatecontamination",
        "description": "Calculates the fraction of reads from cross-sample contamination based on summary tables from getpileupsummaries. Output to be used with filtermutectcalls.\n",
        "keywords": [
          "gatk4",
          "calculatecontamination",
          "cross-samplecontamination",
          "getpileupsummaries",
          "filtermutectcalls"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "pileup": {
              "type": "file",
              "description": "File containing the pileups summary table of a tumor sample to be used to calculate contamination.",
              "pattern": "*.pileups.table"
            }
          },
          {
            "matched": {
              "type": "file",
              "description": "File containing the pileups summary table of a normal sample that matches with the tumor sample specified in pileup argument. This is an optional input.",
              "pattern": "*.pileups.table"
            }
          }
        ],
        "output": [
          {
            "contamination": {
              "type": "file",
              "description": "File containing the contamination table.",
              "pattern": "*.contamination.table"
            }
          },
          {
            "segmentation": {
              "type": "file",
              "description": "output table containing segmentation of tumor minor allele fractions (optional)",
              "pattern": "*.segmentation.table"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@GCJMackenzie",
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_calibratedragstrmodel",
      "path": "modules/nf-core/gatk4/calibratedragstrmodel/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_calibratedragstrmodel",
        "description": "estimates the parameters for the DRAGstr model",
        "keywords": [
          "gatk4",
          "bam",
          "cram",
          "sam",
          "calibratedragstrmodel"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4). Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools with a primary focus on variant discovery and genotyping. Its powerful processing engine and high-performance computing features make it capable of taking on projects of any size.",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360057441571-CalibrateDragstrModel-BETA-",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "bam_index": {
              "type": "file",
              "description": "index of the BAM/CRAM/SAM file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "BED file or interval list containing regions (optional)",
              "pattern": "*.{bed,interval_list}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference FASTA file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the reference FASTA file",
              "pattern": "*.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "The sequence dictionary of the reference FASTA file",
              "pattern": "*.dict"
            }
          },
          {
            "strtablefile": {
              "type": "file",
              "description": "The StrTableFile zip folder of the reference FASTA file",
              "pattern": "*.zip"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "dragstr_model": {
              "type": "file",
              "description": "The DragSTR model",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gatk4_cnnscorevariants",
      "path": "modules/nf-core/gatk4/cnnscorevariants/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_cnnscorevariants",
        "description": "Apply a Convolutional Neural Net to filter annotated variants",
        "keywords": [
          "gatk4_cnnscorevariants",
          "gatk4",
          "variants"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "VCF index file",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "aligned_input": {
              "type": "file",
              "description": "BAM/CRAM file from alignment (optional)",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Bed file with the genomic regions included in the library (optional)"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          },
          {
            "architecture": {
              "type": "file",
              "description": "Neural Net architecture configuration json file (optional)",
              "pattern": "*.json"
            }
          },
          {
            "weights": {
              "type": "file",
              "description": "Keras model HD5 file with neural net weights. (optional)",
              "pattern": "*.hd5"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Annotated VCF file",
              "pattern": "*.vcf"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "VCF index file",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_collectreadcounts",
      "path": "modules/nf-core/gatk4/collectreadcounts/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_collectreadcounts",
        "description": "Collects read counts at specified intervals. The count for each interval is calculated by counting the number of read starts that lie in the interval.",
        "keywords": [
          "bam",
          "cram",
          "CollectReadCounts",
          "gatk",
          "gatk4"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4). Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools with a primary focus on variant discovery and genotyping. Its powerful processing engine and high-performance computing features make it capable of taking on projects of any size.",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360037593911-CombineGVCFs",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "A file containing the specified intervals",
              "pattern": "*.{bed,intervals}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Optional - Reference FASTA",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Optional - Index of the reference FASTA file",
              "pattern": "*.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "Optional - Sequence dictionary of the reference FASTA file",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "hdf5": {
              "type": "file",
              "description": "The read counts in hdf5 format",
              "pattern": "*.hdf5"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "The read counts in TSV format",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gatk4_collectsvevidence",
      "path": "modules/nf-core/gatk4/collectsvevidence/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_collectsvevidence",
        "description": "Gathers paired-end and split read evidence files for use in the GATK-SV pipeline. Output files are a file containing the location of and orientation of read pairs marked as discordant, and a file containing the clipping location of all soft clipped reads and the orientation of the clipping.",
        "keywords": [
          "gatk4",
          "collectsvevidence",
          "structural variants",
          "metrics"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4)",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": "['BSD-3-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "Index of the BAM/CRAM/SAM file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "site_depth_vcf": {
              "type": "file",
              "description": "Optional - input VCF of SNPs marking loci for site depths, needed for the site depths output",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "site_depth_vcf_index": {
              "type": "file",
              "description": "Optional - index of the VCF file, needed for the site depths output",
              "pattern": "*.tbi"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Optional - reference FASTA file needed when the input is a CRAM file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "Optional - index of the reference FASTA file needed when the input is a CRAM file",
              "pattern": "*.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "Optional - sequence dictionary of the reference FASTA file needed when the input is a CRAM file",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "split_read_evidence": {
              "type": "file",
              "description": "Output file for split read evidence",
              "pattern": "*.sr.txt.gz"
            }
          },
          {
            "split_read_evidence_index": {
              "type": "file",
              "description": "Index of the output file for split read evidence",
              "pattern": "*.sr.txt.gz.tbi"
            }
          },
          {
            "paired_end_evidence": {
              "type": "file",
              "description": "Output file for paired end evidence",
              "pattern": "*.pe.txt.gz"
            }
          },
          {
            "paired_end_evidence_index": {
              "type": "file",
              "description": "Index of the output file for paired end evidence",
              "pattern": "*.pe.txt.gz.tbi"
            }
          },
          {
            "site_depths": {
              "type": "file",
              "description": "Output file for site depths",
              "pattern": "*.sd.txt.gz"
            }
          },
          {
            "site_depths_index": {
              "type": "file",
              "description": "Index of the output file for site depths",
              "pattern": "*.sd.txt.gz.tbi"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gatk4_combinegvcfs",
      "path": "modules/nf-core/gatk4/combinegvcfs/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_combinegvcfs",
        "description": "Combine per-sample gVCF files produced by HaplotypeCaller into a multi-sample gVCF file",
        "keywords": [
          "gvcf",
          "gatk4",
          "vcf",
          "combinegvcfs",
          "Short_Variant_Discovery"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4). Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools with a primary focus on variant discovery and genotyping. Its powerful processing engine and high-performance computing features make it capable of taking on projects of any size.",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360037593911-CombineGVCFs",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF files",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "vcf_idx": {
              "type": "file",
              "description": "VCF Index file",
              "pattern": "*.vcf.gz.idx"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "FASTA index file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "FASTA dictionary file",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "gvcf": {
              "type": "file",
              "description": "Compressed Combined GVCF file",
              "pattern": "*.combined.g.vcf.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sateeshperi",
          "@mjcipriano",
          "@hseabolt",
          "@maxulysse"
        ]
      }
    },
    {
      "name": "gatk4_composestrtablefile",
      "path": "modules/nf-core/gatk4/composestrtablefile/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_composestrtablefile",
        "description": "This tool looks for low-complexity STR sequences along the reference that are later used to estimate the Dragstr model during single sample auto calibration CalibrateDragstrModel.",
        "keywords": [
          "gatk4",
          "composestrtablefile",
          "dragstr"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/4405451249819-ComposeSTRTableFile",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "FASTA reference file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "index of the FASTA reference file",
              "pattern": "*.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "Sequence dictionary of the FASTA reference file",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "str_table": {
              "type": "file",
              "description": "A zipped folder containing the STR table files",
              "pattern": "*.zip"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gatk4_condensedepthevidence",
      "path": "modules/nf-core/gatk4/condensedepthevidence/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_condensedepthevidence",
        "description": "Merges adjacent DepthEvidence records",
        "keywords": [
          "gatk4",
          "condensedepthevidence",
          "evidence"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4)",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": "['BSD-3-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "depth_evidence": {
              "type": "file",
              "description": "The depth evidence file",
              "pattern": "*.rd.txt.gz"
            }
          },
          {
            "depth_evidence_index": {
              "type": "file",
              "description": "The index of the depth evidence file",
              "pattern": "*.rd.txt.gz.tbi"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference FASTA file needed when the input is a CRAM file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "Index of the reference FASTA file needed when the input is a CRAM file",
              "pattern": "*.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "Sequence dictionary of the reference FASTA file needed when the input is a CRAM file",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "condensed_evidence": {
              "type": "file",
              "description": "The condensed depth evidence",
              "pattern": "*.rd.txt.gz"
            }
          },
          {
            "condensed_evidence_index": {
              "type": "file",
              "description": "The condensed depth evidence",
              "pattern": "*.rd.txt.gz.tbi"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gatk4_createsequencedictionary",
      "path": "modules/nf-core/gatk4/createsequencedictionary/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_createsequencedictionary",
        "description": "Creates a sequence dictionary for a reference sequence",
        "keywords": [
          "dictionary",
          "fasta",
          "createsequencedictionary"
        ],
        "tools": [
          {
            "gatk": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input fasta file",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "dict": {
              "type": "file",
              "description": "gatk dictionary file",
              "pattern": "*.{dict}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxulysse",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_createsomaticpanelofnormals",
      "path": "modules/nf-core/gatk4/createsomaticpanelofnormals/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_createsomaticpanelofnormals",
        "description": "Create a panel of normals contraining germline and artifactual sites for use with mutect2.",
        "keywords": [
          "gatk4",
          "createsomaticpanelofnormals",
          "panelofnormals"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "genoomicsdb": {
              "type": "directory",
              "description": "genomicsDB workspace that contains the samples to create the somatic panel of normals with.",
              "pattern": "*_genomicsDBworkspace"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test']\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test']\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test']\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "vcf": {
              "type": "file",
              "description": "panel of normal as compressed vcf file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Tabix index of vcf file",
              "pattern": "*vcf.gz.tbi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@GCJMackenzie"
        ]
      }
    },
    {
      "name": "gatk4_determinegermlinecontigploidy",
      "path": "modules/nf-core/gatk4/determinegermlinecontigploidy/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_determinegermlinecontigploidy",
        "description": "Determines the baseline contig ploidy for germline samples given counts data",
        "keywords": [
          "gatk4",
          "determinegermlinecontigploidy",
          "counts",
          "copy number"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "counts": {
              "type": "file",
              "description": "One or more count TSV files created with gatk/collectreadcounts",
              "pattern": "*.tsv"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Optional - A bed file containing the intervals to include in the process",
              "pattern": "*.bed"
            }
          },
          {
            "exclude_beds": {
              "type": "file",
              "description": "Optional - One or more bed files containing intervals to exclude from the process",
              "pattern": "*.bed"
            }
          },
          {
            "contig_ploidy_table": {
              "type": "file",
              "description": "The contig ploidy priors table",
              "pattern": "*.tsv"
            }
          },
          {
            "ploidy_model": {
              "type": "directory",
              "description": "Optional - A folder containing the ploidy model.\nWhen a model is supplied to tool will run in CASE mode.\npattern: '*-model/'\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "calls": {
              "type": "directory",
              "description": "A folder containing the calls from the input files",
              "pattern": "*-calls/"
            }
          },
          {
            "model": {
              "type": "directory",
              "description": "A folder containing the model from the input files.\nThis will only be created in COHORT mode (when no model is supplied to the process).\n",
              "pattern": "*-model/"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gatk4_estimatelibrarycomplexity",
      "path": "modules/nf-core/gatk4/estimatelibrarycomplexity/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_estimatelibrarycomplexity",
        "description": "Estimates the numbers of unique molecules in a sequencing library.",
        "keywords": [
          "gatk4",
          "gatk4_estimatelibrarycomplexity",
          "duplication_metrics",
          "reporting"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4)",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "File containing metrics on the input files",
              "pattern": "*.{metrics}"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen",
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_fastqtosam",
      "path": "modules/nf-core/gatk4/fastqtosam/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_fastqtosam",
        "description": "Converts FastQ file to SAM/BAM format",
        "keywords": [
          "bam",
          "fastq",
          "convert"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4) Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools with a primary focus on variant discovery and genotyping. Its powerful processing engine and high-performance computing features make it capable of taking on projects of any size.",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data, respectively.",
              "pattern": "*.fastq.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Converted BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ntoda03"
        ]
      }
    },
    {
      "name": "gatk4_filterintervals",
      "path": "modules/nf-core/gatk4/filterintervals/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_filterintervals",
        "description": "Filters intervals based on annotations and/or count statistics.",
        "keywords": [
          "gatk4",
          "gatk4_filterintervals"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools with a primary focus on variant discovery and genotyping. Its powerful processing engine and high-performance computing features make it capable of taking on projects of any size.",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "read_counts": {
              "type": "file",
              "description": "Read counts input file",
              "pattern": "*.{tsv, hdf5}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Processed interval list file (processed_intervals.interval_list)",
              "pattern": "*.interval_list"
            }
          },
          {
            "annotated_intervals": {
              "type": "file",
              "description": "Annotated intervals TSV file (annotated_intervals.tsv).",
              "pattern": "*.tsv"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "interval_list": {
              "type": "file",
              "description": "Filtered interval list file",
              "pattern": "*.interval_list"
            }
          }
        ],
        "authors": [
          "@ryanjameskennedy",
          "@ViktorHy"
        ]
      }
    },
    {
      "name": "gatk4_filtermutectcalls",
      "path": "modules/nf-core/gatk4/filtermutectcalls/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_filtermutectcalls",
        "description": "Filters the raw output of mutect2, can optionally use outputs of calculatecontamination and learnreadorientationmodel to improve filtering.\n",
        "keywords": [
          "filtermutectcalls",
          "mutect2",
          "gatk4",
          "filtervcf"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "compressed vcf file of mutect2calls",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "vcf_tbi": {
              "type": "file",
              "description": "Tabix index of vcf file",
              "pattern": "*vcf.gz.tbi"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Stats file that pairs with output vcf file",
              "pattern": "*vcf.gz.stats"
            }
          },
          {
            "orientationbias": {
              "type": "file",
              "description": "files containing artifact priors for input vcf. Optional input.",
              "pattern": "*.artifact-prior.tar.gz"
            }
          },
          {
            "segmentation": {
              "type": "file",
              "description": "tables containing segmentation information for input vcf. Optional input.",
              "pattern": "*.segmentation.table"
            }
          },
          {
            "table": {
              "type": "file",
              "description": "table(s) containing contamination data for input vcf. Optional input, takes priority over estimate.",
              "pattern": "*.contamination.table"
            }
          },
          {
            "estimate": {
              "type": "float",
              "description": "estimation of contamination value as a double. Optional input, will only be used if table is not specified."
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "vcf": {
              "type": "file",
              "description": "file containing filtered mutect2 calls.",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "tbi file that pairs with vcf.",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "file containing statistics of the filtermutectcalls run.",
              "pattern": "*.filteringStats.tsv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@GCJMackenzie",
          "@maxulysse",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_filtervarianttranches",
      "path": "modules/nf-core/gatk4/filtervarianttranches/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_filtervarianttranches",
        "description": "Apply tranche filtering",
        "keywords": [
          "gatk4",
          "filtervarianttranches",
          "tranche_filtering"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360051308071-FilterVariantTranches",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "a VCF file containing variants, must have info key:CNN_2D",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "tbi file matching with -vcf",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "resources": {
              "type": "list",
              "description": "resource A VCF containing known SNP and or INDEL sites. Can be supplied as many times as necessary",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "resources_index": {
              "type": "list",
              "description": "Index of resource VCF containing known SNP and or INDEL sites. Can be supplied as many times as necessary",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": ".dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "VCF index file",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_gatherbqsrreports",
      "path": "modules/nf-core/gatk4/gatherbqsrreports/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_gatherbqsrreports",
        "description": "Gathers scattered BQSR recalibration reports into a single file",
        "keywords": [
          "gatk4",
          "gatk4_gatherbqsrreports",
          "base_recalibration"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4)",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "table": {
              "type": "file",
              "description": "File(s) containing BQSR table(s)",
              "pattern": "*.table"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "table": {
              "type": "file",
              "description": "File containing joined BQSR table",
              "pattern": "*.table"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_gatherpileupsummaries",
      "path": "modules/nf-core/gatk4/gatherpileupsummaries/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_gatherpileupsummaries",
        "description": "write your description here",
        "keywords": [
          "sort"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4)",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pileup": {
              "type": "(list of) file(s)",
              "description": "Pileup files from gatk4/getpileupsummaries",
              "pattern": "*.pileups.table"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "table": {
              "type": "file",
              "description": "pileup summaries table file",
              "pattern": "*.pileups.table"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen",
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_genomicsdbimport",
      "path": "modules/nf-core/gatk4/genomicsdbimport/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_genomicsdbimport",
        "description": "merge GVCFs from multiple samples. For use in joint genotyping or somatic panel of normal creation.",
        "keywords": [
          "gatk4",
          "genomicsdbimport",
          "genomicsdb",
          "panelofnormalscreation",
          "jointgenotyping"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "vcf": {
              "type": "list",
              "description": "either a list of vcf files to be used to create or update a genomicsdb, or a file that contains a map to vcf files to be used.",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "list",
              "description": "list of tbi files that match with the input vcf files",
              "pattern": "*.vcf.gz_tbi"
            }
          },
          {
            "wspace": {
              "type": "path",
              "description": "path to an existing genomicsdb to be used in update db mode or get intervals mode. This WILL NOT specify name of a new genomicsdb in create db mode.",
              "pattern": "/path/to/existing/gendb"
            }
          },
          {
            "intervalfile": {
              "type": "file",
              "description": "file containing the intervals to be used when creating the genomicsdb",
              "pattern": "*.interval_list"
            }
          },
          {
            "intervalval": {
              "type": "string",
              "description": "if an intervals file has not been spcified, the value enetered here will be used as an interval via the \"-L\" argument",
              "pattern": "example: chr1:1000-10000"
            }
          },
          {
            "run_intlist": {
              "type": "boolean",
              "description": "Specify whether to run get interval list mode, this option cannot be specified at the same time as run_updatewspace.",
              "pattern": "true/false"
            }
          },
          {
            "run_updatewspace": {
              "type": "boolean",
              "description": "Specify whether to run update genomicsdb mode, this option takes priority over run_intlist.",
              "pattern": "true/false"
            }
          },
          {
            "input_map": {
              "type": "boolean",
              "description": "Specify whether the vcf input is providing a list of vcf file(s) or a single file containing a map of paths to vcf files to be used to create or update a genomicsdb.",
              "pattern": "*.sample_map"
            }
          }
        ],
        "output": [
          {
            "genomicsdb": {
              "type": "directory",
              "description": "Directory containing the files that compose the genomicsdb workspace, this is only output for create mode, as update changes an existing db",
              "pattern": "*/$prefix"
            }
          },
          {
            "updatedb": {
              "type": "directory",
              "description": "Directory containing the files that compose the updated genomicsdb workspace, this is only output for update mode, and should be the same path as the input wspace.",
              "pattern": "same/path/as/wspace"
            }
          },
          {
            "intervallist": {
              "type": "file",
              "description": "File containing the intervals used to generate the genomicsdb, only created by get intervals mode.",
              "pattern": "*.interval_list"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@GCJMackenzie"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_genotypegvcfs",
      "path": "modules/nf-core/gatk4/genotypegvcfs/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_genotypegvcfs",
        "description": "Perform joint genotyping on one or more samples pre-called with HaplotypeCaller.\n",
        "keywords": [
          "joint genotyping",
          "genotype",
          "gvcf"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4)",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gvcf": {
              "type": "file",
              "description": "gVCF(.gz) file or to a GenomicsDB\n",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "gvcf_index": {
              "type": "file",
              "description": "index of gvcf file, or empty when providing GenomicsDB\n",
              "pattern": "*.{idx,tbi}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Interval file with the genomic regions included in the library (optional)"
            }
          },
          {
            "intervals_index": {
              "type": "file",
              "description": "Interval index file (optional)"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Reference fasta index file",
              "pattern": "*.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "Reference fasta sequence dict file",
              "pattern": "*.dict"
            }
          },
          {
            "dbsnp": {
              "type": "file",
              "description": "dbSNP VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "dbsnp_tbi": {
              "type": "file",
              "description": "dbSNP VCF index file",
              "pattern": "*.tbi"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Genotyped VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Tbi index for VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@santiagorevale",
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_germlinecnvcaller",
      "path": "modules/nf-core/gatk4/germlinecnvcaller/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_germlinecnvcaller",
        "description": "Calls copy-number variants in germline samples given their counts and the output of DetermineGermlineContigPloidy.",
        "keywords": [
          "gatk",
          "gatk4_germlinecnvcaller",
          "germline contig ploidy"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools with a primary focus on variant discovery and genotyping. Its powerful processing engine and high-performance computing features make it capable of taking on projects of any size.",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "One or more count TSV files created with gatk/collectreadcounts",
              "pattern": "*.tsv"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Optional - A bed file containing the intervals to include in the process",
              "pattern": "*.bed"
            }
          },
          {
            "model": {
              "type": "directory",
              "description": "Optional - directory containing the model produced by germlinecnvcaller cohort mode",
              "pattern": "*-cnv-model/*-model"
            }
          },
          {
            "ploidy": {
              "type": "file",
              "description": "Directory containing ploidy calls produced by determinegermlinecontigploidy case or cohort mode",
              "pattern": "*-calls"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "calls": {
              "type": "file",
              "description": "Tar gzipped directory containing calls produced by germlinecnvcaller case mode",
              "pattern": "*-cnv-calls/*-calls"
            }
          },
          {
            "model": {
              "type": "directory",
              "description": "Optional - Tar gzipped directory containing the model produced by germlinecnvcaller cohort mode",
              "pattern": "*-cnv-model/*-model"
            }
          }
        ],
        "authors": [
          "@ryanjameskennedy",
          "@ViktorHy"
        ]
      }
    },
    {
      "name": "gatk4_getpileupsummaries",
      "path": "modules/nf-core/gatk4/getpileupsummaries/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_getpileupsummaries",
        "description": "Summarizes counts of reads that support reference, alternate and other alleles for given sites. Results can be used with CalculateContamination. Requires a common germline variant sites file, such as from gnomAD.\n",
        "keywords": [
          "gatk4",
          "getpileupsumaries",
          "readcountssummary",
          "germlinevariantsites"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file to be summarised.",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAM/CRAM file index.",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "File containing specified sites to be used for the summary. If this option is not specified, variants file is used instead automatically.",
              "pattern": "*.interval_list"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          },
          {
            "variants": {
              "type": "file",
              "description": "Population vcf of germline sequencing, containing allele fractions. Is also used as sites file if no separate sites file is specified.",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "variants_tbi": {
              "type": "file",
              "description": "Index file for the germline resource.",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "output": [
          {
            "pileup": {
              "type": "file",
              "description": "File containing the pileup summary table.",
              "pattern": "*.pileups.table"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@GCJMackenzie"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_haplotypecaller",
      "path": "modules/nf-core/gatk4/haplotypecaller/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_haplotypecaller",
        "description": "Call germline SNPs and indels via local re-assembly of haplotypes",
        "keywords": [
          "gatk4",
          "haplotypecaller",
          "haplotype"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file from alignment",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAI/CRAI file from alignment",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Bed file with the genomic regions included in the library (optional)"
            }
          },
          {
            "dragstr_model": {
              "type": "file",
              "description": "Text file containing the DragSTR model of the used BAM/CRAM file (optional)",
              "pattern": "*.txt"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          },
          {
            "dbsnp": {
              "type": "file",
              "description": "VCF file containing known sites (optional)"
            }
          },
          {
            "dbsnp_tbi": {
              "type": "file",
              "description": "VCF index of dbsnp (optional)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index of VCF file",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Assembled haplotypes and locally realigned reads",
              "pattern": "*.realigned.bam"
            }
          }
        ],
        "authors": [
          "@suzannejin",
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_indexfeaturefile",
      "path": "modules/nf-core/gatk4/indexfeaturefile/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_indexfeaturefile",
        "description": "Creates an index for a feature file, e.g. VCF or BED file.",
        "keywords": [
          "index",
          "feature"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4)",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "feature_file": {
              "type": "file",
              "description": "VCF/BED file",
              "pattern": "*.{vcf,vcf.gz,bed,bed.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Index for VCF/BED file",
              "pattern": "*.{tbi,idx}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@santiagorevale"
        ]
      },
      "pipelines": [
        {
          "name": "rnavar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "gatk4_intervallisttobed",
      "path": "modules/nf-core/gatk4/intervallisttobed/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_intervallisttobed",
        "description": "Converts an Picard IntervalList file to a BED file.",
        "keywords": [
          "interval",
          "bed",
          "conversion"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4)",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "interval": {
              "type": "file",
              "description": "Interval list",
              "pattern": "*.{interval,interval_list}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file",
              "pattern": "*.bed"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_intervallisttools",
      "path": "modules/nf-core/gatk4/intervallisttools/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_intervallisttools",
        "description": "Splits the interval list file into unique, equally-sized interval files and place it under a directory",
        "keywords": [
          "sort",
          "bed",
          "interval list"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "interval_list": {
              "type": "file",
              "description": "Interval list file",
              "pattern": "*.interval_list"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "interval_list": {
              "type": "file",
              "description": "Interval list files",
              "pattern": "*.interval_list"
            }
          }
        ],
        "authors": [
          "@praveenraj2018"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "gatk4_learnreadorientationmodel",
      "path": "modules/nf-core/gatk4/learnreadorientationmodel/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_learnreadorientationmodel",
        "description": "Uses f1r2 counts collected during mutect2 to Learn the prior probability of read orientation artifacts\n",
        "keywords": [
          "gatk4",
          "learnreadorientationmodel",
          "readorientationartifacts",
          "mutect2"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "f1r2": {
              "type": "list",
              "description": "list of f1r2 files to be used as input.",
              "pattern": "*.f1r2.tar.gz"
            }
          }
        ],
        "output": [
          {
            "artifactprior": {
              "type": "file",
              "description": "file containing artifact-priors to be used by filtermutectcalls",
              "pattern": "*.tar.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@GCJMackenzie"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_leftalignandtrimvariants",
      "path": "modules/nf-core/gatk4/leftalignandtrimvariants/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_leftalignandtrimvariants",
        "description": "Left align and trim variants using GATK4 LeftAlignAndTrimVariants.",
        "keywords": [
          "normalize",
          "norm",
          "vcf"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The vcf file to be normalized\ne.g. 'file1.vcf.gz'\n"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index of the vcf file to be normalized\ne.g. 'file1.vcf.gz.tbi'\n"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Bed file with the genomic regions included in the library (optional)"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF normalized output file",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Tbi index for VCF file",
              "pattern": "*.tbi"
            }
          }
        ],
        "authors": [
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "gatk4_markduplicates",
      "path": "modules/nf-core/gatk4/markduplicates/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_markduplicates",
        "description": "This tool locates and tags duplicate reads in a BAM or SAM file, where duplicate reads are defined as originating from a single fragment of DNA.",
        "keywords": [
          "markduplicates",
          "bam",
          "sort"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools with a primary focus on variant discovery and genotyping. Its powerful processing engine and high-performance computing features make it capable of taking on projects of any size.",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360037052812-MarkDuplicates-Picard-",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Fasta file",
              "pattern": "*.{fasta}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "Fasta index file",
              "pattern": "*.{fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Marked duplicates BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "cram": {
              "type": "file",
              "description": "Marked duplicates CRAM file",
              "pattern": "*.{cram}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.{bam.bai}"
            }
          },
          {
            "crai": {
              "type": "file",
              "description": "CRAM index file",
              "pattern": "*.{cram.crai}"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Duplicate metrics file generated by GATK",
              "pattern": "*.{metrics.txt}"
            }
          }
        ],
        "authors": [
          "@ajodeh-juma",
          "@FriederikeHanssen",
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_markduplicatesspark",
      "path": "modules/nf-core/gatk4/markduplicatesspark/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_markduplicates_spark",
        "description": "This tool locates and tags duplicate reads in a BAM or SAM file, where duplicate reads are defined as originating from a single fragment of DNA.",
        "keywords": [
          "markduplicates",
          "bam",
          "sort"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools with a primary focus on variant discovery and genotyping. Its powerful processing engine and high-performance computing features make it capable of taking on projects of any size.",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360037052812-MarkDuplicates-Picard-",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "Marked duplicates BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "bam_index": {
              "type": "file",
              "description": "Optional BAM index file",
              "pattern": "*.bai"
            }
          }
        ],
        "authors": [
          "@ajodeh-juma",
          "@FriederikeHanssen",
          "@maxulysse",
          "@SusiJo"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_mergebamalignment",
      "path": "modules/nf-core/gatk4/mergebamalignment/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_mergebamalignment",
        "description": "Merge unmapped with mapped BAM files",
        "keywords": [
          "alignment",
          "bam",
          "merge",
          "mergebamalignment"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "aligned": {
              "type": "file",
              "description": "The aligned bam file",
              "pattern": "*.{bam}"
            }
          },
          {
            "unaligned": {
              "type": "file",
              "description": "The unmaped bam file",
              "pattern": "*.{bam}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary"
            }
          }
        ],
        "output": [
          {
            "bam": {
              "type": "file",
              "description": "The merged bam file",
              "pattern": "*.bam"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kevinmenden",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "gatk4_mergemutectstats",
      "path": "modules/nf-core/gatk4/mergemutectstats/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_mergemutectstats",
        "description": "Merges mutect2 stats generated on different intervals/regions",
        "keywords": [
          "mutectstats",
          "merge"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4)",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "stats": {
              "type": "(list of) file(s)",
              "description": "Stats file",
              "pattern": "*.{stats}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Stats file",
              "pattern": "*.vcf.gz.stats"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_mergevcfs",
      "path": "modules/nf-core/gatk4/mergevcfs/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_mergevcfs",
        "description": "Merges several vcf files",
        "keywords": [
          "vcf",
          "merge"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "vcf": {
              "type": "list",
              "description": "Two or more VCF files",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome']\n"
            }
          },
          {
            "ref_dict": {
              "type": "file",
              "description": "Optional Sequence Dictionary as input",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "vcf": {
              "type": "file",
              "description": "merged vcf file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "index files for the merged vcf files",
              "pattern": "*.tbi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_mutect2",
      "path": "modules/nf-core/gatk4/mutect2/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_mutect2",
        "description": "Call somatic SNVs and indels via local assembly of haplotypes.",
        "keywords": [
          "gatk4",
          "mutect2",
          "haplotype",
          "somatic"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "input": {
              "type": "list",
              "description": "list of BAM files, also able to take CRAM as an input",
              "pattern": "*.{bam/cram}"
            }
          },
          {
            "input_index": {
              "type": "list",
              "description": "list of BAM file indexes, also able to take CRAM indexes as an input",
              "pattern": "*.{bam.bai/cram.crai}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Specify region the tools is run on.",
              "pattern": ".{bed,interval_list}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          },
          {
            "germline_resource": {
              "type": "file",
              "description": "Population vcf of germline sequencing, containing allele fractions.",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "germline_resource_tbi": {
              "type": "file",
              "description": "Index file for the germline resource.",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "panel_of_normals": {
              "type": "file",
              "description": "vcf file to be used as a panel of normals.",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "panel_of_normals_tbi": {
              "type": "file",
              "description": "Index for the panel of normals.",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "output": [
          {
            "vcf": {
              "type": "file",
              "description": "compressed vcf file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index of vcf file",
              "pattern": "*vcf.gz.tbi"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Stats file that pairs with output vcf file",
              "pattern": "*vcf.gz.stats"
            }
          },
          {
            "f1r2": {
              "type": "file",
              "description": "file containing information to be passed to LearnReadOrientationModel (only outputted when tumor_normal_pair mode is run)",
              "pattern": "*.f1r2.tar.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@GCJMackenzie",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk4_postprocessgermlinecnvcalls",
      "path": "modules/nf-core/gatk4/postprocessgermlinecnvcalls/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_postprocessgermlinecnvcalls",
        "description": "Postprocesses the output of GermlineCNVCaller and generates VCFs and denoised copy ratios",
        "keywords": [
          "gatk4",
          "postprocessgermlinecnvcalls",
          "copy number"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360037593411-PostprocessGermlineCNVCalls",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ploidy": {
              "type": "directory",
              "description": "Optional - A folder containing the ploidy model.\nWhen a model is supplied to tool will run in CASE mode.\n",
              "pattern": "*-calls/"
            }
          },
          {
            "calls": {
              "type": "directory",
              "description": "A folder containing the calls from the input files",
              "pattern": "*-cnv-calls/*-calls"
            }
          },
          {
            "model": {
              "type": "directory",
              "description": "A folder containing the model from the input files.\nThis will only be created in COHORT mode (when no model is supplied to the process).\n",
              "pattern": "*-cnv-model/*-model"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "denoised": {
              "type": "file",
              "description": "Denoised copy ratio file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "segments": {
              "type": "file",
              "description": "Segments VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Intervals VCF file",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "authors": [
          "@ryanjameskennedy"
        ]
      }
    },
    {
      "name": "gatk4_preprocessintervals",
      "path": "modules/nf-core/gatk4/preprocessintervals/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_preprocessintervals",
        "description": "Prepares bins for coverage collection.",
        "keywords": [
          "gatk4",
          "preprocessintervals",
          "interval",
          "bed"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools with a primary focus on variant discovery and genotyping. Its powerful processing engine and high-performance computing features make it capable of taking on projects of any size.",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Interval file (bed or interval_list) with the genomic regions to be included from the analysis (optional)",
              "pattern": "*.{bed,interval_list}"
            }
          },
          {
            "meta5": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "exclude_intervals": {
              "type": "file",
              "description": "Interval file (bed or interval_list) with the genomic regions to be excluded from the analysis (optional)",
              "pattern": "*.{bed,interval_list}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "interval_list": {
              "type": "file",
              "description": "Processed interval list file",
              "pattern": "*.{bed,interval_list}"
            }
          }
        ],
        "authors": [
          "@ryanjameskennedy",
          "@ViktorHy",
          "@ramprasadn"
        ]
      }
    },
    {
      "name": "gatk4_printreads",
      "path": "modules/nf-core/gatk4/printreads/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_printreads",
        "description": "Print reads in the SAM/BAM/CRAM file",
        "keywords": [
          "gatk4",
          "bam",
          "cram",
          "sam",
          "printreads"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "reference fasta file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "reference fasta index file",
              "pattern": "*.{fai}"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "reference fasta dictionary file",
              "pattern": "*.{dict}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "cram": {
              "type": "file",
              "description": "Sorted CRAM file",
              "pattern": "*.{cram}"
            }
          },
          {
            "sam": {
              "type": "file",
              "description": "Sorted SAM file",
              "pattern": "*.{sam}"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "gatk4_printsvevidence",
      "path": "modules/nf-core/gatk4/printsvevidence/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_printsvevidence",
        "description": "WARNING - this tool is still experimental and shouldn't be used in a production setting. Gathers paired-end and split read evidence files for use in the GATK-SV pipeline. Output files are a file containing the location of and orientation of read pairs marked as discordant, and a file containing the clipping location of all soft clipped reads and the orientation of the clipping.",
        "keywords": [
          "structural_variants",
          "gatk4",
          "printsvevidence"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "evidence_files": {
              "type": "file",
              "description": "The evidence files created by CollectSVEvidence. They all need to be of the same type to print the SV evidence.",
              "pattern": "*.{pe,sr,baf,rd}.txt(.gz)"
            }
          },
          {
            "evidence_indices": {
              "type": "file",
              "description": "The indices of the evidence files created by CollectSVEvidence",
              "pattern": "*.{pe,sr,baf,rd}.txt(.gz).tbi"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "An optional BED file",
              "pattern": "*.bed"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "An optional reference FASTA file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "An optional reference FASTA file index",
              "pattern": "*.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "The mandatory sequence dictionary file",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "printed_evidence": {
              "type": "file",
              "description": "The output file containing the discordant read pairs or the soft clipped reads",
              "pattern": "*.{pe,sr,baf,rd}.txt.gz"
            }
          },
          {
            "printed_evidence": {
              "type": "file",
              "description": "The index of the output file containing the discordant read pairs or the soft clipped reads",
              "pattern": "*.{pe,sr,baf,rd}.txt.gz.tbi"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gatk4_reblockgvcf",
      "path": "modules/nf-core/gatk4/reblockgvcf/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_reblockgvcf",
        "description": "Condenses homRef blocks in a single-sample GVCF",
        "keywords": [
          "gatk4",
          "reblockgvcf",
          "gvcf"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gvcf": {
              "type": "file",
              "description": "GVCF file created using HaplotypeCaller using the '-ERC GVCF' or '-ERC BP_RESOLUTION' mode",
              "pattern": "*.{vcf,gvcf}.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index of the GVCF file",
              "pattern": "*.tbi"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Bed file with the genomic regions included in the library (optional)"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          },
          {
            "dbsnp": {
              "type": "file",
              "description": "VCF file containing known sites (optional)"
            }
          },
          {
            "dbsnp_tbi": {
              "type": "file",
              "description": "VCF index of dbsnp (optional)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "gvcf": {
              "type": "file",
              "description": "Filtered GVCF",
              "pattern": "*rb.g.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index of the filtered GVCF",
              "pattern": "*rb.g.vcf.gz.tbi"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gatk4_revertsam",
      "path": "modules/nf-core/gatk4/revertsam/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_revertsam",
        "description": "Reverts SAM or BAM files to a previous state.",
        "keywords": [
          "sam",
          "revert"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "The input bam/sam file",
              "pattern": "*.{bam,sam}"
            }
          }
        ],
        "output": [
          {
            "bam": {
              "type": "file",
              "description": "The reverted bam/sam file",
              "pattern": "*.reverted.bam"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "gatk4_samtofastq",
      "path": "modules/nf-core/gatk4/samtofastq/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_samtofastq",
        "description": "Converts BAM/SAM file to FastQ format",
        "keywords": [
          "bed",
          "interval list"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Input SAM/BAM file",
              "pattern": "*.{bam,sam}"
            }
          }
        ],
        "output": [
          {
            "fastq": {
              "type": "file",
              "description": "converted fastq file",
              "pattern": "*.fastq"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "gatk4_selectvariants",
      "path": "modules/nf-core/gatk4/selectvariants/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_selectvariants",
        "description": "Select a subset of variants from a VCF file",
        "keywords": [
          "gatk",
          "gatk4",
          "selectvariants",
          "vcf"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360036362532-SelectVariants",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "vcf": {
              "type": "list",
              "description": "VCF(.gz) file",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "vcf_idx": {
              "type": "list",
              "description": "VCF file index",
              "pattern": "*.{idx,tbi}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "One or more genomic intervals over which to operate",
              "pattern": ".intervals"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF file",
              "pattern": "*.selectvariants.vcf.gz"
            }
          },
          {
            "vcf_tbi": {
              "type": "list",
              "description": "VCF file index",
              "pattern": "*.{idx,tbi}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@mjcipriano",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "gatk4_shiftfasta",
      "path": "modules/nf-core/gatk4/shiftfasta/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_shiftfasta",
        "description": "Create a fasta with the bases shifted by offset",
        "keywords": [
          "mitochondria",
          "shiftfasta",
          "shiftchain",
          "shiftintervals"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "fasta file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "index for fasta file",
              "pattern": "*.{fai}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "sequence dictionary file",
              "pattern": "*.{dict}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing fasta information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "sequence dictionary file",
              "pattern": "*.{dict}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Intervals file for the fasta file",
              "pattern": "*.{intervals}"
            }
          },
          {
            "shift_back_chain": {
              "type": "file",
              "description": "The shiftback chain file to use when lifting over",
              "pattern": "*.{back_chain}"
            }
          },
          {
            "shift_fa": {
              "type": "file",
              "description": "Shifted fasta file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "shift_intervals": {
              "type": "file",
              "description": "Intervals file for the shifted fasta file",
              "pattern": "*.{shifted.intervals}"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      }
    },
    {
      "name": "gatk4_sitedepthtobaf",
      "path": "modules/nf-core/gatk4/sitedepthtobaf/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_sitedepthtobaf",
        "description": "EXPERIMENTAL TOOL! Convert SiteDepth to BafEvidence",
        "keywords": [
          "gatk4",
          "site depth",
          "BAF"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4)",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "site_depths": {
              "type": "file",
              "description": "Files containing site depths",
              "pattern": "*.sd.txt.gz"
            }
          },
          {
            "site_depths_indices": {
              "type": "file",
              "description": "The indices of the site depth files",
              "pattern": "*.sd.txt.gz.tbi"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Input VCF of SNPs marking loci for site depths",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index of the input VCF of SNPs marking loci for site depths",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference FASTA file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the reference FASTA file",
              "pattern": "*.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "The sequence dictionary of the reference FASTA file",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "baf": {
              "type": "file",
              "description": "The created BAF file",
              "pattern": "*.baf.txt.gz"
            }
          },
          {
            "baf_tbi": {
              "type": "file",
              "description": "The index of the created BAF file",
              "pattern": "*.baf.txt.gz.tbi"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gatk4_splitcram",
      "path": "modules/nf-core/gatk4/splitcram/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_splitcram",
        "description": "Splits CRAM files efficiently by taking advantage of their container based structure",
        "keywords": [
          "gatk4",
          "splitcram",
          "split",
          "cram"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "cram": {
              "type": "file",
              "description": "The CRAM file to split",
              "pattern": "*.cram"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "split_crams": {
              "type": "file",
              "description": "A list of split CRAM files",
              "pattern": "*.cram"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gatk4_splitintervals",
      "path": "modules/nf-core/gatk4/splitintervals/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_splitintervals",
        "description": "Split intervals into sub-interval files.",
        "keywords": [
          "interval",
          "bed",
          "splitintervals"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4)",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "interval": {
              "type": "file",
              "description": "Interval list or BED",
              "pattern": "*.{interval,interval_list,bed}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference FASTA",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Reference FASTA index",
              "pattern": "*.fai"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "Reference sequence dictionary",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "A list of scattered interval lists",
              "pattern": "*.interval_list"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@nvnieuwk",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "gatk4_splitncigarreads",
      "path": "modules/nf-core/gatk4/splitncigarreads/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_splitncigarreads",
        "description": "Splits reads that contain Ns in their cigar string",
        "keywords": [
          "vcf",
          "merge"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "bam": {
              "type": "list",
              "description": "BAM/SAM/CRAM file containing reads",
              "pattern": "*.{bam,sam,cram}"
            }
          },
          {
            "bai": {
              "type": "list",
              "description": "BAI/SAI/CRAI index file (optional)",
              "pattern": "*.{bai,sai,crai}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Bed file with the genomic regions included in the library (optional)"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "bam": {
              "type": "file",
              "description": "Output file with split reads (BAM/SAM/CRAM)",
              "pattern": "*.{bam,sam,cram}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "rnavar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "gatk4_svannotate",
      "path": "modules/nf-core/gatk4/svannotate/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_svannotate",
        "description": "Adds predicted functional consequence, gene overlap, and noncoding element overlap annotations to SV VCF from GATK-SV pipeline. Input files are an SV VCF, a GTF file containing primary or canonical transcripts, and a BED file containing noncoding elements. Output file is an annotated SV VCF.",
        "keywords": [
          "gatk4",
          "svannotate",
          "vcf",
          "annotate",
          "structural variants"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Genome Analysis Toolkit (GATK4)",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "tool_dev_url": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "A VCF file created with a structural variant caller",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "The index file of the VCF",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Optional - reference FASTA file needed when the input is a CRAM file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "Optional - index of the reference FASTA file needed when the input is a CRAM file",
              "pattern": "*.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "Optional - sequence dictionary of the reference FASTA file needed when the input is a CRAM file",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "annotated_vcf": {
              "type": "file",
              "description": "The annotated structural variant VCF",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "The index of the VCF",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gatk4_svcluster",
      "path": "modules/nf-core/gatk4/svcluster/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_svcluster",
        "description": "Clusters structural variants based on coordinates, event type, and supporting algorithms",
        "keywords": [
          "gatk4",
          "svcluster",
          "vcf",
          "structural_variants"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://github.com/broadinstitute/gatk",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcfs": {
              "type": "file",
              "description": "One or more VCF files created with a structural variant caller",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "indices": {
              "type": "file",
              "description": "Index files for the VCFs",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "ploidy_table": {
              "type": "file",
              "description": "The sample ploidy table",
              "pattern": "*.tsv"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference FASTA file needed when the input is a CRAM file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "Index of the reference FASTA file needed when the input is a CRAM file",
              "pattern": "*.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "Sequence dictionary of the reference FASTA file needed when the input is a CRAM file",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "clustered_vcf": {
              "type": "file",
              "description": "The VCF containing the clustered VCFs",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "clustered_vcf_index": {
              "type": "file",
              "description": "The index of the VCF containing the clustered VCFs",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gatk4_variantfiltration",
      "path": "modules/nf-core/gatk4/variantfiltration/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_variantfiltration",
        "description": "Filter variants",
        "keywords": [
          "vcf",
          "filter",
          "variantfiltration"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "vcf": {
              "type": "list",
              "description": "List of VCF(.gz) files",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "vcf_tbi": {
              "type": "list",
              "description": "List of VCF file indexes",
              "pattern": "*.{idx,tbi}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Fasta file of reference genome",
              "pattern": "*.fasta"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "Sequence dictionary of fastea file",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index of VCF file",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kevinmenden",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "gatk4_variantrecalibrator",
      "path": "modules/nf-core/gatk4/variantrecalibrator/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk4_variantrecalibrator",
        "description": "Build a recalibration model to score variant quality for filtering purposes.\nIt is highly recommended to follow GATK best practices when using this module,\nthe gaussian mixture model requires a large number of samples to be used for the\ntool to produce optimal results. For example, 30 samples for exome data. For more details see\nhttps://gatk.broadinstitute.org/hc/en-us/articles/4402736812443-Which-training-sets-arguments-should-I-use-for-running-VQSR-\n",
        "keywords": [
          "VariantRecalibrator",
          "gatk4",
          "recalibration_model"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "input vcf file containing the variants to be recalibrated",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "tbi file matching with -vcf",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "resource_vcf": {
              "type": "file",
              "description": "all resource vcf files that are used with the corresponding '--resource' label",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "resource_tbi": {
              "type": "file",
              "description": "all resource tbi files that are used with the corresponding '--resource' label",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "labels": {
              "type": "string",
              "description": "necessary arguments for GATK VariantRecalibrator. Specified to directly match the resources provided. More information can be found at https://gatk.broadinstitute.org/hc/en-us/articles/5358906115227-VariantRecalibrator"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "recal": {
              "type": "file",
              "description": "Output recal file used by ApplyVQSR",
              "pattern": "*.recal"
            }
          },
          {
            "idx": {
              "type": "file",
              "description": "Index file for the recal output file",
              "pattern": "*.idx"
            }
          },
          {
            "tranches": {
              "type": "file",
              "description": "Output tranches file used by ApplyVQSR",
              "pattern": "*.tranches"
            }
          },
          {
            "plots": {
              "type": "file",
              "description": "Optional output rscript file to aid in visualization of the input data and learned model.",
              "pattern": "*plots.R"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "*.versions.yml"
            }
          }
        ],
        "authors": [
          "@GCJMackenzie",
          "@nickhsmith"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "gatk_indelrealigner",
      "path": "modules/nf-core/gatk/indelrealigner/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk_indelrealigner",
        "description": "Performs local realignment around indels to correct for mapping errors",
        "keywords": [
          "bam",
          "vcf",
          "variant calling",
          "indel",
          "realignment"
        ],
        "tools": [
          {
            "gatk": {
              "description": "The full Genome Analysis Toolkit (GATK) framework, license restricted.",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://github.com/broadinstitute/gatk-docs",
              "licence": "['https://software.broadinstitute.org/gatk/download/licensing', 'BSD', 'https://www.broadinstitute.org/gatk/about/#licensing']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted and indexed BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.bai"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Intervals file created by gatk3 RealignerTargetCreator",
              "pattern": "*.{intervals,list}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference file used to generate BAM file",
              "pattern": ".{fasta,fa,fna}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference file used to generate BAM file",
              "pattern": ".fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK dict file for reference",
              "pattern": ".dict"
            }
          },
          {
            "known_vcf": {
              "type": "file",
              "description": "Optional input VCF file(s) with known indels",
              "pattern": ".vcf"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted and indexed BAM file with local realignment around variants",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Output BAM Index file",
              "pattern": "*.bai"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "gatk_realignertargetcreator",
      "path": "modules/nf-core/gatk/realignertargetcreator/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk_realignertargetcreator",
        "description": "Generates a list of locations that should be considered for local realignment prior genotyping.",
        "keywords": [
          "bam",
          "vcf",
          "variant calling",
          "indel",
          "realignment",
          "targets"
        ],
        "tools": [
          {
            "gatk": {
              "description": "The full Genome Analysis Toolkit (GATK) framework, license restricted.",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://github.com/broadinstitute/gatk-docs",
              "licence": "['https://software.broadinstitute.org/gatk/download/licensing', 'BSD', 'https://www.broadinstitute.org/gatk/about/#licensing']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Sorted and indexed BAM/CRAM/SAM file",
              "pattern": "*.bam"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.bai"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference file used to generate BAM file",
              "pattern": ".{fasta,fa,fna}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference file used to generate BAM file",
              "pattern": ".fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK dict file for reference",
              "pattern": ".dict"
            }
          },
          {
            "known_vcf": {
              "type": "file",
              "description": "Optional input VCF file(s) with known indels",
              "pattern": ".vcf"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "File containg intervals that represent sites of extant and potential indels.",
              "pattern": "*.intervals"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "gatk_unifiedgenotyper",
      "path": "modules/nf-core/gatk/unifiedgenotyper/meta.yml",
      "type": "module",
      "meta": {
        "name": "gatk_unifiedgenotyper",
        "description": "SNP and Indel variant caller on a per-locus basis",
        "keywords": [
          "bam",
          "vcf",
          "variant calling"
        ],
        "tools": [
          {
            "gatk": {
              "description": "The full Genome Analysis Toolkit (GATK) framework, license restricted.",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://github.com/broadinstitute/gatk-docs",
              "licence": "['https://software.broadinstitute.org/gatk/download/licensing', 'BSD', 'https://www.broadinstitute.org/gatk/about/#licensing']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Sorted and indexed BAM/CRAM/SAM file",
              "pattern": "*.bam"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.bai"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference file used to generate BAM file",
              "pattern": ".{fasta,fa,fna}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference file used to generate BAM file",
              "pattern": ".fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK dict file for reference",
              "pattern": ".dict"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Bed file with the genomic regions included in the library (optional)",
              "pattern": "*.intervals"
            }
          },
          {
            "contamination": {
              "type": "file",
              "description": "Tab-separated file containing fraction of contamination in sequencing data (per sample) to aggressively remove",
              "pattern": "*"
            }
          },
          {
            "dbsnps": {
              "type": "file",
              "description": "VCF file containing known sites (optional)",
              "pattern": "*"
            }
          },
          {
            "comp": {
              "type": "file",
              "description": "Comparison VCF file (optional)",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file containing called variants",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "authors": [
          "@ilight1542",
          "@jfy133"
        ]
      }
    },
    {
      "name": "gawk",
      "path": "modules/nf-core/gawk/meta.yml",
      "type": "module",
      "meta": {
        "name": "gawk",
        "description": "If you are like many computer users, you would frequently like to make changes in various text files\nwherever certain patterns appear, or extract data from parts of certain lines while discarding the rest.\nThe job is easy with awk, especially the GNU implementation gawk.\n",
        "keywords": [
          "gawk",
          "awk",
          "txt",
          "text",
          "file parsing"
        ],
        "tools": [
          {
            "gawk": {
              "description": "GNU awk",
              "homepage": "https://www.gnu.org/software/gawk/",
              "documentation": "https://www.gnu.org/software/gawk/manual/",
              "tool_dev_url": "https://www.gnu.org/prep/ftp.html",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "The input file - Specify the logic that needs to be executed on this file on the `ext.args2` or in the program file",
              "pattern": "*"
            }
          },
          {
            "program_file": {
              "type": "file",
              "description": "Optional file containing logic for awk to execute. If you don't wish to use a file, you can use `ext.args2` to specify the logic.",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "The output file - specify the name of this file using `ext.prefix` and the extension using `ext.suffix`",
              "pattern": "*"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gecco_run",
      "path": "modules/nf-core/gecco/run/meta.yml",
      "type": "module",
      "meta": {
        "name": "gecco_run",
        "description": "GECCO is a fast and scalable method for identifying putative novel Biosynthetic Gene Clusters (BGCs) in genomic and metagenomic data using Conditional Random Fields (CRFs).",
        "keywords": [
          "bgc",
          "detection",
          "metagenomics",
          "contigs"
        ],
        "tools": [
          {
            "gecco": {
              "description": "Biosynthetic Gene Cluster prediction with Conditional Random Fields.",
              "homepage": "https://gecco.embl.de",
              "documentation": "https://gecco.embl.de",
              "tool_dev_url": "https://github.com/zellerlab/GECCO",
              "doi": "10.1101/2021.05.03.442509",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "A genomic file containing one or more sequences as input. Input type is any supported by Biopython (fasta, gbk, etc.)",
              "pattern": "*"
            }
          },
          {
            "hmm": {
              "type": "file",
              "description": "Alternative HMM file(s) to use in HMMER format",
              "pattern": "*.hmm"
            }
          },
          {
            "model_dir": {
              "type": "directory",
              "description": "Path to an alternative CRF (Conditional Random Fields) module to use"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "genes": {
              "type": "file",
              "description": "TSV file containing detected/predicted genes with BGC probability scores. Will not be generated if no hits are found.",
              "pattern": "*.genes.tsv"
            }
          },
          {
            "features": {
              "type": "file",
              "description": "TSV file containing identified domains",
              "pattern": "*.features.tsv"
            }
          },
          {
            "clusters": {
              "type": "file",
              "description": "TSV file containing coordinates of predicted clusters and BGC types.  Will not be generated if no hits are found.",
              "pattern": "*.clusters.tsv"
            }
          },
          {
            "gbk": {
              "type": "file",
              "description": "Per cluster GenBank file (if found) containing sequence with annotations. Will not be generated if no hits are found.",
              "pattern": "*.gbk"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "AntiSMASH v6 sideload JSON file (if --antismash-sideload) supplied. Will not be generated if no hits are found.",
              "pattern": "*.gbk"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "gem2_gem2bedmappability",
      "path": "modules/nf-core/gem2/gem2bedmappability/meta.yml",
      "type": "module",
      "meta": {
        "name": "gem2_gem2bedmappability",
        "description": "Convert a mappability file to bedgraph format",
        "keywords": [
          "mappability",
          "bedgraph",
          "index",
          "gem"
        ],
        "tools": [
          {
            "gem2": {
              "description": "GEM2 is a high-performance mapping tool. It also provide a unique tool to evaluate mappability.",
              "homepage": "https://paoloribeca.science/gem",
              "licence": "['Custom']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "map": {
              "type": "file",
              "description": "The mappability file created from the index",
              "pattern": "*.mappability"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing index information\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "The index of the reference FASTA",
              "pattern": "*.gem"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bedgraph": {
              "type": "file",
              "description": "The resulting bedgraph file",
              "pattern": "*.bg"
            }
          },
          {
            "sizes": {
              "type": "file",
              "description": "The chromosome sizes",
              "pattern": "*.sizes"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gem2_gemindexer",
      "path": "modules/nf-core/gem2/gemindexer/meta.yml",
      "type": "module",
      "meta": {
        "name": "gem2_gemindexer",
        "description": "Create a GEM index from a FASTA file",
        "keywords": [
          "fasta",
          "index",
          "reference",
          "mappability"
        ],
        "tools": [
          {
            "gem2": {
              "description": "GEM2 is a high-performance mapping tool. It also provide a unique tool to evaluate mappability.",
              "homepage": "https://paoloribeca.science/gem",
              "licence": "['Custom']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "A reference FASTA file to index",
              "pattern": "*.{fasta,fa,fna}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "gem": {
              "type": "file",
              "description": "The created index",
              "pattern": "*.gem"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "The execution log",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gem2_gemmappability",
      "path": "modules/nf-core/gem2/gemmappability/meta.yml",
      "type": "module",
      "meta": {
        "name": "gem2_gemmappability",
        "description": "Define the mappability of a reference",
        "keywords": [
          "mappability",
          "gem",
          "index",
          "reference"
        ],
        "tools": [
          {
            "gem2": {
              "description": "GEM2 is a high-performance mapping tool. It also provide a unique tool to evaluate mappability.",
              "homepage": "https://paoloribeca.science/gem",
              "licence": "['Custom']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "The index created with gem-indexer from the reference FASTA",
              "pattern": "*.gem"
            }
          },
          {
            "read_length": {
              "type": "integer",
              "description": "The read length to define the mappability of"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "map": {
              "type": "file",
              "description": "The resulting mappability file",
              "pattern": "*.mappability"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "genescopefk",
      "path": "modules/nf-core/genescopefk/meta.yml",
      "type": "module",
      "meta": {
        "name": "genescopefk",
        "description": "A derivative of GenomeScope2.0 modified to work with FastK",
        "keywords": [
          "k-mer",
          "genome profile",
          "histogram"
        ],
        "tools": [
          {
            "genescopefk": {
              "description": "A derivative of GenomeScope2.0 modified to work with FastK",
              "homepage": "https://github.com/thegenemyers/GENESCOPE.FK",
              "tool_dev_url": "https://github.com/thegenemyers/GENESCOPE.FK",
              "licence": "https://github.com/thegenemyers/GENESCOPE.FK/blob/main/LICENSE"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastk_histex_histogram": {
              "type": "file",
              "description": "A histogram formatted for GeneScope using the -G parameter from Fastk Histex",
              "pattern": "*.hist"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "linear_plot": {
              "type": "file",
              "description": "A GeneScope linear plot in PNG format",
              "pattern": "*_linear_plot.png"
            }
          },
          {
            "transformed_linear_plot": {
              "type": "file",
              "description": "A GeneScope transformed linear plot in PNG format",
              "pattern": "*_transformed_linear_plot.png"
            }
          },
          {
            "log_plot": {
              "type": "file",
              "description": "A GeneScope log plot in PNG format",
              "pattern": "*_log_plot.png"
            }
          },
          {
            "transformed_log_plot": {
              "type": "file",
              "description": "A GeneScope transformed log plot in PNG format",
              "pattern": "*_transformed_log_plot.png"
            }
          },
          {
            "model": {
              "type": "file",
              "description": "GeneScope model fit summary",
              "pattern": "*_model.txt"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "GeneScope histogram summary",
              "pattern": "*_summary.txt"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "genmap_index",
      "path": "modules/nf-core/genmap/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "genmap_index",
        "description": "create index file for genmap",
        "keywords": [
          "index",
          "mappability",
          "fasta"
        ],
        "tools": [
          {
            "genmap": {
              "description": "Ultra-fast computation of genome mappability.",
              "homepage": "https://github.com/cpockrandt/genmap",
              "documentation": "https://github.com/cpockrandt/genmap",
              "tool_dev_url": "https://github.com/cpockrandt/genmap",
              "doi": "10.1093/bioinformatics/btaa222",
              "licence": [
                "BSD-3-Clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "fasta file to index",
              "pattern": "*.{fasta,fa,fna}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "Genmap index directory"
            }
          }
        ],
        "authors": [
          "@jianhong",
          "@nvnieuwk"
        ]
      },
      "pipelines": [
        {
          "name": "hicar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "genmap_map",
      "path": "modules/nf-core/genmap/map/meta.yml",
      "type": "module",
      "meta": {
        "name": "genmap_map",
        "description": "create mappability files for a genome",
        "keywords": [
          "mappability",
          "index",
          "fasta",
          "bedgraph",
          "csv",
          "wig"
        ],
        "tools": [
          {
            "genmap": {
              "description": "Ultra-fast computation of genome mappability.",
              "homepage": "https://github.com/cpockrandt/genmap",
              "documentation": "https://github.com/cpockrandt/genmap",
              "tool_dev_url": "https://github.com/cpockrandt/genmap",
              "doi": "10.1093/bioinformatics/btaa222",
              "licence": [
                "BSD-3-Clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "index directory"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing regions information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "regions": {
              "type": "file",
              "description": "optional - a bed file with regions to define the mappability off",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "wig": {
              "type": "file",
              "description": "genmap wig mappability file",
              "pattern": "*.wig"
            }
          },
          {
            "bedgraph": {
              "type": "file",
              "description": "genmap bedgraph mappability file",
              "pattern": "*.bedgraph"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "genmap text mappability file",
              "pattern": "*.txt"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "genmap csv mappability file",
              "pattern": "*.csv"
            }
          }
        ],
        "authors": [
          "@jianhong",
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "genmod_annotate",
      "path": "modules/nf-core/genmod/annotate/meta.yml",
      "type": "module",
      "meta": {
        "name": "genmod_annotate",
        "description": "for annotating regions, frequencies, cadd scores",
        "keywords": [
          "annotate",
          "genmod"
        ],
        "tools": [
          {
            "genmod": {
              "description": "Annotate genetic inheritance models in variant files",
              "homepage": "https://github.com/Clinical-Genomics/genmod",
              "documentation": "https://github.com/Clinical-Genomics/genmod",
              "tool_dev_url": "https://github.com/moonso",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "vcf",
              "description": "Annotated VCF file",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "genmod_compound",
      "path": "modules/nf-core/genmod/compound/meta.yml",
      "type": "module",
      "meta": {
        "name": "genmod_compound",
        "description": "Score compounds",
        "keywords": [
          "compound",
          "genmod"
        ],
        "tools": [
          {
            "genmod": {
              "description": "Annotate genetic inheritance models in variant files",
              "homepage": "https://github.com/Clinical-Genomics/genmod",
              "documentation": "https://github.com/Clinical-Genomics/genmod",
              "tool_dev_url": "https://github.com/moonso",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]  #\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Output VCF file",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "genmod_models",
      "path": "modules/nf-core/genmod/models/meta.yml",
      "type": "module",
      "meta": {
        "name": "genmod_models",
        "description": "annotate models of inheritance",
        "keywords": [
          "models",
          "genmod"
        ],
        "tools": [
          {
            "genmod": {
              "description": "Annotate genetic inheritance models in variant files",
              "homepage": "https://github.com/Clinical-Genomics/genmod",
              "documentation": "https://github.com/Clinical-Genomics/genmod",
              "tool_dev_url": "https://github.com/moonso",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_vcf": {
              "type": "file",
              "description": "vcf file",
              "pattern": "*.{vcf}"
            }
          },
          {
            "reduced_penetrance": {
              "type": "file",
              "description": "file with gene ids that have reduced penetrance",
              "pattern": "*.{tsv}"
            }
          },
          {
            "family_file": {
              "type": "file",
              "description": "ped file",
              "pattern": "*.{ped}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Output VCF file",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "genmod_score",
      "path": "modules/nf-core/genmod/score/meta.yml",
      "type": "module",
      "meta": {
        "name": "genmod_score",
        "description": "Score the variants of a vcf based on their annotation",
        "keywords": [
          "score",
          "genmod"
        ],
        "tools": [
          {
            "genmod": {
              "description": "Annotate genetic inheritance models in variant files",
              "homepage": "https://github.com/Clinical-Genomics/genmod",
              "documentation": "https://github.com/Clinical-Genomics/genmod",
              "tool_dev_url": "https://github.com/moonso",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_vcf": {
              "type": "file",
              "description": "vcf file",
              "pattern": "*.{vcf}"
            }
          },
          {
            "family_file": {
              "type": "file",
              "description": "ped file",
              "pattern": "*.{ped}"
            }
          },
          {
            "score_config": {
              "type": "file",
              "description": "rank model config file",
              "pattern": "*.{ini}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Output VCF file",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "genomad_download",
      "path": "modules/nf-core/genomad/download/meta.yml",
      "type": "module",
      "meta": {
        "name": "genomad_download",
        "description": "Download geNomad databases and related files",
        "keywords": [
          "metagenomics",
          "genomad",
          "database",
          "download",
          "phage",
          "virus",
          "plasmid"
        ],
        "tools": [
          {
            "genomad": {
              "description": "Identification of mobile genetic elements",
              "homepage": "https://portal.nersc.gov/genomad/",
              "documentation": "https://portal.nersc.gov/genomad/",
              "tool_dev_url": "https://github.com/apcamargo/genomad/",
              "doi": "10.1101/2023.03.05.531206",
              "licence": "['Lawrence Berkeley National Labs BSD variant license']"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "genomad_db": {
              "type": "directory",
              "description": "Directory containing downloaded data with directory being named \"genomad_db\"",
              "pattern": "genomad_db"
            }
          }
        ],
        "authors": [
          "@CarsonJM"
        ]
      }
    },
    {
      "name": "genomad_endtoend",
      "path": "modules/nf-core/genomad/endtoend/meta.yml",
      "type": "module",
      "meta": {
        "name": "genomad_endtoend",
        "description": "Identify mobile genetic elements present in genomic assemblies",
        "keywords": [
          "metagenomics",
          "genomad",
          "database",
          "download",
          "phage",
          "virus",
          "plasmid"
        ],
        "tools": [
          {
            "genomad": {
              "description": "Identification of mobile genetic elements",
              "homepage": "https://portal.nersc.gov/genomad/",
              "documentation": "https://portal.nersc.gov/genomad/",
              "tool_dev_url": "https://github.com/apcamargo/genomad/",
              "doi": "10.1101/2023.03.05.531206",
              "licence": "['Lawrence Berkeley National Labs BSD variant license']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file containing contigs/scaffolds/chromosomes",
              "pattern": "*.{fasta,fna,fa}"
            }
          },
          {
            "genomad_db": {
              "type": "directory",
              "description": "Directory pointing to geNomad database"
            }
          },
          {
            "score_calibration": {
              "type": "boolean",
              "description": "true/false value to indicate if score calibration should be enabled"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "aggregated_classification": {
              "type": "file",
              "description": "Combined classification scores for each contig/scaffold/chromosome",
              "pattern": "*_aggregated_classification.tsv"
            }
          },
          {
            "taxonomy": {
              "type": "file",
              "description": "Detailed output of geNomad's marker gene taxonomy analysis",
              "pattern": "*_taxonomy.tsv"
            }
          },
          {
            "provirus": {
              "type": "file",
              "description": "Detailed output of each provirus identified by geNomad's find_proviruses module",
              "pattern": "*_provirus.tsv"
            }
          },
          {
            "compositions": {
              "type": "file",
              "description": "OPTIONAL - Predicted sample composition when `--enable-score-calibration` is used",
              "pattern": "*_compositions.tsv"
            }
          },
          {
            "calibrated_classification": {
              "type": "file",
              "description": "OPTIONAL - Classification scores that have been adjusted based on sample composition when `--enable-score-calibration` is used`",
              "pattern": "*_calibrated_aggregated_classification.tsv"
            }
          },
          {
            "plasmid_fasta": {
              "type": "file",
              "description": "FASTA file containing predicted plasmid sequences",
              "pattern": "*_plasmid.fna"
            }
          },
          {
            "plasmid_genes": {
              "type": "file",
              "description": "TSV file containing predicted plasmid genes and their annotations",
              "pattern": "*_plasmid_genes.tsv"
            }
          },
          {
            "plasmid_proteins": {
              "type": "file",
              "description": "FASTA file containing predicted plasmid protein sequences",
              "pattern": "*_plasmid_proteins.faa"
            }
          },
          {
            "plasmid_summary": {
              "type": "file",
              "description": "TSV file containing a summary of geNomad's plasmid predictions",
              "pattern": "*_plasmid_summary.tsv"
            }
          },
          {
            "virus_fasta": {
              "type": "file",
              "description": "FASTA file containing predicted virus sequences",
              "pattern": "*_virus.fna"
            }
          },
          {
            "virus_genes": {
              "type": "file",
              "description": "TSV file containing predicted virus genes and their annotations",
              "pattern": "*_virus_genes.tsv"
            }
          },
          {
            "virus_proteins": {
              "type": "file",
              "description": "FASTA file containing predicted virus protein sequences",
              "pattern": "*_virus_proteins.faa"
            }
          },
          {
            "virus_summary": {
              "type": "file",
              "description": "TSV file containing a summary of geNomad's virus predictions",
              "pattern": "*_virus_summary.tsv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@CarsonJM"
        ]
      }
    },
    {
      "name": "genomescope2",
      "path": "modules/nf-core/genomescope2/meta.yml",
      "type": "module",
      "meta": {
        "name": "genomescope2",
        "description": "Estimate genome heterozygosity, repeat content, and size from sequencing reads using a kmer-based statistical approach",
        "keywords": [
          "genome size",
          "genome heterozygosity",
          "repeat content"
        ],
        "tools": [
          {
            "genomescope2": {
              "description": "Reference-free profiling of polyploid genomes",
              "homepage": "http://qb.cshl.edu/genomescope/genomescope2.0/",
              "documentation": "https://github.com/tbenavi1/genomescope2.0/blob/master/README.md",
              "tool_dev_url": "https://github.com/tbenavi1/genomescope2.0",
              "doi": "10.1038/s41467-020-14998-3",
              "licence": "['Apache License, Version 2.0 (Apache-2.0)']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "histogram": {
              "type": "file",
              "description": "A K-mer histogram file",
              "pattern": "*.hist"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "linear_plot_png": {
              "type": "file",
              "description": "A genomescope2 linear plot in PNG format",
              "pattern": "*_linear_plot.png"
            }
          },
          {
            "linear_plot_png": {
              "type": "file",
              "description": "A genomescope2 linear plot in PNG format",
              "pattern": "*_linear_plot.png"
            }
          },
          {
            "transformed_linear_plot_png": {
              "type": "file",
              "description": "A genomescope2 transformed linear plot in PNG format",
              "pattern": "*_transformed_linear_plot.png"
            }
          },
          {
            "log_plot_png": {
              "type": "file",
              "description": "A genomescope2 log plot in PNG format",
              "pattern": "*_log_plot.png"
            }
          },
          {
            "transformed_log_plot_png": {
              "type": "file",
              "description": "A genomescope2 transformed log plot in PNG format",
              "pattern": "*_transformed_log_plot.png"
            }
          },
          {
            "model": {
              "type": "file",
              "description": "Genomescope2 model fit summary",
              "pattern": "*_model.txt"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "Genomescope2 histogram summary",
              "pattern": "*_summary.txt"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "genotyphi_parse",
      "path": "modules/nf-core/genotyphi/parse/meta.yml",
      "type": "module",
      "meta": {
        "name": "genotyphi_parse",
        "description": "Genotype Salmonella Typhi from Mykrobe results",
        "keywords": [
          "genotype",
          "Salmonella Typhi"
        ],
        "tools": [
          {
            "genotyphi": {
              "description": "Assign genotypes to Salmonella Typhi genomes based on VCF files (mapped to Typhi CT18 reference genome)",
              "homepage": "https://github.com/katholt/genotyphi",
              "documentation": "https://github.com/katholt/genotyphi",
              "tool_dev_url": "https://github.com/katholt/genotyphi",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON formatted file of Mykrobe results",
              "pattern": "*.json"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "A tab-delimited file of predicted genotypes",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "genrich",
      "path": "modules/nf-core/genrich/meta.yml",
      "type": "module",
      "meta": {
        "name": "genrich",
        "description": "Peak-calling for ChIP-seq and ATAC-seq enrichment experiments",
        "keywords": [
          "peak-calling",
          "ChIP-seq",
          "ATAC-seq"
        ],
        "tools": [
          {
            "genrich": {
              "description": "Genrich is a peak-caller for genomic enrichment assays (e.g. ChIP-seq, ATAC-seq).\nIt analyzes alignment files generated following the assay and produces a file\ndetailing peaks of significant enrichment.\n",
              "homepage": "https://github.com/jsh58/Genrich",
              "documentation": "https://github.com/jsh58/Genrich#readme",
              "tool_dev_url": "https://github.com/jsh58/Genrich",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "treatment_bam": {
              "type": "file",
              "description": "Coordinate sorted BAM/SAM file from treatment sample",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "control_bam": {
              "type": "file",
              "description": "Coordinate sorted BAM/SAM file from control sample",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "blacklist_bed": {
              "type": "file",
              "description": "Bed file containing genomic intervals to exclude from the analysis",
              "pattern": "*.{bed}"
            }
          },
          {
            "save_pvalues": {
              "type": "boolean",
              "description": "Create bedgraph-ish file for p/q-values file"
            }
          },
          {
            "save_pileup": {
              "type": "boolean",
              "description": "Create bedgraph-ish file for pileups and p-values"
            }
          },
          {
            "save_bed": {
              "type": "boolean",
              "description": "Create BED file for reads/fragments/intervals"
            }
          },
          {
            "save_duplicates": {
              "type": "boolean",
              "description": "Create PCR duplicates file (only works if -r option is set)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "peaks": {
              "type": "file",
              "description": "Output file is in ENCODE narrowPeak format",
              "pattern": "*.{narrowPeak}"
            }
          },
          {
            "bedgraph_pvalues": {
              "type": "file",
              "description": "bedGraph file containing p/q values",
              "pattern": "*.{pvalues.bedGraph}"
            }
          },
          {
            "bedgraph_pileup": {
              "type": "file",
              "description": "bedGraph file containing pileups and p-values",
              "pattern": "*.{pileup.bedGraph}"
            }
          },
          {
            "bed_intervals": {
              "type": "file",
              "description": "Bed file containing annotated intervals",
              "pattern": "*.{intervals.bed}"
            }
          },
          {
            "duplicates": {
              "type": "file",
              "description": "Text output file containing intervals corresponding to PCR duplicates",
              "pattern": "*.{intervals.txt}"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "*.{version.txt}"
            }
          }
        ],
        "authors": [
          "@JoseEspinosa"
        ]
      }
    },
    {
      "name": "gfaffix",
      "path": "modules/nf-core/gfaffix/meta.yml",
      "type": "module",
      "meta": {
        "name": "gfaffix",
        "description": "Collapse walk-preserving shared affixes in variation graphs in GFA format",
        "keywords": [
          "gfa",
          "graph",
          "pangenome",
          "variation graph"
        ],
        "tools": [
          {
            "gfaffix": {
              "description": "GFAffix identifies walk-preserving shared affixes in variation graphs and\ncollapses them into a non-redundant graph structure.\n",
              "homepage": "https://github.com/marschall-lab/GFAffix",
              "documentation": "https://github.com/marschall-lab/GFAffix",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Variation graph in GFA format",
              "pattern": "*.{gfa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Non-redundant variation graph in GFA 1.0 format",
              "pattern": "*.{gfa}"
            }
          },
          {
            "affixes": {
              "type": "file",
              "description": "Shared affixes in tab-separated values (TSV) text format",
              "pattern": "*.{txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@heuermh"
        ]
      },
      "pipelines": [
        {
          "name": "pangenome",
          "version": "dev"
        }
      ]
    },
    {
      "name": "gfastats",
      "path": "modules/nf-core/gfastats/meta.yml",
      "type": "module",
      "meta": {
        "name": "gfastats",
        "description": "A single fast and exhaustive tool for summary statistics and simultaneous *fa*\n(fasta, fastq, gfa [.gz]) genome assembly file manipulation.\n",
        "keywords": [
          "gfastats",
          "fasta",
          "genome assembly",
          "genome summary",
          "genome manipulation",
          "genome statistics"
        ],
        "tools": [
          {
            "gfastats": {
              "description": "The swiss army knife for genome assembly.",
              "homepage": "https://github.com/vgl-hub/gfastats",
              "documentation": "https://github.com/vgl-hub/gfastats/tree/main/instructions",
              "tool_dev_url": "https://github.com/vgl-hub/gfastats",
              "doi": "10.1093/bioinformatics/btac460",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "Draft assembly file",
              "pattern": "*.{fasta,fastq,gfa}(.gz)?"
            }
          },
          {
            "out_fmt": {
              "type": "string",
              "description": "Output format (fasta, fastq, gfa)"
            }
          },
          {
            "genome_size": {
              "type": "integer",
              "description": "estimated genome size (bp) for NG* statistics (optional)."
            }
          },
          {
            "target": {
              "type": "string",
              "description": "target specific sequence by header, optionally with coordinates (optional)."
            }
          },
          {
            "agpfile": {
              "type": "file",
              "description": "converts input agp to path and replaces existing paths."
            }
          },
          {
            "include_bed": {
              "type": "file",
              "description": "generates output on a subset list of headers or coordinates in 0-based bed format."
            }
          },
          {
            "exclude_bed": {
              "type": "file",
              "description": "opposite of --include-bed. They can be combined (no coordinates)."
            }
          },
          {
            "instructions": {
              "type": "file",
              "description": "set of instructions provided as an ordered list."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "assembly_summary": {
              "type": "file",
              "description": "Assembly summary statistics file",
              "pattern": "*.assembly_summary"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "The assembly as modified by gfastats",
              "pattern": "*.{fasta,fastq,gfa}.gz"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      }
    },
    {
      "name": "gffcompare",
      "path": "modules/nf-core/gffcompare/meta.yml",
      "type": "module",
      "meta": {
        "name": "gffcompare",
        "description": "Compare, merge, annotate and estimate accuracy of generated gtf files",
        "keywords": [
          "transcripts",
          "gtf",
          "merge",
          "compare"
        ],
        "tools": [
          {
            "gffcompare": {
              "description": "GffCompare by Geo Pertea",
              "homepage": "http://ccb.jhu.edu/software/stringtie/gffcompare.shtml",
              "documentation": "http://ccb.jhu.edu/software/stringtie/gffcompare.shtml",
              "tool_dev_url": "https://github.com/gpertea/gffcompare",
              "doi": "10.12688/f1000research.23297.1",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing meta data\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gtfs": {
              "type": "file",
              "description": "GTF/GFF files\ne.g. [ 'file_1.gtf', 'file_2.gtf' ]\n",
              "pattern": "*.{gtf,gff}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome reference fasta file (optional)",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index for fasta file",
              "pattern": "*.fai"
            }
          },
          {
            "reference_gtf": {
              "type": "file",
              "description": "Reference annotation in gtf/gff format (optional)",
              "pattern": "*.{gtf,gff}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing meta data\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "annotated_gtf": {
              "type": "file",
              "description": "Annotated gtf file when reference gtf is provided (optional)\n",
              "pattern": "*.annotated.gtf"
            }
          },
          {
            "combined_gtf": {
              "type": "file",
              "description": "Combined gtf file when multiple input files are\nprovided (optional)\n",
              "pattern": "*.annotated.gtf"
            }
          },
          {
            "tmap": {
              "type": "file",
              "description": "File listing the most closely matching reference transcript\nfor each query transcript (optional)\n",
              "pattern": "*.tmap"
            }
          },
          {
            "refmap": {
              "type": "file",
              "description": "File listing the reference transcripts with overlapping\nquery transcripts (optional)\n",
              "pattern": "*.refmap"
            }
          },
          {
            "loci": {
              "type": "file",
              "description": "File with loci",
              "pattern": "*.loci"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "File with stats for input transcripts as compared to\nreference alternatively stats for the combined gtf\n",
              "pattern": "*.stats"
            }
          },
          {
            "tracking": {
              "type": "file",
              "description": "This file matches transcripts up between samples\n",
              "pattern": "*.tracking"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@jemten"
        ]
      }
    },
    {
      "name": "gffread",
      "path": "modules/nf-core/gffread/meta.yml",
      "type": "module",
      "meta": {
        "name": "gffread",
        "description": "Validate, filter, convert and perform various other operations on GFF files",
        "keywords": [
          "gff",
          "conversion",
          "validation"
        ],
        "tools": [
          {
            "gffread": {
              "description": "GFF/GTF utility providing format conversions, region filtering, FASTA sequence extraction and more.",
              "homepage": "http://ccb.jhu.edu/software/stringtie/gff.shtml#gffread",
              "documentation": "http://ccb.jhu.edu/software/stringtie/gff.shtml#gffread",
              "tool_dev_url": "https://github.com/gpertea/gffread",
              "doi": "10.12688/f1000research.23297.1",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "gff": {
              "type": "file",
              "description": "A reference file in either the GFF3, GFF2 or GTF format.",
              "pattern": "*.{gff, gtf}"
            }
          }
        ],
        "output": [
          {
            "gtf": {
              "type": "file",
              "description": "GTF file resulting from the conversion of the GFF input file",
              "pattern": "*.{gtf}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@emiller88"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "scrnaseq",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "gget_gget",
      "path": "modules/nf-core/gget/gget/meta.yml",
      "type": "module",
      "meta": {
        "name": "gget_gget",
        "description": "gget is a free, open-source command-line tool and Python package that enables efficient querying of genomic databases. gget consists of a collection of separate but interoperable modules, each designed to facilitate one type of database querying in a single line of code.",
        "keywords": [
          "gget",
          "reference",
          "database",
          "databases",
          "download"
        ],
        "tools": [
          {
            "gget": {
              "description": "gget enables efficient querying of genomic databases",
              "homepage": "https://github.com/pachterlab/gget",
              "documentation": "https://pachterlab.github.io/gget/",
              "tool_dev_url": "https://github.com/pachterlab/gget",
              "doi": "10.1093/bioinformatics/btac836",
              "licence": "['BSD-2-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "files": {
              "type": "files",
              "description": "Optional input files which can be specified for certain tools. This is mostly used to supply a FASTA file for gget muscle.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "File containing output of gget command (-o for most gget tools).",
              "pattern": "*.{json,csv}"
            }
          },
          {
            "file": {
              "type": "file",
              "description": "Path to any file downloaded by gget",
              "pattern": "*"
            }
          }
        ],
        "authors": [
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "glimpse2_chunk",
      "path": "modules/nf-core/glimpse2/chunk/meta.yml",
      "type": "module",
      "meta": {
        "name": "glimpse2_chunk",
        "description": "Defines chunks where to run imputation",
        "keywords": [
          "chunk",
          "low-coverage",
          "imputation",
          "glimpse"
        ],
        "tools": [
          {
            "glimpse2": {
              "description": "GLIMPSE2 is a phasing and imputation method for large-scale low-coverage sequencing studies.",
              "homepage": "https://odelaneau.github.io/GLIMPSE",
              "documentation": "https://odelaneau.github.io/GLIMPSE/commands.html",
              "tool_dev_url": "https://github.com/odelaneau/GLIMPSE",
              "doi": "10.1038/s41588-020-00756-0",
              "licence": "['MIT']"
            }
          }
        ],
        "requirements": [
          "AVX2"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Target dataset in VCF/BCF format defined at all variable positions.\nThe file could possibly be without GT field (for efficiency reasons a file containing only the positions is recommended).\n",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "Index file of the input VCF/BCF file containing genotype likelihoods.",
              "pattern": "*.{vcf.gz.csi,bcf.gz.csi}"
            }
          },
          {
            "region": {
              "type": "string",
              "description": "Target region, usually a full chromosome (e.g. chr20:1000000-2000000 or chr20).\nFor chrX, please treat PAR and non-PAR regions as different choromosome in order to avoid mixing ploidy.\n"
            }
          },
          {
            "map": {
              "type": "file",
              "description": "File containing the genetic map.",
              "pattern": "*.gmap"
            }
          },
          {
            "model": {
              "type": "string",
              "description": "Algorithm model to use:\n\"recursive\": Recursive algorithm\n\"sequential\": Sequential algorithm (Recommended)\n\"uniform-number-variants\": Experimental. Uniform the number of variants in the sequential algorithm\n",
              "pattern": "{recursive,sequential,uniform-number-variants}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Tab delimited output txt file containing buffer and imputation regions.",
              "pattern": "*.{txt}"
            }
          }
        ],
        "authors": [
          "@louislenezet"
        ]
      }
    },
    {
      "name": "glimpse2_concordance",
      "path": "modules/nf-core/glimpse2/concordance/meta.yml",
      "type": "module",
      "meta": {
        "name": "glimpse2_concordance",
        "description": "Program to compute the genotyping error rate at the sample or marker level.",
        "keywords": [
          "concordance",
          "low-coverage",
          "glimpse",
          "imputation"
        ],
        "tools": [
          {
            "glimpse2": {
              "description": "GLIMPSE2 is a phasing and imputation method for large-scale low-coverage sequencing studies.",
              "homepage": "https://odelaneau.github.io/GLIMPSE",
              "documentation": "https://odelaneau.github.io/GLIMPSE/commands.html",
              "tool_dev_url": "https://github.com/odelaneau/GLIMPSE",
              "doi": "10.1038/s41588-020-00756-0",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "region": {
              "type": "string",
              "description": "Target region used for imputation, including left and right buffers (e.g. chr20:1000000-2000000).",
              "pattern": "chrXX:leftBufferPosition-rightBufferPosition"
            }
          },
          {
            "freq": {
              "type": "file",
              "description": "File containing allele frequencies at each site.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "truth": {
              "type": "file",
              "description": "Validation dataset called at the same positions as the imputed file.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "estimate": {
              "type": "file",
              "description": "Imputed dataset file obtain after phasing.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "samples": {
              "type": "file",
              "description": "List of samples to process, one sample ID per line.",
              "pattern": "*.{txt,tsv}"
            }
          },
          {
            "groups": {
              "type": "file",
              "description": "Alternative to frequency bins, group bins are user defined, provided in a file.",
              "pattern": "*.{txt,tsv}"
            }
          },
          {
            "bins": {
              "type": "string",
              "description": "Allele frequency bins used for rsquared computations.\nBy default they should as MAF bins [0-0.5], while\nthey should take the full range [0-1] if --use-ref-alt is used.\n",
              "pattern": "0 0.01 0.05 ... 0.5"
            }
          },
          {
            "ac_bins": {
              "type": "string",
              "description": "User-defined allele count bins used for rsquared computations.",
              "pattern": "1 2 5 10 20 ... 100000"
            }
          },
          {
            "allele_counts": {
              "type": "string",
              "description": "Default allele count bins used for rsquared computations.\nAN field must be defined in the frequency file.\n"
            }
          },
          {
            "min_val_gl": {
              "type": "float",
              "description": "Minimum genotype likelihood probability P(G|R) in validation data.\nSet to zero to have no filter of if using –gt-validation\n"
            }
          },
          {
            "min_val_dp": {
              "type": "integer",
              "description": "Minimum coverage in validation data.\nIf FORMAT/DP is missing and –min_val_dp > 0, the program exits with an error.\nSet to zero to have no filter of if using –gt-validation\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions.",
              "pattern": "versions.yml"
            }
          },
          {
            "errors_cal": {
              "type": "file",
              "description": "Calibration correlation errors between imputed dosages (in MAF bins) and highly-confident genotype.",
              "pattern": "*.errors.cal.txt.gz"
            }
          },
          {
            "errors_grp": {
              "type": "file",
              "description": "Groups correlation errors between imputed dosages (in MAF bins) and highly-confident genotype.",
              "pattern": "*.errors.grp.txt.gz"
            }
          },
          {
            "errors_spl": {
              "type": "file",
              "description": "Samples correlation errors between imputed dosages (in MAF bins) and highly-confident genotype.",
              "pattern": "*.errors.spl.txt.gz"
            }
          },
          {
            "rsquared_grp": {
              "type": "file",
              "description": "Groups r-squared correlation between imputed dosages (in MAF bins) and highly-confident genotype.",
              "pattern": "*.rsquare.grp.txt.gz"
            }
          },
          {
            "rsquared_spl": {
              "type": "file",
              "description": "Samples r-squared correlation between imputed dosages (in MAF bins) and highly-confident genotype.",
              "pattern": "*.rsquare.spl.txt.gz"
            }
          }
        ],
        "authors": [
          "@louislenezet"
        ]
      }
    },
    {
      "name": "glimpse2_ligate",
      "path": "modules/nf-core/glimpse2/ligate/meta.yml",
      "type": "module",
      "meta": {
        "name": "glimpse2_ligate",
        "description": "Ligatation of multiple phased BCF/VCF files into a single whole chromosome file.\nGLIMPSE2 is run in chunks that are ligated into chromosome-wide files maintaining the phasing.\n",
        "keywords": [
          "ligate",
          "low-coverage",
          "glimpse",
          "imputation"
        ],
        "tools": [
          {
            "glimpse2": {
              "description": "GLIMPSE2 is a phasing and imputation method for large-scale low-coverage sequencing studies.",
              "homepage": "https://odelaneau.github.io/GLIMPSE",
              "documentation": "https://odelaneau.github.io/GLIMPSE/commands.html",
              "tool_dev_url": "https://github.com/odelaneau/GLIMPSE",
              "doi": "10.1038/s41588-020-00756-0",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_list": {
              "type": "file",
              "description": "VCF/BCF file containing genotype probabilities (GP field).",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "Index file of the input VCF/BCF file containing genotype likelihoods.",
              "pattern": "*.{csi,tbi}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "merged_variants": {
              "type": "file",
              "description": "Output ligated (phased) file in VCF/BCF format.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          }
        ],
        "authors": [
          "@louislenezet"
        ]
      }
    },
    {
      "name": "glimpse2_phase",
      "path": "modules/nf-core/glimpse2/phase/meta.yml",
      "type": "module",
      "meta": {
        "name": "glimpse2_phase",
        "description": "Tool for imputation and phasing from vcf file or directly from bam files.",
        "keywords": [
          "phasing",
          "low-coverage",
          "imputation",
          "glimpse"
        ],
        "tools": [
          {
            "glimpse2": {
              "description": "GLIMPSE2 is a phasing and imputation method for large-scale low-coverage sequencing studies.",
              "homepage": "https://odelaneau.github.io/GLIMPSE",
              "documentation": "https://odelaneau.github.io/GLIMPSE/commands.html",
              "tool_dev_url": "https://github.com/odelaneau/GLIMPSE",
              "doi": "10.1038/s41588-020-00756-0",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Either multiple BAM/CRAM files containing low-coverage sequencing reads or one VCF/BCF file containing the genotype likelihoods.\nWhen using BAM/CRAM the name of the file is used as samples name.\n",
              "pattern": "*.{bam,cram,vcf,vcf.gz,bcf,bcf.gz}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "Index file of the input BAM/CRAM/VCF/BCF file.",
              "pattern": "*.{bam.bai,cram.crai,vcf.gz.csi,bcf.gz.csi}"
            }
          },
          {
            "samples_file": {
              "type": "file",
              "description": "File with sample names and ploidy information.\nOne sample per line with a mandatory second column indicating ploidy (1 or 2).\nSample names that are not present are assumed to have ploidy 2 (diploids).\nGLIMPSE does NOT handle the use of sex (M/F) instead of ploidy.\n",
              "pattern": "*.{txt,tsv}"
            }
          },
          {
            "input_region": {
              "type": "string",
              "description": "Target region used for imputation, including left and right buffers (e.g. chr20:1000000-2000000).\nOptional if reference panel is in bin format.\n",
              "pattern": "chrXX:leftBufferPosition-rightBufferPosition"
            }
          },
          {
            "output_region": {
              "type": "string",
              "description": "Target imputed region, excluding left and right buffers (e.g. chr20:1000000-2000000).\nOptional if reference panel is in bin format.\n",
              "pattern": "chrXX:leftBufferPosition-rightBufferPosition"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "Reference panel of haplotypes in VCF/BCF format.",
              "pattern": "*.{vcf.gz,bcf.gz}"
            }
          },
          {
            "reference_index": {
              "type": "file",
              "description": "Index file of the Reference panel file.",
              "pattern": "*.{vcf.gz.csi,bcf.gz.csi}"
            }
          },
          {
            "map": {
              "type": "file",
              "description": "File containing the genetic map.\nOptional if reference panel is in bin format.\n",
              "pattern": "*.gmap"
            }
          },
          {
            "fasta_reference": {
              "type": "file",
              "description": "Faidx-indexed reference sequence file in the appropriate genome build.\nNecessary for CRAM files.\n",
              "pattern": "*.fasta"
            }
          },
          {
            "fasta_reference_index": {
              "type": "file",
              "description": "Faidx index of the reference sequence file in the appropriate genome build.\nNecessary for CRAM files.\n",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "phased_variants": {
              "type": "file",
              "description": "Output VCF/BCF file containing genotype probabilities (GP field), imputed dosages (DS field), best guess genotypes (GT field), sampled haplotypes in the last (max 16) main iterations (HS field) and info-score.\n",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "stats_coverage": {
              "type": "file",
              "description": "Optional coverage statistic file created when BAM/CRAM files are used as inputs.",
              "pattern": "*.txt.gz"
            }
          }
        ],
        "authors": [
          "@LouisLeNezet"
        ]
      }
    },
    {
      "name": "glimpse2_splitreference",
      "path": "modules/nf-core/glimpse2/splitreference/meta.yml",
      "type": "module",
      "meta": {
        "name": "glimpse2_splitreference",
        "description": "Tool to create a binary reference panel for quick reading time.",
        "keywords": [
          "split",
          "reference",
          "phasing"
        ],
        "tools": [
          {
            "glimpse2": {
              "description": "GLIMPSE2 is a phasing and imputation method for large-scale low-coverage sequencing studies.",
              "homepage": "https://odelaneau.github.io/GLIMPSE",
              "documentation": "https://odelaneau.github.io/GLIMPSE/commands.html",
              "tool_dev_url": "https://github.com/odelaneau/GLIMPSE",
              "doi": "10.1038/s41588-020-00756-0",
              "licence": "['MIT']"
            }
          }
        ],
        "requirements": [
          "AVX2"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "Reference panel of haplotypes in VCF/BCF format.",
              "pattern": "*.{vcf.gz,bcf.gz}"
            }
          },
          {
            "reference_index": {
              "type": "file",
              "description": "Index file of the Reference panel file.",
              "pattern": "*.{vcf.gz.csi,bcf.gz.csi}"
            }
          },
          {
            "input_region": {
              "type": "string",
              "description": "Target region used for imputation, including left and right buffers (e.g. chr20:1000000-2000000).",
              "pattern": "chrXX:leftBufferPosition-rightBufferPosition"
            }
          },
          {
            "output_region": {
              "type": "string",
              "description": "Target imputed region, excluding left and right buffers (e.g. chr20:1000000-2000000).",
              "pattern": "chrXX:leftBufferPosition-rightBufferPosition"
            }
          },
          {
            "map": {
              "type": "file",
              "description": "File containing the genetic map.",
              "pattern": "*.gmap"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bin_ref": {
              "type": "file",
              "description": "binary reference panel",
              "pattern": "*.bin"
            }
          }
        ],
        "authors": [
          "@LouisLeNezet"
        ]
      }
    },
    {
      "name": "glimpse_chunk",
      "path": "modules/nf-core/glimpse/chunk/meta.yml",
      "type": "module",
      "meta": {
        "name": "glimpse_chunk",
        "description": "Defines chunks where to run imputation",
        "keywords": [
          "chunk",
          "imputation",
          "low coverage"
        ],
        "tools": [
          {
            "glimpse": {
              "description": "GLIMPSE is a phasing and imputation method for large-scale low-coverage sequencing studies.",
              "homepage": "https://odelaneau.github.io/GLIMPSE",
              "documentation": "https://odelaneau.github.io/GLIMPSE/commands.html",
              "tool_dev_url": "https://github.com/odelaneau/GLIMPSE",
              "doi": "10.1038/s41588-020-00756-0",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Target dataset in VCF/BCF format defined at all variable positions.\nThe file could possibly be without GT field (for efficiency reasons a file containing only the positions is recommended).\n",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "region": {
              "type": "string",
              "description": "Target region, usually a full chromosome (e.g. chr20:1000000-2000000 or chr20).\nFor chrX, please treat PAR and non-PAR regions as different choromosome in order to avoid mixing ploidy.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Tab delimited output txt file containing buffer and imputation regions.",
              "pattern": "*.{txt}"
            }
          }
        ],
        "authors": [
          "@louislenezet"
        ]
      }
    },
    {
      "name": "glimpse_concordance",
      "path": "modules/nf-core/glimpse/concordance/meta.yml",
      "type": "module",
      "meta": {
        "name": "glimpse_concordance",
        "description": "Compute the r2 correlation between imputed dosages (in MAF bins) and highly-confident genotype calls from the high-coverage dataset.",
        "keywords": [
          "concordance",
          "low-coverage",
          "glimpse",
          "imputation"
        ],
        "tools": [
          {
            "glimpse": {
              "description": "GLIMPSE is a phasing and imputation method for large-scale low-coverage sequencing studies.",
              "homepage": "https://odelaneau.github.io/GLIMPSE",
              "documentation": "https://odelaneau.github.io/GLIMPSE/commands.html",
              "tool_dev_url": "https://github.com/odelaneau/GLIMPSE",
              "doi": "10.1038/s41588-020-00756-0",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "region": {
              "type": "string",
              "description": "Target region used for imputation, including left and right buffers (e.g. chr20:1000000-2000000).",
              "pattern": "chrXX:leftBufferPosition-rightBufferPosition"
            }
          },
          {
            "freq": {
              "type": "file",
              "description": "File containing allele frequencies at each site.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "truth": {
              "type": "file",
              "description": "Validation dataset called at the same positions as the imputed file.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "estimate": {
              "type": "file",
              "description": "Imputed data.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "min_prob": {
              "type": "float",
              "description": "Minimum posterior probability P(G|R) in validation data"
            }
          },
          {
            "min_dp": {
              "type": "integer",
              "description": "Minimum coverage in validation data.\nIf FORMAT/DP is missing and --minDP > 0, the program exits with an error.\n"
            }
          },
          {
            "bins": {
              "type": "string",
              "description": "Allele frequency bins used for rsquared computations.\nBy default they should as MAF bins [0-0.5], while\nthey should take the full range [0-1] if --use-ref-alt is used.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "errors_cal": {
              "type": "file",
              "description": "Calibration correlation errors between imputed dosages (in MAF bins) and highly-confident genotype.",
              "pattern": "*.errors.cal.txt.gz"
            }
          },
          {
            "errors_grp": {
              "type": "file",
              "description": "Groups correlation errors between imputed dosages (in MAF bins) and highly-confident genotype.",
              "pattern": "*.errors.grp.txt.gz"
            }
          },
          {
            "errors_spl": {
              "type": "file",
              "description": "Samples correlation errors between imputed dosages (in MAF bins) and highly-confident genotype.",
              "pattern": "*.errors.spl.txt.gz"
            }
          },
          {
            "rsquared_grp": {
              "type": "file",
              "description": "Groups r-squared correlation between imputed dosages (in MAF bins) and highly-confident genotype.",
              "pattern": "*.rsquare.grp.txt.gz"
            }
          },
          {
            "rsquared_spl": {
              "type": "file",
              "description": "Samples r-squared correlation between imputed dosages (in MAF bins) and highly-confident genotype.",
              "pattern": "*.rsquare.spl.txt.gz"
            }
          }
        ],
        "authors": [
          "@louislenezet"
        ]
      }
    },
    {
      "name": "glimpse_ligate",
      "path": "modules/nf-core/glimpse/ligate/meta.yml",
      "type": "module",
      "meta": {
        "name": "glimpse_ligate",
        "description": "Concatenates imputation chunks in a single VCF/BCF file ligating phased information.",
        "keywords": [
          "ligate",
          "low-coverage",
          "glimpse",
          "imputation"
        ],
        "tools": [
          {
            "glimpse": {
              "description": "GLIMPSE is a phasing and imputation method for large-scale low-coverage sequencing studies.",
              "homepage": "https://odelaneau.github.io/GLIMPSE",
              "documentation": "https://odelaneau.github.io/GLIMPSE/commands.html",
              "tool_dev_url": "https://github.com/odelaneau/GLIMPSE",
              "doi": "10.1038/s41588-020-00756-0",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_list": {
              "type": "file",
              "description": "VCF/BCF file containing genotype probabilities (GP field).",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "Index file of the input VCF/BCF file containing genotype likelihoods.",
              "pattern": "*.{vcf.gz.csi,bcf.gz.csi}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "merged_variants": {
              "type": "file",
              "description": "Output VCF/BCF file for the merged regions.\nPhased information (HS field) is updated accordingly for the full region.\n",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          }
        ],
        "authors": [
          "@louislenezet"
        ]
      }
    },
    {
      "name": "glimpse_phase",
      "path": "modules/nf-core/glimpse/phase/meta.yml",
      "type": "module",
      "meta": {
        "name": "glimpse_phase",
        "description": "main GLIMPSE algorithm, performs phasing and imputation refining genotype likelihoods",
        "keywords": [
          "phase",
          "imputation",
          "low-coverage",
          "glimpse"
        ],
        "tools": [
          {
            "glimpse": {
              "description": "GLIMPSE is a phasing and imputation method for large-scale low-coverage sequencing studies.",
              "homepage": "https://odelaneau.github.io/GLIMPSE",
              "documentation": "https://odelaneau.github.io/GLIMPSE/commands.html",
              "tool_dev_url": "https://github.com/odelaneau/GLIMPSE",
              "doi": "10.1038/s41588-020-00756-0",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Input VCF/BCF file containing genotype likelihoods.",
              "pattern": "*.{vcf.gz,bcf.gz}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "Index file of the input VCF/BCF file containing genotype likelihoods.",
              "pattern": "*.{vcf.gz.csi,bcf.gz.csi}"
            }
          },
          {
            "samples_file": {
              "type": "file",
              "description": "File with sample names and ploidy information.\nOne sample per line with a mandatory second column indicating ploidy (1 or 2).\nSample names that are not present are assumed to have ploidy 2 (diploids).\nGLIMPSE does NOT handle the use of sex (M/F) instead of ploidy.\n",
              "pattern": "*.{txt,tsv}"
            }
          },
          {
            "input_region": {
              "type": "string",
              "description": "Target region used for imputation, including left and right buffers (e.g. chr20:1000000-2000000).",
              "pattern": "chrXX:leftBufferPosition-rightBufferPosition"
            }
          },
          {
            "output_region": {
              "type": "string",
              "description": "Target imputed region, excluding left and right buffers (e.g. chr20:1000000-2000000).",
              "pattern": "chrXX:leftBufferPosition-rightBufferPosition"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "Reference panel of haplotypes in VCF/BCF format.",
              "pattern": "*.{vcf.gz,bcf.gz}"
            }
          },
          {
            "reference_index": {
              "type": "file",
              "description": "Index file of the Reference panel file.",
              "pattern": "*.{vcf.gz.csi,bcf.gz.csi}"
            }
          },
          {
            "map": {
              "type": "file",
              "description": "File containing the genetic map.",
              "pattern": "*.gmap"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "phased_variants": {
              "type": "file",
              "description": "Output VCF/BCF file containing genotype probabilities (GP field),\nimputed dosages (DS field), best guess genotypes (GT field),\nsampled haplotypes in the last (max 16) main iterations (HS field) and info-score.\n",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          }
        ],
        "authors": [
          "@louislenezet"
        ]
      }
    },
    {
      "name": "glimpse_sample",
      "path": "modules/nf-core/glimpse/sample/meta.yml",
      "type": "module",
      "meta": {
        "name": "glimpse_sample",
        "description": "Generates haplotype calls by sampling haplotype estimates",
        "keywords": [
          "Sample",
          "Haplotypes",
          "Imputation"
        ],
        "tools": [
          {
            "glimpse": {
              "description": "GLIMPSE is a phasing and imputation method for large-scale low-coverage sequencing studies.",
              "homepage": "https://odelaneau.github.io/GLIMPSE",
              "documentation": "https://odelaneau.github.io/GLIMPSE/commands.html",
              "tool_dev_url": "https://github.com/odelaneau/GLIMPSE",
              "doi": "10.1038/s41588-020-00756-0",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "VCF/BCF file generated using GLIMPSE ligate",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "sample": {
              "type": "parameter",
              "description": "Samples a likely haplotype pair for each sample, use it in combination with --seed. Option not recommended for general usage, use --solve instead"
            }
          },
          {
            "solve": {
              "type": "parameter",
              "description": "Get the most likely haplotype pair for each sample (the random number generator is not used)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "haplo_sampled": {
              "type": "file",
              "description": "Output VCF/BCF file containing phased genotypes.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          }
        ],
        "authors": [
          "@louislenezet"
        ]
      }
    },
    {
      "name": "glnexus",
      "path": "modules/nf-core/glnexus/meta.yml",
      "type": "module",
      "meta": {
        "name": "glnexus",
        "description": "merge gVCF files and perform joint variant calling",
        "keywords": [
          "merge",
          "gvcf"
        ],
        "tools": [
          {
            "glnexus": {
              "description": "scalable gVCF merging and joint variant calling for population sequencing projects.",
              "homepage": "https://github.com/dnanexus-rnd/GLnexus",
              "documentation": "https://github.com/dnanexus-rnd/GLnexus/wiki/Getting-Started",
              "doi": "10.1101/343970",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "gvcfs": {
              "type": "list",
              "description": "Input genomic vcf files",
              "pattern": "*.{gvcf,gvcf.gz,g.vcf,g.vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bcf": {
              "type": "file",
              "description": "merged BCF file",
              "pattern": "*.bcf"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "gnu_sort",
      "path": "modules/nf-core/gnu/sort/meta.yml",
      "type": "module",
      "meta": {
        "name": "GNU_SORT",
        "description": "Writes a sorted concatenation of file/s\n",
        "keywords": [
          "GNU",
          "sort",
          "merge compare"
        ],
        "tools": [
          {
            "sort": {
              "description": "Writes a sorted concatenation of file/s",
              "homepage": "https://github.com/vgl-hub/gfastats",
              "documentation": "https://www.gnu.org/software/coreutils/manual/html_node/sort-invocation.html",
              "licence": [
                "GPL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Draft assembly file",
              "pattern": "*.{txt,bed,interval,genome,bins}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sorted": {
              "type": "file",
              "description": "The sorted txt file generated by sort",
              "pattern": "*.{txt,bed,interval,genome,bins}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@DLBPointon"
        ]
      }
    },
    {
      "name": "goat_taxonsearch",
      "path": "modules/nf-core/goat/taxonsearch/meta.yml",
      "type": "module",
      "meta": {
        "name": "goat_taxonsearch",
        "description": "Query metadata for any taxon across the tree of life.",
        "keywords": [
          "public datasets",
          "ncbi",
          "genomes on a tree"
        ],
        "tools": [
          {
            "goat": {
              "description": "goat-cli is a command line interface to query the\nGenomes on a Tree Open API.\n",
              "homepage": "https://github.com/genomehubs/goat-cli",
              "documentation": "https://github.com/genomehubs/goat-cli/wiki",
              "tool_dev_url": "https://genomehubs.github.io/goat-cli/goat_cli/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "taxon": {
              "type": "val",
              "description": "The taxon to search. An NCBI taxon ID, or the name of a taxon at any rank.\n"
            }
          },
          {
            "taxa_file": {
              "type": "file",
              "description": "A file of NCBI taxonomy ID's (tips) and/or binomial names. Each line\nshould contain a single entry.File size is limited to 500 entries.\n",
              "pattern": "*.txt"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "taxonsearch": {
              "type": "file",
              "description": "TSV file containing search results.",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@alxndrdiaz"
        ]
      }
    },
    {
      "name": "goleft_indexsplit",
      "path": "modules/nf-core/goleft/indexsplit/meta.yml",
      "type": "module",
      "meta": {
        "name": "goleft_indexsplit",
        "description": "Quickly generate evenly sized (by amount of data) regions across a number of bam/cram files",
        "keywords": [
          "bam",
          "bed",
          "cram",
          "index",
          "split"
        ],
        "tools": [
          {
            "goleft": {
              "description": "goleft is a collection of bioinformatics tools distributed under MIT license in a single static binary",
              "homepage": "https://github.com/brentp/goleft",
              "documentation": "https://github.com/brentp/goleft",
              "tool_dev_url": "https://github.com/brentp/goleft",
              "doi": "10.1093/gigascience/gix090",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAI/CRAI file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Reference fasta index file",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Bed file containing split regions",
              "pattern": "*.bed"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "graphmap2_align",
      "path": "modules/nf-core/graphmap2/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "graphmap2_align",
        "description": "A versatile pairwise aligner for genomic and spliced nucleotide sequences",
        "keywords": [
          "align",
          "fasta",
          "fastq",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "graphmap2": {
              "description": "A versatile pairwise aligner for genomic and spliced nucleotide sequences.\n",
              "homepage": "https://github.com/lbcb-sci/graphmap2",
              "documentation": "https://github.com/lbcb-sci/graphmap2#graphmap2---a-highly-sensitive-and-accurate-mapper-for-long-error-prone-reads",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "List of input FASTQ files\nand paired-end data, respectively.\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference database in FASTA format.\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "FASTA index in gmidx.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sam": {
              "type": "file",
              "description": "Alignment in SAM format",
              "pattern": "*.sam"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@yuukiiwa",
          "@drpatelh"
        ]
      }
    },
    {
      "name": "graphmap2_index",
      "path": "modules/nf-core/graphmap2/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "graphmap2_index",
        "description": "A versatile pairwise aligner for genomic and spliced nucleotide sequences",
        "keywords": [
          "index",
          "fasta",
          "reference"
        ],
        "tools": [
          {
            "graphmap2": {
              "description": "A versatile pairwise aligner for genomic and spliced nucleotide sequences.\n",
              "homepage": "https://github.com/lbcb-sci/graphmap2",
              "documentation": "https://github.com/lbcb-sci/graphmap2#graphmap2---a-highly-sensitive-and-accurate-mapper-for-long-error-prone-reads",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Reference database in FASTA format.\n"
            }
          }
        ],
        "output": [
          {
            "gmidx": {
              "type": "file",
              "description": "Graphmap2 fasta index in gmidx format",
              "pattern": "*.gmidx"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@yuukiiwa",
          "@drpatelh"
        ]
      }
    },
    {
      "name": "graphtyper_genotype",
      "path": "modules/nf-core/graphtyper/genotype/meta.yml",
      "type": "module",
      "meta": {
        "name": "graphtyper_genotype",
        "description": "Tools for population-scale genotyping using pangenome graphs.",
        "keywords": [
          "variant",
          "vcf",
          "bam",
          "cram",
          "pangenome"
        ],
        "tools": [
          {
            "graphtyper": {
              "description": "A graph-based variant caller capable of genotyping population-scale short read data sets while incoperating previously discovered variants.",
              "homepage": "https://github.com/DecodeGenetics/graphtyper",
              "documentation": "https://github.com/DecodeGenetics/graphtyper/wiki/User-guide",
              "tool_dev_url": "https://github.com/DecodeGenetics/graphtyper",
              "doi": "10.1038/ng.3964",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file. This is automatically found base on BAM input file name",
              "pattern": "*.{bai}"
            }
          },
          {
            "ref": {
              "type": "file",
              "description": "Reference fasta file",
              "pattern": "*.{fa, fasta, fas}"
            }
          },
          {
            "ref_fai": {
              "type": "file",
              "description": "Reference index file. This is automatically found based on referece input file name.",
              "pattern": "*.{.fai}"
            }
          },
          {
            "region_file": {
              "type": "file",
              "description": "File with a list of chromosome/locations in reference genome to genotype. One region per line in the format <chr>:<start>-<stop>. This or `--region` (in ext.args) must be specified.",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file with genotyped variants",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "VCF index file",
              "pattern": "*.{vcf.gz.tbi}"
            }
          }
        ],
        "authors": [
          "@zachary-foster"
        ]
      }
    },
    {
      "name": "graphtyper_vcfconcatenate",
      "path": "modules/nf-core/graphtyper/vcfconcatenate/meta.yml",
      "type": "module",
      "meta": {
        "name": "graphtyper_vcfconcatenate",
        "description": "Tools for population-scale genotyping using pangenome graphs.",
        "keywords": [
          "combine",
          "concatenate",
          "variant",
          "vcf"
        ],
        "tools": [
          {
            "graphtyper": {
              "description": "A graph-based variant caller capable of genotyping population-scale short read data sets while incoperating previously discovered variants.",
              "homepage": "https://github.com/DecodeGenetics/graphtyper",
              "documentation": "https://github.com/DecodeGenetics/graphtyper/wiki/User-guide",
              "tool_dev_url": "https://github.com/DecodeGenetics/graphtyper",
              "doi": "10.1038/ng.3964",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF files",
              "pattern": "*.{vcf,vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Concatenated VCF file",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Concatenated VCF file index",
              "pattern": "*.{tbi}"
            }
          }
        ],
        "authors": [
          "@zachary-foster"
        ]
      }
    },
    {
      "name": "gridss_gridss",
      "path": "modules/nf-core/gridss/gridss/meta.yml",
      "type": "module",
      "meta": {
        "name": "gridss_gridss",
        "description": "GRIDSS is a module software suite containing tools useful for the detection of genomic rearrangements.",
        "keywords": [
          "gridss",
          "structural variants",
          "bam",
          "cram",
          "vcf"
        ],
        "tools": [
          {
            "gridss": {
              "description": "GRIDSS: the Genomic Rearrangement IDentification Software Suite",
              "documentation": "https://github.com/PapenfussLab/gridss/wiki/GRIDSS-Documentation",
              "tool_dev_url": "https://github.com/PapenfussLab/gridss",
              "doi": "10.1186/s13059-021-02423-x",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "inputs": {
              "type": "file(s)",
              "description": "One or more input BAM/CRAM file(s)",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "OPTIONAL - An assembly BAM file created by the assembly step of Gridss",
              "pattern": "*.bam"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta",
              "pattern": "*.{fa,fna,fasta}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the reference fasta",
              "pattern": "*.fai"
            }
          },
          {
            "bwa_index": {
              "type": "directory",
              "description": "OPTIONAL - The BWA index created from the reference fasta, will be generated by Gridss in the setupreference step"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The called VCF file created by Gridss' call step",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "The assembly BAM file created by Gridss' assembly step",
              "pattern": "*.assembly.bam"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "gsea_gsea",
      "path": "modules/nf-core/gsea/gsea/meta.yml",
      "type": "module",
      "meta": {
        "name": "gsea_gsea",
        "description": "run the Broad Gene Set Enrichment tool in GSEA mode",
        "keywords": [
          "gene set analysis",
          "enrichment",
          "gsea",
          "gene set"
        ],
        "tools": [
          {
            "gsea": {
              "description": "Gene Set Enrichment Analysis (GSEA)",
              "homepage": "http://www.gsea-msigdb.org/gsea/index.jsp",
              "documentation": "https://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/Main_Page",
              "doi": "10.1073/pnas.0506580102",
              "licence": "['BSD-3-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing metadata, at a minimum an id  e.g. [ id:'test' ].\n"
            }
          },
          {
            "gct": {
              "type": "file",
              "description": "GCT file with expression values",
              "pattern": "*.{gct}"
            }
          },
          {
            "cls": {
              "type": "file",
              "description": "CL file with the classes of the samples in the GCT file",
              "pattern": "*.{gct}"
            }
          },
          {
            "gene_sets": {
              "type": "file",
              "description": "GMX or GMT file with gene sets",
              "pattern": "*.{gmx,gmt}"
            }
          },
          {
            "reference": {
              "type": "string",
              "description": "String indicating which of the classes in the cls file should be used\nas the reference level of the comparison.\n"
            }
          },
          {
            "target": {
              "type": "string",
              "description": "String indicating which of the classes in the cls file should be used\nas the target level of the comparison.\n"
            }
          },
          {
            "chip": {
              "type": "file",
              "description": "optional Broad-style chip file mapping identifiers in gct to\nthose in gene_sets\n",
              "pattern": "*.{chip}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing metadata, at a minimum an id e.g. [ id:'test' ]\n"
            }
          },
          {
            "rpt": {
              "type": "file",
              "description": "File containing parameter settings used",
              "pattern": "*.rpt"
            }
          },
          {
            "index_html": {
              "type": "file",
              "description": "Top level report HTML file",
              "pattern": "index.html"
            }
          },
          {
            "heat_map_corr_plot": {
              "type": "file",
              "description": "HTML file combining heatmap and rank correlation plot",
              "pattern": "heat_map_corr_plot.html"
            }
          },
          {
            "report_tsvs_ref": {
              "type": "file",
              "description": "Main TSV results report file for the reference group.",
              "pattern": "gsea_report_for_reference*.tsv"
            }
          },
          {
            "report_htmls_ref": {
              "type": "file",
              "description": "Main HTML results report file for the reference group. sample groups",
              "pattern": "gsea_report_for_reference*.html"
            }
          },
          {
            "report_tsvs_target": {
              "type": "file",
              "description": "Main TSV results report file for the target group.",
              "pattern": "gsea_report_for_target*.tsv"
            }
          },
          {
            "report_htmls_target": {
              "type": "file",
              "description": "Main HTML results report file for the target group.",
              "pattern": "gsea_report_for_target*.html"
            }
          },
          {
            "ranked_gene_list": {
              "type": "file",
              "description": "TSV file with ranked gene list and scores",
              "pattern": "ranked_gene_list*.tsv"
            }
          },
          {
            "gene_set_sizes": {
              "type": "file",
              "description": "TSV file with gene set sizes",
              "pattern": "gene_set_sizes.tsv"
            }
          },
          {
            "butterfly_plot": {
              "type": "file",
              "description": "Butterfly plot with gene rank plotted against score",
              "pattern": "butterfly_plot.png"
            }
          },
          {
            "histogram": {
              "type": "file",
              "description": "Plot showing number of gene sets by enrichment score",
              "pattern": "global_es_histogram.png"
            }
          },
          {
            "heatmap": {
              "type": "file",
              "description": "Heat Map of the top 50 features for each phenotype in test",
              "pattern": "heat_map_1.png"
            }
          },
          {
            "pvalues_vs_nes_plot": {
              "type": "file",
              "description": "Plot showing FDR q-value by normalised enrichment score",
              "pattern": "pvalues_vs_nes_plot"
            }
          },
          {
            "ranked_list_corr": {
              "type": "file",
              "description": "Ranked Gene List Correlation Profile",
              "pattern": "ranked_list_corr_2.png"
            }
          },
          {
            "gene_set_tsv": {
              "type": "list",
              "description": "Where -make_sets is not set to false, TSV files, one file for each gene set, with detail on enrichment for each gene",
              "pattern": "[!gene_set_size|gsea_report|ranked_gene_list]*.tsv"
            }
          },
          {
            "gene_set_html": {
              "type": "list",
              "description": "Where -make_sets is not set to false, HTML files, one file for each gene set, with detail on enrichment for each gene",
              "pattern": "[!gsea_report|heat_map_corr_plot|index|pos_snapshot|neg_snapshot]*.html"
            }
          },
          {
            "gene_set_heatmap": {
              "type": "list",
              "description": "Where -make_sets is not set to false, PNG-format heatmaps, one file for each gene set, showing expression for each gene",
              "pattern": "[!butterfly|enplot|global_es_histogram|gset_rnd_es_dist|heat_map|pvalues_vs_nes_plot|ranked_list_corr]*.png"
            }
          },
          {
            "snapshot": {
              "type": "list",
              "description": "HTML files, one each for positive and negative enrichment, collecting elements of gene_set_enplot",
              "pattern": "*_snapshot*.html"
            }
          },
          {
            "gene_set_enplot": {
              "type": "list",
              "description": "Where -make_sets is not set to false, PNG-format enrichment (barcode) plots, one file for each gene set, showing how genes contribute to enrichment.",
              "pattern": "enplot*.png"
            }
          },
          {
            "gene_set_dist": {
              "type": "list",
              "description": "Where -make_sets is not set to false, PNG-format enrichment score distributions plots, one file for each gene set.",
              "pattern": "gset_rnd_es_dist*.png"
            }
          },
          {
            "archive": {
              "type": "file",
              "description": "Where -zip_report is set, a zip archive containing all outputs",
              "pattern": "*.zip"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "gstama_collapse",
      "path": "modules/nf-core/gstama/collapse/meta.yml",
      "type": "module",
      "meta": {
        "name": "GSTAMA_COLLAPSE",
        "description": "Collapse redundant transcript models in Iso-Seq data.",
        "keywords": [
          "tama_collapse.py",
          "isoseq",
          "nanopore",
          "long-read",
          "transcriptome",
          "gene model",
          "TAMA"
        ],
        "tools": [
          {
            "tama_collapse.py": {
              "description": "Collapse similar gene model",
              "homepage": "https://github.com/sguizard/gs-tama",
              "documentation": "https://github.com/GenomeRIK/tama/wiki",
              "tool_dev_url": "https://github.com/sguizard/gs-tama",
              "doi": "10.1186/s12864-020-07123-7",
              "licence": "GNU GPL3"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "A sorted BAM or sam file of aligned reads",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "A fasta file of the genome used for the mapping",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "a bed12 format file containing the final collapsed version of your transcriptome",
              "pattern": "*.bed"
            }
          },
          {
            "bed_trans_reads": {
              "type": "file",
              "description": "This file uses bed12 format to show the transcript model for each read based on the mapping prior to collapsing. This only contains the reads which were accepted according to the defined thresholds. You can use this file to see if there were any strange occurrences during collapsing. It also contains the relationships between reads and collapsed transcript models. The 1st subfield in the 4th column shows the final transcript ID and the 2nd subfield in the 4th column shows the read ID. If you used no_cap mode for collapsing there may be multiple lines for a single read. This happens when a 5' degraded read can match to multiple 5' longer transcript models.",
              "pattern": "*_trans_read.bed"
            }
          },
          {
            "local_density_error": {
              "type": "file",
              "description": "This file contains the log of filtering for local density error around the splice junctions (\"-lde\")",
              "pattern": "*_local_density_error.txt"
            }
          },
          {
            "polya": {
              "type": "file",
              "description": "This file contains the reads with potential poly A truncation.",
              "pattern": "*_polya.txt"
            }
          },
          {
            "read": {
              "type": "file",
              "description": "This file contains information for all mapped reads from the input SAM/BAM file. It shows both accepted and discarded reads and should match the number of mapped reads in your SAM/BAM file",
              "pattern": "*_read.txt"
            }
          },
          {
            "strand_check": {
              "type": "file",
              "description": "This file shows instances where the sam flag strand information contrasted the GMAP strand information.",
              "pattern": "*_strand_check.txt"
            }
          },
          {
            "trans_report": {
              "type": "file",
              "description": "This file contains collapsing information for each transcript.",
              "pattern": "*_trans_report.txt"
            }
          },
          {
            "varcov": {
              "type": "file",
              "description": "This file contains the coverage information for each variant detected.",
              "pattern": "*_varcov.txt"
            }
          },
          {
            "variants": {
              "type": "file",
              "description": "This file contains the variants called. Variants are only called if 5 or more reads show the variant at a specific locus. If you would like to change the threshold, please make an issue about this in the Github repo.",
              "pattern": "*_variants.txt"
            }
          }
        ],
        "authors": [
          "@sguizard"
        ]
      },
      "pipelines": [
        {
          "name": "isoseq",
          "version": "1.1.4"
        }
      ]
    },
    {
      "name": "gstama_merge",
      "path": "modules/nf-core/gstama/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "gstama_merge",
        "description": "Merge multiple transcriptomes while maintaining source information.",
        "keywords": [
          "gstama",
          "gstama/merge",
          "long-read",
          "isoseq",
          "nanopore",
          "tama",
          "trancriptome",
          "annotation"
        ],
        "tools": [
          {
            "gstama": {
              "description": "Gene-Switch Transcriptome Annotation by Modular Algorithms",
              "homepage": "https://github.com/sguizard/gs-tama",
              "documentation": "https://github.com/GenomeRIK/tama/wiki",
              "tool_dev_url": "https://github.com/sguizard/gs-tama",
              "doi": "10.1186/s12864-020-07123-7",
              "licence": [
                "GPL v3 License"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "bed12 file generated by TAMA collapse",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "This is the main merged annotation file. Transcripts are coloured according to the source support for each model. Sources are numbered based on the order supplied in the input filelist file. For example the first file named in the filelist file would have its transcripts coloured in red. If a transcript has multiple sources the colour is shown as magenta.",
              "pattern": "*.bed"
            }
          },
          {
            "gene_report": {
              "type": "file",
              "description": "This contains a report of the genes from the merged file. \"num_clusters\" refers to the number of source transcripts that were used to make this gene model. \"num_final_trans\" refers to the number of transcripts in the final gene model.",
              "pattern": "*_gene_report.txt"
            }
          },
          {
            "merge": {
              "type": "file",
              "description": "This contains a bed12 format file which shows the coordinates of each input transcript matched to the merged transcript ID. I used the \"txt\" extension even though it is a bed file just to avoid confusion with the main bed file. You can use this file to map the final merged transcript models to their pre-merged supporting transcripts. The 1st subfield in the 4th column shows the final merged transcript ID while the 2nd subfield shows the pre-merged transcript ID with source prefix.",
              "pattern": "*_merge.txt"
            }
          },
          {
            "trans_report": {
              "type": "file",
              "description": "This contains the source information for each merged transcript.",
              "pattern": "*_trans_report.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sguizard"
        ]
      },
      "pipelines": [
        {
          "name": "isoseq",
          "version": "1.1.4"
        }
      ]
    },
    {
      "name": "gstama_polyacleanup",
      "path": "modules/nf-core/gstama/polyacleanup/meta.yml",
      "type": "module",
      "meta": {
        "name": "gstama_polyacleanup",
        "description": "Helper script, remove remaining polyA sequences from Full Length Non Chimeric reads (Pacbio isoseq3)",
        "keywords": [
          "gstama",
          "gstama/polyacleanup",
          "long-read",
          "isoseq",
          "tama",
          "trancriptome",
          "annotation"
        ],
        "tools": [
          {
            "gstama": {
              "description": "Gene-Switch Transcriptome Annotation by Modular Algorithms",
              "homepage": "https://github.com/sguizard/gs-tama",
              "documentation": "https://github.com/GenomeRIK/tama/wiki",
              "tool_dev_url": "https://github.com/sguizard/gs-tama",
              "doi": "10.1186/s12864-020-07123-7",
              "licence": [
                "GPL v3 License"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Full Length Non Chimeric reads in fasta format",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The Full Length Non Chimeric reads clened from remaining polyA tails. The sequences are in FASTA format compressed with gzip.",
              "pattern": "*_tama.fa.gz"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "A text file describing the number of polyA tails removed and their length. Compressed with gzip.",
              "pattern": "*_tama_polya_flnc_report.txt.gz"
            }
          },
          {
            "tails": {
              "type": "file",
              "description": "A gzip compressed FASTA file of trimmed polyA tails.",
              "pattern": "*_tama_tails.fa.gz"
            }
          }
        ],
        "authors": [
          "@sguizard"
        ]
      },
      "pipelines": [
        {
          "name": "isoseq",
          "version": "1.1.4"
        }
      ]
    },
    {
      "name": "gtdbtk_classifywf",
      "path": "modules/nf-core/gtdbtk/classifywf/meta.yml",
      "type": "module",
      "meta": {
        "name": "gtdbtk_classifywf",
        "description": "GTDB-Tk is a software toolkit for assigning objective taxonomic classifications to bacterial and archaeal genomes based on the Genome Database Taxonomy GTDB.",
        "keywords": [
          "GTDB taxonomy",
          "taxonomic classification",
          "metagenomics",
          "classification",
          "genome taxonomy database",
          "bacteria",
          "archaea"
        ],
        "tools": [
          {
            "gtdbtk": {
              "description": "GTDB-Tk is a software toolkit for assigning objective taxonomic classifications to bacterial and archaeal genomes based on the Genome Database Taxonomy GTDB.",
              "homepage": "https://ecogenomics.github.io/GTDBTk/",
              "documentation": "https://ecogenomics.github.io/GTDBTk/",
              "tool_dev_url": "https://github.com/Ecogenomics/GTDBTk",
              "doi": "10.1093/bioinformatics/btz848",
              "licence": [
                "GNU General Public v3 (GPL v3)"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false,  assembler:'spades' ]\n"
            }
          },
          {
            "bins": {
              "type": "file",
              "description": "The binned fasta files from the assembler",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "database": {
              "type": "file",
              "description": "The local copy of the taxonomic database used by GTDB-tk (unzipped copy)",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "A TSV summary file for the classification",
              "pattern": "*.{summary.tsv}"
            }
          },
          {
            "tree": {
              "type": "file",
              "description": "NJ or UPGMA tree in Newick format produced from a multiple sequence alignment",
              "pattern": "*.{classify.tree.gz}"
            }
          },
          {
            "markers": {
              "type": "file",
              "description": "A TSV summary file lineage markers used for the classification.",
              "pattern": "*.{markers_summary.tsv}"
            }
          },
          {
            "msa": {
              "type": "file",
              "description": "Multiple sequence alignments file.",
              "pattern": "*.{msa.fasta.gz}"
            }
          },
          {
            "user_msa": {
              "type": "file",
              "description": "Multiple sequence alignments file for the user-provided files.",
              "pattern": "*.{user_msa.fasta.gz}"
            }
          },
          {
            "filtered": {
              "type": "file",
              "description": "A list of genomes with an insufficient number of amino acids in MSA..",
              "pattern": "*.{filtered.tsv}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "GTDB-tk log file",
              "pattern": "*.{log}"
            }
          },
          {
            "warnings": {
              "type": "file",
              "description": "GTDB-tk warnings log file",
              "pattern": "*.{warnings.log}"
            }
          },
          {
            "failed": {
              "type": "file",
              "description": "A TSV summary of the genomes which GTDB-tk failed to classify.",
              "pattern": "*.{failed_genomes.tsv}"
            }
          }
        ],
        "authors": [
          "@skrakau",
          "@abhi18av"
        ]
      }
    },
    {
      "name": "gubbins",
      "path": "modules/nf-core/gubbins/meta.yml",
      "type": "module",
      "meta": {
        "name": "gubbins",
        "description": "Gubbins (Genealogies Unbiased By recomBinations In Nucleotide Sequences) is an algorithm that iteratively identifies loci containing elevated densities of base substitutions while concurrently constructing a phylogeny based on the putative point mutations outside of these regions.",
        "licence": [
          "GPL-2.0-only"
        ],
        "keywords": [
          "recombination",
          "alignment"
        ],
        "tools": [
          {
            "gubbins": {
              "description": "Rapid phylogenetic analysis of large samples of recombinant bacterial whole genome sequences using Gubbins.",
              "homepage": "https://sanger-pathogens.github.io/gubbins/",
              "documentation": "https://sanger-pathogens.github.io/gubbins/"
            }
          }
        ],
        "input": [
          {
            "alignment": {
              "type": "file",
              "description": "fasta alignment file",
              "pattern": "*.{fasta,fas,fa,aln}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Filtered variant alignment in fasta format",
              "pattern": "*.{fasta}"
            }
          },
          {
            "embl_predicted": {
              "type": "file",
              "description": "Recombination predictions in embl format",
              "pattern": "*.{recombination_predictions.embl}"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "Recombination predictions in gff format",
              "pattern": "*.{gff}"
            }
          },
          {
            "embl_branch": {
              "type": "file",
              "description": "Branch base reconstruction",
              "pattern": "*.{branch_base_reconstruction.embl}"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "SNP distribution",
              "pattern": "*.{vcf}"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Per branch statistics",
              "pattern": "*.{csv}"
            }
          },
          {
            "phylip": {
              "type": "file",
              "description": "Filtered variant alignment in phylip format",
              "pattern": "*.{phylip}"
            }
          },
          {
            "tree": {
              "type": "file",
              "description": "Recombination removed RAxML phylogenetic tree",
              "pattern": "*.{final_tree.tre}"
            }
          },
          {
            "tree_labelled": {
              "type": "file",
              "description": "Recombination removed RAxML phylogenetic tree (nodes labelled)",
              "pattern": "*.{node_labelled.final_tree.tre}"
            }
          }
        ],
        "authors": [
          "@avantonder"
        ]
      }
    },
    {
      "name": "gunc_downloaddb",
      "path": "modules/nf-core/gunc/downloaddb/meta.yml",
      "type": "module",
      "meta": {
        "name": "gunc_downloaddb",
        "description": "Download database for GUNC detection of Chimerism and Contamination in Prokaryotic Genomes",
        "keywords": [
          "download",
          "prokaryote",
          "assembly",
          "genome",
          "quality control",
          "chimeras"
        ],
        "tools": [
          {
            "gunc": {
              "description": "Python package for detection of chimerism and contamination in prokaryotic genomes.",
              "homepage": "https://grp-bork.embl-community.io/gunc/",
              "documentation": "https://grp-bork.embl-community.io/gunc/",
              "tool_dev_url": "https://github.com/grp-bork/gunc",
              "doi": "10.1186/s13059-021-02393-0",
              "licence": [
                "GNU General Public v3 or later (GPL v3+)"
              ]
            }
          }
        ],
        "input": [
          {
            "db_name": {
              "type": "string",
              "description": "Which database to download. Options: progenomes or gtdb",
              "pattern": "progenomes|gtdb"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "GUNC database file",
              "pattern": "*.dmnd"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "gunc_mergecheckm",
      "path": "modules/nf-core/gunc/mergecheckm/meta.yml",
      "type": "module",
      "meta": {
        "name": "gunc_mergecheckm",
        "description": "Merging of CheckM and GUNC results in one summary table",
        "keywords": [
          "gunc",
          "checkm",
          "summary",
          "prokaryote",
          "assembly",
          "genome",
          "quality control",
          "chimeras"
        ],
        "tools": [
          {
            "gunc": {
              "description": "Python package for detection of chimerism and contamination in prokaryotic genomes.",
              "homepage": "https://grp-bork.embl-community.io/gunc/",
              "documentation": "https://grp-bork.embl-community.io/gunc/",
              "tool_dev_url": "https://github.com/grp-bork/gunc",
              "doi": "10.1186/s13059-021-02393-0",
              "licence": [
                "GNU General Public v3 or later (GPL v3+)"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gunc_file": {
              "type": "file",
              "description": "Path of a gunc_scores.tsv file (mandatory)",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "checkm_file": {
              "type": "file",
              "description": "Output TSV from CheckM qa (ideally with -o 2 extended format)  (mandatory)",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Merged checkm/gunc results in TSV format",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "gunc_run",
      "path": "modules/nf-core/gunc/run/meta.yml",
      "type": "module",
      "meta": {
        "name": "gunc_run",
        "description": "Detection of Chimerism and Contamination in Prokaryotic Genomes",
        "keywords": [
          "prokaryote",
          "assembly",
          "genome",
          "quality control",
          "chimeras"
        ],
        "tools": [
          {
            "gunc": {
              "description": "Python package for detection of chimerism and contamination in prokaryotic genomes.",
              "homepage": "https://grp-bork.embl-community.io/gunc/",
              "documentation": "https://grp-bork.embl-community.io/gunc/",
              "tool_dev_url": "https://github.com/grp-bork/gunc",
              "doi": "10.1186/s13059-021-02393-0",
              "licence": [
                "GNU General Public v3 or later (GPL v3+)"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file containing contig (bins)",
              "pattern": "*.fa"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "GUNC database file",
              "pattern": "*.dmnd"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "maxcss_levels_tsv": {
              "type": "file",
              "description": "Output file with scores for a taxonomic level with the highest CSS score",
              "pattern": "*.tsv"
            }
          },
          {
            "all_levels_tsv": {
              "type": "file",
              "description": "Optional output file with results for each taxonomic level",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "gunzip",
      "path": "modules/nf-core/gunzip/meta.yml",
      "type": "module",
      "meta": {
        "name": "gunzip",
        "description": "Compresses and decompresses files.",
        "keywords": [
          "gunzip",
          "compression",
          "decompression"
        ],
        "tools": [
          {
            "gunzip": {
              "description": "gzip is a file format and a software application used for file compression and decompression.\n",
              "documentation": "https://www.gnu.org/software/gzip/manual/gzip.html",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Optional groovy Map containing meta information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "archive": {
              "type": "file",
              "description": "File to be compressed/uncompressed",
              "pattern": "*.*"
            }
          }
        ],
        "output": [
          {
            "gunzip": {
              "type": "file",
              "description": "Compressed/uncompressed file",
              "pattern": "*.*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "epitopeprediction",
          "version": "2.2.1"
        },
        {
          "name": "funcscan",
          "version": "1.1.2"
        },
        {
          "name": "genomeannotator",
          "version": "dev"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "hlatyping",
          "version": "2.0.0"
        },
        {
          "name": "isoseq",
          "version": "1.1.4"
        },
        {
          "name": "mag",
          "version": "2.3.2"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "proteinfold",
          "version": "1.0.0"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "scrnaseq",
          "version": "2.3.2"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "gvcftools_extractvariants",
      "path": "modules/nf-core/gvcftools/extractvariants/meta.yml",
      "type": "module",
      "meta": {
        "name": "gvcftools_extractvariants",
        "description": "Removes all non-variant blocks from a gVCF file to produce a smaller variant-only VCF file.",
        "keywords": [
          "gvcftools",
          "extract_variants",
          "extractvariants",
          "gvcf",
          "vcf"
        ],
        "tools": [
          {
            "gvcftools": {
              "description": "gvcftools is a package of small utilities for creating and analyzing gVCF files",
              "homepage": "https://sites.google.com/site/gvcftools/home",
              "documentation": "https://sites.google.com/site/gvcftools/home/configuration-and-analysis",
              "tool_dev_url": "https://github.com/sequencing/gvcftools",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gvcf": {
              "type": "file",
              "description": "GVCF file",
              "pattern": "*.{g.vcf,gvcf}.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Converted variant-only VCF file",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "hamronization_abricate",
      "path": "modules/nf-core/hamronization/abricate/meta.yml",
      "type": "module",
      "meta": {
        "name": "hamronization_abricate",
        "description": "Tool to convert and summarize ABRicate outputs using the hAMRonization specification",
        "keywords": [
          "amr",
          "antimicrobial resistance",
          "reporting",
          "abricate"
        ],
        "tools": [
          {
            "hamronization": {
              "description": "Tool to convert and summarize AMR gene detection outputs using the hAMRonization specification",
              "homepage": "https://github.com/pha4ge/hAMRonization/",
              "documentation": "https://github.com/pha4ge/hAMRonization/",
              "tool_dev_url": "https://github.com/pha4ge/hAMRonization",
              "licence": "['GNU Lesser General Public v3 (LGPL v3)']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Output TSV or CSV file from ABRicate",
              "pattern": "*.{csv,tsv}"
            }
          },
          {
            "format": {
              "type": "value",
              "description": "Type of report file to be produced",
              "pattern": "tsv|json"
            }
          },
          {
            "software_version": {
              "type": "value",
              "description": "Version of ABRicate used",
              "pattern": "[0-9].[0-9].[0-9]"
            }
          },
          {
            "reference_db_version": {
              "type": "value",
              "description": "Database version of ABRicate used",
              "pattern": "[0-9][0-9][0-9][0-9]-[A-Z][a-z][a-z]-[0-9][0-9]"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "hAMRonised report in JSON format",
              "pattern": "*.json"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "hAMRonised report in TSV format",
              "pattern": "*.json"
            }
          }
        ],
        "authors": [
          "@jasmezz"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "hamronization_amrfinderplus",
      "path": "modules/nf-core/hamronization/amrfinderplus/meta.yml",
      "type": "module",
      "meta": {
        "name": "hamronization_amrfinderplus",
        "description": "Tool to convert and summarize AMRfinderPlus outputs using the hAMRonization specification.",
        "keywords": [
          "amr",
          "antimicrobial resistance",
          "arg",
          "antimicrobial resistance genes",
          "reporting",
          "amrfinderplus"
        ],
        "tools": [
          {
            "hamronization": {
              "description": "Tool to convert and summarize AMR gene detection outputs using the hAMRonization specification",
              "homepage": "https://github.com/pha4ge/hAMRonization/",
              "documentation": "https://github.com/pha4ge/hAMRonization/",
              "tool_dev_url": "https://github.com/pha4ge/hAMRonization",
              "licence": "['GNU Lesser General Public v3 (LGPL v3)']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Output .tsv file from AMRfinderPlus",
              "pattern": "*.tsv"
            }
          },
          {
            "format": {
              "type": "value",
              "description": "Type of report file to be produced",
              "pattern": "tsv|json"
            }
          },
          {
            "software_version": {
              "type": "value",
              "description": "Version of AMRfinder used",
              "pattern": "[0-9].[0-9].[0-9]"
            }
          },
          {
            "reference_db_version": {
              "type": "value",
              "description": "Database version of ncbi_AMRfinder used",
              "pattern": "[0-9]-[0-9]-[0-9].[0-9]"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "hAMRonised report in JSON format",
              "pattern": "*.json"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "hAMRonised report in TSV format",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@louperelo"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "hamronization_deeparg",
      "path": "modules/nf-core/hamronization/deeparg/meta.yml",
      "type": "module",
      "meta": {
        "name": "hamronization_deeparg",
        "description": "Tool to convert and summarize DeepARG outputs using the hAMRonization specification",
        "keywords": [
          "amr",
          "antimicrobial resistance",
          "reporting",
          "deeparg"
        ],
        "tools": [
          {
            "hamronization": {
              "description": "Tool to convert and summarize AMR gene detection outputs using the hAMRonization specification",
              "homepage": "https://github.com/pha4ge/hAMRonization/",
              "documentation": "https://github.com/pha4ge/hAMRonization/",
              "tool_dev_url": "https://github.com/pha4ge/hAMRonization",
              "licence": [
                "GNU Lesser General Public v3 (LGPL v3)"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Output .mapping.ARG file from DeepARG",
              "pattern": "*.mapping.ARG"
            }
          },
          {
            "format": {
              "type": "value",
              "description": "Type of report file to be produced",
              "pattern": "tsv|json"
            }
          },
          {
            "software_version": {
              "type": "value",
              "description": "Version of DeepARG used",
              "pattern": "[0-9].[0-9].[0-9]"
            }
          },
          {
            "reference_db_version": {
              "type": "value",
              "description": "Database version of DeepARG used",
              "pattern": "[0-9]"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "hAMRonised report in JSON format",
              "pattern": "*.json"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "hAMRonised report in TSV format",
              "pattern": "*.json"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "hamronization_fargene",
      "path": "modules/nf-core/hamronization/fargene/meta.yml",
      "type": "module",
      "meta": {
        "name": "hamronization_fargene",
        "description": "Tool to convert and summarize fARGene outputs using the hAMRonization specification",
        "keywords": [
          "amr",
          "antimicrobial resistance",
          "arg",
          "antimicrobial resistance genes",
          "reporting",
          "fARGene"
        ],
        "tools": [
          {
            "hamronization": {
              "description": "Tool to convert and summarize AMR gene detection outputs using the hAMRonization specification",
              "homepage": "https://github.com/pha4ge/hAMRonization/",
              "documentation": "https://github.com/pha4ge/hAMRonization/",
              "tool_dev_url": "https://github.com/pha4ge/hAMRonization",
              "licence": "['GNU Lesser General Public v3 (LGPL v3)']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Output .txt file from fARGene",
              "pattern": "*.txt"
            }
          },
          {
            "format": {
              "type": "value",
              "description": "Type of report file to be produced",
              "pattern": "tsv|json"
            }
          },
          {
            "software_version": {
              "type": "value",
              "description": "Version of fARGene used",
              "pattern": "[0-9].[0-9].[0-9]"
            }
          },
          {
            "reference_db_version": {
              "type": "value",
              "description": "Database version of fARGene used",
              "pattern": "[0-9].[0-9].[0-9]"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "hAMRonised report in JSON format",
              "pattern": "*.json"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "hAMRonised report in TSV format",
              "pattern": "*.json"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "hamronization_rgi",
      "path": "modules/nf-core/hamronization/rgi/meta.yml",
      "type": "module",
      "meta": {
        "name": "hamronization_rgi",
        "description": "Tool to convert and summarize RGI outputs using the hAMRonization specification.",
        "keywords": [
          "amr",
          "antimicrobial resistance",
          "arg",
          "antimicrobial resistance genes",
          "reporting",
          "rgi"
        ],
        "tools": [
          {
            "hamronization": {
              "description": "Tool to convert and summarize AMR gene detection outputs using the hAMRonization specification",
              "homepage": "https://github.com/pha4ge/hAMRonization/",
              "documentation": "https://github.com/pha4ge/hAMRonization/",
              "tool_dev_url": "https://github.com/pha4ge/hAMRonization",
              "licence": "['GNU Lesser General Public v3 (LGPL v3)']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Output .txt file from RGI",
              "pattern": "*.txt"
            }
          },
          {
            "format": {
              "type": "value",
              "description": "Type of report file to be produced",
              "pattern": "tsv|json"
            }
          },
          {
            "software_version": {
              "type": "value",
              "description": "Version of DeepARG used",
              "pattern": "[0-9].[0-9].[0-9]"
            }
          },
          {
            "reference_db_version": {
              "type": "value",
              "description": "Database version of DeepARG used",
              "pattern": "[0-9].[0-9].[0-9]"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "hAMRonised report in JSON format",
              "pattern": "*.json"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "hAMRonised report in TSV format",
              "pattern": "*.json"
            }
          }
        ],
        "authors": [
          "@louperelo"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "hamronization_summarize",
      "path": "modules/nf-core/hamronization/summarize/meta.yml",
      "type": "module",
      "meta": {
        "name": "hamronization_summarize",
        "description": "Tool to summarize and combine all hAMRonization reports into a single file",
        "keywords": [
          "amr",
          "antimicrobial resistance",
          "reporting"
        ],
        "tools": [
          {
            "hamronization": {
              "description": "Tool to convert and summarize AMR gene detection outputs using the hAMRonization specification",
              "homepage": "https://github.com/pha4ge/hAMRonization/",
              "documentation": "https://github.com/pha4ge/hAMRonization/",
              "tool_dev_url": "https://github.com/pha4ge/hAMRonization",
              "licence": [
                "GNU Lesser General Public v3 (LGPL v3)"
              ]
            }
          }
        ],
        "input": [
          {
            "reports": {
              "type": "file",
              "description": "List of multiple hAMRonization reports in either JSON or TSV format",
              "pattern": "*.{json,tsv}"
            }
          },
          {
            "format": {
              "type": "value",
              "description": "Type of final combined report file to be produced",
              "pattern": "tsv|json|interactive"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "hAMRonised summary in JSON format",
              "pattern": "*.json"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "hAMRonised summary in TSV format",
              "pattern": "*.json"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "hAMRonised summary in HTML format",
              "pattern": "*.html"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "hapibd",
      "path": "modules/nf-core/hapibd/meta.yml",
      "type": "module",
      "meta": {
        "name": "hapibd",
        "description": "The hap-ibd program detects identity-by-descent (IBD) segments and homozygosity-by-descent (HBD) segments in phased genotype data. The hap-ibd program can analyze data sets with hundreds of thousands of samples.",
        "keywords": [
          "ibd",
          "hbd",
          "beagle"
        ],
        "tools": [
          {
            "hapibd": {
              "description": "Hap-ibd Detects identity-by-descent (IBD) segments and homozygosity-by-descent (HBD) segments in phased genotype data.",
              "homepage": "https://github.com/browning-lab/hap-ibd/blob/master/README.md",
              "documentation": "https://github.com/browning-lab/hap-ibd/blob/master/README.md",
              "doi": "10.1016/j.ajhg.2020.02.010",
              "licence": "['Apache-2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing cohort information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "phased VCF file with a GT FORMAT subfield with no missing alleles",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "map": {
              "type": "file",
              "description": "genetic map with cM units in PLINK format",
              "pattern": "*.{map,map.gz,map.zip}"
            }
          },
          {
            "exclude": {
              "type": "file",
              "description": "text file containing samples one sample per line to be excluded from the analysis",
              "pattern": "*.*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing cohort information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "hbd": {
              "type": "file",
              "description": "contains HBD segments within individuals",
              "pattern": "*.hbd.gz"
            }
          },
          {
            "ibd": {
              "type": "file",
              "description": "contains IBD segments shared between individuals",
              "pattern": "*.ibd.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "contains a summary of the analysis which includes the analysis parameters the number of markers the number of samples the number of output HBD and IBD segments and the mean number of HBD and IBD segments per sample",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@ashotmarg"
        ]
      }
    },
    {
      "name": "haplocheck",
      "path": "modules/nf-core/haplocheck/meta.yml",
      "type": "module",
      "meta": {
        "name": "haplocheck",
        "description": "Haplocheck detects contamination patterns in mtDNA AND WGS sequencing studies by analyzing\nthe mitochondrial DNA. Haplocheck also works as a proxy tool for nDNA studies and provides\nusers a graphical report to investigate the contamination further. Internally, it uses the\nHaplogrep tool, that supports rCRS and RSRS mitochondrial versions.\n",
        "keywords": [
          "mitochondrial",
          "mtDNA",
          "contamination"
        ],
        "tools": [
          {
            "haplocheck": {
              "description": "Detects in-sample contamination in mtDNA or WGS sequencing studies by analyzing the mitochondrial content.",
              "homepage": "https://github.com/genepi/haplocheck",
              "documentation": "https://github.com/genepi/haplocheck",
              "tool_dev_url": "https://github.com/genepi/haplocheck",
              "doi": "10.1101/gr.256545.119",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Raw report in txt format",
              "pattern": "*.{txt}"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "Haplocheck HTML report",
              "pattern": "*.{html}"
            }
          }
        ],
        "authors": [
          "@lmtani"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "haplogrep2_classify",
      "path": "modules/nf-core/haplogrep2/classify/meta.yml",
      "type": "module",
      "meta": {
        "name": "haplogrep2_classify",
        "description": "classification into haplogroups",
        "keywords": [
          "haplogroups."
        ],
        "tools": [
          {
            "haplogrep2": {
              "description": "A tool for mtDNA haplogroup classification.",
              "homepage": "https://github.com/seppinho/haplogrep-cmd",
              "documentation": "https://github.com/seppinho/haplogrep-cmd",
              "tool_dev_url": "https://github.com/seppinho/haplogrep-cmd",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "inputfile": {
              "type": "file",
              "description": "valid options are hsd, vcf, or fasta files",
              "pattern": "*.{vcf,vcf.gz,fasta,hsd}"
            }
          },
          {
            "format": {
              "type": "string",
              "description": "either \"vcf\", \"fasta\" or \"hsd\""
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "text file with classification information",
              "pattern": "*.{txt}"
            }
          }
        ],
        "authors": [
          "@lucpen"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "happy_happy",
      "path": "modules/nf-core/happy/happy/meta.yml",
      "type": "module",
      "meta": {
        "name": "happy_happy",
        "description": "Hap.py is a tool to compare diploid genotypes at haplotype level. Rather than comparing VCF records row by row, hap.py will generate and match alternate sequences in a superlocus. A superlocus is a small region of the genome (sized between 1 and around 1000 bp) that contains one or more variants.",
        "keywords": [
          "happy",
          "benchmark",
          "haplotype",
          "validation"
        ],
        "tools": [
          {
            "happy": {
              "description": "Haplotype VCF comparison tools",
              "homepage": "https://www.illumina.com/products/by-type/informatics-products/basespace-sequence-hub/apps/hap-py-benchmarking.html",
              "documentation": "https://github.com/Illumina/hap.py",
              "tool_dev_url": "https://github.com/Illumina/hap.py",
              "licence": "['BSD-2-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "query_vcf": {
              "type": "file",
              "description": "VCF/GVCF file to query",
              "pattern": "*.{gvcf,vcf}.gz"
            }
          },
          {
            "truth_vcf": {
              "type": "file",
              "description": "gold standard VCF file",
              "pattern": "*.{gvcf,vcf}.gz"
            }
          },
          {
            "regions_bed": {
              "type": "file",
              "description": "Sparse regions to restrict the analysis to",
              "pattern": "*.bed"
            }
          },
          {
            "targets_bed": {
              "type": "file",
              "description": "Dense regions to restrict the analysis to",
              "pattern": "*.bed"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file of the reference genome",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the reference FASTA",
              "pattern": "*.fai"
            }
          },
          {
            "false_positives_bed": {
              "type": "file",
              "description": "False positive / confident call regions. Calls outside these regions will be labelled as UNK.",
              "pattern": "*.{bed,bed.gz}"
            }
          },
          {
            "stratification_tsv": {
              "type": "file",
              "description": "Stratification file list in TSV format",
              "pattern": "*.tsv"
            }
          },
          {
            "stratification_beds": {
              "type": "file(s)",
              "description": "One or more BED files used for stratification (these should be referenced in the stratification TSV)",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "summary_csv": {
              "type": "file",
              "description": "A CSV file containing the summary of the benchmarking",
              "pattern": "*.summary.csv"
            }
          },
          {
            "roc_all_csv": {
              "type": "file",
              "description": "A CSV file containing ROC values for all variants",
              "pattern": "*.roc.all.csv.gz"
            }
          },
          {
            "roc_indel_locations_csv": {
              "type": "file",
              "description": "A CSV file containing ROC values for all indels",
              "pattern": "*.roc.Locations.INDEL.csv.gz"
            }
          },
          {
            "roc_indel_locations_pass_csv": {
              "type": "file",
              "description": "A CSV file containing ROC values for all indels that passed all filters",
              "pattern": "*.roc.Locations.INDEL.PASS.csv.gz"
            }
          },
          {
            "roc_snp_locations_csv": {
              "type": "file",
              "description": "A CSV file containing ROC values for all SNPs",
              "pattern": "*.roc.Locations.SNP.csv.gz"
            }
          },
          {
            "roc_snp_locations_pass_csv": {
              "type": "file",
              "description": "A CSV file containing ROC values for all SNPs that passed all filters",
              "pattern": "*.roc.Locations.SNP.PASS.csv.gz"
            }
          },
          {
            "extended_csv": {
              "type": "file",
              "description": "A CSV file containing extended info of the benchmarking",
              "pattern": "*.extended.csv"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "A JSON file containing the run info",
              "pattern": "*.runinfo.json"
            }
          },
          {
            "runinfo": {
              "type": "file",
              "description": "A JSON file containing the benchmarking metrics",
              "pattern": "*.metrics.json.gz"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "An annotated VCF",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "The index of the annotated VCF",
              "pattern": "*.tbi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "happy_prepy",
      "path": "modules/nf-core/happy/prepy/meta.yml",
      "type": "module",
      "meta": {
        "name": "happy_prepy",
        "description": "Pre.py is a preprocessing tool made to preprocess VCF files for Hap.py",
        "keywords": [
          "happy",
          "benchmark",
          "haplotype"
        ],
        "tools": [
          {
            "happy": {
              "description": "Haplotype VCF comparison tools",
              "homepage": "https://www.illumina.com/products/by-type/informatics-products/basespace-sequence-hub/apps/hap-py-benchmarking.html",
              "documentation": "https://github.com/Illumina/hap.py",
              "tool_dev_url": "https://github.com/Illumina/hap.py",
              "licence": "['BSD-2-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file to preprocess",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file",
              "pattern": "*.bed"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file of the reference genome",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the reference FASTA",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "A preprocessed VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "hicap",
      "path": "modules/nf-core/hicap/meta.yml",
      "type": "module",
      "meta": {
        "name": "hicap",
        "description": "Identify cap locus serotype and structure in your Haemophilus influenzae assemblies",
        "keywords": [
          "fasta",
          "serotype",
          "Haemophilus influenzae"
        ],
        "tools": [
          {
            "hicap": {
              "description": "In silico typing of the H. influenzae capsule locus",
              "homepage": "https://github.com/scwatts/hicap",
              "documentation": "https://github.com/scwatts/hicap",
              "tool_dev_url": "https://github.com/scwatts/hicap",
              "doi": "10.1128/JCM.00190-19",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA formatted assembly file",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz}"
            }
          },
          {
            "database_dir": {
              "type": "directory",
              "description": "Optional - Directory containing locus database",
              "pattern": "*/*"
            }
          },
          {
            "model_fp": {
              "type": "file",
              "description": "Optional - Prodigal model to use for gene prediction",
              "pattern": "*.{bin}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "gbk": {
              "type": "file",
              "description": "GenBank file and cap locus annotations",
              "pattern": "*.gbk"
            }
          },
          {
            "svg": {
              "type": "file",
              "description": "Visualization of annotated cap locus",
              "pattern": "*.svg"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Detailed summary of cap locus annotations",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "hifiasm",
      "path": "modules/nf-core/hifiasm/meta.yml",
      "type": "module",
      "meta": {
        "name": "hifiasm",
        "description": "Whole-genome assembly using PacBio HiFi reads",
        "keywords": [
          "genome assembly",
          "haplotype resolution",
          "phasing",
          "PacBio",
          "HiFi",
          "long reads"
        ],
        "tools": [
          {
            "hifiasm": {
              "description": "Haplotype-resolved assembler for accurate HiFi reads",
              "homepage": "https://github.com/chhylp123/hifiasm",
              "documentation": "https://github.com/chhylp123/hifiasm",
              "tool_dev_url": "https://github.com/chhylp123/hifiasm",
              "doi": "10.1038/s41592-020-01056-5",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "FASTQ file with PacBio HiFi reads",
              "pattern": "*.{fastq}"
            }
          },
          {
            "paternal_kmer_dump": {
              "type": "file",
              "description": "Yak kmer dump file for paternal reads (can be used for haplotype resolution). It can have an arbitrary extension."
            }
          },
          {
            "maternal_kmer_dump": {
              "type": "file",
              "description": "Yak kmer dump file for maternal reads (can be used for haplotype resolution). It can have an arbitrary extension."
            }
          },
          {
            "use_parental_kmers": {
              "type": "logical",
              "description": "A flag (true or false) signalling if the module should use the paternal and maternal kmer dumps."
            }
          },
          {
            "hic_read1": {
              "type": "file",
              "description": "Hi-C data Forward reads."
            }
          },
          {
            "hic_read2": {
              "type": "file",
              "description": "Hi-C data Reverse reads."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "raw_unitigs": {
              "type": "file",
              "description": "Raw unitigs",
              "pattern": "*.r_utg.gfa"
            }
          },
          {
            "processed_unitigs": {
              "type": "file",
              "description": "Processed unitigs",
              "pattern": "*.p_utg.gfa"
            }
          },
          {
            "primary_contigs": {
              "type": "file",
              "description": "Primary contigs",
              "pattern": "*.asm.p_ctg.gfa"
            }
          },
          {
            "alternate_contigs": {
              "type": "file",
              "description": "Alternative contigs",
              "pattern": "*.asm.a_ctg.gfa"
            }
          },
          {
            "paternal_contigs": {
              "type": "file",
              "description": "Paternal contigs",
              "pattern": "*.hap1.p_ctg.gfa"
            }
          },
          {
            "maternal_contigs": {
              "type": "file",
              "description": "Maternal contigs",
              "pattern": "*.hap2.p_ctg.gfa"
            }
          },
          {
            "corrected_reads": {
              "type": "file",
              "description": "Corrected reads",
              "pattern": "*.ec.bin"
            }
          },
          {
            "source_overlaps": {
              "type": "file",
              "description": "Source overlaps",
              "pattern": "*.ovlp.source.bin"
            }
          },
          {
            "reverse_overlaps": {
              "type": "file",
              "description": "Reverse overlaps",
              "pattern": "*.ovlp.reverse.bin"
            }
          }
        ],
        "authors": [
          "@sidorov-si",
          "@scorreard"
        ]
      }
    },
    {
      "name": "hisat2_align",
      "path": "modules/nf-core/hisat2/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "hisat2_align",
        "description": "Align RNA-Seq reads to a reference with HISAT2",
        "keywords": [
          "align",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "hisat2": {
              "description": "HISAT2 is a fast and sensitive alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes as well as to a single reference genome.",
              "homepage": "https://daehwankimlab.github.io/hisat2/",
              "documentation": "https://daehwankimlab.github.io/hisat2/manual/",
              "doi": "10.1038/s41587-019-0201-4",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "HISAT2 genome index file",
              "pattern": "*.ht2"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "splicesites": {
              "type": "file",
              "description": "Splices sites in gtf file",
              "pattern": "*.{txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "Aligment log",
              "pattern": "*.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ntoda03",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "hisat2_build",
      "path": "modules/nf-core/hisat2/build/meta.yml",
      "type": "module",
      "meta": {
        "name": "hisat2_build",
        "description": "Builds HISAT2 index for reference genome",
        "keywords": [
          "build",
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "hisat2": {
              "description": "HISAT2 is a fast and sensitive alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes as well as to a single reference genome.",
              "homepage": "https://daehwankimlab.github.io/hisat2/",
              "documentation": "https://daehwankimlab.github.io/hisat2/manual/",
              "doi": "10.1038/s41587-019-0201-4",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference fasta file",
              "pattern": "*.{fa,fasta,fna}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "Reference gtf annotation file",
              "pattern": "*.{gtf}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "splicesites": {
              "type": "file",
              "description": "Splices sites in gtf file",
              "pattern": "*.{txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "HISAT2 genome index file",
              "pattern": "*.ht2"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ntoda03"
        ]
      },
      "pipelines": [
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "hisat2_extractsplicesites",
      "path": "modules/nf-core/hisat2/extractsplicesites/meta.yml",
      "type": "module",
      "meta": {
        "name": "hisat2_extractsplicesites",
        "description": "Extracts splicing sites from a gtf files",
        "keywords": [
          "splicing",
          "gtf",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "hisat2": {
              "description": "HISAT2 is a fast and sensitive alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes as well as to a single reference genome.",
              "homepage": "https://daehwankimlab.github.io/hisat2/",
              "documentation": "https://daehwankimlab.github.io/hisat2/manual/",
              "doi": "10.1038/s41587-019-0201-4",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "Reference gtf annotation file",
              "pattern": "*.{gtf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "splicesites": {
              "type": "file",
              "description": "Splices sites in gtf file",
              "pattern": "*.{splice_sites.txt}"
            }
          }
        ],
        "authors": [
          "@ntoda03",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "hlala_preparegraph",
      "path": "modules/nf-core/hlala/preparegraph/meta.yml",
      "type": "module",
      "meta": {
        "name": "hlala_preparegraph",
        "description": "Pre-compute the graph index structure.",
        "keywords": [
          "hla",
          "hlala",
          "hla_typing",
          "hlala_typing"
        ],
        "tools": [
          {
            "hlala": {
              "description": "HLA typing from short and long reads",
              "homepage": "https://github.com/DiltheyLab/HLA-LA",
              "documentation": "https://github.com/DiltheyLab/HLA-LA#running-hlala",
              "tool_dev_url": "https://github.com/DiltheyLab/HLA-LA",
              "doi": "10.1093/bioinformatics/btz235",
              "licence": "['GPL']"
            }
          }
        ],
        "input": [
          {
            "graph": {
              "type": "directory",
              "description": "PRG graph directory"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "folder": {
              "type": "directory",
              "description": "Directory containing indexed graph"
            }
          }
        ],
        "authors": [
          "@mapo9"
        ]
      }
    },
    {
      "name": "hlala_typing",
      "path": "modules/nf-core/hlala/typing/meta.yml",
      "type": "module",
      "meta": {
        "name": "hlala_typing",
        "description": "Performs HLA typing based on a population reference graph and employs a new linear projection method to align reads to the graph.",
        "keywords": [
          "hla",
          "hlala",
          "hla_typing",
          "hlala_typing"
        ],
        "tools": [
          {
            "hlala": {
              "description": "HLA typing from short and long reads",
              "homepage": "https://github.com/DiltheyLab/HLA-LA",
              "documentation": "https://github.com/DiltheyLab/HLA-LA#running-hlala",
              "tool_dev_url": "https://github.com/DiltheyLab/HLA-LA",
              "doi": "10.1093/bioinformatics/btz235",
              "licence": "['GPL']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "graph": {
              "type": "directory",
              "description": "Path to prepared graph with hla-la --acton prepareGraph"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "folder": {
              "type": "directory",
              "description": "Folder containing the HLA typing output"
            }
          }
        ],
        "authors": [
          "@mapo9"
        ]
      }
    },
    {
      "name": "hmmcopy_gccounter",
      "path": "modules/nf-core/hmmcopy/gccounter/meta.yml",
      "type": "module",
      "meta": {
        "name": "hmmcopy_gccounter",
        "description": "gcCounter function from HMMcopy utilities, used to generate GC content in non-overlapping windows from a fasta reference",
        "keywords": [
          "hmmcopy",
          "gccounter",
          "cnv"
        ],
        "tools": [
          {
            "hmmcopy": {
              "description": "C++ based programs for analyzing BAM files and preparing read counts -- used with bioconductor-hmmcopy",
              "homepage": "https://github.com/shahcompbio/hmmcopy_utils",
              "documentation": "https://github.com/shahcompbio/hmmcopy_utils",
              "tool_dev_url": "https://github.com/shahcompbio/hmmcopy_utils",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "wig": {
              "type": "file",
              "description": "wig file containing gc content of each window of the genome",
              "pattern": "*.wig"
            }
          }
        ],
        "authors": [
          "@sppearce",
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "hmmcopy_generatemap",
      "path": "modules/nf-core/hmmcopy/generatemap/meta.yml",
      "type": "module",
      "meta": {
        "name": "hmmcopy_generatemap",
        "description": "Perl script (generateMap.pl) generates the mappability of a genome given a certain size of reads, for input to hmmcopy mapcounter. Takes a very long time on large genomes, is not parallelised at all.",
        "keywords": [
          "hmmcopy",
          "mapcounter",
          "mappability"
        ],
        "tools": [
          {
            "hmmcopy": {
              "description": "C++ based programs for analyzing BAM files and preparing read counts -- used with bioconductor-hmmcopy",
              "homepage": "https://github.com/shahcompbio/hmmcopy_utils",
              "documentation": "https://github.com/shahcompbio/hmmcopy_utils",
              "tool_dev_url": "https://github.com/shahcompbio/hmmcopy_utils",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bigwig": {
              "type": "file",
              "description": "bigwig file containing the mappability of the genome",
              "pattern": "*.bw"
            }
          }
        ],
        "authors": [
          "@sppearce",
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "hmmcopy_mapcounter",
      "path": "modules/nf-core/hmmcopy/mapcounter/meta.yml",
      "type": "module",
      "meta": {
        "name": "hmmcopy_mapcounter",
        "description": "mapCounter function from HMMcopy utilities, used to generate mappability in non-overlapping windows from a bigwig file",
        "keywords": [
          "hmmcopy",
          "mapcounter",
          "cnv"
        ],
        "tools": [
          {
            "hmmcopy": {
              "description": "C++ based programs for analyzing BAM files and preparing read counts -- used with bioconductor-hmmcopy",
              "homepage": "https://github.com/shahcompbio/hmmcopy_utils",
              "documentation": "https://github.com/shahcompbio/hmmcopy_utils",
              "tool_dev_url": "https://github.com/shahcompbio/hmmcopy_utils",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bigwig": {
              "type": "file",
              "description": "BigWig file with the mappability score of the genome, for instance made with generateMap function.",
              "pattern": "*.wig"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "wig": {
              "type": "file",
              "description": "wig file containing mappability of each window of the genome",
              "pattern": "*.wig"
            }
          }
        ],
        "authors": [
          "@sppearce"
        ]
      }
    },
    {
      "name": "hmmcopy_readcounter",
      "path": "modules/nf-core/hmmcopy/readcounter/meta.yml",
      "type": "module",
      "meta": {
        "name": "hmmcopy_readcounter",
        "description": "readCounter function from HMMcopy utilities, used to generate read in windows",
        "keywords": [
          "hmmcopy",
          "readcounter",
          "cnv"
        ],
        "tools": [
          {
            "hmmcopy": {
              "description": "C++ based programs for analyzing BAM files and preparing read counts -- used with bioconductor-hmmcopy",
              "homepage": "https://github.com/shahcompbio/hmmcopy_utils",
              "documentation": "https://github.com/shahcompbio/hmmcopy_utils",
              "tool_dev_url": "https://github.com/shahcompbio/hmmcopy_utils",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "wig": {
              "type": "file",
              "description": "A wig file with the number of reads lying within each window in each chromosome",
              "pattern": "*.wig"
            }
          }
        ],
        "authors": [
          "@sppearce"
        ]
      }
    },
    {
      "name": "hmmer_eslalimask",
      "path": "modules/nf-core/hmmer/eslalimask/meta.yml",
      "type": "module",
      "meta": {
        "name": "hmmer_eslalimask",
        "description": "Mask multiple sequence alignments",
        "keywords": [
          "hmmer",
          "alignment",
          "mask"
        ],
        "tools": [
          {
            "hmmer": {
              "description": "Biosequence analysis using profile hidden Markov models",
              "homepage": "http://hmmer.org/",
              "documentation": "http://hmmer.org/documentation.html",
              "doi": "10.1371/journal.pcbi.1002195",
              "licence": [
                "BSD-3-Clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "unmaskedaln": {
              "type": "file",
              "description": "multiple sequence alignment, Stockholm or other formats",
              "pattern": "*"
            }
          },
          {
            "fmask_rf": {
              "type": "val",
              "description": "Flag to output optional file with final mask of non-gap RF len"
            }
          },
          {
            "fmask_all": {
              "type": "val",
              "description": "Flag to output optional file with final mask of full aln len"
            }
          },
          {
            "gmask_rf": {
              "type": "val",
              "description": "Flag to output optional file gap-based 0/1 mask of non-gap RF len"
            }
          },
          {
            "gmask_all": {
              "type": "val",
              "description": "Flag to output optional file gap-based 0/1 mask of full aln len"
            }
          },
          {
            "pmask_rf": {
              "type": "val",
              "description": "Flag to output optional file with PP-based 0/1 mask of non-gap RF len"
            }
          },
          {
            "pmask_all": {
              "type": "val",
              "description": "Flag to output optional file with PP-based 0/1 mask of full aln len"
            }
          },
          {
            "maskfile": {
              "type": "file",
              "description": "mask file, see program documentation",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "maskedaln": {
              "type": "file",
              "description": "Masked alignment in gzipped Stockholm format",
              "pattern": "*.sthlm.gz"
            }
          },
          {
            "fmask_rf": {
              "type": "file",
              "description": "File with final mask of non-gap RF len",
              "pattern": "*.fmask-rf.gz"
            }
          },
          {
            "fmask_all": {
              "type": "file",
              "description": "File with final mask of full aln len",
              "pattern": "*.fmask-all.gz"
            }
          },
          {
            "gmask_rf": {
              "type": "file",
              "description": "File with gap-based 0/1 mask of non-gap RF len",
              "pattern": "*.gmask-rf.gz"
            }
          },
          {
            "gmask_all": {
              "type": "file",
              "description": "File with gap-based 0/1 mask of full aln len",
              "pattern": "*.gmask-all.gz"
            }
          },
          {
            "pmask_rf": {
              "type": "file",
              "description": "File with PP-based 0/1 mask of non-gap RF len",
              "pattern": "*.pmask-rf.gz"
            }
          },
          {
            "pmask_all": {
              "type": "file",
              "description": "File with PP-based 0/1 mask of full aln len",
              "pattern": "*.pmask-all.gz"
            }
          }
        ],
        "authors": [
          "@erikrikarddaniel"
        ]
      },
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        }
      ]
    },
    {
      "name": "hmmer_eslreformat",
      "path": "modules/nf-core/hmmer/eslreformat/meta.yml",
      "type": "module",
      "meta": {
        "name": "hmmer_eslreformat",
        "description": "reformats sequence files, see HMMER documentation for details. The module requires that the format is specified in ext.args in a config file, and that this comes last. See the tools help for possible values.",
        "keywords": [
          "sort"
        ],
        "tools": [
          {
            "hmmer": {
              "description": "Biosequence analysis using profile hidden Markov models",
              "homepage": "http://hmmer.org/",
              "documentation": "http://hmmer.org/documentation.html",
              "doi": "10.1371/journal.pcbi.1002195",
              "licence": [
                "BSD-3-Clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "seqfile": {
              "type": "file",
              "description": "Sequences, aligned or not, in any supported format",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "seqreformated": {
              "type": "file",
              "description": "Reformated sequence file",
              "pattern": "*.*.gz"
            }
          }
        ],
        "authors": [
          "@erikrikarddaniel"
        ]
      },
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        }
      ]
    },
    {
      "name": "hmmer_hmmalign",
      "path": "modules/nf-core/hmmer/hmmalign/meta.yml",
      "type": "module",
      "meta": {
        "name": "hmmer_hmmalign",
        "description": "hmmalign from the HMMER suite aligns a number of sequences to an HMM profile",
        "keywords": [
          "alignment"
        ],
        "tools": [
          {
            "hmmer": {
              "description": "Biosequence analysis using profile hidden Markov models",
              "homepage": "http://hmmer.org/",
              "documentation": "http://hmmer.org/documentation.html",
              "doi": "10.1371/journal.pcbi.1002195",
              "licence": [
                "BSD-3-Clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Amino acid or nucleotide gzipped compressed fasta file",
              "pattern": "*.{fna.gz,faa.gz,fasta.gz,fa.gz}"
            }
          },
          {
            "hmm": {
              "type": "file",
              "description": "A gzipped HMM file",
              "pattern": "*.hmm.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sthlm": {
              "type": "file",
              "description": "Multiple alignment in gzipped Stockholm format",
              "pattern": "*.sthlm.gz"
            }
          }
        ],
        "authors": [
          "@erikrikarddaniel",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        }
      ]
    },
    {
      "name": "hmmer_hmmbuild",
      "path": "modules/nf-core/hmmer/hmmbuild/meta.yml",
      "type": "module",
      "meta": {
        "name": "hmmer_hmmbuild",
        "description": "create an hmm profile from a multiple sequence alignment",
        "keywords": [
          "search",
          "hidden Markov model",
          "HMM",
          "hmmer",
          "hmmsearch"
        ],
        "tools": [
          {
            "hmmer": {
              "description": "Biosequence analysis using profile hidden Markov models",
              "homepage": "http://hmmer.org",
              "documentation": "http://hmmer.org/documentation.html",
              "tool_dev_url": "https://github.com/EddyRivasLab/hmmer",
              "doi": "10.1371/journal.pcbi.1002195",
              "licence": "['BSD']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "alignment": {
              "type": "file",
              "description": "multiple sequence alignment in fasta, clustal, stockholm or phylip format",
              "pattern": "*"
            }
          },
          {
            "mxfile": {
              "type": "file",
              "description": "read substitution score matrix, for use when building profiles from single sequences (--singlemx option)",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "hmm": {
              "type": "file",
              "description": "Gzipped HMM file",
              "pattern": "*.{hmm.gz}"
            }
          }
        ],
        "authors": [
          "@erikrikarddaniel"
        ]
      },
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        }
      ]
    },
    {
      "name": "hmmer_hmmsearch",
      "path": "modules/nf-core/hmmer/hmmsearch/meta.yml",
      "type": "module",
      "meta": {
        "name": "hmmer_hmmsearch",
        "description": "search profile(s) against a sequence database",
        "keywords": [
          "hidden Markov model",
          "HMM",
          "hmmer",
          "hmmsearch"
        ],
        "tools": [
          {
            "hmmer": {
              "description": "Biosequence analysis using profile hidden Markov models",
              "homepage": "http://hmmer.org/",
              "documentation": "http://hmmer.org/documentation.html",
              "tool_dev_url": "https://github.com/EddyRivasLab/hmmer",
              "doi": "10.1371/journal.pcbi.1002195",
              "licence": [
                "BSD"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "hmmfile": {
              "type": "file",
              "description": "One or more HMM profiles created with hmmbuild",
              "pattern": "*.{hmm,hmm.gz}"
            }
          },
          {
            "seqdb": {
              "type": "file",
              "description": "Database of sequences in FASTA format",
              "pattern": "*.{fasta,fna,faa,fa,fasta.gz,fna.gz,faa.gz,fa.gz}"
            }
          },
          {
            "write_align": {
              "type": "val",
              "description": "Flag to write optional alignment output. Specify with 'true' to output"
            }
          },
          {
            "write_target": {
              "type": "val",
              "description": "Flag to write optional per target summary . Specify with 'true' to output"
            }
          },
          {
            "write_domain": {
              "type": "val",
              "description": "Flag to write optional per domain summary. Specify with 'true' to output"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "Human readable output summarizing hmmsearch results",
              "pattern": "*.{txt.gz}"
            }
          },
          {
            "alignments": {
              "type": "file",
              "description": "Optional multiple sequence alignment (MSA) in Stockholm format",
              "pattern": "*.{sto.gz}"
            }
          },
          {
            "target_summary": {
              "type": "file",
              "description": "Optional tabular (space-delimited) summary of per-target output",
              "pattern": "*.{tbl.gz}"
            }
          },
          {
            "domain_summary": {
              "type": "file",
              "description": "Optional tabular (space-delimited) summary of per-domain output",
              "pattern": "*.{domtbl.gz}"
            }
          }
        ],
        "authors": [
          "@Midnighter"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "hmtnote_annotate",
      "path": "modules/nf-core/hmtnote/annotate/meta.yml",
      "type": "module",
      "meta": {
        "name": "hmtnote_annotate",
        "description": "Human mitochondrial variants annotation using HmtVar. Contains .plk file with annotation, so can be run offline",
        "keywords": [
          "hmtnote",
          "mitochondria",
          "annotation"
        ],
        "tools": [
          {
            "hmtnote": {
              "description": "Human mitochondrial variants annotation using HmtVar.",
              "homepage": "https://github.com/robertopreste/HmtNote",
              "documentation": "https://hmtnote.readthedocs.io/en/latest/usage.html",
              "doi": "10.1101/600619",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "vcf file",
              "pattern": "*.vcf"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "annotated vcf",
              "pattern": "*_annotated.vcf"
            }
          }
        ],
        "authors": [
          "@sysbiocoder"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "homer_annotatepeaks",
      "path": "modules/nf-core/homer/annotatepeaks/meta.yml",
      "type": "module",
      "meta": {
        "name": "homer_annotatepeaks",
        "description": "Annotate peaks with HOMER suite",
        "keywords": [
          "annotations",
          "peaks",
          "bed"
        ],
        "tools": [
          {
            "homer": {
              "description": "HOMER (Hypergeometric Optimization of Motif EnRichment) is a suite of tools for Motif Discovery and next-gen sequencing analysis.\n",
              "documentation": "http://homer.ucsd.edu/homer/",
              "doi": "10.1016/j.molcel.2010.05.004.",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "peaks": {
              "type": "file",
              "description": "The peak files in bed format",
              "pattern": "*.bed"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Fasta file of reference genome",
              "pattern": "*.fasta"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "GTF file of reference genome",
              "pattern": "*.gtf"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "annotated_peaks": {
              "type": "file",
              "description": "The annotated peaks",
              "pattern": "*annotatePeaks.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "homer_findpeaks",
      "path": "modules/nf-core/homer/findpeaks/meta.yml",
      "type": "module",
      "meta": {
        "name": "homer_findpeaks",
        "description": "Find peaks with HOMER suite",
        "keywords": [
          "annotation",
          "peaks",
          "enrichment"
        ],
        "tools": [
          {
            "homer": {
              "description": "HOMER (Hypergeometric Optimization of Motif EnRichment) is a suite of tools for Motif Discovery and next-gen sequencing analysis.\n",
              "homepage": "http://homer.ucsd.edu/homer/index.html",
              "documentation": "http://homer.ucsd.edu/homer/",
              "tool_dev_url": "http://homer.ucsd.edu/homer/ngs/peaks.html",
              "doi": "10.1016/j.molcel.2010.05.004.",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tagDir": {
              "type": "directory",
              "description": "The 'Tag Directory'",
              "pattern": "tagDir"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "peaks": {
              "type": "file",
              "description": "The found peaks",
              "pattern": "*.peaks.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@EMiller88"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        }
      ]
    },
    {
      "name": "homer_maketagdirectory",
      "path": "modules/nf-core/homer/maketagdirectory/meta.yml",
      "type": "module",
      "meta": {
        "name": "homer_maketagdirectory",
        "description": "Create a tag directory with the HOMER suite",
        "keywords": [
          "peaks",
          "bed",
          "bam",
          "sam"
        ],
        "tools": [
          {
            "homer": {
              "description": "HOMER (Hypergeometric Optimization of Motif EnRichment) is a suite of tools for Motif Discovery and next-gen sequencing analysis.\n",
              "documentation": "http://homer.ucsd.edu/homer/",
              "doi": "10.1016/j.molcel.2010.05.004.",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          },
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          },
          {
            "DESeq2": {
              "description": "Differential gene expression analysis based on the negative binomial distribution\n",
              "homepage": "https://bioconductor.org/packages/DESeq2",
              "documentation": "https://bioconductor.org/packages/DESeq2",
              "tool_dev_url": "https://github.com/mikelove/DESeq2",
              "doi": "10.18129/B9.bioc.DESeq2",
              "licence": [
                "LGPL-3.0-or-later"
              ]
            }
          },
          {
            "edgeR": {
              "description": "Empirical Analysis of Digital Gene Expression Data in R\n",
              "homepage": "https://bioinf.wehi.edu.au/edgeR",
              "documentation": "https://bioconductor.org/packages/edgeR",
              "tool_dev_url": "https://git.bioconductor.org/packages/edgeR",
              "doi": "10.18129/B9.bioc.edgeR",
              "licence": [
                "GPL >=2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/BED/SAM file",
              "pattern": "*.{bam,bed,sam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Fasta file of reference genome",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tagdir": {
              "type": "directory",
              "description": "The \"Tag Directory\"",
              "pattern": "*_tagdir"
            }
          },
          {
            "taginfo": {
              "type": "directory",
              "description": "The tagInfo.txt included to ensure there's proper output",
              "pattern": "*_tagdir/tagInfo.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@EMiller88"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        }
      ]
    },
    {
      "name": "homer_makeucscfile",
      "path": "modules/nf-core/homer/makeucscfile/meta.yml",
      "type": "module",
      "meta": {
        "name": "homer_makeucscfile",
        "description": "Create a UCSC bed graph with the HOMER suite",
        "keywords": [
          "peaks",
          "bed",
          "bedGraph"
        ],
        "tools": [
          {
            "homer": {
              "description": "HOMER (Hypergeometric Optimization of Motif EnRichment) is a suite of tools for Motif Discovery and next-gen sequencing analysis.\n",
              "documentation": "http://homer.ucsd.edu/homer/",
              "doi": "10.1016/j.molcel.2010.05.004.",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tagDir": {
              "type": "directory",
              "description": "The 'Tag Directory'",
              "pattern": "tagDir"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bedGraph": {
              "type": "file",
              "description": "The UCSC bed graph",
              "pattern": "*.bedGraph.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@EMiller88"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        }
      ]
    },
    {
      "name": "homer_pos2bed",
      "path": "modules/nf-core/homer/pos2bed/meta.yml",
      "type": "module",
      "meta": {
        "name": "homer_pos2bed",
        "description": "Coverting from HOMER peak to BED file formats",
        "keywords": [
          "peaks",
          "bed",
          "pos"
        ],
        "tools": [
          {
            "homer": {
              "description": "HOMER (Hypergeometric Optimization of Motif EnRichment) is a suite of tools for Motif Discovery and next-gen sequencing analysis.\n",
              "homepage": "http://homer.ucsd.edu/homer/index.html",
              "documentation": "http://homer.ucsd.edu/homer/",
              "tool_dev_url": "http://homer.ucsd.edu/homer/ngs/miscellaneous.html",
              "doi": "10.1016/j.molcel.2010.05.004.",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tagDir": {
              "type": "directory",
              "description": "The 'Tag Directory'",
              "pattern": "tagDir"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file",
              "pattern": "*.bed"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Emiller88"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        }
      ]
    },
    {
      "name": "hpsuissero",
      "path": "modules/nf-core/hpsuissero/meta.yml",
      "type": "module",
      "meta": {
        "name": "hpsuissero",
        "description": "Serotype prediction of Haemophilus parasuis assemblies",
        "keywords": [
          "bacteria",
          "fasta",
          "haemophilus"
        ],
        "tools": [
          {
            "hpsuissero": {
              "description": "Rapid Haemophilus parasuis serotyping pipeline for Nanpore data",
              "homepage": "https://github.com/jimmyliu1326/HpsuisSero",
              "documentation": "https://github.com/jimmyliu1326/HpsuisSero",
              "tool_dev_url": "https://github.com/jimmyliu1326/HpsuisSero",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Assembly in FASTA format",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz,faa,faa.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab-delimited serotype prediction",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "ichorcna_createpon",
      "path": "modules/nf-core/ichorcna/createpon/meta.yml",
      "type": "module",
      "meta": {
        "name": "ichorcna_createpon",
        "description": "ichorCNA is an R package for calculating copy number alteration from (low-pass) whole genome sequencing, particularly for use in cell-free DNA. This module generates a panel of normals",
        "keywords": [
          "ichorcna",
          "cnv",
          "cna",
          "cfDNA",
          "wgs",
          "panel_of_normals"
        ],
        "tools": [
          {
            "ichorcna": {
              "description": "Estimating tumor fraction in cell-free DNA from ultra-low-pass whole genome sequencing.",
              "homepage": "https://github.com/broadinstitute/ichorCNA",
              "documentation": "https://github.com/broadinstitute/ichorCNA/wiki",
              "tool_dev_url": "https://github.com/broadinstitute/ichorCNA",
              "doi": "10.1038/s41467-017-00965-y",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "wigs": {
              "type": "file",
              "description": "Any number of hmmcopy/readCounter processed .wig files giving the number of reads in the sample, in each genomic window. These will be averaged over to generate the panel of normals.",
              "pattern": "*.{wig}"
            }
          },
          {
            "gc_wig": {
              "type": "file",
              "description": "hmmcopy/gcCounter processed .wig file giving the gc content in the reference fasta, in each genomic window",
              "pattern": "*.{wig}"
            }
          },
          {
            "map_wig": {
              "type": "file",
              "description": "hmmcopy/mapCounter processed .wig file giving the mapability in the reference fasta, in each genomic window",
              "pattern": "*.{wig}"
            }
          },
          {
            "centromere": {
              "type": "file",
              "description": "Text file giving centromere locations of each genome, to exclude these windows",
              "pattern": "*.{txt}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "rds": {
              "type": "file",
              "description": "R data file (.rds) containing panel of normals data, medians of each bin.",
              "pattern": "*.rds"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Text file containing panel of normals data, medians of each bin.",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@sppearce"
        ]
      }
    },
    {
      "name": "ichorcna_run",
      "path": "modules/nf-core/ichorcna/run/meta.yml",
      "type": "module",
      "meta": {
        "name": "ichorcna_run",
        "description": "ichorCNA is an R package for calculating copy number alteration from (low-pass) whole genome sequencing, particularly for use in cell-free DNA",
        "keywords": [
          "ichorcna",
          "cnv",
          "cna",
          "cfDNA",
          "wgs"
        ],
        "tools": [
          {
            "ichorcna": {
              "description": "Estimating tumor fraction in cell-free DNA from ultra-low-pass whole genome sequencing.",
              "homepage": "https://github.com/broadinstitute/ichorCNA",
              "documentation": "https://github.com/broadinstitute/ichorCNA/wiki",
              "tool_dev_url": "https://github.com/broadinstitute/ichorCNA",
              "doi": "10.1038/s41467-017-00965-y",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "wig": {
              "type": "file",
              "description": "hmmcopy/readCounter processed .wig file giving the number of reads in the sample, in each genomic window",
              "pattern": "*.{wig}"
            }
          },
          {
            "gc_wig": {
              "type": "file",
              "description": "hmmcopy/gcCounter processed .wig file giving the gc content in the reference fasta, in each genomic window",
              "pattern": "*.{wig}"
            }
          },
          {
            "map_wig": {
              "type": "file",
              "description": "hmmcopy/mapCounter processed .wig file giving the mapability in the reference fasta, in each genomic window",
              "pattern": "*.{wig}"
            }
          },
          {
            "panel_of_normals": {
              "type": "file",
              "description": "Panel of normals data, generated by calling ichorCNA on a set of normal samples with the same window size etc.",
              "pattern": "*.{rds}"
            }
          },
          {
            "centromere": {
              "type": "file",
              "description": "Text file giving centromere locations of each genome, to exclude these windows",
              "pattern": "*.{txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "cna_seg": {
              "type": "file",
              "description": "Predicted copy number variation per segment",
              "pattern": "*.{cng.seg}"
            }
          },
          {
            "ichorcna_params": {
              "type": "file",
              "description": "A text file showing the values that ichorCNA has estimated for tumour fraction, ploidy etc",
              "pattern": "*.{params.txt}"
            }
          },
          {
            "genome_plot": {
              "type": "file",
              "description": "A plot with the best-fit genome-wide CNV data",
              "pattern": "*.{genomeWide.pdf}"
            }
          }
        ],
        "authors": [
          "@sppearce"
        ]
      }
    },
    {
      "name": "icountmini_peaks",
      "path": "modules/nf-core/icountmini/peaks/meta.yml",
      "type": "module",
      "meta": {
        "name": "icountmini_peaks",
        "description": "Runs iCount peaks on a BED file of crosslinks",
        "keywords": [
          "iCLIP",
          "bed",
          "genomics"
        ],
        "tools": [
          {
            "icount": {
              "description": "Computational pipeline for analysis of iCLIP data",
              "homepage": "https://github.com/ulelab/iCount-Mini",
              "documentation": "https://github.com/ulelab/iCount-Mini",
              "tool_dev_url": "https://github.com/ulelab/iCount-Mini",
              "doi": "10.1038/nsmb.1838",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file of crosslinks",
              "pattern": "*.{bed}"
            }
          },
          {
            "sigxls": {
              "type": "file",
              "description": "TSV file of sigxls from iCount sigxls",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "peaks": {
              "type": "file",
              "description": "Crosslinks deemed significant by iCount",
              "pattern": "*.{bed.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@marc-jones",
          "@chris-cheshire",
          "@charlotteanne"
        ]
      }
    },
    {
      "name": "icountmini_segment",
      "path": "modules/nf-core/icountmini/segment/meta.yml",
      "type": "module",
      "meta": {
        "name": "icountmini_segment",
        "description": "Formats a GTF file for use with iCount sigxls",
        "keywords": [
          "iCLIP",
          "gtf",
          "genomics"
        ],
        "tools": [
          {
            "icount": {
              "description": "Computational pipeline for analysis of iCLIP data",
              "homepage": "https://github.com/ulelab/iCount-Mini",
              "documentation": "https://github.com/ulelab/iCount-Mini",
              "tool_dev_url": "https://github.com/ulelab/iCount-Mini",
              "doi": "10.1038/nsmb.1838",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "A GTF file to use for the segmentation",
              "pattern": "*.{gtf}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "FAI file corresponding to the reference sequence",
              "pattern": "*.{fai}"
            }
          }
        ],
        "output": [
          {
            "gtf": {
              "type": "file",
              "description": "Segmented GTF file for use with iCount sigxls",
              "pattern": "*.{gtf}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@marc-jones",
          "@chris-cheshire",
          "@charlotteanne"
        ]
      }
    },
    {
      "name": "icountmini_sigxls",
      "path": "modules/nf-core/icountmini/sigxls/meta.yml",
      "type": "module",
      "meta": {
        "name": "icountmini_sigxls",
        "description": "Runs iCount sigxls on a BED file of crosslinks",
        "keywords": [
          "CLIP",
          "iCLIP",
          "bed",
          "genomics"
        ],
        "tools": [
          {
            "icount": {
              "description": "Computational pipeline for analysis of iCLIP data",
              "homepage": "https://github.com/ulelab/iCount-Mini",
              "documentation": "https://github.com/ulelab/iCount-Mini",
              "tool_dev_url": "https://github.com/ulelab/iCount-Mini",
              "doi": "10.1038/nsmb.1838",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file of crosslinks",
              "pattern": "*.{bam,bam.gz}"
            }
          },
          {
            "segmentation": {
              "type": "file",
              "description": "A iCount segmentation file",
              "pattern": "*.{gtf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "peaks": {
              "type": "file",
              "description": "Crosslinks deemed significant by iCount",
              "pattern": "*.{bed.gz}"
            }
          },
          {
            "scores": {
              "type": "file",
              "description": "Crosslink scores calculated by iCount",
              "pattern": "*.{tsv}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@marc-jones",
          "@chris-cheshire",
          "@charlotteanne"
        ]
      }
    },
    {
      "name": "icountmini_summary",
      "path": "modules/nf-core/icountmini/summary/meta.yml",
      "type": "module",
      "meta": {
        "name": "icountmini_summary",
        "description": "Report proportion of cross-link events/sites on each region type.",
        "keywords": [
          "iCLIP",
          "gtf",
          "genomics"
        ],
        "tools": [
          {
            "icount": {
              "description": "Computational pipeline for analysis of iCLIP data",
              "homepage": "https://icount.readthedocs.io/en/latest/",
              "documentation": "https://icount.readthedocs.io/en/latest/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file of crosslinks"
            }
          },
          {
            "segmentation": {
              "type": "file",
              "description": "A iCount segmentation file",
              "pattern": "*.{gtf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "summary_type": {
              "type": "file",
              "description": "Summary type output stats file",
              "pattern": "*summary_type.tsv"
            }
          },
          {
            "summary_subtype": {
              "type": "file",
              "description": "Summary subtype output stats file",
              "pattern": "*summary_subtype.tsv"
            }
          },
          {
            "summary_gene": {
              "type": "file",
              "description": "Summary gene output stats file",
              "pattern": "*summary_gene.tsv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@marc-jones",
          "@chris-cheshire",
          "@charlotteanne"
        ]
      }
    },
    {
      "name": "idr",
      "path": "modules/nf-core/idr/meta.yml",
      "type": "module",
      "meta": {
        "name": "idr",
        "description": "Measures reproducibility of ChIP-seq, ATAC-seq peaks using IDR (Irreproducible\nDiscovery Rate)\n",
        "keywords": [
          "IDR",
          "peaks",
          "ChIP-seq",
          "ATAC-seq"
        ],
        "tools": [
          {
            "idr": {
              "description": "The IDR (Irreproducible Discovery Rate) framework is a uniﬁed approach\nto measure the reproducibility of ﬁndings identiﬁed from replicate\nexperiments and provide highly stable thresholds based on reproducibility.\n",
              "tool_dev_url": "https://github.com/kundajelab/idr",
              "licence": [
                "GPL v2"
              ]
            }
          }
        ],
        "input": [
          {
            "peaks": {
              "type": "tuple of two files",
              "description": "BED, narrowPeak or broadPeak files of replicates",
              "pattern": "*"
            }
          },
          {
            "peak_type": {
              "type": "value",
              "description": "Type of peak file",
              "pattern": "{narrowPeak,broadPeak,bed}"
            }
          },
          {
            "prefix": {
              "type": "value",
              "description": "Prefix for output files"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "idr": {
              "type": "file",
              "description": "Text file containing IDR values",
              "pattern": "*.{txt}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file",
              "pattern": "*.{txt}"
            }
          },
          {
            "png": {
              "type": "file",
              "description": "Plot generated by idr",
              "pattern": "*{.png}"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@joseespinosa"
        ]
      }
    },
    {
      "name": "igv_js",
      "path": "modules/nf-core/igv/js/meta.yml",
      "type": "module",
      "meta": {
        "name": "igv_js",
        "description": "igv.js is an embeddable interactive genome visualization component",
        "keywords": [
          "igv",
          "igv.js",
          "js",
          "genome browser"
        ],
        "tools": [
          {
            "igv": {
              "description": "Create an embeddable interactive genome browser component.\nOutput files are expected to be present in the same directory as teh genome browser html file.\nTo visualise it, files have to be served. Check the documentation at:\n  https://github.com/igvteam/igv-webapp for an example and\n  https://github.com/igvteam/igv.js/wiki/Data-Server-Requirements for server requirements\n",
              "homepage": "https://github.com/igvteam/igv.js",
              "documentation": "https://github.com/igvteam/igv.js/wiki",
              "tool_dev_url": "https://github.com/igvteam/igv.js",
              "doi": "10.1093/bioinformatics/btac830",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "alignment": {
              "type": "file",
              "description": "Sorted BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Index of sorted BAM/CRAM file",
              "pattern": "*.{bai,crai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "browser": {
              "type": "file",
              "description": "Genome browser HTML file",
              "pattern": "*.{html}"
            }
          },
          {
            "align_files": {
              "type": "file",
              "description": "Copy of the input sorted BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "index_files": {
              "type": "file",
              "description": "Copy of the input index of sorted BAM/CRAM file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@mirpedrol"
        ]
      }
    },
    {
      "name": "ilastik_multicut",
      "path": "modules/nf-core/ilastik/multicut/meta.yml",
      "type": "module",
      "meta": {
        "name": "ilastik_multicut",
        "description": "Ilastik is a tool that utilizes machine learning algorithms to classify pixels, segment, track and count cells in images. Ilastik contains a graphical user interface to interactively label pixels. However, this nextflow module will implement the --headless mode, to apply pixel classification using a pre-trained .ilp file on an input image.",
        "keywords": [
          "multicut",
          "segmentation",
          "pixel classification"
        ],
        "tools": [
          {
            "ilastik": {
              "description": "Ilastik is a user friendly tool that enables pixel classification, segmentation and analysis.",
              "homepage": "https://www.ilastik.org/",
              "documentation": "https://www.ilastik.org/documentation/",
              "tool_dev_url": "https://github.com/ilastik/ilastik",
              "licence": "GPL3"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "h5": {
              "type": "file",
              "description": "h5 file containing image stack to classify file",
              "pattern": "*.{h5,hdf5}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ilp": {
              "type": "file",
              "description": "Trained ilastik .ilp project file",
              "pattern": "*.{ilp}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "probs": {
              "type": "file",
              "description": "Probability map for boundary based segmentation",
              "pattern": "*.{h5,,hdf5}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "out_tiff": {
              "type": "file",
              "description": "Multicut segmentation mask output.",
              "pattern": "*.{tiff}"
            }
          }
        ],
        "authors": [
          "@FloWuenne"
        ]
      }
    },
    {
      "name": "ilastik_pixelclassification",
      "path": "modules/nf-core/ilastik/pixelclassification/meta.yml",
      "type": "module",
      "meta": {
        "name": "ilastik_pixelclassification",
        "description": "Ilastik is a tool that utilizes machine learning algorithms to classify pixels, segment, track and count cells in images. Ilastik contains a graphical user interface to interactively label pixels. However, this nextflow module will implement the --headless mode, to apply pixel classification using a pre-trained .ilp file on an input image.",
        "keywords": [
          "pixel_classification",
          "segmentation",
          "probability_maps"
        ],
        "tools": [
          {
            "ilastik": {
              "description": "Ilastik is a user friendly tool that enables pixel classification, segmentation and analysis.",
              "homepage": "https://www.ilastik.org/",
              "documentation": "https://www.ilastik.org/documentation/",
              "tool_dev_url": "https://github.com/ilastik/ilastik",
              "licence": "GPL3"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information for h5 file\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_img": {
              "type": "file",
              "description": "Input img file containing image stack to classify"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information for ilp file\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ilp": {
              "type": "file",
              "description": "Trained ilastik pixel classification .ilp project file",
              "pattern": "*.{ilp}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "Output file from ilastik pixel classification."
            }
          }
        ],
        "authors": [
          "@FloWuenne"
        ]
      }
    },
    {
      "name": "instrain_profile",
      "path": "modules/nf-core/instrain/profile/meta.yml",
      "type": "module",
      "meta": {
        "name": "instrain_profile",
        "description": "inStrain is python program for analysis of co-occurring genome populations from metagenomes that allows highly accurate genome comparisons, analysis of coverage, microdiversity, and linkage, and sensitive SNP detection with gene localization and synonymous non-synonymous identification",
        "keywords": [
          "instrain",
          "metagenomics",
          "population genomics",
          "profile"
        ],
        "tools": [
          {
            "instrain": {
              "description": "Calculation of strain-level metrics",
              "homepage": "https://github.com/MrOlm/instrain",
              "documentation": "https://instrain.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/MrOlm/instrain",
              "doi": "10.1038/s41587-020-00797-0",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test']"
            }
          },
          {
            "bam": {
              "type": "path",
              "description": "Path to .bam file to be profiled",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "genome_fasta": {
              "type": "path",
              "description": "Path to .fasta file to be profiled; MUST be the .fasta file that was mapped to to create the .bam file",
              "pattern": "*.{fasta,fna,fa}"
            }
          },
          {
            "genes_fasta": {
              "type": "path",
              "description": "Path to .fna file of genes to be profiled (OPTIONAL)",
              "pattern": "*.{fasta,fna,fa}"
            }
          },
          {
            "stb_file": {
              "type": "path",
              "description": "Path to .stb (scaffold to bin) file to be profiled (OPTIONAL)",
              "pattern": "*.stb"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "profile": {
              "type": "path",
              "description": "InStrain profile folder",
              "pattern": "*.IS/"
            }
          }
        ],
        "authors": [
          "@mrolm"
        ]
      }
    },
    {
      "name": "interproscan",
      "path": "modules/nf-core/interproscan/meta.yml",
      "type": "module",
      "meta": {
        "name": "interproscan",
        "description": "Produces protein annotations and predictions from a FASTA file",
        "keywords": [
          "annotation",
          "fasta",
          "interproscan"
        ],
        "tools": [
          {
            "interproscan": {
              "description": "InterPro integrates together predictive information about proteins function from a number of partner resources",
              "homepage": "https://www.ebi.ac.uk/interpro/search/sequence/",
              "documentation": "https://interproscan-docs.readthedocs.io",
              "tool_dev_url": "https://github.com/ebi-pf-team/interproscan",
              "doi": "10.1093/bioinformatics/btu031",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input fasta file containing query sequences",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "out_ext": {
              "type": "string",
              "description": "Specify the type of output file to be generated",
              "pattern": "tsv|xml|gff3|json"
            }
          }
        ],
        "output": [
          {
            "tsv": {
              "type": "file",
              "description": "Tab separated file containing with detailed hits",
              "pattern": "*.{tsv}"
            }
          },
          {
            "xml": {
              "type": "file",
              "description": "XML file containing with detailed hits",
              "pattern": "*.{xml}"
            }
          },
          {
            "gff3": {
              "type": "file",
              "description": "GFF3 file containing with detailed hits",
              "pattern": "*.{gff3}"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON file containing with detailed hits",
              "pattern": "*.{json}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@toniher"
        ]
      }
    },
    {
      "name": "iphop_download",
      "path": "modules/nf-core/iphop/download/meta.yml",
      "type": "module",
      "meta": {
        "name": "iphop_download",
        "description": "Download, extract, and check md5 of iPHoP databases",
        "keywords": [
          "metagenomics",
          "iphop",
          "database",
          "download",
          "phage",
          "bacteria",
          "host"
        ],
        "tools": [
          {
            "iphop": {
              "description": "Predict host genus from genomes of uncultivated phages.",
              "homepage": "https://bitbucket.org/srouxjgi/iphop/src/main/",
              "documentation": "https://bitbucket.org/srouxjgi/iphop/src/main/",
              "tool_dev_url": "https://bitbucket.org/srouxjgi/iphop/src/main/",
              "doi": "10.1371/journal.pbio.3002083",
              "licence": "['Modified GPL v3']"
            }
          }
        ],
        "output": [
          {
            "iphop_db": {
              "type": "directory",
              "description": "Directory containing downloaded and md5 checked iPHoP database",
              "pattern": "iphop_db/"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@CarsonJM"
        ]
      }
    },
    {
      "name": "iphop_predict",
      "path": "modules/nf-core/iphop/predict/meta.yml",
      "type": "module",
      "meta": {
        "name": "iphop_predict",
        "description": "Predict phage host using iPHoP",
        "keywords": [
          "metagenomics",
          "iphop",
          "database",
          "download",
          "phage",
          "bacteria",
          "host"
        ],
        "tools": [
          {
            "iphop": {
              "description": "Predict host genus from genomes of uncultivated phages.",
              "homepage": "https://bitbucket.org/srouxjgi/iphop/src/main/",
              "documentation": "https://bitbucket.org/srouxjgi/iphop/src/main/",
              "tool_dev_url": "https://bitbucket.org/srouxjgi/iphop/src/main/",
              "doi": "10.1371/journal.pbio.3002083",
              "licence": "['Modified GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file containing phage contigs/scaffolds/chromosomes",
              "pattern": "*.{fasta,fna,fa}"
            }
          },
          {
            "iphop_db": {
              "type": "directory",
              "description": "Directory pointing to iPHoP database"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "iphop_genus": {
              "type": "file",
              "description": "File containing integrated host predictions at genus level, with a minimum score defined by the `--min_score` argument",
              "pattern": "Host_prediction_to_genus_m*.csv"
            }
          },
          {
            "iphop_genome": {
              "type": "file",
              "description": "File containing integrated host predictions at host genome level, with a minimum score defined by the `--min_score` argument",
              "pattern": "Host_prediction_to_genome_m*.csv"
            }
          },
          {
            "iphop_detailed_output": {
              "type": "file",
              "description": "File containing each phage's top 5 hits via each method",
              "pattern": "Detailed_output_by_tool.csv"
            }
          }
        ],
        "authors": [
          "@CarsonJM"
        ]
      }
    },
    {
      "name": "iqtree",
      "path": "modules/nf-core/iqtree/meta.yml",
      "type": "module",
      "meta": {
        "name": "iqtree",
        "description": "Produces a Newick format phylogeny from a multiple sequence alignment using the maxium likelihood algorithm. Capable of bacterial genome size alignments.",
        "keywords": [
          "phylogeny",
          "newick",
          "maximum likelihood"
        ],
        "tools": [
          {
            "iqtree": {
              "description": "Efficient phylogenomic software by maximum likelihood.",
              "homepage": "http://www.iqtree.org",
              "documentation": "http://www.iqtree.org/doc",
              "tool_dev_url": "https://github.com/iqtree/iqtree2",
              "doi": "10.1093/molbev/msaa015",
              "licence": [
                "GPL v2-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "alignment": {
              "type": "file",
              "description": "A FASTA format multiple sequence alignment file",
              "pattern": "*.{fasta,fas,fa,mfa}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "phylogeny": {
              "type": "file",
              "description": "A phylogeny in Newick format",
              "pattern": "*.{treefile}"
            }
          }
        ],
        "authors": [
          "@avantonder",
          "@aunderwo"
        ]
      }
    },
    {
      "name": "islandpath",
      "path": "modules/nf-core/islandpath/meta.yml",
      "type": "module",
      "meta": {
        "name": "islandpath",
        "description": "Genomic island prediction in bacterial and archaeal genomes",
        "keywords": [
          "genomes",
          "genomic islands",
          "prediction"
        ],
        "tools": [
          {
            "islandpath": {
              "description": "IslandPath-DIMOB is a standalone software to predict genomic islands (GIs - clusters of genes in prokaryotic genomes of probable horizontal origin) in bacterial and archaeal genomes based on the presence of dinucleotide biases and mobility genes.",
              "homepage": "https://github.com/brinkmanlab/islandpath",
              "documentation": "https://github.com/brinkmanlab/islandpath#readme",
              "tool_dev_url": "https://github.com/brinkmanlab/islandpath",
              "doi": "10.1093/bioinformatics/bty095",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "genome": {
              "type": "file",
              "description": "Genome file in .gbk or .embl format.\npattern: \"*.{gbk, embl, gbff}\"\n"
            }
          }
        ],
        "output": [
          {
            "gff": {
              "type": "file",
              "description": "GFF file listing the predicted genomic islands and their coordinates",
              "pattern": "*.gff"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file of the islandpath run",
              "pattern": "*.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@jvfe"
        ]
      }
    },
    {
      "name": "ismapper",
      "path": "modules/nf-core/ismapper/meta.yml",
      "type": "module",
      "meta": {
        "name": "ismapper",
        "description": "Identify insertion sites positions in bacterial genomes",
        "keywords": [
          "fastq",
          "insertion sequences"
        ],
        "tools": [
          {
            "ismapper": {
              "description": "A mapping-based tool for identification of the site and orientation of IS insertions in bacterial genomes.",
              "homepage": "https://github.com/jhawkey/IS_mapper",
              "documentation": "https://github.com/jhawkey/IS_mapper",
              "tool_dev_url": "https://github.com/jhawkey/IS_mapper",
              "doi": "10.1186/s12864-015-1860-2",
              "licence": [
                "BSD-3-Clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "A set of paired-end FASTQ files",
              "pattern": "*.{fastq.gz,fq.gz}"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "Reference genome in GenBank format",
              "pattern": "*.{gbk}"
            }
          },
          {
            "query": {
              "type": "file",
              "description": "Insertion sequences to query in FASTA format",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "results": {
              "type": "directory",
              "description": "Directory containing ISMapper result files",
              "pattern": "*/*"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "isoseq3_cluster",
      "path": "modules/nf-core/isoseq3/cluster/meta.yml",
      "type": "module",
      "meta": {
        "name": "isoseq3_cluster",
        "description": "IsoSeq3 - Cluster - Cluster trimmed consensus sequences",
        "keywords": [
          "cluster"
        ],
        "tools": [
          {
            "isoseq3": {
              "description": "IsoSeq3 - Cluster - Cluster trimmed consensus sequences",
              "homepage": "https://github.com/PacificBiosciences/IsoSeq/blob/master/isoseq-clustering.md",
              "documentation": "https://github.com/PacificBiosciences/IsoSeq/blob/master/isoseq-clustering.md",
              "tool_dev_url": "https://github.com/PacificBiosciences/IsoSeq/blob/master/isoseq-clustering.md",
              "licence": [
                "BSD-3-Clause-Clear"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file generated by isoseq3 refine",
              "pattern": "*.bam"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file of clustered consensus",
              "pattern": "*.transcripts.bam"
            }
          },
          {
            "pbi": {
              "type": "file",
              "description": "Pacbio Index of consensus reads generated by clustering",
              "pattern": "*.transcripts.bam.pbi"
            }
          },
          {
            "cluster": {
              "type": "file",
              "description": "A two columns (from, to) file describing original read name to new read name",
              "pattern": "*.transcripts.cluster"
            }
          },
          {
            "cluster_report": {
              "type": "file",
              "description": "A table files clusters (transcripts) members (read)",
              "pattern": "*.transcripts.cluster_report.csv"
            }
          },
          {
            "transcriptset": {
              "type": "file",
              "description": "A metadata xml file which contains full paths to data files",
              "pattern": "*.transcripts.transcriptset.xml"
            }
          },
          {
            "hq_bam": {
              "type": "file",
              "description": "High quality reads (when --use-qvs is set)",
              "pattern": "*.transcripts.hq.bam"
            }
          },
          {
            "hq_pbi": {
              "type": "file",
              "description": "Pacbio index of high quality reads (when --use-qvs is set)",
              "pattern": "*.transcripts.hq.bam.pbi"
            }
          },
          {
            "lq_bam": {
              "type": "file",
              "description": "Low quality reads (when --use-qvs is set)",
              "pattern": "*.transcripts.lq.bam"
            }
          },
          {
            "lq_pbi": {
              "type": "file",
              "description": "Pacbio index of low quality reads (when --use-qvs is set)",
              "pattern": "*.transcripts.lq.bam.pbi"
            }
          },
          {
            "singletons_bam": {
              "type": "file",
              "description": "Unclustered reads (when --singletons is set)",
              "pattern": "*.transcripts.singletons.bam"
            }
          },
          {
            "singletons_pbi": {
              "type": "file",
              "description": "Pacbio index of unclustered reads (when --singletons is set)",
              "pattern": "*.transcripts.singletons.bam.pbi"
            }
          }
        ],
        "authors": [
          "@sguizard"
        ]
      }
    },
    {
      "name": "isoseq3_refine",
      "path": "modules/nf-core/isoseq3/refine/meta.yml",
      "type": "module",
      "meta": {
        "name": "isoseq3_refine",
        "description": "Remove polyA tail and artificial concatemers",
        "keywords": [
          "isoseq",
          "refine",
          "ccs",
          "pacbio",
          "polyA_tail"
        ],
        "tools": [
          {
            "isoseq3": {
              "description": "IsoSeq3 - Scalable De Novo Isoform Discovery",
              "homepage": "https://github.com/PacificBiosciences/IsoSeq/blob/master/isoseq-clustering.md",
              "documentation": "https://github.com/PacificBiosciences/IsoSeq/blob/master/isoseq-clustering.md",
              "tool_dev_url": "https://github.com/PacificBiosciences/IsoSeq/blob/master/isoseq-clustering.md",
              "licence": [
                "BSD-3-Clause-Clear"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file, cleaned ccs generated by lima",
              "pattern": "*.bam"
            }
          },
          {
            "primers": {
              "type": "file",
              "description": "fasta file of primers",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Set of complete reads (with polyA tail), where the polyA has been trimmed",
              "pattern": "*.bam"
            }
          },
          {
            "pbi": {
              "type": "file",
              "description": "Pacbio index file from polyA trimmed reads",
              "pattern": "*.pbi"
            }
          },
          {
            "consensusreadset": {
              "type": "file",
              "description": "Metadata about read library",
              "pattern": "*.xml"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "json file describing number of full length reads, full length non chimeric reads and full length non chimeric polyA reads",
              "pattern": "*.json"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Metadata about primer and polyA detection (primers/polyA/insert length, strand, primer name)",
              "pattern": "*.csv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sguizard"
        ]
      },
      "pipelines": [
        {
          "name": "isoseq",
          "version": "1.1.4"
        }
      ]
    },
    {
      "name": "ivar_consensus",
      "path": "modules/nf-core/ivar/consensus/meta.yml",
      "type": "module",
      "meta": {
        "name": "ivar_consensus",
        "description": "Generate a consensus sequence from a BAM file using iVar",
        "keywords": [
          "amplicon sequencing",
          "consensus",
          "fasta"
        ],
        "tools": [
          {
            "ivar": {
              "description": "iVar - a computational package that contains functions broadly useful for viral amplicon-based sequencing.\n",
              "homepage": "https://github.com/andersen-lab/ivar",
              "documentation": "https://andersen-lab.github.io/ivar/html/manualpage.html",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "A sorted (with samtools sort) and trimmed (with iVar trim) bam file",
              "pattern": "*.bam"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference sequence used for mapping and generating the BAM file",
              "pattern": "*.fa"
            }
          },
          {
            "save_mpileup": {
              "type": "boolean",
              "description": "Save mpileup file generated by ivar consensus",
              "patter": "*.mpileup"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "iVar generated consensus sequence",
              "pattern": "*.fa"
            }
          },
          {
            "qual": {
              "type": "file",
              "description": "iVar generated quality file",
              "pattern": "*.qual.txt"
            }
          },
          {
            "mpileup": {
              "type": "file",
              "description": "mpileup output from samtools mpileup [OPTIONAL]",
              "pattern": "*.mpileup"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@andersgs",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "ivar_trim",
      "path": "modules/nf-core/ivar/trim/meta.yml",
      "type": "module",
      "meta": {
        "name": "ivar_trim",
        "description": "Trim primer sequences rom a BAM file with iVar",
        "keywords": [
          "amplicon sequencing",
          "trimming",
          "fasta"
        ],
        "tools": [
          {
            "ivar": {
              "description": "iVar - a computational package that contains functions broadly useful for viral amplicon-based sequencing.\n",
              "homepage": "https://github.com/andersen-lab/ivar",
              "documentation": "https://andersen-lab.github.io/ivar/html/manualpage.html",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Co-ordinate sorted BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Index file for co-ordinate sorted BAM file",
              "pattern": "*.bai"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file with primer labels and positions",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "iVar generated trimmed bam file (unsorted)",
              "pattern": "*.bam"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file generated by iVar for use with MultiQC",
              "pattern": "*.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@andersgs",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "ivar_variants",
      "path": "modules/nf-core/ivar/variants/meta.yml",
      "type": "module",
      "meta": {
        "name": "ivar_variants",
        "description": "Call variants from a BAM file using iVar",
        "keywords": [
          "amplicon sequencing",
          "variants",
          "fasta"
        ],
        "tools": [
          {
            "ivar": {
              "description": "iVar - a computational package that contains functions broadly useful for viral amplicon-based sequencing.\n",
              "homepage": "https://github.com/andersen-lab/ivar",
              "documentation": "https://andersen-lab.github.io/ivar/html/manualpage.html",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "A sorted (with samtools sort) and trimmed (with iVar trim) bam file",
              "pattern": "*.bam"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference sequence used for mapping and generating the BAM file",
              "pattern": "*.fa"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "The index for the reference sequence used for mapping and generating the BAM file",
              "pattern": "*.fai"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "A GFF file in the GFF3 format can be supplied to specify coordinates of open reading frames (ORFs). In absence of GFF file, amino acid translation will not be done.",
              "patter": "*.gff"
            }
          },
          {
            "save_mpileup": {
              "type": "boolean",
              "description": "Save mpileup file generated by ivar variants",
              "patter": "*.mpileup"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "iVar generated TSV file with the variants",
              "pattern": "*.tsv"
            }
          },
          {
            "mpileup": {
              "type": "file",
              "description": "mpileup output from samtools mpileup [OPTIONAL]",
              "pattern": "*.mpileup"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@andersgs",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "jasminesv",
      "path": "modules/nf-core/jasminesv/meta.yml",
      "type": "module",
      "meta": {
        "name": "jasminesv",
        "description": "Jointly Accurate Sv Merging with Intersample Network Edges",
        "keywords": [
          "jasminesv",
          "jasmine",
          "structural variants",
          "vcf",
          "bam"
        ],
        "tools": [
          {
            "jasminesv": {
              "description": "Software for merging structural variants between individuals",
              "homepage": "https://github.com/mkirsche/Jasmine/wiki/Jasmine-User-Manual",
              "documentation": "https://github.com/mkirsche/Jasmine/wiki/Jasmine-User-Manual",
              "tool_dev_url": "https://github.com/mkirsche/Jasmine",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcfs": {
              "type": "files",
              "description": "The VCF files that need to be merged\n",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "bams": {
              "type": "files",
              "description": "Optional - The BAM files from which the VCFs were created",
              "pattern": "*.bam"
            }
          },
          {
            "sample_dists": {
              "type": "file",
              "description": "Optional - A txt file containing the distance thresholds for each sample",
              "pattern": "*.txt"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Optional - The reference FASTA file used to create the VCFs",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "Optional - The index of the reference FASTA file used to create the VCFs",
              "pattern": "*.fai"
            }
          },
          {
            "chr_norm": {
              "type": "file",
              "description": "Optional - A txt file containing the chromosomes and their aliases for normalization",
              "pattern": "*.txt"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The merged VCF file",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "jupyternotebook",
      "path": "modules/nf-core/jupyternotebook/meta.yml",
      "type": "module",
      "meta": {
        "name": "jupyternotebook",
        "description": "Render jupyter (or jupytext) notebooks to HTML reports. Supports parametrization\nthrough papermill.\n",
        "keywords": [
          "Python",
          "Jupyter",
          "jupytext",
          "papermill",
          "notebook",
          "reports"
        ],
        "tools": [
          {
            "jupytext": {
              "description": "Jupyter notebooks as plain text scripts or markdown documents",
              "homepage": "https://github.com/mwouts/jupytext/",
              "documentation": "https://jupyter.org/documentation",
              "tool_dev_url": "https://github.com/mwouts/jupytext/",
              "licence": "MIT"
            }
          },
          {
            "papermill": {
              "description": "Parameterize, execute, and analyze notebooks",
              "homepage": "https://github.com/nteract/papermill",
              "documentation": "http://papermill.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/nteract/papermill",
              "licence": "BSD 3-clause"
            }
          },
          {
            "nbconvert": {
              "description": "Parameterize, execute, and analyze notebooks",
              "homepage": "https://nbconvert.readthedocs.io/en/latest/",
              "documentation": "https://nbconvert.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/jupyter/nbconvert",
              "licence": "BSD 3-clause"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "notebook": {
              "type": "file",
              "description": "Jupyter notebook or jupytext representation thereof",
              "pattern": "*.{ipynb,py,md,Rmd,myst}"
            }
          },
          {
            "parameters": {
              "type": "map",
              "description": "Groovy map with notebook parameters which will be passed\nto papermill in order to create parametrized reports.\n"
            }
          },
          {
            "input_files": {
              "type": "file",
              "description": "One or multiple files serving as input data for the notebook.",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "HTML report generated from Jupyter notebook",
              "pattern": "*.html"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@grst"
        ]
      }
    },
    {
      "name": "kaiju_kaiju",
      "path": "modules/nf-core/kaiju/kaiju/meta.yml",
      "type": "module",
      "meta": {
        "name": "kaiju_kaiju",
        "description": "Taxonomic classification of metagenomic sequence data using a protein reference database",
        "keywords": [
          "classify",
          "metagenomics",
          "fastq",
          "taxonomic profiling"
        ],
        "tools": [
          {
            "kaiju": {
              "description": "Fast and sensitive taxonomic classification for metagenomics",
              "homepage": "https://kaiju.binf.ku.dk/",
              "documentation": "https://github.com/bioinformatics-centre/kaiju/blob/master/README.md",
              "tool_dev_url": "https://github.com/bioinformatics-centre/kaiju",
              "doi": "10.1038/ncomms11257",
              "licence": [
                "GNU GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input fastq/fasta files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n",
              "pattern": "*.{fastq,fq,fasta,fa,fsa,fas,fna,fastq.gz,fq.gz,fasta.gz,fa.gz,fsa.gz,fas.gz,fna.gz}"
            }
          },
          {
            "db": {
              "type": "files",
              "description": "List containing the database and nodes files for Kaiju\ne.g. [ 'database.fmi', 'nodes.dmp' ]\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "results": {
              "type": "file",
              "description": "Results with taxonomic classification of each read",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@talnor",
          "@sofstam",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "kaiju_kaiju2krona",
      "path": "modules/nf-core/kaiju/kaiju2krona/meta.yml",
      "type": "module",
      "meta": {
        "name": "kaiju_kaiju2krona",
        "description": "Convert Kaiju's tab-separated output file into a tab-separated text file which can be imported into Krona.",
        "keywords": [
          "taxonomy",
          "visualisation",
          "krona chart",
          "metagenomics"
        ],
        "tools": [
          {
            "kaiju": {
              "description": "Fast and sensitive taxonomic classification for metagenomics",
              "homepage": "https://kaiju.binf.ku.dk/",
              "documentation": "https://github.com/bioinformatics-centre/kaiju/blob/master/README.md",
              "tool_dev_url": "https://github.com/bioinformatics-centre/kaiju",
              "doi": "10.1038/ncomms11257",
              "licence": [
                "GNU GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Kaiju tab-separated output file",
              "pattern": "*.{tsv,txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Krona text-based input file converted from Kaiju report",
              "pattern": "*.{txt,krona}"
            }
          }
        ],
        "authors": [
          "@MillironX"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "kaiju_kaiju2table",
      "path": "modules/nf-core/kaiju/kaiju2table/meta.yml",
      "type": "module",
      "meta": {
        "name": "kaiju_kaiju2table",
        "description": "write your description here",
        "keywords": [
          "classify",
          "metagenomics"
        ],
        "tools": [
          {
            "kaiju": {
              "description": "Fast and sensitive taxonomic classification for metagenomics",
              "homepage": "https://kaiju.binf.ku.dk/",
              "documentation": "https://github.com/bioinformatics-centre/kaiju/blob/master/README.md",
              "tool_dev_url": "https://github.com/bioinformatics-centre/kaiju",
              "doi": "10.1038/ncomms11257",
              "licence": [
                "GNU GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "results": {
              "type": "file",
              "description": "File containing the kaiju classification results",
              "pattern": "*.{txt}"
            }
          },
          {
            "taxon_rank": {
              "type": "string",
              "description": "Taxonomic rank to display in report\npattern: \"phylum|class|order|family|genus|species\"\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "results": {
              "type": "file",
              "description": "Summary table for a given taxonomic rank\n",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@sofstam",
          "@talnor",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "kallisto_index",
      "path": "modules/nf-core/kallisto/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "kallisto_index",
        "description": "Create kallisto index",
        "keywords": [
          "index"
        ],
        "tools": [
          {
            "kallisto": {
              "description": "Quantifying abundances of transcripts from bulk and single-cell RNA-Seq data, or more generally of target sequences using high-throughput sequencing reads.",
              "homepage": "https://pachterlab.github.io/kallisto/",
              "documentation": "https://pachterlab.github.io/kallisto/manual",
              "tool_dev_url": "https://github.com/pachterlab/kallisto",
              "licence": [
                "BSD-2-Clause"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "genome fasta file",
              "pattern": "*.{fasta}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "idx": {
              "type": "index",
              "description": "Kallisto genome index",
              "pattern": "*.idx"
            }
          }
        ],
        "authors": [
          "@ggabernet"
        ]
      },
      "pipelines": [
        {
          "name": "rnafusion",
          "version": "2.3.4"
        }
      ]
    },
    {
      "name": "kallisto_quant",
      "path": "modules/nf-core/kallisto/quant/meta.yml",
      "type": "module",
      "meta": {
        "name": "kallisto_quant",
        "description": "Computes equivalence classes for reads and quantifies abundances",
        "keywords": [
          "quant",
          "kallisto"
        ],
        "tools": [
          {
            "kallisto": {
              "description": "Quantifying abundances of transcripts from RNA-Seq data, or more generally of target sequences using high-throughput sequencing reads.",
              "homepage": "https://pachterlab.github.io/kallisto/",
              "documentation": "https://pachterlab.github.io/kallisto/manual",
              "tool_dev_url": "https://github.com/pachterlab/kallisto",
              "doi": "10.1038/nbt.3519",
              "licence": "['BSD_2_clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n",
              "pattern": "*.{fastq,fastq.gz}"
            }
          },
          {
            "index": {
              "type": "index",
              "description": "Kallisto genome index.",
              "pattern": "*.idx"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "Optional gtf file for translation of transcripts into genomic coordinates.",
              "pattern": "*.gtf"
            }
          },
          {
            "chromosomes": {
              "type": "file",
              "description": "Optional tab separated file with chromosome names and lengths.",
              "pattern": "*.tsv"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "File containing log information from running kallisto quant",
              "pattern": "*.log.txt"
            }
          },
          {
            "abundance": {
              "type": "file",
              "description": "Plaintext file of the abundance estimates",
              "pattern": "abundance.tsv"
            }
          },
          {
            "abundance_hdf5": {
              "type": "file",
              "description": "A HDF5 binary file containing run info, abundance estimates, bootstrap\nestimates, and transcript length information\n",
              "pattern": "abundance.h5"
            }
          },
          {
            "run_info": {
              "type": "file",
              "description": "A json file containing information about the run",
              "pattern": "run_info.json"
            }
          }
        ],
        "authors": [
          "@anoronh4"
        ]
      }
    },
    {
      "name": "kallistobustools_count",
      "path": "modules/nf-core/kallistobustools/count/meta.yml",
      "type": "module",
      "meta": {
        "name": "kallistobustools_count",
        "description": "quantifies scRNA-seq data from fastq files using kb-python.",
        "keywords": [
          "scRNA-seq",
          "count",
          "single-cell",
          "kallisto",
          "bustools"
        ],
        "tools": [
          {
            "kb": {
              "description": "kallisto and bustools are wrapped in an easy-to-use program called kb",
              "homepage": "https://www.kallistobus.tools/",
              "documentation": "https://kb-python.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/pachterlab/kb_python",
              "licence": "MIT License"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "kb-ref index file (.idx)",
              "pattern": "*.{idx}"
            }
          },
          {
            "t2g": {
              "type": "file",
              "description": "t2g file from kallisto",
              "pattern": "*t2g.txt"
            }
          },
          {
            "t1c": {
              "type": "file",
              "description": "kb ref's c1 spliced_t2c file",
              "pattern": "*.{cdna_t2c.txt}"
            }
          },
          {
            "t2c": {
              "type": "file",
              "description": "kb ref's c2 unspliced_t2c file",
              "pattern": "*.{introns_t2c.txt}"
            }
          },
          {
            "workflow_mode": {
              "type": "string",
              "description": "String value defining workflow to use, can be one of \"standard\", \"lamanno\", \"nucleus\"",
              "pattern": "{standard,lamanno,nucleus,kite}"
            }
          },
          {
            "technology": {
              "type": "string",
              "description": "String value defining the sequencing technology used.",
              "pattern": "{10XV1,10XV2,10XV3,CELSEQ,CELSEQ2,DROPSEQ,INDROPSV1,INDROPSV2,INDROPSV3,SCRUBSEQ,SURECELL,SMARTSEQ}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "count": {
              "type": "file",
              "description": "kb count output folder",
              "pattern": "*.{count}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@flowuenne"
        ]
      },
      "pipelines": [
        {
          "name": "scrnaseq",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "kallistobustools_ref",
      "path": "modules/nf-core/kallistobustools/ref/meta.yml",
      "type": "module",
      "meta": {
        "name": "kallistobustools_ref",
        "description": "index creation for kb count quantification of single-cell data.",
        "keywords": [
          "kallisto-bustools",
          "index"
        ],
        "tools": [
          {
            "kb": {
              "description": "kallisto|bustools (kb) is a tool developed for fast and efficient processing of single-cell OMICS data.",
              "homepage": "https://www.kallistobus.tools/",
              "documentation": "https://kb-python.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/pachterlab/kb_python",
              "doi": "10.22002/D1.1876",
              "licence": "MIT License"
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Genomic DNA fasta file",
              "pattern": "*.{fasta,fasta.gz}"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "Genomic gtf file",
              "pattern": "*.{gtf,gtf.gz}"
            }
          },
          {
            "workflow_mode": {
              "type": "value",
              "description": "String value defining workflow to use, can be one of \"standard\", \"lamanno\", \"nucleus\"",
              "pattern": "{standard,lamanno,nucleus}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "kb_ref_idx": {
              "type": "file",
              "description": "Index file from kb ref.",
              "pattern": "*.{idx}"
            }
          },
          {
            "t2g": {
              "type": "file",
              "description": "Transcript to gene table",
              "pattern": "*t2g.{txt}"
            }
          },
          {
            "cdna": {
              "type": "file",
              "description": "Cdna fasta file",
              "pattern": "*cdna.{fa}"
            }
          },
          {
            "intron": {
              "type": "file",
              "description": "intron fasta file",
              "pattern": "*intron.{fa}"
            }
          },
          {
            "cdna_t2c": {
              "type": "file",
              "description": "cdna transcript to capture file",
              "pattern": "*cdna_t2c.{txt}"
            }
          },
          {
            "intron_t2c": {
              "type": "file",
              "description": "intron transcript to capture file",
              "pattern": "*intron_t2c.{txt}"
            }
          }
        ],
        "authors": [
          "@flowuenne"
        ]
      },
      "pipelines": [
        {
          "name": "scrnaseq",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "kat_hist",
      "path": "modules/nf-core/kat/hist/meta.yml",
      "type": "module",
      "meta": {
        "name": "kat_hist",
        "description": "Creates a histogram of the number of distinct k-mers having a given frequency.",
        "keywords": [
          "k-mer",
          "histogram",
          "count"
        ],
        "tools": [
          {
            "kat": {
              "description": "KAT is a suite of tools that analyse jellyfish hashes or sequence files (fasta or fastq) using kmer counts",
              "homepage": "https://www.earlham.ac.uk/kat-tools",
              "documentation": "https://kat.readthedocs.io/en/latest/index.html",
              "tool_dev_url": "https://github.com/TGAC/KAT",
              "doi": "10.1093/bioinformatics/btw663",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "hist": {
              "type": "file",
              "description": "KAT histogram of k-mer counts",
              "pattern": "*.hist"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "KAT histogram summary of distance analysis",
              "pattern": "*.hist.dist_analysis.json"
            }
          },
          {
            "png": {
              "type": "file",
              "description": "KAT plot of k-mer histogram in PNG format",
              "pattern": "*.png"
            }
          },
          {
            "ps": {
              "type": "file",
              "description": "KAT plot of k-mer histogram in PS format",
              "pattern": "*.ps"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "KAT plot of k-mer histogram in PDF format",
              "pattern": "*.pdf"
            }
          },
          {
            "jellyfish_hash": {
              "type": "file",
              "description": "Jellyfish hash file",
              "pattern": "*-hist.jf*"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      }
    },
    {
      "name": "khmer_normalizebymedian",
      "path": "modules/nf-core/khmer/normalizebymedian/meta.yml",
      "type": "module",
      "meta": {
        "name": "khmer_normalizebymedian",
        "description": "Module that calls normalize-by-median.py from khmer. The module can take a mix of paired end (interleaved) and single end reads. If both types are provided, only a single file with single ends is possible.",
        "keywords": [
          "digital normalization",
          "khmer"
        ],
        "tools": [
          {
            "khmer": {
              "description": "khmer k-mer counting library",
              "homepage": "https://github.com/dib-lab/khmer",
              "documentation": "https://khmer.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/dib-lab/khmer",
              "doi": "10.12688/f1000research.6924.1",
              "licence": [
                "BSD License"
              ]
            }
          }
        ],
        "input": [
          {
            "pe_reads": {
              "type": "files",
              "description": "Paired-end interleaved fastq files",
              "pattern": "*.{fq,fastq}.gz"
            }
          },
          {
            "se_reads": {
              "type": "files",
              "description": "Single-end fastq files",
              "pattern": "*.{fq,fastq}.gz"
            }
          },
          {
            "name": {
              "type": "string",
              "description": "filename for output file(s); \".fastq.gz\" will be appended"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Interleaved fastq files",
              "pattern": "*.{fq,fastq}.gz"
            }
          }
        ],
        "authors": [
          "@erikrikarddaniel"
        ]
      }
    },
    {
      "name": "khmer_uniquekmers",
      "path": "modules/nf-core/khmer/uniquekmers/meta.yml",
      "type": "module",
      "meta": {
        "name": "khmer_uniquekmers",
        "description": "In-memory nucleotide sequence k-mer counting, filtering, graph traversal and more",
        "keywords": [
          "khmer",
          "k-mer",
          "effective genome size"
        ],
        "tools": [
          {
            "khmer": {
              "description": "khmer k-mer counting library",
              "homepage": "https://github.com/dib-lab/khmer",
              "documentation": "https://khmer.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/dib-lab/khmer",
              "doi": "10.12688/f1000research.6924.1",
              "licence": [
                "BSD License"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "fasta file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "kmer_size": {
              "type": "value",
              "description": "k-mer size to use",
              "pattern": "[0-9]+"
            }
          }
        ],
        "output": [
          {
            "report": {
              "type": "file",
              "description": "Text file containing unique-kmers.py execution report",
              "pattern": "report.txt"
            }
          },
          {
            "kmers": {
              "type": "file",
              "description": "Text file containing number of kmers",
              "pattern": "kmers.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@JoseEspinosa"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "kleborate",
      "path": "modules/nf-core/kleborate/meta.yml",
      "type": "module",
      "meta": {
        "name": "kleborate",
        "description": "Kleborate is a tool to screen genome assemblies of Klebsiella pneumoniae and the Klebsiella pneumoniae species complex (KpSC).",
        "keywords": [
          "screening assemblies",
          "Klebsiella pneumoniae"
        ],
        "tools": [
          {
            "kleborate": {
              "description": "Screening Klebsiella genome assemblies for MLST, sub-species, and other Klebsiella related genes of interest",
              "homepage": "https://github.com/katholt/Kleborate",
              "documentation": "https://github.com/katholt/Kleborate/wiki",
              "tool_dev_url": "https://github.com/katholt/Kleborate",
              "doi": "10.1038/s41467-021-24448-3",
              "licence": [
                "GPL v3 or later (GPL v3+)"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastas": {
              "type": "files",
              "description": "Klebsiella genome assemblies to be screened",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Result file generated after screening",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@abhi18av",
          "@rpetit3"
        ]
      }
    },
    {
      "name": "kmcp_compute",
      "path": "modules/nf-core/kmcp/compute/meta.yml",
      "type": "module",
      "meta": {
        "name": "kmcp_compute",
        "description": "Generate k-mers (sketches) from FASTA/Q sequences",
        "keywords": [
          "metagenomics",
          "classify",
          "taxonomic profiling",
          "fastq",
          "sequences",
          "kmers"
        ],
        "tools": [
          {
            "kmcp": {
              "description": "Accurate metagenomic profiling of both prokaryotic and viral populations by pseudo-mapping",
              "homepage": "https://github.com/shenwei356/kmcp",
              "documentation": "https://github.com/shenwei356/kmcp#documents",
              "tool_dev_url": "https://github.com/shenwei356/kmcp",
              "doi": "10.1093/bioinformatics/btac845",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sequences": {
              "type": "file",
              "description": "fasta file, or a directory containing FASTA files",
              "pattern": "**/*.{fa,fa.gz,fasta,fasta.gz,fna,fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "outdir": {
              "type": "directory",
              "description": "Output directory containing all .unik files and a summary file in .txt format. Every .unik file contains the sequence/reference ID,chunk index, number of chunks, and genome size of reference.",
              "pattern": "*/"
            }
          },
          {
            "info": {
              "type": "file",
              "description": "Summary file that is generated for later use",
              "pattern": "*_info.txt"
            }
          }
        ],
        "authors": [
          "@sofstam"
        ]
      }
    },
    {
      "name": "kmcp_index",
      "path": "modules/nf-core/kmcp/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "kmcp_index",
        "description": "Construct KMCP database from k-mer files",
        "keywords": [
          "metagenomics",
          "classify",
          "taxonomic profiling",
          "fastq",
          "sequences",
          "kmers",
          "index"
        ],
        "tools": [
          {
            "kmcp": {
              "description": "Accurate metagenomic profiling of both prokaryotic and viral populations by pseudo-mapping",
              "homepage": "https://github.com/shenwei356/kmcp",
              "documentation": "https://github.com/shenwei356/kmcp#documents",
              "tool_dev_url": "https://github.com/shenwei356/kmcp",
              "doi": "10.1093/bioinformatics/btac845",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "outdir": {
              "type": "directory",
              "description": "Output directory generated by \"kmcp compute\"",
              "pattern": "*/"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "kmcp": {
              "type": "directory",
              "description": "Output directory containing the database from k-mer files.",
              "pattern": "*/"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "A log of kmcp/index output",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@sofstam"
        ]
      }
    },
    {
      "name": "kmcp_merge",
      "path": "modules/nf-core/kmcp/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "kmcp_merge",
        "description": "Merge search results from multiple databases.",
        "keywords": [
          "metagenomics",
          "classify",
          "taxonomic profiling",
          "fastq",
          "sequences",
          "kmers"
        ],
        "tools": [
          {
            "kmcp": {
              "description": "Accurate metagenomic profiling of both prokaryotic and viral populations by pseudo-mapping",
              "homepage": "https://github.com/shenwei356/kmcp",
              "documentation": "https://github.com/shenwei356/kmcp#documents",
              "tool_dev_url": "https://github.com/shenwei356/kmcp",
              "doi": "10.1093/bioinformatics/btac845",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "search_out": {
              "type": "file",
              "description": "The output file created by kmcp search",
              "pattern": "*.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "result": {
              "type": "file",
              "description": "Output file in gzipped format",
              "pattern": "*.gz"
            }
          }
        ],
        "authors": [
          "@sofstam"
        ]
      }
    },
    {
      "name": "kmcp_profile",
      "path": "modules/nf-core/kmcp/profile/meta.yml",
      "type": "module",
      "meta": {
        "name": "kmcp_profile",
        "description": "Generate taxonomic profile from search results",
        "keywords": [
          "metagenomics",
          "classify",
          "taxonomic profiling",
          "fastq",
          "sequences",
          "kmers",
          "index"
        ],
        "tools": [
          {
            "kmcp": {
              "description": "Accurate metagenomic profiling of both prokaryotic and viral populations by pseudo-mapping",
              "homepage": "https://github.com/shenwei356/kmcp",
              "documentation": "https://bioinf.shenwei.me/kmcp/usage/#profile",
              "tool_dev_url": "https://github.com/shenwei356/kmcp",
              "doi": "10.1093/bioinformatics/btac845",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "search_results": {
              "type": "file",
              "description": "Gzipped file output from kmcp search module",
              "pattern": "*.gz"
            }
          },
          {
            "taxdump": {
              "type": "directory",
              "description": "Directory of NCBI taxonomy dump files - names.dmp, nodes.dmp",
              "pattern": "*"
            }
          },
          {
            "taxid": {
              "type": "file",
              "description": "Tabular two-column file(s) mapping reference IDs to TaxIds.",
              "pattern": "*.{csv,tsv}"
            }
          },
          {
            "mode": {
              "type": "integer",
              "description": "Profiling mode. 0-pathogen detection 1-higher recall 2-high recall 3-default 4-high precision 5-higher precision"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "profile": {
              "type": "file",
              "description": "Tab-delimited format file with 17 columns.",
              "pattern": "*.profile"
            }
          }
        ],
        "authors": [
          "@sofstam"
        ]
      }
    },
    {
      "name": "kmcp_search",
      "path": "modules/nf-core/kmcp/search/meta.yml",
      "type": "module",
      "meta": {
        "name": "kmcp_compute",
        "description": "Search sequences against database",
        "keywords": [
          "metagenomics",
          "classify",
          "taxonomic profiling",
          "fastq",
          "sequences",
          "kmers"
        ],
        "tools": [
          {
            "kmcp": {
              "description": "Accurate metagenomic profiling of both prokaryotic and viral populations by pseudo-mapping",
              "homepage": "https://github.com/shenwei356/kmcp",
              "documentation": "https://github.com/shenwei356/kmcp#documents",
              "tool_dev_url": "https://github.com/shenwei356/kmcp",
              "doi": "10.1093/bioinformatics/btac845",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "Database directory created by \"kmcp index\"",
              "pattern": "*"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "gzipped fasta or fastq files",
              "pattern": "*.{fq.gz,fastq.gz,fa.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "result": {
              "type": "file",
              "description": "Output file in tab-delimited format with 15 columns",
              "pattern": "*.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sofstam"
        ]
      }
    },
    {
      "name": "kofamscan",
      "path": "modules/nf-core/kofamscan/meta.yml",
      "type": "module",
      "meta": {
        "name": "kofamscan",
        "description": "Produces annotation using kofamscan against a Profile database and a KO list",
        "keywords": [
          "fasta",
          "kegg",
          "kofamscan"
        ],
        "tools": [
          {
            "kofamscan": {
              "description": "KofamKOALA assigns K numbers to the user's sequence data by HMMER/HMMSEARCH against KOfam",
              "homepage": "https://www.genome.jp/tools/kofamkoala/",
              "documentation": "https://github.com/takaram/kofam_scan",
              "tool_dev_url": "https://github.com/takaram/kofam_scan",
              "doi": "10.1093/bioinformatics/btz859",
              "licence": "['MIT License']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input fasta file containing query sequences",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "profiles": {
              "type": "directory",
              "description": "Directory containing the Profiles database",
              "pattern": "*"
            }
          },
          {
            "ko_list": {
              "type": "file",
              "description": "File containing list of KO entries with their data",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "txt": {
              "type": "file",
              "description": "Application-specific text file with hits information",
              "pattern": "*.{txt}"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab separated file containing with detailed hits",
              "pattern": "*.{tsv}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@toniher"
        ]
      }
    },
    {
      "name": "kraken2_kraken2",
      "path": "modules/nf-core/kraken2/kraken2/meta.yml",
      "type": "module",
      "meta": {
        "name": "kraken2_kraken2",
        "description": "Classifies metagenomic sequence data",
        "keywords": [
          "classify",
          "metagenomics",
          "fastq",
          "db"
        ],
        "tools": [
          {
            "kraken2": {
              "description": "Kraken2 is a taxonomic sequence classifier that assigns taxonomic labels to sequence reads\n",
              "homepage": "https://ccb.jhu.edu/software/kraken2/",
              "documentation": "https://github.com/DerrickWood/kraken2/wiki/Manual",
              "doi": "10.1186/s13059-019-1891-0",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "Kraken2 database"
            }
          },
          {
            "save_output_fastqs": {
              "type": "string",
              "description": "If true, optional commands are added to save classified and unclassified reads\nas fastq files\n"
            }
          },
          {
            "save_reads_assignment": {
              "type": "string",
              "description": "If true, an optional command is added to save a file reporting the taxonomic\nclassification of each input read\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "classified_reads_fastq": {
              "type": "file",
              "description": "Reads classified as belonging to any of the taxa\non the Kraken2 database.\n",
              "pattern": "*{fastq.gz}"
            }
          },
          {
            "unclassified_reads_fastq": {
              "type": "file",
              "description": "Reads not classified to any of the taxa\non the Kraken2 database.\n",
              "pattern": "*{fastq.gz}"
            }
          },
          {
            "classified_reads_assignment": {
              "type": "file",
              "description": "Kraken2 output file indicating the taxonomic assignment of\neach input read\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Kraken2 report containing stats about classified\nand not classifed reads.\n",
              "pattern": "*.{report.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "bacass",
          "version": "2.0.0"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "krakentools_combinekreports",
      "path": "modules/nf-core/krakentools/combinekreports/meta.yml",
      "type": "module",
      "meta": {
        "name": "krakentools_combinekreports",
        "description": "Takes a Kraken report file and prints out a krona-compatible TEXT file",
        "keywords": [
          "kraken",
          "krakentools",
          "metagenomics",
          "table",
          "combining",
          "merging"
        ],
        "tools": [
          {
            "krakentools": {
              "description": "KrakenTools is a suite of scripts to be used for post-analysis of Kraken/KrakenUniq/Kraken2/Bracken results. Please cite the relevant paper if using KrakenTools with any of the listed programs.",
              "homepage": "https://github.com/jenniferlu717/KrakenTools",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "kreports": {
              "type": "file",
              "description": "List of kraken-style report files",
              "pattern": "*.{txt,kreport}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Combined kreport file of all input files",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "krakentools_kreport2krona",
      "path": "modules/nf-core/krakentools/kreport2krona/meta.yml",
      "type": "module",
      "meta": {
        "name": "krakentools_kreport2krona",
        "description": "Takes a Kraken report file and prints out a krona-compatible TEXT file",
        "keywords": [
          "kraken",
          "krona",
          "metagenomics",
          "visualization"
        ],
        "tools": [
          {
            "krakentools": {
              "description": "KrakenTools is a suite of scripts to be used for post-analysis of Kraken/KrakenUniq/Kraken2/Bracken results. Please cite the relevant paper if using KrakenTools with any of the listed programs.",
              "homepage": "https://github.com/jenniferlu717/KrakenTools",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "kreport": {
              "type": "file",
              "description": "Kraken report",
              "pattern": "*.{txt,kreport}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "krona": {
              "type": "file",
              "description": "Krona text-based input file converted from Kraken report",
              "pattern": "*.{txt,krona}"
            }
          }
        ],
        "authors": [
          "@MillironX"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "krakenuniq_build",
      "path": "modules/nf-core/krakenuniq/build/meta.yml",
      "type": "module",
      "meta": {
        "name": "krakenuniq_build",
        "description": "Download and build (custom) KrakenUniq databases",
        "keywords": [
          "metagenomics",
          "krakenuniq",
          "database",
          "build",
          "ncbi"
        ],
        "tools": [
          {
            "krakenuniq": {
              "description": "Metagenomics classifier with unique k-mer counting for more specific results",
              "homepage": "https://github.com/fbreitwieser/krakenuniq",
              "documentation": "https://github.com/fbreitwieser/krakenuniq",
              "tool_dev_url": "https://github.com/fbreitwieser/krakenuniq",
              "doi": "10.1186/s13059-018-1568-0",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "custom_library_dir": {
              "type": "directory",
              "description": "Optional directory containing custom fasta files for database build",
              "pattern": "*"
            }
          },
          {
            "custom_taxonomy_dir": {
              "type": "directory",
              "description": "Optional directory containing custom taxonomy files for database build",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "Directory containing KrakenUniq database",
              "pattern": "*/"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "krakenuniq_download",
      "path": "modules/nf-core/krakenuniq/download/meta.yml",
      "type": "module",
      "meta": {
        "name": "krakenuniq_download",
        "description": "Download KrakenUniq databases and related fles",
        "keywords": [
          "metagenomics",
          "krakenuniq",
          "database",
          "download",
          "ncbi"
        ],
        "tools": [
          {
            "krakenuniq": {
              "description": "Metagenomics classifier with unique k-mer counting for more specific results",
              "homepage": "https://github.com/fbreitwieser/krakenuniq",
              "documentation": "https://github.com/fbreitwieser/krakenuniq",
              "tool_dev_url": "https://github.com/fbreitwieser/krakenuniq",
              "doi": "10.1186/s13059-018-1568-0",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pattern": {
              "type": "string",
              "description": "Pattern indicating what type of NCBI data to download. See KrakenUniq documnation for possibilities."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "directory",
              "description": "Directory containing downloaded data with directory naming being the user provided pattern."
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "krakenuniq_preloadedkrakenuniq",
      "path": "modules/nf-core/krakenuniq/preloadedkrakenuniq/meta.yml",
      "type": "module",
      "meta": {
        "name": "krakenuniq_preloadedkrakenuniq",
        "description": "Classifies metagenomic sequence data using unique k-mer counts",
        "keywords": [
          "classify",
          "metagenomics",
          "kmers",
          "fastq",
          "db"
        ],
        "tools": [
          {
            "krakenuniq": {
              "description": "Metagenomics classifier with unique k-mer counting for more specific results",
              "homepage": "https://github.com/fbreitwieser/krakenuniq",
              "documentation": "https://github.com/fbreitwieser/krakenuniq",
              "doi": "10.1186/s13059-018-1568-0",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastqs": {
              "type": "file",
              "description": "List of input FastQ files"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "KrakenUniq database"
            }
          },
          {
            "ram_chunk_size": {
              "type": "val",
              "description": "Amount of maximum amount of RAM each chunk of database that should be loaded at any one time",
              "pattern": "*GB"
            }
          },
          {
            "save_output_fastqs": {
              "type": "boolean",
              "description": "If true, optional commands are added to save classified and unclassified reads\nas fastq files\n"
            }
          },
          {
            "save_reads_assignment": {
              "type": "boolean",
              "description": "If true, an optional command is added to save a file reporting the taxonomic\nclassification of each input read\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "classified_reads_fastq": {
              "type": "file",
              "description": "Reads classified as belonging to any of the taxa\non the KrakenUniq database.\n",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "unclassified_reads_fastq": {
              "type": "file",
              "description": "Reads not classified to any of the taxa\non the KrakenUniq database.\n",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "classified_assignment": {
              "type": "file",
              "description": "KrakenUniq output file indicating the taxonomic assignment of\neach input read ## DOUBLE CHECK!!\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "KrakenUniq report containing stats about classified\nand not classifed reads.\n",
              "pattern": "*.report.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@mjamy",
          "@Midnighter"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "krona_kronadb",
      "path": "modules/nf-core/krona/kronadb/meta.yml",
      "type": "module",
      "meta": {
        "name": "krona_kronadb",
        "description": "KronaTools Update Taxonomy downloads a taxonomy database",
        "keywords": [
          "database",
          "taxonomy",
          "krona"
        ],
        "tools": [
          {
            "krona": {
              "description": "Krona Tools is a set of scripts to create Krona charts from several Bioinformatics tools as well as from text and XML files.",
              "homepage": "https://github.com/marbl/Krona/wiki/KronaTools",
              "documentation": "https://github.com/marbl/Krona/wiki/Installing",
              "doi": "10.1186/1471-2105-12-385"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "A TAB separated file that contains a taxonomy database.",
              "pattern": "*.{tab}"
            }
          }
        ],
        "authors": [
          "@mjakobs"
        ]
      }
    },
    {
      "name": "krona_ktimporttaxonomy",
      "path": "modules/nf-core/krona/ktimporttaxonomy/meta.yml",
      "type": "module",
      "meta": {
        "name": "krona_ktimporttaxonomy",
        "description": "KronaTools Import Taxonomy imports taxonomy classifications and produces an interactive Krona plot.",
        "keywords": [
          "plot",
          "taxonomy",
          "interactive",
          "html",
          "visualisation",
          "krona chart"
        ],
        "tools": [
          {
            "krona": {
              "description": "Krona Tools is a set of scripts to create Krona charts from several Bioinformatics tools as well as from text and XML files.",
              "homepage": "https://github.com/marbl/Krona/wiki/KronaTools",
              "documentation": "http://manpages.ubuntu.com/manpages/impish/man1/ktImportTaxonomy.1.html",
              "doi": "10.1186/1471-2105-12-385"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "database": {
              "type": "file",
              "description": "Path to a Krona taxonomy .tab file normally downloaded and generated by\nkrona/ktUpdateTaxonomy. Custom taxonomy files can have any name, but\nmust end in `.tab`.\n",
              "pattern": "*tab"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "A tab-delimited file with taxonomy IDs and (optionally) query IDs, magnitudes, and scores.  Query IDs are taken from column 1, taxonomy IDs from column 2, and scores from column 3.  Lines beginning with # will be ignored.",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "A html file containing an interactive krona plot.",
              "pattern": "*.{html}"
            }
          }
        ],
        "authors": [
          "@mjakobs"
        ]
      },
      "pipelines": [
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "krona_ktimporttext",
      "path": "modules/nf-core/krona/ktimporttext/meta.yml",
      "type": "module",
      "meta": {
        "name": "krona_ktimporttext",
        "description": "Creates a Krona chart from text files listing quantities and lineages.",
        "keywords": [
          "plot",
          "taxonomy",
          "interactive",
          "html",
          "visualisation",
          "krona chart",
          "metagenomics"
        ],
        "tools": [
          {
            "krona": {
              "description": "Krona Tools is a set of scripts to create Krona charts from several Bioinformatics tools as well as from text and XML files.",
              "homepage": "https://github.com/marbl/Krona/wiki/KronaTools",
              "documentation": "http://manpages.ubuntu.com/manpages/impish/man1/ktImportTaxonomy.1.html",
              "tool_dev_url": "https://github.com/marbl/Krona",
              "doi": "10.1186/1471-2105-12-385",
              "licence": "https://raw.githubusercontent.com/marbl/Krona/master/KronaTools/LICENSE.txt"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Tab-delimited text file. Each line should be a number followed by a list of wedges to contribute to (starting from the highest level). If no wedges are listed (and just a quantity is given), it will contribute to the top level. If the same lineage is listed more than once, the values will be added. Quantities can be omitted if -q is specified. Lines beginning with '#' will be ignored.",
              "pattern": "*.{txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "A html file containing an interactive krona plot.",
              "pattern": "*.{html}"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "krona_ktupdatetaxonomy",
      "path": "modules/nf-core/krona/ktupdatetaxonomy/meta.yml",
      "type": "module",
      "meta": {
        "name": "krona_ktupdatetaxonomy",
        "description": "KronaTools Update Taxonomy downloads a taxonomy database",
        "keywords": [
          "database",
          "taxonomy",
          "krona",
          "visualisation"
        ],
        "tools": [
          {
            "krona": {
              "description": "Krona Tools is a set of scripts to create Krona charts from several Bioinformatics tools as well as from text and XML files.",
              "homepage": "https://github.com/marbl/Krona/wiki/KronaTools",
              "documentation": "https://github.com/marbl/Krona/wiki/Installing",
              "doi": "10.1186/1471-2105-12-385"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "A TAB separated file that contains a taxonomy database.",
              "pattern": "*.{tab}"
            }
          }
        ],
        "authors": [
          "@mjakobs"
        ]
      },
      "pipelines": [
        {
          "name": "hgtseq",
          "version": "1.1.0"
        }
      ]
    },
    {
      "name": "last_dotplot",
      "path": "modules/nf-core/last/dotplot/meta.yml",
      "type": "module",
      "meta": {
        "name": "last_dotplot",
        "description": "Makes a dotplot (Oxford Grid) of pair-wise sequence alignments",
        "keywords": [
          "LAST",
          "plot",
          "pair",
          "alignment",
          "MAF"
        ],
        "tools": [
          {
            "last": {
              "description": "LAST finds & aligns related regions of sequences.",
              "homepage": "https://gitlab.com/mcfrith/last",
              "documentation": "https://gitlab.com/mcfrith/last/-/blob/main/doc/last-dotplot.rst",
              "tool_dev_url": "https://gitlab.com/mcfrith/last",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "maf": {
              "type": "file",
              "description": "Multiple Aligment Format (MAF) file, compressed with gzip",
              "pattern": "*.{maf.gz}"
            }
          },
          {
            "format": {
              "type": "value",
              "description": "Output format (PNG or GIF)."
            }
          }
        ],
        "output": [
          {
            "png": {
              "type": "file",
              "description": "Pairwise alignment dot plot image, in PNG format.",
              "pattern": "*.png"
            }
          },
          {
            "gif": {
              "type": "file",
              "description": "Pairwise alignment dot plot image, in GIF format.",
              "pattern": "*.gif"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@charles-plessy"
        ]
      }
    },
    {
      "name": "last_lastal",
      "path": "modules/nf-core/last/lastal/meta.yml",
      "type": "module",
      "meta": {
        "name": "last_lastal",
        "description": "Find suitable score parameters for sequence alignment",
        "keywords": [
          "LAST",
          "align",
          "fastq",
          "fasta"
        ],
        "tools": [
          {
            "last": {
              "description": "LAST finds & aligns related regions of sequences.",
              "homepage": "https://gitlab.com/mcfrith/last",
              "documentation": "https://gitlab.com/mcfrith/last/-/blob/main/doc/last-train.rst",
              "tool_dev_url": "https://gitlab.com/mcfrith/last",
              "licence": [
                "GPL v3-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "index": {
              "type": "directory",
              "description": "Directory containing the files of the LAST index",
              "pattern": "lastdb/"
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastx": {
              "type": "file",
              "description": "FASTA/FASTQ file",
              "pattern": "*.{fasta,fastq}"
            }
          },
          {
            "param_file": {
              "type": "file",
              "description": "Trained parameter file",
              "pattern": "*.par"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "maf": {
              "type": "file",
              "description": "Gzipped MAF (Multiple Alignment Format) file",
              "pattern": "*.{maf.gz}"
            }
          }
        ],
        "authors": [
          "@charles-plessy"
        ]
      }
    },
    {
      "name": "last_lastdb",
      "path": "modules/nf-core/last/lastdb/meta.yml",
      "type": "module",
      "meta": {
        "name": "last_lastdb",
        "description": "Prepare sequences for subsequent alignment with lastal.",
        "keywords": [
          "LAST",
          "index",
          "fasta",
          "fastq"
        ],
        "tools": [
          {
            "last": {
              "description": "LAST finds & aligns related regions of sequences.",
              "homepage": "https://gitlab.com/mcfrith/last",
              "documentation": "https://gitlab.com/mcfrith/last/-/blob/main/doc/lastdb.rst",
              "tool_dev_url": "https://gitlab.com/mcfrith/last",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastx": {
              "type": "file",
              "description": "Sequence file in FASTA or FASTQ format. May be compressed with gzip.\n",
              "pattern": "*.{fasta,fasta.gz,fastq,fastq.gz}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "directory containing the files of the LAST index",
              "pattern": "lastdb/"
            }
          }
        ],
        "authors": [
          "@charles-plessy"
        ]
      }
    },
    {
      "name": "last_mafconvert",
      "path": "modules/nf-core/last/mafconvert/meta.yml",
      "type": "module",
      "meta": {
        "name": "last_mafconvert",
        "description": "Converts MAF alignments in another format.",
        "keywords": [
          "LAST",
          "convert",
          "alignment",
          "MAF"
        ],
        "tools": [
          {
            "last": {
              "description": "LAST finds & aligns related regions of sequences.",
              "homepage": "https://gitlab.com/mcfrith/last",
              "documentation": "https://gitlab.com/mcfrith/last/-/blob/main/doc/",
              "tool_dev_url": "https://gitlab.com/mcfrith/last",
              "licence": [
                "GPL v3-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "maf": {
              "type": "file",
              "description": "Multiple Aligment Format (MAF) file, optionally compressed with gzip",
              "pattern": "*.{maf.gz,maf}"
            }
          },
          {
            "format": {
              "type": "value",
              "description": "Output format (one of axt, blast, blasttab, chain, gff, html, psl, sam, or tab)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "axt_gz": {
              "type": "file",
              "description": "Gzipped pairwise alignment in Axt (Blastz) format (optional)",
              "pattern": "*.axt.gz"
            }
          },
          {
            "blast_gz": {
              "type": "file",
              "description": "Gzipped pairwise alignment in blast format (optional)",
              "pattern": "*.blast.gz"
            }
          },
          {
            "blasttab_gz": {
              "type": "file",
              "description": "Gzipped pairwise alignment in blasttab format (optional)",
              "pattern": "*.blasttab.gz"
            }
          },
          {
            "chain_gz": {
              "type": "file",
              "description": "Gzipped pairwise alignment in UCSC chain format (optional)",
              "pattern": "*.chain.gz"
            }
          },
          {
            "gff_gz": {
              "type": "file",
              "description": "Gzipped pairwise alignment in GFF format (optional)",
              "pattern": "*.gff.gz"
            }
          },
          {
            "html_gz": {
              "type": "file",
              "description": "Gzipped pairwise alignment in HTML format (optional)",
              "pattern": "*.html.gz"
            }
          },
          {
            "psl_gz": {
              "type": "file",
              "description": "Gzipped pairwise alignment in PSL (BLAT) format (optional)",
              "pattern": "*.psl.gz"
            }
          },
          {
            "SAM": {
              "type": "file",
              "description": "Gzipped pairwise alignment in SAM format (optional)",
              "pattern": "*.sam.gz"
            }
          },
          {
            "tab": {
              "type": "file",
              "description": "Gzipped pairwise alignment in TAB format (optional)",
              "pattern": "*.tab.gz"
            }
          }
        ],
        "authors": [
          "@aleksandrabliznina"
        ]
      }
    },
    {
      "name": "last_mafswap",
      "path": "modules/nf-core/last/mafswap/meta.yml",
      "type": "module",
      "meta": {
        "name": "last_mafswap",
        "description": "Reorder alignments in a MAF file",
        "keywords": [
          "LAST",
          "reorder",
          "alignment",
          "MAF"
        ],
        "tools": [
          {
            "last": {
              "description": "LAST finds & aligns related regions of sequences.",
              "homepage": "https://gitlab.com/mcfrith/last",
              "documentation": "https://gitlab.com/mcfrith/last/-/blob/main/doc/",
              "tool_dev_url": "https://gitlab.com/mcfrith/last",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "maf": {
              "type": "file",
              "description": "Multiple Aligment Format (MAF) file, optionally compressed with gzip",
              "pattern": "*.{maf.gz,maf}"
            }
          }
        ],
        "output": [
          {
            "maf": {
              "type": "file",
              "description": "Multiple Aligment Format (MAF) file, compressed with gzip",
              "pattern": "*.{maf.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@charles-plessy"
        ]
      }
    },
    {
      "name": "last_postmask",
      "path": "modules/nf-core/last/postmask/meta.yml",
      "type": "module",
      "meta": {
        "name": "last_postmask",
        "description": "Post-alignment masking",
        "keywords": [
          "LAST",
          "mask",
          "alignment",
          "MAF"
        ],
        "tools": [
          {
            "last": {
              "description": "LAST finds & aligns related regions of sequences.",
              "homepage": "https://gitlab.com/mcfrith/last",
              "documentation": "https://gitlab.com/mcfrith/last/-/blob/main/doc/last-postmask.rst",
              "tool_dev_url": "https://gitlab.com/mcfrith/last",
              "doi": "10.1371/journal.pone.0028819",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "maf": {
              "type": "file",
              "description": "Multiple Aligment Format (MAF) file, optionally compressed with gzip",
              "pattern": "*.{maf.gz,maf}"
            }
          }
        ],
        "output": [
          {
            "maf": {
              "type": "file",
              "description": "Multiple Aligment Format (MAF) file, compressed with gzip",
              "pattern": "*.{maf.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@charles-plessy"
        ]
      }
    },
    {
      "name": "last_split",
      "path": "modules/nf-core/last/split/meta.yml",
      "type": "module",
      "meta": {
        "name": "last_split",
        "description": "Find split or spliced alignments in a MAF file",
        "keywords": [
          "LAST",
          "split",
          "spliced",
          "alignment",
          "MAF"
        ],
        "tools": [
          {
            "last": {
              "description": "LAST finds & aligns related regions of sequences.",
              "homepage": "https://gitlab.com/mcfrith/last",
              "documentation": "https://gitlab.com/mcfrith/last/-/blob/main/doc/",
              "tool_dev_url": "https://gitlab.com/mcfrith/last",
              "licence": [
                "GPL v3-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "maf": {
              "type": "file",
              "description": "Multiple Aligment Format (MAF) file, compressed with gzip",
              "pattern": "*.{maf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "maf": {
              "type": "file",
              "description": "Multiple Aligment Format (MAF) file, compressed with gzip",
              "pattern": "*.{maf.gz}"
            }
          }
        ],
        "authors": [
          "@aleksandrabliznina"
        ]
      }
    },
    {
      "name": "last_train",
      "path": "modules/nf-core/last/train/meta.yml",
      "type": "module",
      "meta": {
        "name": "last_train",
        "description": "Find suitable score parameters for sequence alignment",
        "keywords": [
          "LAST",
          "train",
          "fastq",
          "fasta"
        ],
        "tools": [
          {
            "last": {
              "description": "LAST finds & aligns related regions of sequences.",
              "homepage": "https://gitlab.com/mcfrith/last",
              "documentation": "https://gitlab.com/mcfrith/last/-/blob/main/doc/last-train.rst",
              "tool_dev_url": "https://gitlab.com/mcfrith/last",
              "licence": [
                "GPL v3-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "index": {
              "type": "directory",
              "description": "Directory containing the files of the LAST index",
              "pattern": "lastdb/"
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastx": {
              "type": "file",
              "description": "FASTA/FASTQ file",
              "pattern": "*.{fasta,fastq}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "param_file": {
              "type": "file",
              "description": "Trained parameter file",
              "pattern": "*.par"
            }
          }
        ],
        "authors": [
          "@aleksandrabliznina"
        ]
      }
    },
    {
      "name": "leehom",
      "path": "modules/nf-core/leehom/meta.yml",
      "type": "module",
      "meta": {
        "name": "leehom",
        "description": "Bayesian reconstruction of ancient DNA fragments",
        "keywords": [
          "ancient DNA",
          "adapter removal",
          "clipping",
          "trimming",
          "merging",
          "collapsing",
          "preprocessing",
          "bayesian"
        ],
        "tools": [
          {
            "leehom": {
              "description": "Bayesian reconstruction of ancient DNA fragments",
              "homepage": "https://grenaud.github.io/leeHom/",
              "documentation": "https://github.com/grenaud/leeHom",
              "tool_dev_url": "https://github.com/grenaud/leeHom",
              "doi": "10.1093/nar/gku699",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Unaligned BAM or one or two gzipped FASTQ file(s)",
              "pattern": "*.{bam,fq.gz,fastq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "fq_pass": {
              "type": "file",
              "description": "Trimmed and merged FASTQ",
              "pattern": "*.fq.gz"
            }
          },
          {
            "fq_fail": {
              "type": "file",
              "description": "Failed trimmed and merged FASTQs",
              "pattern": "*.fail.fq.gz"
            }
          },
          {
            "unmerged_r1_fq_pass": {
              "type": "file",
              "description": "Passed unmerged R1 FASTQs",
              "pattern": "*.r1.fq.gz"
            }
          },
          {
            "unmerged_r1_fq_fail": {
              "type": "file",
              "description": "Failed unmerged R1 FASTQs",
              "pattern": "*.r1.fail.fq.gz"
            }
          },
          {
            "unmerged_r2_fq_pass": {
              "type": "file",
              "description": "Passed unmerged R2 FASTQs",
              "pattern": "*.r2.fq.gz"
            }
          },
          {
            "unmerged_r2_fq_pass": {
              "type": "file",
              "description": "Failed unmerged R2 FASTQs",
              "pattern": "*.r2.fail.fq.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file of command",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "legsta",
      "path": "modules/nf-core/legsta/meta.yml",
      "type": "module",
      "meta": {
        "name": "legsta",
        "description": "Typing of clinical and environmental isolates of Legionella pneumophila",
        "keywords": [
          "bacteria",
          "legionella"
        ],
        "tools": [
          {
            "legsta": {
              "description": "In silico Legionella pneumophila Sequence Based Typing",
              "homepage": "https://github.com/tseemann/legsta",
              "documentation": "https://github.com/tseemann/legsta",
              "tool_dev_url": "https://github.com/tseemann/legsta",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "seqs": {
              "type": "file",
              "description": "FASTA, GenBank or EMBL formatted files",
              "pattern": "*.{fasta,gbk,embl}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab-delimited summary of the results",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "lima",
      "path": "modules/nf-core/lima/meta.yml",
      "type": "module",
      "meta": {
        "name": "lima",
        "description": "lima - The PacBio Barcode Demultiplexer and Primer Remover",
        "keywords": [
          "isoseq",
          "ccs",
          "primer",
          "pacbio",
          "barcode"
        ],
        "tools": [
          {
            "lima": {
              "description": "lima - The PacBio Barcode Demultiplexer and Primer Remover",
              "homepage": "https://github.com/PacificBiosciences/pbbioconda",
              "documentation": "https://lima.how/",
              "tool_dev_url": "https://github.com/pacificbiosciences/barcoding/",
              "licence": [
                "BSD-3-Clause-Clear"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "ccs": {
              "type": "file",
              "description": "A BAM or fasta or fasta.gz or fastq or fastq.gz file of subreads or ccs",
              "pattern": "*.{bam,fasta,fasta.gz,fastq,fastq.gz}"
            }
          },
          {
            "primers": {
              "type": "file",
              "description": "Fasta file, sequences of primers",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "A bam file of ccs purged of primers",
              "pattern": "*.bam"
            }
          },
          {
            "pbi": {
              "type": "file",
              "description": "Pacbio index file of ccs purged of primers",
              "pattern": "*.bam"
            }
          },
          {
            "xml": {
              "type": "file",
              "description": "An XML file representing a set of a particular sequence data type such as subreads, references or aligned subreads.",
              "pattern": "*.xml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "A metadata json file",
              "pattern": "*.json"
            }
          },
          {
            "clips": {
              "type": "file",
              "description": "A fasta file of clipped primers",
              "pattern": "*.clips"
            }
          },
          {
            "counts": {
              "type": "file",
              "description": "A tabulated file of describing pairs of primers",
              "pattern": "*.counts"
            }
          },
          {
            "guess": {
              "type": "file",
              "description": "A second tabulated file of describing pairs of primers (no doc available)",
              "pattern": "*.guess"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "A tab-separated file about each ZMW, unfiltered",
              "pattern": "*.report"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "This file shows how many ZMWs have been filtered, how ZMWs many are same/different, and how many reads have been filtered.",
              "pattern": "*.summary"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sguizard"
        ]
      },
      "pipelines": [
        {
          "name": "isoseq",
          "version": "1.1.4"
        }
      ]
    },
    {
      "name": "limma_differential",
      "path": "modules/nf-core/limma/differential/meta.yml",
      "type": "module",
      "meta": {
        "name": "limma_differential",
        "description": "runs a differential expression analysis with Limma",
        "keywords": [
          "differential",
          "expression",
          "microarray",
          "limma"
        ],
        "tools": [
          {
            "limma": {
              "description": "Linear Models for Microarray Data",
              "homepage": "https://bioconductor.org/packages/release/bioc/html/limma.html",
              "documentation": "https://bioconductor.org/packages/release/bioc/vignettes/limma/inst/doc/usersguide.pdf",
              "tool_dev_url": "https://github.com/cran/limma\"\"",
              "doi": "10.18129/B9.bioc.limma",
              "licence": "['LGPL >=3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing contrast information. This can be used at the\nworkflow level to pass optional parameters to the module, e.g.\n[ id:'contrast1', blocking:'patient' ] passed in as ext.args like:\n'--blocking_variable $meta.blocking'.\n"
            }
          },
          {
            "contrast_variable": {
              "type": "string",
              "description": "The column in the sample sheet that should be used to define groups for\ncomparison\n"
            }
          },
          {
            "reference": {
              "type": "string",
              "description": "The value within the contrast_variable column of the sample sheet that\nshould be used to derive the reference samples\n"
            }
          },
          {
            "target": {
              "type": "string",
              "description": "The value within the contrast_variable column of the sample sheet that\nshould be used to derive the target samples\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy map containing study-wide metadata related to the sample sheet\nand matrix\n"
            }
          },
          {
            "samplesheeet": {
              "type": "file",
              "description": "CSV or TSV format sample sheet with sample metadata\n"
            }
          },
          {
            "intensities": {
              "type": "file",
              "description": "Raw TSV or CSV format expression matrix with probes by row and samples\nby column\n"
            }
          }
        ],
        "output": [
          {
            "results": {
              "type": "file",
              "description": "TSV-format table of differential expression information as output by Limma",
              "pattern": "*.limma.results.tsv"
            }
          },
          {
            "md_plot": {
              "type": "file",
              "description": "Limma mean difference plot",
              "pattern": "*.mean_difference.png"
            }
          },
          {
            "rdata": {
              "type": "file",
              "description": "Serialised MArrayLM object",
              "pattern": "*.MArrayLM.limma.rds"
            }
          },
          {
            "session_info": {
              "type": "file",
              "description": "dump of R SessionInfo",
              "pattern": "*.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "lissero",
      "path": "modules/nf-core/lissero/meta.yml",
      "type": "module",
      "meta": {
        "name": "lissero",
        "description": "Serogrouping Listeria monocytogenes assemblies",
        "keywords": [
          "fasta",
          "Listeria monocytogenes",
          "serogroup"
        ],
        "tools": [
          {
            "lissero": {
              "description": "In silico serotyping of Listeria monocytogenes",
              "homepage": "https://github.com/MDU-PHL/LisSero/blob/master/README.md",
              "documentation": "https://github.com/MDU-PHL/LisSero/blob/master/README.md",
              "tool_dev_url": "https://github.com/MDU-PHL/lissero",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA assembly file",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab-delimited result file",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "lofreq_call",
      "path": "modules/nf-core/lofreq/call/meta.yml",
      "type": "module",
      "meta": {
        "name": "lofreq_call",
        "description": "Lofreq subcommand to call low frequency variants from alignments",
        "keywords": [
          "variant calling",
          "low frequency variant calling",
          "lofreq",
          "lofreq/call"
        ],
        "tools": [
          {
            "lofreq": {
              "description": "A fast and sensitive variant-caller for inferring SNVs and indels from next-generation sequencing data",
              "homepage": "https://csb5.github.io/lofreq/",
              "documentation": "https://csb5.github.io/lofreq/commands/",
              "doi": "10.1093/nar/gks918 ",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM input file",
              "pattern": "*.{bam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF output file",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "authors": [
          "@bjohnnyd"
        ]
      }
    },
    {
      "name": "lofreq_callparallel",
      "path": "modules/nf-core/lofreq/callparallel/meta.yml",
      "type": "module",
      "meta": {
        "name": "lofreq_callparallel",
        "description": "It predicts variants using multiple processors",
        "keywords": [
          "call",
          "variants"
        ],
        "tools": [
          {
            "lofreq": {
              "description": "Lofreq is a fast and sensitive variant-caller for inferring SNVs and indels from next-generation sequencing data. It's call-parallel programme predicts variants using multiple processors",
              "homepage": "https://csb5.github.io/lofreq/",
              "documentation": "https://csb5.github.io/lofreq/",
              "doi": "10.1093/nar/gks918",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.{bai}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome FASTA file",
              "pattern": "*.{fasta}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Reference genome FASTA index file",
              "pattern": "*.{fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Predicted variants file",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "authors": [
          "@kaurravneet4123",
          "@bjohnnyd"
        ]
      }
    },
    {
      "name": "lofreq_filter",
      "path": "modules/nf-core/lofreq/filter/meta.yml",
      "type": "module",
      "meta": {
        "name": "lofreq_filter",
        "description": "Lofreq subcommand to remove variants with low coverage or strand bias potential",
        "keywords": [
          "variant calling",
          "low frequency variant calling",
          "filtering",
          "lofreq",
          "lofreq/filter"
        ],
        "tools": [
          {
            "lofreq": {
              "description": "A fast and sensitive variant-caller for inferring SNVs and indels from next-generation sequencing data",
              "homepage": "https://csb5.github.io/lofreq/",
              "documentation": "https://csb5.github.io/lofreq/commands/",
              "doi": "10.1093/nar/gks918 ",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF input file",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF filtered output file",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "authors": [
          "@bjohnnyd"
        ]
      }
    },
    {
      "name": "lofreq_indelqual",
      "path": "modules/nf-core/lofreq/indelqual/meta.yml",
      "type": "module",
      "meta": {
        "name": "lofreq_indelqual",
        "description": "Inserts indel qualities in a BAM file",
        "keywords": [
          "bam",
          "indel",
          "qualities"
        ],
        "tools": [
          {
            "lofreq": {
              "description": "Lofreq is a fast and sensitive variant-caller for inferring SNVs and indels from next-generation sequencing data. It's indelqual programme inserts indel qualities in a BAM file",
              "homepage": "https://csb5.github.io/lofreq/",
              "doi": "10.1093/nar/gks918",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome FASTA file",
              "pattern": "*.{fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file with indel qualities inserted into it",
              "pattern": "*.{bam}"
            }
          }
        ],
        "authors": [
          "@kaurravneet4123"
        ]
      }
    },
    {
      "name": "lofreq_somatic",
      "path": "modules/nf-core/lofreq/somatic/meta.yml",
      "type": "module",
      "meta": {
        "name": "lofreq_somatic",
        "description": "Lofreq subcommand to call low frequency variants from alignments when tumor-normal paired samples are available",
        "keywords": [
          "variant calling",
          "low frequency variant calling",
          "somatic",
          "variants",
          "vcf"
        ],
        "tools": [
          {
            "lofreq": {
              "description": "A fast and sensitive variant-caller for inferring SNVs and indels from next-generation sequencing data",
              "homepage": "https://csb5.github.io/lofreq/",
              "documentation": "https://csb5.github.io/lofreq/commands/",
              "doi": "10.1093/nar/gks918",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information"
            }
          },
          {
            "tumor_bam": {
              "type": "file",
              "description": "tumor sample input BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "tumor_bai": {
              "type": "file",
              "description": "tumor sample BAM index file",
              "pattern": "*.{bai}"
            }
          },
          {
            "normal_bam": {
              "type": "file",
              "description": "normal sample input BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "normal_bai": {
              "type": "file",
              "description": "normal sample BAM index file",
              "pattern": "*.{bai}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome FASTA file",
              "pattern": "*.{fasta}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Reference genome FASTA index file",
              "pattern": "*.{fai}"
            }
          },
          {
            "target_bed": {
              "type": "file",
              "description": "BED file containing target regions for variant calling",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz}"
            }
          }
        ],
        "authors": [
          "@nevinwu"
        ]
      }
    },
    {
      "name": "macrel_contigs",
      "path": "modules/nf-core/macrel/contigs/meta.yml",
      "type": "module",
      "meta": {
        "name": "macrel_contigs",
        "description": "A tool that mines antimicrobial peptides (AMPs) from (meta)genomes by predicting peptides from genomes (provided as contigs) and outputs all the predicted anti-microbial peptides found.",
        "keywords": [
          "AMP",
          "antimicrobial peptides",
          "genome mining",
          "metagenomes",
          "peptide prediction"
        ],
        "tools": [
          {
            "macrel": {
              "description": "A pipeline for AMP (antimicrobial peptide) prediction",
              "homepage": "https://macrel.readthedocs.io/en/latest/",
              "documentation": "https://macrel.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/BigDataBiology/macrel",
              "doi": "10.7717/peerj.10555",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "A fasta file with nucleotide sequences.",
              "pattern": "*.{fasta,fa,fna,fasta.gz,fa.gz,fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "amp_prediction": {
              "type": "file",
              "description": "A zipped file, with all predicted amps in a table format.",
              "pattern": "*.prediction.gz"
            }
          },
          {
            "smorfs": {
              "type": "file",
              "description": "A zipped fasta file containing aminoacid sequences showing the general gene prediction information in the contigs.",
              "pattern": "*.smorfs.faa.gz"
            }
          },
          {
            "all_orfs": {
              "type": "file",
              "description": "A zipped fasta file containing amino acid sequences showing the general gene prediction information in the contigs.",
              "pattern": "*.all_orfs.faa.gz"
            }
          },
          {
            "readme_file": {
              "type": "file",
              "description": "A readme file containing tool specific information (e.g. citations, details about the output, etc.).",
              "pattern": "*.md"
            }
          },
          {
            "log_file": {
              "type": "file",
              "description": "A log file containing the information pertaining to the run.",
              "pattern": "*_log.txt"
            }
          }
        ],
        "authors": [
          "@darcy220606"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "macs2_callpeak",
      "path": "modules/nf-core/macs2/callpeak/meta.yml",
      "type": "module",
      "meta": {
        "name": "macs2_callpeak",
        "description": "Peak calling of enriched genomic regions of ChIP-seq and ATAC-seq experiments",
        "keywords": [
          "alignment",
          "atac-seq",
          "chip-seq",
          "peak-calling"
        ],
        "tools": [
          {
            "macs2": {
              "description": "Model Based Analysis for ChIP-Seq data",
              "documentation": "https://docs.csc.fi/apps/macs2/",
              "tool_dev_url": "https://github.com/macs3-project/MACS",
              "doi": "10.1101/496521",
              "licence": [
                "BSD"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ipbam": {
              "type": "file",
              "description": "The ChIP-seq treatment file"
            }
          },
          {
            "controlbam": {
              "type": "file",
              "description": "The control file"
            }
          },
          {
            "macs2_gsize": {
              "type": "string",
              "description": "Effective genome size. It can be 1.0e+9 or 1000000000, or shortcuts:'hs' for human (2.7e9), 'mm' for mouse (1.87e9), 'ce' for C. elegans (9e7) and 'dm' for fruitfly (1.2e8)"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          },
          {
            "peak": {
              "type": "file",
              "description": "BED file containing annotated peaks",
              "pattern": "*.gappedPeak,*.narrowPeak}"
            }
          },
          {
            "xls": {
              "type": "file",
              "description": "xls file containing annotated peaks",
              "pattern": "*.xls"
            }
          },
          {
            "gapped": {
              "type": "file",
              "description": "Optional BED file containing gapped peak",
              "pattern": "*.gappedPeak"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Optional BED file containing peak summits locations for every peak",
              "pattern": "*.bed"
            }
          },
          {
            "bdg": {
              "type": "file",
              "description": "Optional bedGraph files for input and treatment input samples",
              "pattern": "*.bdg"
            }
          }
        ],
        "authors": [
          "@ntoda03",
          "@JoseEspinosa",
          "@jianhong"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "mafft",
      "path": "modules/nf-core/mafft/meta.yml",
      "type": "module",
      "meta": {
        "name": "mafft",
        "description": "Multiple sequence alignment using MAFFT",
        "keywords": [
          "msa",
          "multiple sequence alignment"
        ],
        "tools": [
          {
            "mafft": {
              "description": "Multiple alignment program for amino acid or nucleotide sequences based on fast Fourier transform",
              "homepage": "https://mafft.cbrc.jp/alignment/software/",
              "documentation": "https://mafft.cbrc.jp/alignment/software/manual/manual.html",
              "tool_dev_url": "https://mafft.cbrc.jp/alignment/software/source.html",
              "doi": "10.1093/nar/gkf436",
              "licence": [
                "BSD"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file containing the sequences to align",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "addsequences": {
              "type": "file",
              "description": "FASTA file containing sequences to align to the sequences in `fasta`",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fas": {
              "type": "file",
              "description": "Aligned sequences in FASTA format",
              "pattern": "*.{fas}"
            }
          }
        ],
        "authors": [
          "@MillironX"
        ]
      },
      "subworkflows": [
        "fasta_newick_epang_gappa"
      ],
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        }
      ]
    },
    {
      "name": "mageck_count",
      "path": "modules/nf-core/mageck/count/meta.yml",
      "type": "module",
      "meta": {
        "name": "mageck_count",
        "description": "mageck count for functional genomics, reads are usually mapped to a specific sgRNA",
        "keywords": [
          "sort",
          "functional genomics",
          "sgRNA",
          "CRISPR-Cas9"
        ],
        "tools": [
          {
            "mageck": {
              "description": "MAGeCK (Model-based Analysis of Genome-wide CRISPR-Cas9 Knockout), an algorithm to process, QC, analyze and visualize CRISPR screening data.",
              "homepage": "https://sourceforge.net/p/mageck/wiki/Home/",
              "documentation": "https://sourceforge.net/p/mageck/wiki/demo/#step-4-run-the-mageck-count-command",
              "doi": "10.1186/s13059-014-0554-4",
              "licence": "['BSD License']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "library": {
              "type": "file",
              "description": "library file containing the sgRNA and gene name",
              "pattern": "*.{csv,txt,tsv}"
            }
          },
          {
            "inputfile": {
              "type": "file",
              "description": "library fastq file containing the sgRNA and gene name or count table containing the sgRNA and number of reads to per sample",
              "pattern": "*.{fq,fastq,fastq.gz,fq.gz,csv,txt,tsv}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "norm": {
              "type": "file",
              "description": "File containing normalized read counts",
              "pattern": "*.count_normalized.txt"
            }
          },
          {
            "count": {
              "type": "file",
              "description": "File containing read counts",
              "pattern": "*.countsummary.txt"
            }
          }
        ],
        "authors": [
          "@LaurenceKuhl"
        ]
      },
      "pipelines": [
        {
          "name": "crisprseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "mageck_mle",
      "path": "modules/nf-core/mageck/mle/meta.yml",
      "type": "module",
      "meta": {
        "name": "mageck_mle",
        "description": "maximum-likelihood analysis of gene essentialities computation",
        "keywords": [
          "sort",
          "maximum-likelihood",
          "CRISPR"
        ],
        "tools": [
          {
            "mageck": {
              "description": "MAGeCK (Model-based Analysis of Genome-wide CRISPR-Cas9 Knockout), an algorithm to process, QC, analyze and visualize CRISPR screening data.",
              "homepage": "https://sourceforge.net/p/mageck/wiki/Home/#mle",
              "documentation": "https://sourceforge.net/p/mageck/wiki/Home/",
              "tool_dev_url": "https://bitbucket.org/liulab/mageck/src",
              "doi": "10.1186/s13059-015-0843-6",
              "licence": "['BSD License']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "count_table": {
              "type": "file",
              "description": "Count table file.\nEach line in the table should include\nsgRNA name (1st column), target gene (2nd column)\nand read counts in each sample.\n",
              "pattern": "*.{txt,tsv}"
            }
          },
          {
            "design_matrix": {
              "type": "file",
              "description": "Design matrix describing the samples and conditions",
              "pattern": "*.{txt,tsv}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "gene_summary": {
              "type": "file",
              "description": "Gene summary file describing the fitness score\nand associated p-values.\n",
              "pattern": "*.{gene_summary}"
            }
          },
          {
            "sgrna_summary": {
              "type": "file",
              "description": "sgRNA summary file describing the sgRNA and\nassociated gene\n",
              "pattern": "*.{gene_summary}"
            }
          }
        ],
        "authors": [
          "@LaurenceKuhl"
        ]
      },
      "pipelines": [
        {
          "name": "crisprseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "mageck_test",
      "path": "modules/nf-core/mageck/test/meta.yml",
      "type": "module",
      "meta": {
        "name": "mageck_test",
        "description": "Mageck test performs a robust ranking aggregation (RRA) to identify positively or negatively selected genes in functional genomics screens.",
        "keywords": [
          "sort",
          "rra",
          "CRISPR"
        ],
        "tools": [
          {
            "mageck": {
              "description": "MAGeCK (Model-based Analysis of Genome-wide CRISPR-Cas9 Knockout), an algorithm to process, QC, analyze and visualize CRISPR screening data.",
              "homepage": "https://sourceforge.net/p/mageck/wiki/Home/#mle",
              "documentation": "https://sourceforge.net/p/mageck/wiki/Home/",
              "tool_dev_url": "https://bitbucket.org/liulab/mageck/src",
              "doi": "10.1186/s13059-015-0843-6",
              "licence": "['BSD License']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "count_table": {
              "type": "file",
              "description": "Count table file.\nEach line in the table should include\nsgRNA name (1st column), target gene (2nd column)\nand read counts in each sample.\n",
              "pattern": "*.{txt,tsv}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "gene_summary": {
              "type": "file",
              "description": "Gene summary file describing the fitness score\nand associated p-values.\n",
              "pattern": "*.{gene_summary.txt}"
            }
          },
          {
            "sgrna_summary": {
              "type": "file",
              "description": "sgRNA summary file describing the sgRNA and\nassociated gene\n",
              "pattern": "*.{sgrna_summary.txt}"
            }
          },
          {
            "r_script": {
              "type": "file",
              "description": "R script allowing to output plots\nfrom main hit genes\n",
              "pattern": "*.R"
            }
          }
        ],
        "authors": [
          "@LaurenceKuhl"
        ]
      },
      "pipelines": [
        {
          "name": "crisprseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "malt_build",
      "path": "modules/nf-core/malt/build/meta.yml",
      "type": "module",
      "meta": {
        "name": "malt_build",
        "description": "MALT, an acronym for MEGAN alignment tool, is a sequence alignment and analysis tool designed for processing high-throughput sequencing data, especially in the context of metagenomics.",
        "keywords": [
          "malt",
          "alignment",
          "metagenomics",
          "ancient DNA",
          "aDNA",
          "palaeogenomics",
          "archaeogenomics",
          "microbiome",
          "database"
        ],
        "tools": [
          {
            "malt": {
              "description": "A tool for mapping metagenomic data",
              "homepage": "https://www.wsi.uni-tuebingen.de/lehrstuehle/algorithms-in-bioinformatics/software/malt/",
              "documentation": "https://software-ab.cs.uni-tuebingen.de/download/malt/manual.pdf",
              "doi": "10.1038/s41559-017-0446-6",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "fastas": {
              "type": "file",
              "description": "Directory of, or list of FASTA reference files for indexing",
              "pattern": "*/|*.fasta"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "Directory of, or GFF3 files of input FASTA files",
              "pattern": "*/|*.gff|*.gff3"
            }
          },
          {
            "mapping_db": {
              "type": "file",
              "description": "MEGAN .db file from https://software-ab.cs.uni-tuebingen.de/download/megan6/welcome.html",
              "pattern": "*.db"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "Directory containing MALT database index directory",
              "pattern": "malt_index/"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file from STD out of malt-build",
              "pattern": "malt-build.log"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "malt_run",
      "path": "modules/nf-core/malt/run/meta.yml",
      "type": "module",
      "meta": {
        "name": "malt_run",
        "description": "MALT, an acronym for MEGAN alignment tool, is a sequence alignment and analysis tool designed for processing high-throughput sequencing data, especially in the context of metagenomics.",
        "keywords": [
          "malt",
          "alignment",
          "metagenomics",
          "ancient DNA",
          "aDNA",
          "palaeogenomics",
          "archaeogenomics",
          "microbiome"
        ],
        "tools": [
          {
            "malt": {
              "description": "A tool for mapping metagenomic data",
              "homepage": "https://www.wsi.uni-tuebingen.de/lehrstuehle/algorithms-in-bioinformatics/software/malt/",
              "documentation": "https://software-ab.cs.uni-tuebingen.de/download/malt/manual.pdf",
              "doi": "10.1038/s41559-017-0446-6",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastqs": {
              "type": "file",
              "description": "Input FASTQ files",
              "pattern": "*.{fastq.gz,fq.gz}"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "Index/database directory from malt-build",
              "pattern": "*/"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "rma6": {
              "type": "file",
              "description": "MEGAN6 RMA6 file",
              "pattern": "*.rma6"
            }
          },
          {
            "sam": {
              "type": "file",
              "description": "Alignment files in Tab, Text or MEGAN-compatible SAM format",
              "pattern": "*.{tab,txt,sam}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log of verbose MALT stdout",
              "pattern": "*-malt-run.log"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "maltextract",
      "path": "modules/nf-core/maltextract/meta.yml",
      "type": "module",
      "meta": {
        "name": "maltextract",
        "description": "Tool for evaluation of MALT results for true positives of ancient metagenomic taxonomic screening",
        "keywords": [
          "malt",
          "MaltExtract",
          "HOPS",
          "alignment",
          "metagenomics",
          "ancient DNA",
          "aDNA",
          "palaeogenomics",
          "archaeogenomics",
          "microbiome",
          "authentication",
          "damage",
          "edit distance"
        ],
        "tools": [
          {
            "maltextract": {
              "description": "Java tool to work with ancient metagenomics",
              "homepage": "https://github.com/rhuebler/hops",
              "documentation": "https://github.com/rhuebler/hops",
              "tool_dev_url": "https://github.com/rhuebler/hops",
              "doi": "10.1186/s13059-019-1903-0",
              "licence": [
                "GPL 3"
              ]
            }
          }
        ],
        "input": [
          {
            "rma6": {
              "type": "file",
              "description": "RMA6 files from MALT",
              "pattern": "*.rma6"
            }
          },
          {
            "taxon_list": {
              "type": "file",
              "description": "List of target taxa to evaluate",
              "pattern": "*.txt"
            }
          },
          {
            "ncbi_dir": {
              "type": "directory",
              "description": "Directory containing NCBI taxonomy map and tre files",
              "pattern": "${ncbi_dir}/"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "results": {
              "type": "directory",
              "description": "Directory containing MaltExtract text results files",
              "pattern": "results/"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "manta_convertinversion",
      "path": "modules/nf-core/manta/convertinversion/meta.yml",
      "type": "module",
      "meta": {
        "name": "manta_convertinversion",
        "description": "Manta calls structural variants (SVs) and indels from mapped paired-end sequencing reads. This script reformats inversions into single inverted sequence junctions which was the format used in Manta versions <= 1.4.0.",
        "keywords": [
          "structural variants",
          "conversion",
          "indels"
        ],
        "tools": [
          {
            "manta": {
              "description": "Structural variant and indel caller for mapped sequencing data",
              "homepage": "https://github.com/Illumina/manta",
              "documentation": "https://github.com/Illumina/manta/blob/v1.6.0/docs/userGuide/README.md",
              "tool_dev_url": "https://github.com/Illumina/manta",
              "doi": "10.1093/bioinformatics/btv710",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file produces by Manta",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file with reformatted inversions",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "TBI file produces by Manta",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      }
    },
    {
      "name": "manta_germline",
      "path": "modules/nf-core/manta/germline/meta.yml",
      "type": "module",
      "meta": {
        "name": "manta_germline",
        "description": "Manta calls structural variants (SVs) and indels from mapped paired-end sequencing reads. It is optimized for analysis of germline variation in small sets of individuals and somatic variation in tumor/normal sample pairs.",
        "keywords": [
          "somatic",
          "wgs",
          "wxs",
          "panel",
          "vcf",
          "structural variants",
          "small indels"
        ],
        "tools": [
          {
            "manta": {
              "description": "Structural variant and indel caller for mapped sequencing data",
              "homepage": "https://github.com/Illumina/manta",
              "documentation": "https://github.com/Illumina/manta/blob/v1.6.0/docs/userGuide/README.md",
              "tool_dev_url": "https://github.com/Illumina/manta",
              "doi": "10.1093/bioinformatics/btv710",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file. For joint calling use a list of files.",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file. For joint calling use a list of files.",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "target_bed": {
              "type": "file",
              "description": "BED file containing target regions for variant calling",
              "pattern": "*.{bed}"
            }
          },
          {
            "target_bed_tbi": {
              "type": "file",
              "description": "Index for BED file containing target regions for variant calling",
              "pattern": "*.{bed.tbi}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome reference FASTA file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Genome reference FASTA index file",
              "pattern": "*.{fa.fai,fasta.fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "candidate_small_indels_vcf": {
              "type": "file",
              "description": "Gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "candidate_small_indels_vcf_tbi": {
              "type": "file",
              "description": "Index for gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz.tbi}"
            }
          },
          {
            "candidate_sv_vcf": {
              "type": "file",
              "description": "Gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "candidate_sv_vcf_tbi": {
              "type": "file",
              "description": "Index for gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz.tbi}"
            }
          },
          {
            "diploid_sv_vcf": {
              "type": "file",
              "description": "Gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "diploid_sv_vcf_tbi": {
              "type": "file",
              "description": "Index for gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz.tbi}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxulysse",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "manta_somatic",
      "path": "modules/nf-core/manta/somatic/meta.yml",
      "type": "module",
      "meta": {
        "name": "manta_somatic",
        "description": "Manta calls structural variants (SVs) and indels from mapped paired-end sequencing reads. It is optimized for analysis of germline variation in small sets of individuals and somatic variation in tumor/normal sample pairs.",
        "keywords": [
          "somatic",
          "wgs",
          "wxs",
          "panel",
          "vcf",
          "structural variants",
          "small indels"
        ],
        "tools": [
          {
            "manta": {
              "description": "Structural variant and indel caller for mapped sequencing data",
              "homepage": "https://github.com/Illumina/manta",
              "documentation": "https://github.com/Illumina/manta/blob/v1.6.0/docs/userGuide/README.md",
              "tool_dev_url": "https://github.com/Illumina/manta",
              "doi": "10.1093/bioinformatics/btv710",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_normal": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "input_index_normal": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "input_tumor": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "input_index_tumor": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "target_bed": {
              "type": "file",
              "description": "BED file containing target regions for variant calling",
              "pattern": "*.{bed}"
            }
          },
          {
            "target_bed_tbi": {
              "type": "file",
              "description": "Index for BED file containing target regions for variant calling",
              "pattern": "*.{bed.tbi}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome reference FASTA file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Genome reference FASTA index file",
              "pattern": "*.{fa.fai,fasta.fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "candidate_small_indels_vcf": {
              "type": "file",
              "description": "Gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "candidate_small_indels_vcf_tbi": {
              "type": "file",
              "description": "Index for gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz.tbi}"
            }
          },
          {
            "candidate_sv_vcf": {
              "type": "file",
              "description": "Gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "candidate_sv_vcf_tbi": {
              "type": "file",
              "description": "Index for gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz.tbi}"
            }
          },
          {
            "diploid_sv_vcf": {
              "type": "file",
              "description": "Gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "diploid_sv_vcf_tbi": {
              "type": "file",
              "description": "Index for gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz.tbi}"
            }
          },
          {
            "somatic_sv_vcf": {
              "type": "file",
              "description": "Gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "somatic_sv_vcf_tbi": {
              "type": "file",
              "description": "Index for gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz.tbi}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "manta_tumoronly",
      "path": "modules/nf-core/manta/tumoronly/meta.yml",
      "type": "module",
      "meta": {
        "name": "manta_tumoronly",
        "description": "Manta calls structural variants (SVs) and indels from mapped paired-end sequencing reads. It is optimized for analysis of germline variation in small sets of individuals and somatic variation in tumor/normal sample pairs.",
        "keywords": [
          "somatic",
          "wgs",
          "wxs",
          "panel",
          "vcf",
          "structural variants",
          "small indels"
        ],
        "tools": [
          {
            "manta": {
              "description": "Structural variant and indel caller for mapped sequencing data",
              "homepage": "https://github.com/Illumina/manta",
              "documentation": "https://github.com/Illumina/manta/blob/v1.6.0/docs/userGuide/README.md",
              "tool_dev_url": "https://github.com/Illumina/manta",
              "doi": "10.1093/bioinformatics/btv710",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "target_bed": {
              "type": "file",
              "description": "BED file containing target regions for variant calling",
              "pattern": "*.{bed}"
            }
          },
          {
            "target_bed_tbi": {
              "type": "file",
              "description": "Index for BED file containing target regions for variant calling",
              "pattern": "*.{bed.tbi}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome reference FASTA file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Genome reference FASTA index file",
              "pattern": "*.{fa.fai,fasta.fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "candidate_small_indels_vcf": {
              "type": "file",
              "description": "Gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "candidate_small_indels_vcf_tbi": {
              "type": "file",
              "description": "Index for gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz.tbi}"
            }
          },
          {
            "candidate_sv_vcf": {
              "type": "file",
              "description": "Gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "candidate_sv_vcf_tbi": {
              "type": "file",
              "description": "Index for gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz.tbi}"
            }
          },
          {
            "tumor_sv_vcf": {
              "type": "file",
              "description": "Gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "tumor_sv_vcf_tbi": {
              "type": "file",
              "description": "Index for gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz.tbi}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "mapad_index",
      "path": "modules/nf-core/mapad/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "mapad_index",
        "description": "Create mapAD index for reference genome",
        "keywords": [
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "mapad": {
              "description": "An aDNA aware short-read mapper",
              "homepage": "https://github.com/mpieva/mapAD",
              "documentation": "https://github.com/mpieva/mapAD",
              "tool_dev_url": "https://github.com/mpieva/mapAD",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file",
              "pattern": "*.{fasta,fa,fna}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "mapAD genome index files",
              "pattern": "*.{tbw,tle,toc,tos,tpi,trt,tsa}"
            }
          }
        ],
        "authors": [
          "@jch-13"
        ]
      }
    },
    {
      "name": "mapdamage2",
      "path": "modules/nf-core/mapdamage2/meta.yml",
      "type": "module",
      "meta": {
        "name": "mapdamage2",
        "description": "Computational framework for tracking and quantifying DNA damage patterns among ancient DNA sequencing reads generated by Next-Generation Sequencing platforms.",
        "keywords": [
          "ancient DNA",
          "DNA damage",
          "NGS",
          "damage patterns",
          "bam"
        ],
        "tools": [
          {
            "mapdamage2": {
              "description": "Tracking and quantifying damage patterns in ancient DNA sequences",
              "homepage": "http://ginolhac.github.io/mapDamage/",
              "documentation": "https://ginolhac.github.io/mapDamage/",
              "tool_dev_url": "https://github.com/ginolhac/mapDamage",
              "doi": "10.1093/bioinformatics/btt193",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Fasta file, the reference the input BAM was mapped against",
              "pattern": "*.{fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "runtime_log": {
              "type": "file",
              "description": "Log file with a summary of command lines used and timestamps.",
              "pattern": "Runtime_log.txt"
            }
          },
          {
            "fragmisincorporation_plot": {
              "type": "file",
              "description": "A pdf file that displays both fragmentation and misincorporation patterns.",
              "pattern": "Fragmisincorporation_plot.pdf"
            }
          },
          {
            "length_plot": {
              "type": "file",
              "description": "A pdf file that displays length distribution of singleton reads per strand and cumulative frequencies of C->T at 5'-end and G->A at 3'-end are also displayed per strand.",
              "pattern": "Length_plot.pdf"
            }
          },
          {
            "misincorporation": {
              "type": "file",
              "description": "Contains a table with occurrences for each type of mutations and relative positions from the reads ends.",
              "pattern": "misincorporation.txt"
            }
          },
          {
            "pctot_freq": {
              "type": "file",
              "description": "Contains frequencies of Cytosine to Thymine mutations per position from the 5'-ends.",
              "pattern": "5pCtoT_freq.txt"
            }
          },
          {
            "pgtoa_freq": {
              "type": "file",
              "description": "Contains frequencies of Guanine to Adenine mutations per position from the 3'-ends.",
              "pattern": "3pGtoA_freq.txt"
            }
          },
          {
            "dnacomp": {
              "type": "file",
              "description": "Contains a table of the reference genome base composition per position, inside reads and adjacent regions.",
              "pattern": "dnacomp.txt"
            }
          },
          {
            "lgdistribution": {
              "type": "file",
              "description": "Contains a table with read length distributions per strand.",
              "pattern": "lgdistribution.txt"
            }
          },
          {
            "stats_out_mcmc_hist": {
              "type": "file",
              "description": "A MCMC histogram for the damage parameters and log likelihood.",
              "pattern": "Stats_out_MCMC_hist.pdf"
            }
          },
          {
            "stats_out_mcmc_iter": {
              "type": "file",
              "description": "Values for the damage parameters and log likelihood in each MCMC iteration.",
              "pattern": "Stats_out_MCMC_iter.csv"
            }
          },
          {
            "stats_out_mcmc_trace": {
              "type": "file",
              "description": "A MCMC trace plot for the damage parameters and log likelihood.",
              "pattern": "Stats_out_MCMC_trace.pdf"
            }
          },
          {
            "stats_out_mcmc_iter_summ_stat": {
              "type": "file",
              "description": "Summary statistics for the damage parameters estimated posterior distributions.",
              "pattern": "Stats_out_MCMC_iter_summ_stat.csv"
            }
          },
          {
            "stats_out_mcmc_post_pred": {
              "type": "file",
              "description": "Empirical misincorporation frequency and posterior predictive intervals from the fitted model.",
              "pattern": "Stats_out_MCMC_post_pred.pdf"
            }
          },
          {
            "stats_out_mcmc_correct_prob": {
              "type": "file",
              "description": "Position specific probability of a C->T and G->A misincorporation is due to damage.",
              "pattern": "Stats_out_MCMC_correct_prob.csv"
            }
          },
          {
            "dnacomp_genome": {
              "type": "file",
              "description": "Contains the global reference genome base composition (computed by seqtk).",
              "pattern": "dnacomp_genome.csv"
            }
          },
          {
            "rescaled": {
              "type": "file",
              "description": "Rescaled BAM file, where likely post-mortem damaged bases have downscaled quality scores.",
              "pattern": "*.{bam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Allignments in a FASTA file, only if flagged by -d.",
              "pattern": "*.{fasta}"
            }
          },
          {
            "folder": {
              "type": "directory",
              "description": "Folder created when --plot-only, --rescale and --stats-only flags are passed.",
              "pattern": "*/"
            }
          }
        ],
        "authors": [
          "@darcy220606"
        ]
      }
    },
    {
      "name": "mash_dist",
      "path": "modules/nf-core/mash/dist/meta.yml",
      "type": "module",
      "meta": {
        "name": "mash_dist",
        "description": "Calculate Mash distances between reference and query seqeunces",
        "keywords": [
          "mash/dist"
        ],
        "tools": [
          {
            "mash": {
              "description": "Fast sequence distance estimator that uses MinHash",
              "homepage": "https://github.com/marbl/Mash",
              "documentation": "https://mash.readthedocs.io/en/latest/sketches.html",
              "tool_dev_url": "https://github.com/marbl/Mash",
              "doi": "10.1186/s13059-016-0997-x",
              "licence": [
                "https://github.com/marbl/Mash/blob/master/LICENSE.txt"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "FASTA, FASTQ or Mash sketch",
              "pattern": "*.{fasta,fasta.gz,fastq,fastq.gz,msh}"
            }
          },
          {
            "query": {
              "type": "file",
              "description": "FASTA, FASTQ or Mash sketch",
              "pattern": "*.{fasta,fasta.gz,fastq,fastq.gz,msh}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "dist": {
              "type": "file",
              "description": "The results from mash dist",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "mash_screen",
      "path": "modules/nf-core/mash/screen/meta.yml",
      "type": "module",
      "meta": {
        "name": "mash_screen",
        "description": "Screens query sequences against large sequence databases",
        "keywords": [
          "screen",
          "containment",
          "contamination",
          "taxonomic assignment"
        ],
        "tools": [
          {
            "mash": {
              "description": "Fast sequence distance estimator that uses MinHash",
              "homepage": "https://github.com/marbl/Mash",
              "documentation": "https://mash.readthedocs.io/en/latest/sketches.html",
              "tool_dev_url": "https://github.com/marbl/Mash",
              "doi": "10.1186/s13059-016-0997-x",
              "licence": [
                "https://github.com/marbl/Mash/blob/master/LICENSE.txt"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "query": {
              "type": "file",
              "description": "Query sequences",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "sequence_sketch": {
              "type": "file",
              "description": "Sequence files to match against",
              "pattern": "*.msh"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "screen": {
              "type": "file",
              "description": "List of sequences from fastx_db similar to query sequences",
              "pattern": "*.screen"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "mash_sketch",
      "path": "modules/nf-core/mash/sketch/meta.yml",
      "type": "module",
      "meta": {
        "name": "mash_sketch",
        "description": "Creates vastly reduced representations of sequences using MinHash",
        "keywords": [
          "mash/sketch"
        ],
        "tools": [
          {
            "mash": {
              "description": "Fast sequence distance estimator that uses MinHash",
              "homepage": "https://github.com/marbl/Mash",
              "documentation": "https://mash.readthedocs.io/en/latest/sketches.html",
              "tool_dev_url": "https://github.com/marbl/Mash",
              "doi": "10.1186/s13059-016-0997-x",
              "licence": [
                "https://github.com/marbl/Mash/blob/master/LICENSE.txt"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input paired-end FastQ files"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "mash": {
              "type": "file",
              "description": "Sketch output",
              "pattern": "*.{mash}"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Sketch statistics",
              "pattern": "*.{mash_stats}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@thanhleviet"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "mashtree",
      "path": "modules/nf-core/mashtree/meta.yml",
      "type": "module",
      "meta": {
        "name": "mashtree",
        "description": "Quickly create a tree using Mash distances",
        "keywords": [
          "tree",
          "mash",
          "fasta",
          "fastq"
        ],
        "tools": [
          {
            "mashtree": {
              "description": "Create a tree using Mash distances",
              "homepage": "https://github.com/lskatz/mashtree",
              "documentation": "https://github.com/lskatz/mashtree",
              "tool_dev_url": "https://github.com/lskatz/mashtree",
              "doi": "10.21105/joss.01762",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "seqs": {
              "type": "file",
              "description": "FASTA, FASTQ, GenBank, or Mash sketch files",
              "pattern": "*.{fna,fna.gz,fasta,fasta.gz,fa,fa.gz,gbk,gbk.gz,fastq.gz,msh}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tree": {
              "type": "file",
              "description": "A Newick formatted tree file",
              "pattern": "*.{dnd}"
            }
          },
          {
            "matrix": {
              "type": "file",
              "description": "A TSV matrix of pair-wise Mash distances",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "maxbin2",
      "path": "modules/nf-core/maxbin2/meta.yml",
      "type": "module",
      "meta": {
        "name": "maxbin2",
        "description": "MaxBin is a software that is capable of clustering metagenomic contigs",
        "keywords": [
          "metagenomics",
          "assembly",
          "binning",
          "maxbin2",
          "de novo assembly",
          "mags",
          "metagenome-assembled genomes",
          "contigs"
        ],
        "tools": [
          {
            "maxbin2": {
              "description": "MaxBin is software for binning assembled metagenomic sequences based on an Expectation-Maximization algorithm.",
              "homepage": "https://sourceforge.net/projects/maxbin/",
              "documentation": "https://sourceforge.net/projects/maxbin/",
              "tool_dev_url": "https://sourceforge.net/projects/maxbin/",
              "doi": "10.1093/bioinformatics/btv638",
              "licence": [
                "BSD 3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "contigs": {
              "type": "file",
              "description": "Multi FASTA file containing assembled contigs of a given sample",
              "pattern": "*.fasta"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Reads used to assemble contigs in FASTA or FASTQ format. Do not supply at the same time as abundance files.",
              "pattern": "*.fasta"
            }
          },
          {
            "abund": {
              "type": "file",
              "description": "Contig abundance files, i.e. reads against each contig. See MaxBin2 README for details. Do not supply at the same time as read files."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "binned_fastas": {
              "type": "file",
              "description": "Binned contigs, one per bin designated with numeric IDs",
              "pattern": "*.fasta.gz"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "Summary file describing which contigs are being classified into which bin",
              "pattern": "*.summary"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file recording the core steps of MaxBin algorithm",
              "pattern": "*.log.gz"
            }
          },
          {
            "marker": {
              "type": "file",
              "description": "Marker gene presence numbers for each bin",
              "pattern": "*.marker.gz"
            }
          },
          {
            "unbinned_fasta": {
              "type": "file",
              "description": "All sequences that pass the minimum length threshold but are not classified successfully.",
              "pattern": "*.noclass.gz"
            }
          },
          {
            "tooshort_fasta": {
              "type": "file",
              "description": "All sequences that do not meet the minimum length threshold.",
              "pattern": "*.tooshort.gz"
            }
          },
          {
            "marker_genes": {
              "type": "file",
              "description": "All sequences that do not meet the minimum length threshold.",
              "pattern": "*.marker_of_each_gene.tar.gz"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "maxquant_lfq",
      "path": "modules/nf-core/maxquant/lfq/meta.yml",
      "type": "module",
      "meta": {
        "name": "maxquant_lfq",
        "description": "Run standard proteomics data analysis with MaxQuant, mostly dedicated to label-free. Paths to fasta and raw files needs to be marked by \"PLACEHOLDER\"",
        "keywords": [
          "sort"
        ],
        "tools": [
          {
            "maxquant": {
              "description": "MaxQuant is a quantitative proteomics software package designed for analyzing large mass-spectrometric data sets. License restricted.",
              "homepage": "https://www.maxquant.org/",
              "documentation": "http://coxdocs.org/doku.php?id=maxquant:start",
              "licence": [
                "http://www.coxdocs.org/lib/exe/fetch.php?media=license_agreement.pdf"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "raw": {
              "type": "file",
              "description": "raw files with mass spectra",
              "pattern": "*.{raw,RAW,Raw}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "fasta file with protein sequences",
              "pattern": "*.{fasta}"
            }
          },
          {
            "parfile": {
              "type": "file",
              "description": "MaxQuant parameter file (XML)",
              "pattern": "*.{xml}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          },
          {
            "maxquant_txt": {
              "type": "file",
              "description": "tables with peptides and protein information",
              "pattern": "*.{txt}"
            }
          }
        ],
        "authors": [
          "@veitveit"
        ]
      }
    },
    {
      "name": "mcquant",
      "path": "modules/nf-core/mcquant/meta.yml",
      "type": "module",
      "meta": {
        "name": "mcquant",
        "description": "write your description here",
        "keywords": [
          "quantification",
          "image_analysis",
          "mcmicro",
          "highly_multiplexed_imaging"
        ],
        "tools": [
          {
            "mcquant": {
              "description": "Module for single-cell data extraction given a segmentation mask and multi-channel image. The CSV structure is aligned with histoCAT output.",
              "homepage": "https://github.com/labsyspharm/quantification",
              "documentation": "https://github.com/labsyspharm/quantification/blob/master/README.md",
              "tool_dev_url": "https://github.com/labsyspharm/quantification",
              "doi": "10.1038/s41592-021-01308-y",
              "licence": ""
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "image": {
              "type": "file",
              "description": "Multi-channel image file",
              "pattern": "*.{tiff,tif,h5,hdf5}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "mask": {
              "type": "file",
              "description": "Labeled segmentation mask for image",
              "pattern": "*.{tiff,tif,h5,hdf5}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "markerfile": {
              "type": "file",
              "description": "Marker file with channel names for image to quantify",
              "pattern": "*.{csv}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "Quantified regionprops_table",
              "pattern": "*.{csv}"
            }
          }
        ],
        "authors": [
          "@FloWuenne"
        ]
      }
    },
    {
      "name": "mcroni",
      "path": "modules/nf-core/mcroni/meta.yml",
      "type": "module",
      "meta": {
        "name": "mcroni",
        "description": "Analysis of mcr-1 gene (mobilized colistin resistance) for sequence variation",
        "keywords": [
          "resistance",
          "fasta"
        ],
        "tools": [
          {
            "mcroni": {
              "description": "Scripts for finding and processing promoter variants upstream of mcr-1",
              "homepage": "https://github.com/liampshaw/mcroni",
              "documentation": "https://github.com/liampshaw/mcroni",
              "tool_dev_url": "https://github.com/liampshaw/mcroni",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "A fasta file.",
              "pattern": "*.{fasta.gz,fasta,fa.gz,fa,fna.gz,fna}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "mcroni results in TSV format",
              "pattern": "*.tsv"
            }
          },
          {
            "fa": {
              "type": "file",
              "description": "mcr-1 matching sequences",
              "pattern": "*.fa"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "md5sum",
      "path": "modules/nf-core/md5sum/meta.yml",
      "type": "module",
      "meta": {
        "name": "md5sum",
        "description": "Create an MD5 (128-bit) checksum",
        "keywords": [
          "checksum",
          "MD5",
          "128 bit"
        ],
        "tools": [
          {
            "md5sum": {
              "description": "Create an MD5 (128-bit) checksum",
              "homepage": "https://www.gnu.org",
              "documentation": "https://man7.org/linux/man-pages/man1/md5sum.1.html",
              "licence": "GPLv3+"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "file": {
              "type": "file",
              "description": "Any file",
              "pattern": "*.*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "checksum": {
              "type": "file",
              "description": "File containing checksum",
              "pattern": "*.md5"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      },
      "pipelines": [
        {
          "name": "demultiplex",
          "version": "1.3.2"
        }
      ]
    },
    {
      "name": "medaka",
      "path": "modules/nf-core/medaka/meta.yml",
      "type": "module",
      "meta": {
        "name": "medaka",
        "description": "A tool to create consensus sequences and variant calls from nanopore sequencing data",
        "keywords": [
          "assembly",
          "polishing",
          "nanopore"
        ],
        "tools": [
          {
            "medaka": {
              "description": "Neural network sequence error correction.",
              "homepage": "https://nanoporetech.github.io/medaka/index.html",
              "documentation": "https://nanoporetech.github.io/medaka/index.html",
              "tool_dev_url": "https://github.com/nanoporetech/medaka",
              "licence": [
                "Mozilla Public License 2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input nanopore fasta/FastQ files",
              "pattern": "*.{fasta,fa,fastq,fastq.gz,fq,fq.gz}"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "Genome assembly",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "Polished genome assembly",
              "pattern": "*.fa.gz"
            }
          }
        ],
        "authors": [
          "@avantonder"
        ]
      },
      "pipelines": [
        {
          "name": "crisprseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "megahit",
      "path": "modules/nf-core/megahit/meta.yml",
      "type": "module",
      "meta": {
        "name": "megahit",
        "description": "An ultra-fast metagenomic assembler for large and complex metagenomics",
        "keywords": [
          "megahit",
          "denovo",
          "assembly",
          "debruijn",
          "metagenomics"
        ],
        "tools": [
          {
            "megahit": {
              "description": "An ultra-fast single-node solution for large and complex metagenomics assembly via succinct de Bruijn graph",
              "homepage": "https://github.com/voutcn/megahit",
              "documentation": "https://github.com/voutcn/megahit",
              "tool_dev_url": "https://github.com/voutcn/megahit",
              "doi": "10.1093/bioinformatics/btv033",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information and input single, or paired-end FASTA/FASTQ files (optionally decompressed)\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively in gzipped or uncompressed FASTQ or FASTA format.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "contigs": {
              "type": "file",
              "description": "Final final contigs result of the assembly in FASTA format.",
              "pattern": "*.contigs.fa.gz"
            }
          },
          {
            "k_contigs": {
              "type": "file",
              "description": "Contigs assembled from the de Bruijn graph of order-K",
              "pattern": "k*.contigs.fa.gz"
            }
          },
          {
            "addi_contigs": {
              "type": "file",
              "description": "Contigs assembled after iteratively removing local low coverage unitigs in the de Bruijn graph of order-K",
              "pattern": "k*.addi.fa.gz"
            }
          },
          {
            "local_contigs": {
              "type": "file",
              "description": "Contigs of the locally assembled contigs for k=K",
              "pattern": "k*.local.fa.gz"
            }
          },
          {
            "kfinal_contigs": {
              "type": "file",
              "description": "Stand-alone contigs for k=K; if local assembly is turned on, the file will be empty",
              "pattern": "k*.final.contigs.fa.gz"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "megan_daa2info",
      "path": "modules/nf-core/megan/daa2info/meta.yml",
      "type": "module",
      "meta": {
        "name": "megan_daa2info",
        "description": "Analyses a DAA file and exports information in text format",
        "keywords": [
          "megan",
          "diamond",
          "daa",
          "classification",
          "conversion"
        ],
        "tools": [
          {
            "megan": {
              "description": "A tool for studying the taxonomic content of a set of DNA reads",
              "homepage": "https://uni-tuebingen.de/fakultaeten/mathematisch-naturwissenschaftliche-fakultaet/fachbereiche/informatik/lehrstuehle/algorithms-in-bioinformatics/software/megan6/",
              "documentation": "https://software-ab.cs.uni-tuebingen.de/download/megan6/welcome.html",
              "tool_dev_url": "https://github.com/husonlab/megan-ce",
              "doi": "10.1371/journal.pcbi.1004957",
              "licence": "['GPL >=3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "daa": {
              "type": "file",
              "description": "DAA file from DIAMOND",
              "pattern": "*.daa"
            }
          },
          {
            "megan_summary": {
              "type": "boolean",
              "description": "Specify whether to generate a MEGAN summary file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt_gz": {
              "type": "file",
              "description": "Compressed text file",
              "pattern": "*.txt.gz"
            }
          },
          {
            "megan": {
              "type": "file",
              "description": "Optionally generated MEGAN summary file",
              "pattern": "*.megan"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "megan_rma2info",
      "path": "modules/nf-core/megan/rma2info/meta.yml",
      "type": "module",
      "meta": {
        "name": "megan_rma2info",
        "description": "Analyses an RMA file and exports information in text format",
        "keywords": [
          "megan",
          "rma6",
          "classification",
          "conversion"
        ],
        "tools": [
          {
            "megan": {
              "description": "A tool for studying the taxonomic content of a set of DNA reads",
              "homepage": "https://uni-tuebingen.de/fakultaeten/mathematisch-naturwissenschaftliche-fakultaet/fachbereiche/informatik/lehrstuehle/algorithms-in-bioinformatics/software/megan6/",
              "documentation": "https://software-ab.cs.uni-tuebingen.de/download/megan6/welcome.html",
              "tool_dev_url": "https://github.com/husonlab/megan-ce",
              "doi": "10.1371/journal.pcbi.1004957",
              "licence": "['GPL >=3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "rma6": {
              "type": "file",
              "description": "RMA6 file from MEGAN or MALT",
              "pattern": "*.rma6"
            }
          },
          {
            "megan_summary": {
              "type": "boolean",
              "description": "Specify whether to generate an MEGAN summary file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Compressed text file",
              "pattern": "*.txt.gz"
            }
          },
          {
            "megan_summary": {
              "type": "file",
              "description": "Optionally generated MEGAN summary file",
              "pattern": "*.megan"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "meningotype",
      "path": "modules/nf-core/meningotype/meta.yml",
      "type": "module",
      "meta": {
        "name": "meningotype",
        "description": "Serotyping of Neisseria meningitidis assemblies",
        "keywords": [
          "fasta",
          "Neisseria meningitidis",
          "serotype"
        ],
        "tools": [
          {
            "meningotype": {
              "description": "In silico serotyping and finetyping (porA and fetA) of Neisseria meningitidis",
              "homepage": "https://github.com/MDU-PHL/meningotype",
              "documentation": "https://github.com/MDU-PHL/meningotype",
              "tool_dev_url": "https://github.com/MDU-PHL/meningotype",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA assembly file",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab-delimited result file",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "merqury",
      "path": "modules/nf-core/merqury/meta.yml",
      "type": "module",
      "meta": {
        "name": "merqury",
        "description": "k-mer based assembly evaluation.",
        "keywords": [
          "k-mer",
          "assembly",
          "evaluation"
        ],
        "tools": [
          {
            "merqury": {
              "description": "Evaluate genome assemblies with k-mers and more.",
              "tool_dev_url": "https://github.com/marbl/merqury",
              "doi": "10.1186/s13059-020-02134-9",
              "licence": "['PUBLIC DOMAIN']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meryl_db": {
              "type": "file",
              "description": "Meryl read database"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "FASTA assembly file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "assembly_only_kmers_bed": {
              "type": "file",
              "description": "The positions of the k-mers found only in an assembly for further investigation in .bed",
              "pattern": "*_only.bed"
            }
          },
          {
            "assembly_only_kmers_wig": {
              "type": "file",
              "description": "The positions of the k-mers found only in an assembly for further investigation in .wig",
              "pattern": "*_only.wig"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Assembly statistics file",
              "pattern": "*.completeness.stats"
            }
          },
          {
            "dist_hist": {
              "type": "file",
              "description": "Histogram",
              "pattern": "*.dist_only.hist"
            }
          },
          {
            "spectra_cn_fl_png": {
              "type": "file",
              "description": "Unstacked copy number spectra filled plot in PNG format",
              "pattern": "*.spectra-cn.fl.png"
            }
          },
          {
            "spectra_cn_ln_png": {
              "type": "file",
              "description": "Unstacked copy number spectra line plot in PNG format",
              "pattern": "*.spectra-cn.ln.png"
            }
          },
          {
            "spectra_cn_st_png": {
              "type": "file",
              "description": "Stacked copy number spectra line plot in PNG format",
              "pattern": "*.spectra-cn.st.png"
            }
          },
          {
            "spectra_cn_hist": {
              "type": "file",
              "description": "Copy number spectra histogram",
              "pattern": "*.spectra-cn.hist"
            }
          },
          {
            "spectra_asm_fl_png": {
              "type": "file",
              "description": "Unstacked assembly spectra filled plot in PNG format",
              "pattern": "*.spectra-asm.fl.png"
            }
          },
          {
            "spectra_asm_ln_png": {
              "type": "file",
              "description": "Unstacked assembly spectra line plot in PNG format",
              "pattern": "*.spectra-asm.ln.png"
            }
          },
          {
            "spectra_asm_st_png": {
              "type": "file",
              "description": "Stacked assembly spectra line plot in PNG format",
              "pattern": "*.spectra-asm.st.png"
            }
          },
          {
            "spectra_asm_hist": {
              "type": "file",
              "description": "Assembly spectra histogram",
              "pattern": "*.spectra-asm.hist"
            }
          },
          {
            "assembly_qv": {
              "type": "file",
              "description": "Assembly consensus quality estimation",
              "pattern": "*.qv"
            }
          },
          {
            "scaffold_qv": {
              "type": "file",
              "description": "Scaffold consensus quality estimation",
              "pattern": "*.qv"
            }
          },
          {
            "read_ploidy": {
              "type": "file",
              "description": "Ploidy estimate from read k-mer database",
              "pattern": "*.hist.ploidy"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "merquryfk_katcomp",
      "path": "modules/nf-core/merquryfk/katcomp/meta.yml",
      "type": "module",
      "meta": {
        "name": "merquryfk_katcomp",
        "description": "A reimplemenation of Kat Comp to work with FastK databases",
        "keywords": [
          "fastk",
          "k-mer",
          "compare"
        ],
        "tools": [
          {
            "merquryfk": {
              "description": "FastK based version of Merqury",
              "homepage": "https://github.com/thegenemyers/MERQURY.FK",
              "tool_dev_url": "https://github.com/thegenemyers/MERQURY.FK",
              "licence": "https://github.com/thegenemyers/MERQURY.FK/blob/main/LICENSE"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastk1_hist": {
              "type": "file",
              "description": "A histogram files from the program FastK",
              "pattern": "*.hist"
            }
          },
          {
            "fastk1_ktab": {
              "type": "file",
              "description": "Histogram ktab files from the program FastK (option -t)",
              "pattern": "*.ktab*"
            }
          },
          {
            "fastk2_hist": {
              "type": "file",
              "description": "A histogram files from the program FastK",
              "pattern": "*.hist"
            }
          },
          {
            "fastk2_ktab": {
              "type": "file",
              "description": "Histogram ktab files from the program FastK (option -t)",
              "pattern": "*.ktab*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "filled_png": {
              "type": "file",
              "description": "Comparison of Kmers between sample 1 and 2 in filled PNG format.",
              "pattern": "*.fi.png"
            }
          },
          {
            "line_png": {
              "type": "file",
              "description": "Comparison of Kmers between sample 1 and 2 in line PNG format.",
              "pattern": "*.ln.png"
            }
          },
          {
            "stacked_png": {
              "type": "file",
              "description": "Comparison of Kmers between sample 1 and 2 in stacked PNG format.",
              "pattern": "*.st.png"
            }
          },
          {
            "filled_pdf": {
              "type": "file",
              "description": "Comparison of Kmers between sample 1 and 2 in filled PDF format.",
              "pattern": "*.fi.pdf"
            }
          },
          {
            "line_pdf": {
              "type": "file",
              "description": "Comparison of Kmers between sample 1 and 2 in line PDF format.",
              "pattern": "*.ln.pdf"
            }
          },
          {
            "stacked_pdf": {
              "type": "file",
              "description": "Comparison of Kmers between sample 1 and 2 in stacked PDF format.",
              "pattern": "*.st.pdf"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "merquryfk_katgc",
      "path": "modules/nf-core/merquryfk/katgc/meta.yml",
      "type": "module",
      "meta": {
        "name": "merquryfk_katgc",
        "description": "A reimplemenation of Kat GC to work with FastK databases",
        "keywords": [
          "k-mer",
          "GC content"
        ],
        "tools": [
          {
            "merquryfk": {
              "description": "FastK based version of Merqury",
              "homepage": "https://github.com/thegenemyers/MERQURY.FK",
              "tool_dev_url": "https://github.com/thegenemyers/MERQURY.FK",
              "licence": "https://github.com/thegenemyers/MERQURY.FK/blob/main/LICENSE"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastk_hist": {
              "type": "file",
              "description": "A histogram files from the program FastK",
              "pattern": "*.hist"
            }
          },
          {
            "fastk_ktab": {
              "type": "file",
              "description": "ktab files from the program FastK",
              "pattern": "*.ktab*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "filled_gc_plot_png": {
              "type": "file",
              "description": "A filled GC content plot in PNG format",
              "pattern": "*.fi.png"
            }
          },
          {
            "filled_gc_plot_pdf": {
              "type": "file",
              "description": "A filled GC content plot in PDF format",
              "pattern": "*.fi.pdf"
            }
          },
          {
            "line_gc_plot_png": {
              "type": "file",
              "description": "A line GC content plot in PNG format",
              "pattern": "*.ln.png"
            }
          },
          {
            "line_gc_plot_pdf": {
              "type": "file",
              "description": "A line GC content plot in PDF format",
              "pattern": "*.ln.pdf"
            }
          },
          {
            "stacked_gc_plot_png": {
              "type": "file",
              "description": "A stacked GC content plot in PNG format",
              "pattern": "*.st.png"
            }
          },
          {
            "stacked_gc_plot_pdf": {
              "type": "file",
              "description": "A stacked GC content plot in PDF format",
              "pattern": "*.st.pdf"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "merquryfk_merquryfk",
      "path": "modules/nf-core/merquryfk/merquryfk/meta.yml",
      "type": "module",
      "meta": {
        "name": "merquryfk_merquryfk",
        "description": "FastK based version of Merqury",
        "keywords": [
          "sort"
        ],
        "tools": [
          {
            "merquryfk": {
              "description": "FastK based version of Merqury",
              "homepage": "https://github.com/thegenemyers/MERQURY.FK",
              "tool_dev_url": "https://github.com/thegenemyers/MERQURY.FK",
              "licence": "https://github.com/thegenemyers/MERQURY.FK/blob/main/LICENSE"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastk_hist": {
              "type": "file",
              "description": "A histogram files from the program FastK",
              "pattern": "*.hist"
            }
          },
          {
            "fastk_ktab": {
              "type": "file",
              "description": "Histogram ktab files from the program FastK (option -t)",
              "pattern": "*.ktab*"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "Genome (primary) assembly files (fasta format)",
              "pattern": ".fasta"
            }
          },
          {
            "haplotigs": {
              "type": "file",
              "description": "Assembly haplotigs (fasta format)",
              "pattern": ".fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Assembly statistics file",
              "pattern": "*.completeness.stats"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Assembly only kmer positions not supported by reads in bed format",
              "pattern": "*_only.bed"
            }
          },
          {
            "spectra_cn_fl_png": {
              "type": "file",
              "description": "Unstacked copy number spectra filled plot in PNG format",
              "pattern": "*.spectra-cn.fl.png"
            }
          },
          {
            "spectra_cn_ln_png": {
              "type": "file",
              "description": "Unstacked copy number spectra line plot in PNG format",
              "pattern": "*.spectra-cn.ln.png"
            }
          },
          {
            "spectra_cn_st_png": {
              "type": "file",
              "description": "Stacked copy number spectra line plot in PNG format",
              "pattern": "*.spectra-cn.st.png"
            }
          },
          {
            "spectra_asm_fl_png": {
              "type": "file",
              "description": "Unstacked assembly spectra filled plot in PNG format",
              "pattern": "*.spectra-asm.fl.png"
            }
          },
          {
            "spectra_asm_ln_png": {
              "type": "file",
              "description": "Unstacked assembly spectra line plot in PNG format",
              "pattern": "*.spectra-asm.ln.png"
            }
          },
          {
            "spectra_asm_st_png": {
              "type": "file",
              "description": "Stacked assembly spectra line plot in PNG format",
              "pattern": "*.spectra-asm.st.png"
            }
          },
          {
            "spectra_cn_fl_pdf": {
              "type": "file",
              "description": "Unstacked copy number spectra filled plot in PDF format",
              "pattern": "*.spectra-cn.fl.pdf"
            }
          },
          {
            "spectra_cn_ln_pdf": {
              "type": "file",
              "description": "Unstacked copy number spectra line plot in PDF format",
              "pattern": "*.spectra-cn.ln.pdf"
            }
          },
          {
            "spectra_cn_st_pdf": {
              "type": "file",
              "description": "Stacked copy number spectra line plot in PDF format",
              "pattern": "*.spectra-cn.st.pdf"
            }
          },
          {
            "spectra_asm_fl_pdf": {
              "type": "file",
              "description": "Unstacked assembly spectra filled plot in PDF format",
              "pattern": "*.spectra-asm.fl.pdf"
            }
          },
          {
            "spectra_asm_ln_pdf": {
              "type": "file",
              "description": "Unstacked assembly spectra line plot in PDF format",
              "pattern": "*.spectra-asm.ln.pdf"
            }
          },
          {
            "spectra_asm_st_pdf": {
              "type": "file",
              "description": "Stacked assembly spectra line plot in PDF format",
              "pattern": "*.spectra-asm.st.pdf"
            }
          },
          {
            "assembly_qv": {
              "type": "file",
              "description": "error and qv table for each scaffold of the assembly",
              "pattern": "*.qv"
            }
          },
          {
            "qv": {
              "type": "file",
              "description": "error and qv of each assembly as a whole",
              "pattern": "*.qv"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "merquryfk_ploidyplot",
      "path": "modules/nf-core/merquryfk/ploidyplot/meta.yml",
      "type": "module",
      "meta": {
        "name": "merquryfk_ploidyplot",
        "description": "An improved version of Smudgeplot using FastK",
        "keywords": [
          "kmer",
          "smudgeplot",
          "ploidy"
        ],
        "tools": [
          {
            "merquryfk": {
              "description": "FastK based version of Merqury",
              "homepage": "https://github.com/thegenemyers/MERQURY.FK",
              "tool_dev_url": "https://github.com/thegenemyers/MERQURY.FK",
              "licence": "https://github.com/thegenemyers/MERQURY.FK/blob/main/LICENSE"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastk_hist": {
              "type": "file",
              "description": "A histogram files from the program FastK",
              "pattern": "*.hist"
            }
          },
          {
            "fastk_ktab": {
              "type": "file",
              "description": "ktab files from the program FastK",
              "pattern": "*.ktab*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "filled_ploidy_plot_png": {
              "type": "file",
              "description": "A filled ploidy plot in PNG format",
              "pattern": "*.fi.png"
            }
          },
          {
            "filled_ploidy_plot_pdf": {
              "type": "file",
              "description": "A filled ploidy plot in PDF format",
              "pattern": "*.fi.pdf"
            }
          },
          {
            "line_ploidy_plot_png": {
              "type": "file",
              "description": "A line ploidy plot in PNG format",
              "pattern": "*.ln.png"
            }
          },
          {
            "line_ploidy_plot_pdf": {
              "type": "file",
              "description": "A lin4 ploidy plot in PDF format",
              "pattern": "*.ln.pdf"
            }
          },
          {
            "stacked_ploidy_plot_png": {
              "type": "file",
              "description": "A stacked ploidy plot in PNG format",
              "pattern": "*.st.png"
            }
          },
          {
            "stacked_ploidy_plot_pdf": {
              "type": "file",
              "description": "A stacked ploidy plot in PDF format",
              "pattern": "*.st.pdf"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "meryl_count",
      "path": "modules/nf-core/meryl/count/meta.yml",
      "type": "module",
      "meta": {
        "name": "meryl_count",
        "description": "A genomic k-mer counter (and sequence utility) with nice features.",
        "keywords": [
          "k-mer",
          "count"
        ],
        "tools": [
          {
            "meryl": {
              "description": "A genomic k-mer counter (and sequence utility) with nice features. ",
              "homepage": "https://github.com/marbl/meryl",
              "documentation": "https://meryl.readthedocs.io/en/latest/quick-start.html",
              "tool_dev_url": "https://github.com/marbl/meryl",
              "licence": "['GPL']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "meryl_db": {
              "type": "directory",
              "description": "A Meryl k-mer database",
              "pattern": "*.meryldb"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "meryl_histogram",
      "path": "modules/nf-core/meryl/histogram/meta.yml",
      "type": "module",
      "meta": {
        "name": "meryl_histogram",
        "description": "A genomic k-mer counter (and sequence utility) with nice features.",
        "keywords": [
          "k-mer",
          "histogram"
        ],
        "tools": [
          {
            "meryl": {
              "description": "A genomic k-mer counter (and sequence utility) with nice features. ",
              "homepage": "https://github.com/marbl/meryl",
              "documentation": "https://meryl.readthedocs.io/en/latest/quick-start.html",
              "tool_dev_url": "https://github.com/marbl/meryl",
              "licence": "['GPL']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meryl_dbs": {
              "type": "directory",
              "description": "Meryl k-mer database"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "hist": {
              "type": "file",
              "description": "Histogram of k-mers",
              "pattern": "*.hist"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "meryl_unionsum",
      "path": "modules/nf-core/meryl/unionsum/meta.yml",
      "type": "module",
      "meta": {
        "name": "meryl_unionsum",
        "description": "A genomic k-mer counter (and sequence utility) with nice features.",
        "keywords": [
          "k-mer",
          "unionsum"
        ],
        "tools": [
          {
            "meryl": {
              "description": "A genomic k-mer counter (and sequence utility) with nice features. ",
              "homepage": "https://github.com/marbl/meryl",
              "documentation": "https://meryl.readthedocs.io/en/latest/quick-start.html",
              "tool_dev_url": "https://github.com/marbl/meryl",
              "licence": "['GPL']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meryl_dbs": {
              "type": "directory",
              "description": "Meryl k-mer databases"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "meryl_db": {
              "type": "directory",
              "description": "A Meryl k-mer database that is the union sum of the input databases",
              "pattern": "*.unionsum.meryldb"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        }
      ]
    },
    {
      "name": "metabat2_jgisummarizebamcontigdepths",
      "path": "modules/nf-core/metabat2/jgisummarizebamcontigdepths/meta.yml",
      "type": "module",
      "meta": {
        "name": "metabat2_jgisummarizebamcontigdepths",
        "description": "Depth computation per contig step of metabat2",
        "keywords": [
          "sort",
          "binning",
          "depth",
          "bam",
          "coverage",
          "de novo assembly"
        ],
        "tools": [
          {
            "metabat2": {
              "description": "Metagenome binning",
              "homepage": "https://bitbucket.org/berkeleylab/metabat/src/master/",
              "documentation": "https://bitbucket.org/berkeleylab/metabat/src/master/",
              "tool_dev_url": "https://bitbucket.org/berkeleylab/metabat/src/master/",
              "doi": "10.7717/peerj.7359",
              "licence": [
                "BSD-3-clause-LBNL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM file of reads aligned on the assembled contigs",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.bam.bai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "depth": {
              "type": "file",
              "description": "Text file listing the coverage per contig",
              "pattern": ".txt.gz"
            }
          }
        ],
        "authors": [
          "@maxibor"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "metabat2_metabat2",
      "path": "modules/nf-core/metabat2/metabat2/meta.yml",
      "type": "module",
      "meta": {
        "name": "metabat2_metabat2",
        "description": "Metagenome binning of contigs",
        "keywords": [
          "sort",
          "binning",
          "depth",
          "bam",
          "coverage",
          "de novo assembly"
        ],
        "tools": [
          {
            "metabat2": {
              "description": "Metagenome binning",
              "homepage": "https://bitbucket.org/berkeleylab/metabat/src/master/",
              "documentation": "https://bitbucket.org/berkeleylab/metabat/src/master/",
              "tool_dev_url": "https://bitbucket.org/berkeleylab/metabat/src/master/",
              "doi": "10.7717/peerj.7359",
              "licence": [
                "BSD-3-clause-LBNL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Fasta file of the assembled contigs",
              "pattern": "*.{fa,fas,fasta,fna,fa.gz,fas.gz,fasta.gz,fna.gz}"
            }
          },
          {
            "depth": {
              "type": "file",
              "description": "Optional text file listing the coverage per contig pre-generated\nby metabat2_jgisummarizebamcontigdepths\n",
              "pattern": "*.txt"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Bins created from assembled contigs in fasta file",
              "pattern": "*.fa.gz"
            }
          },
          {
            "tooshort": {
              "type": "file",
              "description": "Contigs that did not pass length filtering",
              "pattern": "*.tooShort.fa.gz"
            }
          },
          {
            "lowdepth": {
              "type": "file",
              "description": "Contigs that did not have sufficient depth for binning",
              "pattern": "*.lowDepth.fa.gz"
            }
          },
          {
            "unbinned": {
              "type": "file",
              "description": "Contigs that pass length and depth filtering but could not be binned",
              "pattern": "*.unbinned.fa.gz"
            }
          },
          {
            "membership": {
              "type": "file",
              "description": "cluster memberships as a matrix format.",
              "pattern": "*.tsv.gz"
            }
          }
        ],
        "authors": [
          "@maxibor",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "metaeuk_easypredict",
      "path": "modules/nf-core/metaeuk/easypredict/meta.yml",
      "type": "module",
      "meta": {
        "name": "metaeuk_easypredict",
        "description": "Annotation of eukaryotic metagenomes using MetaEuk",
        "keywords": [
          "genomics",
          "annotation",
          "fasta"
        ],
        "tools": [
          {
            "metaeuk": {
              "description": "MetaEuk - sensitive, high-throughput gene discovery and annotation for large-scale eukaryotic metagenomics",
              "homepage": "https://github.com/soedinglab/metaeuk",
              "documentation": "https://github.com/soedinglab/metaeuk",
              "tool_dev_url": "https://github.com/soedinglab/metaeuk",
              "doi": "10.1186/s40168-020-00808-x",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Nucleotide FASTA file for annotation",
              "pattern": "*.{fasta,fa,fasta.gz,fa.gz}"
            }
          },
          {
            "database": {
              "type": "file",
              "description": "Either a fasta file containing protein sequences, or a directory containing an mmseqs2-formatted protein database"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "faa": {
              "type": "file",
              "description": "Protein FASTA file containing the exons from the input FASTA file",
              "pattern": "*.{fas}"
            }
          },
          {
            "codon": {
              "type": "file",
              "description": "Nucleotide FASTA file of protein-coding sequences",
              "pattern": "*.{codon.fas}"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "TSV file containing locations of each protein coding sequence in the input fasta",
              "pattern": "*.headersMap.{tsv}"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "Annotation file in GFF format",
              "pattern": "*.{gff}"
            }
          }
        ],
        "authors": [
          "@prototaxites"
        ]
      }
    },
    {
      "name": "metaphlan3_mergemetaphlantables",
      "path": "modules/nf-core/metaphlan3/mergemetaphlantables/meta.yml",
      "type": "module",
      "meta": {
        "name": "metaphlan3_mergemetaphlantables",
        "description": "Merges output abundance tables from MetaPhlAn3",
        "keywords": [
          "metagenomics",
          "classification",
          "merge",
          "table",
          "profiles"
        ],
        "tools": [
          {
            "metaphlan3": {
              "description": "Identify clades (phyla to species) present in the metagenome obtained from a microbiome sample and their relative abundance",
              "homepage": "https://huttenhower.sph.harvard.edu/metaphlan/",
              "documentation": "https://github.com/biobakery/MetaPhlAn",
              "doi": "10.7554/eLife.65088",
              "licence": [
                "MIT License"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "profiles": {
              "type": "file",
              "description": "List of per-sample MetaPhlAn3 taxonomic abundance tables",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "txt",
              "description": "Combined MetaPhlAn3 table",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "metaphlan3_metaphlan3",
      "path": "modules/nf-core/metaphlan3/metaphlan3/meta.yml",
      "type": "module",
      "meta": {
        "name": "metaphlan3_metaphlan3",
        "description": "MetaPhlAn is a tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
        "keywords": [
          "metagenomics",
          "classification",
          "fastq",
          "bam",
          "fasta"
        ],
        "tools": [
          {
            "metaphlan3": {
              "description": "Identify clades (phyla to species) present in the metagenome obtained from a microbiome sample and their relative abundance",
              "homepage": "https://huttenhower.sph.harvard.edu/metaphlan/",
              "documentation": "https://github.com/biobakery/MetaPhlAn",
              "doi": "10.7554/eLife.65088",
              "licence": [
                "MIT License"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Metaphlan 3.0 can classify the metagenome from a variety of input data types, including FASTQ files (single-end and paired-end), FASTA, bowtie2-produced SAM files (produced from alignments to the MetaPHlAn marker database) and intermediate bowtie2 alignment files (bowtie2out)",
              "pattern": "*.{fastq.gz, fasta, fasta.gz, sam, bowtie2out.txt}"
            }
          },
          {
            "metaphlan_db": {
              "type": "file",
              "description": "Directory containing pre-downloaded and uncompressed MetaPhlAn3 database downloaded from: http://cmprod1.cibio.unitn.it/biobakery3/metaphlan_databases/.\nNote that you will also need to specify `--index` and the database version name (e.g. 'mpa_v31_CHOCOPhlAn_201901') in your module.conf ext.args for METAPHLAN3_METAPHLAN3!\n",
              "pattern": "*/"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "profile": {
              "type": "file",
              "description": "Tab-separated output file of the predicted taxon relative abundances",
              "pattern": "*.{txt}"
            }
          },
          {
            "biom": {
              "type": "file",
              "description": "General-use format for representing biological sample by observation contingency tables",
              "pattern": "*.{biom}"
            }
          },
          {
            "bowtie2out": {
              "type": "file",
              "description": "Intermediate Bowtie2 output produced from mapping the metagenome against the MetaPHlAn marker database ( not compatible with `bowtie2out` files generated with MetaPhlAn versions below 3 )",
              "pattern": "*.{bowtie2out.txt}"
            }
          }
        ],
        "authors": [
          "@MGordon09"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "metaphlan_makedb",
      "path": "modules/nf-core/metaphlan/makedb/meta.yml",
      "type": "module",
      "meta": {
        "name": "metaphlan_makedb",
        "description": "Build MetaPhlAn database for taxonomic profiling.",
        "keywords": [
          "metaphlan",
          "index",
          "database",
          "metagenomics"
        ],
        "tools": [
          {
            "metaphlan": {
              "description": "Identify clades (phyla to species) present in the metagenome obtained from a microbiome sample and their relative abundance",
              "homepage": "https://huttenhower.sph.harvard.edu/metaphlan/",
              "documentation": "https://github.com/biobakery/MetaPhlAn",
              "doi": "10.7554/eLife.65088",
              "licence": [
                "MIT License"
              ]
            }
          }
        ],
        "output": [
          {
            "db": {
              "type": "directory",
              "description": "Output directory containing the indexed METAPHLAN database",
              "pattern": "*/"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@LilyAnderssonLee"
        ]
      }
    },
    {
      "name": "metaphlan_mergemetaphlantables",
      "path": "modules/nf-core/metaphlan/mergemetaphlantables/meta.yml",
      "type": "module",
      "meta": {
        "name": "metaphlan_mergemetaphlantables",
        "description": "Merges output abundance tables from MetaPhlAn4",
        "keywords": [
          "metagenomics",
          "classification",
          "merge",
          "table",
          "profiles"
        ],
        "tools": [
          {
            "metaphlan4": {
              "description": "Identify clades (phyla to species) present in the metagenome obtained from a microbiome sample and their relative abundance",
              "homepage": "https://huttenhower.sph.harvard.edu/metaphlan/",
              "documentation": "https://github.com/biobakery/MetaPhlAn",
              "doi": "10.1038/s41587-023-01688-w",
              "licence": [
                "MIT License"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "profiles": {
              "type": "file",
              "description": "List of per-sample MetaPhlAn4 taxonomic abundance tables",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Combined MetaPhlAn4 table",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@jfy133",
          "@LilyAnderssonLee"
        ]
      }
    },
    {
      "name": "metaphlan_metaphlan",
      "path": "modules/nf-core/metaphlan/metaphlan/meta.yml",
      "type": "module",
      "meta": {
        "name": "metaphlan_metaphlan",
        "description": "MetaPhlAn is a tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
        "keywords": [
          "metagenomics",
          "classification",
          "fastq",
          "fasta",
          "sam"
        ],
        "tools": [
          {
            "metaphlan": {
              "description": "Identify clades (phyla to species) present in the metagenome obtained from a microbiome sample and their relative abundance",
              "homepage": "https://huttenhower.sph.harvard.edu/metaphlan/",
              "documentation": "https://github.com/biobakery/MetaPhlAn",
              "doi": "10.1038/s41587-023-01688-w",
              "licence": [
                "MIT License"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Metaphlan can classify the metagenome from a variety of input data types, including FASTQ files (single-end and paired-end), FASTA, bowtie2-produced SAM files (produced from alignments to the MetaPHlAn marker database) and intermediate bowtie2 alignment files (bowtie2out)",
              "pattern": "*.{fastq.gz, fasta, fasta.gz, sam, bowtie2out.txt}"
            }
          },
          {
            "metaphlan_db": {
              "type": "file",
              "description": "Directory containing pre-downloaded and uncompressed MetaPhlAn database downloaded from: http://cmprod1.cibio.unitn.it/biobakery4/metaphlan_databases/.\nNote that you will also need to specify `--index` and the database version name (e.g. 'mpa_vJan21_TOY_CHOCOPhlAnSGB_202103') in your module.conf ext.args for METAPHLAN_METAPHLAN!\n",
              "pattern": "*/"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "profile": {
              "type": "file",
              "description": "Tab-separated output file of the predicted taxon relative abundances",
              "pattern": "*.{txt}"
            }
          },
          {
            "biom": {
              "type": "file",
              "description": "General-use format for representing biological sample by observation contingency tables",
              "pattern": "*.{biom}"
            }
          },
          {
            "bowtie2out": {
              "type": "file",
              "description": "Intermediate Bowtie2 output produced from mapping the metagenome against the MetaPHlAn marker database ( not compatible with `bowtie2out` files generated with MetaPhlAn versions below 3 )",
              "pattern": "*.{bowtie2out.txt}"
            }
          }
        ],
        "authors": [
          "@MGordon09",
          "@LilyAnderssonLee"
        ]
      }
    },
    {
      "name": "methyldackel_extract",
      "path": "modules/nf-core/methyldackel/extract/meta.yml",
      "type": "module",
      "meta": {
        "name": "methyldackel_extract",
        "description": "Extracts per-base methylation metrics from alignments",
        "keywords": [
          "methylation",
          "5mC",
          "methylseq",
          "bisulphite",
          "bisulfite",
          "consensus",
          "bedGraph",
          "bam",
          "cram"
        ],
        "tools": [
          {
            "methyldackel": {
              "description": "Methylation caller from MethylDackel, a (mostly) universal methylation extractor\nfor methyl-seq experiments.\n",
              "homepage": "https://github.com/dpryan79/MethylDackel",
              "documentation": "https://github.com/dpryan79/MethylDackel/blob/master/README.md",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "FASTA index file",
              "pattern": "*.fai"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM/CRAM index file",
              "pattern": "*.{bai,crai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bedgraph": {
              "type": "file",
              "description": "bedGraph file, containing per-base methylation metrics",
              "pattern": "*.bedGraph"
            }
          },
          {
            "methylkit": {
              "type": "file",
              "description": "methylKit file, containing per-base methylation metrics",
              "pattern": "*.methylKit"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@phue"
        ]
      },
      "pipelines": [
        {
          "name": "methylseq",
          "version": "2.4.0"
        }
      ]
    },
    {
      "name": "methyldackel_mbias",
      "path": "modules/nf-core/methyldackel/mbias/meta.yml",
      "type": "module",
      "meta": {
        "name": "methyldackel_mbias",
        "description": "Generates methylation bias plots from alignments",
        "keywords": [
          "methylation",
          "5mC",
          "methylseq",
          "bisulphite",
          "bisulfite",
          "methylation bias",
          "mbias",
          "qc",
          "bam",
          "cram"
        ],
        "tools": [
          {
            "methyldackel": {
              "description": "Read position methylation bias tools from MethylDackel, a (mostly) universal extractor\nfor methyl-seq experiments.\n",
              "homepage": "https://github.com/dpryan79/MethylDackel",
              "documentation": "https://github.com/dpryan79/MethylDackel/blob/master/README.md",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "FASTA index file",
              "pattern": "*.{fai}"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM/CRAM index file",
              "pattern": "*.{bai,crai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Text file containing methylation bias",
              "pattern": "*.{txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@phue"
        ]
      },
      "pipelines": [
        {
          "name": "methylseq",
          "version": "2.4.0"
        }
      ]
    },
    {
      "name": "midas_run",
      "path": "modules/nf-core/midas/run/meta.yml",
      "type": "module",
      "meta": {
        "name": "midas_run",
        "description": "A tool to estimate bacterial species abundance",
        "keywords": [
          "bacteria",
          "metagenomic",
          "abundance"
        ],
        "tools": [
          {
            "midas": {
              "description": "An integrated pipeline for estimating strain-level genomic variation from metagenomic data",
              "homepage": "https://github.com/snayfach/MIDAS",
              "documentation": "https://github.com/snayfach/MIDAS",
              "tool_dev_url": "https://github.com/snayfach/MIDAS",
              "doi": "10.1101/gr.201863.115",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Reads in FASTQ format",
              "pattern": "*.{fastq.gz}"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "A database formatted for MIDAS",
              "pattern": "*.{db}"
            }
          },
          {
            "mode": {
              "type": "string",
              "description": "The mode to run MIDAS is",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "results": {
              "type": "file",
              "description": "A directory of results from MIDAS run",
              "pattern": "*"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "mindagap_mindagap",
      "path": "modules/nf-core/mindagap/mindagap/meta.yml",
      "type": "module",
      "meta": {
        "name": "mindagap_mindagap",
        "description": "Takes a single panorama image and fills the empty grid lines with neighbour-weighted values.",
        "keywords": [
          "imaging",
          "resolve_bioscience",
          "spatial_transcriptomics"
        ],
        "tools": [
          {
            "mindagap": {
              "description": "Mindagap is a collection of tools to process multiplexed FISH data, such as produced by Resolve Biosciences Molecular Cartography.",
              "homepage": "https://github.com/ViriatoII/MindaGap",
              "documentation": "https://github.com/ViriatoII/MindaGap/blob/main/README.md",
              "tool_dev_url": "https://github.com/ViriatoII/MindaGap",
              "licence": "BSD-3-Clause license"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tiff": {
              "type": "file",
              "description": "A tiff file containing gridlines as produced by Molecular Cartography imaging.",
              "pattern": "*.{tiff}"
            }
          },
          {
            "boxsize": {
              "type": "integer",
              "description": "A larger number allows to overcome large gaps, but makes looses fine details in new filled grid."
            }
          },
          {
            "loopnum": {
              "type": "integer",
              "description": "The number of times gaussian blur is run consecutively on the gridlines. A smaller number is faster, but the result is less good."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tiff": {
              "type": "file",
              "description": "A tiff file with gridlines filled based on consecutive gaussian blurring.",
              "pattern": "*.{tiff}"
            }
          }
        ],
        "authors": [
          "@ViriatoII",
          "@flowuenne"
        ]
      }
    },
    {
      "name": "minia",
      "path": "modules/nf-core/minia/meta.yml",
      "type": "module",
      "meta": {
        "name": "minia",
        "description": "Minia is a short-read assembler based on a de Bruijn graph",
        "keywords": [
          "assembly"
        ],
        "tools": [
          {
            "minia": {
              "description": "Minia is a short-read assembler based on a de Bruijn graph, capable of assembling\na human genome on a desktop computer in a day. The output of Minia is a set of contigs.\n",
              "homepage": "https://github.com/GATB/minia",
              "documentation": "https://github.com/GATB/minia",
              "licence": [
                "AGPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Input reads in FastQ format",
              "pattern": "*.{fastq.gz, fastq}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "contigs": {
              "type": "file",
              "description": "The assembled contigs",
              "pattern": "*.contigs.fa"
            }
          },
          {
            "unitigs": {
              "type": "file",
              "description": "The assembled unitigs",
              "pattern": "*.unitigs.fa"
            }
          },
          {
            "h5": {
              "type": "file",
              "description": "Minia output h5 file",
              "pattern": "*{.h5}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "miniasm",
      "path": "modules/nf-core/miniasm/meta.yml",
      "type": "module",
      "meta": {
        "name": "miniasm",
        "description": "A very fast OLC-based de novo assembler for noisy long reads",
        "keywords": [
          "assembly",
          "pacbio",
          "nanopore"
        ],
        "tools": [
          {
            "miniasm": {
              "description": "Ultrafast de novo assembly for long noisy reads (though having no consensus step)",
              "homepage": "https://github.com/lh3/miniasm",
              "documentation": "https://github.com/lh3/miniasm",
              "tool_dev_url": "https://github.com/lh3/miniasm",
              "doi": "10.1093/bioinformatics/btw152",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input PacBio/ONT FastQ files.",
              "pattern": "*.{fastq,fastq.gz,fq,fq.gz}"
            }
          },
          {
            "paf": {
              "type": "file",
              "description": "Alignment in PAF format",
              "pattern": "*{.paf,.paf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Assembly graph",
              "pattern": "*.gfa.gz"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "Genome assembly",
              "pattern": "*.fasta.gz"
            }
          }
        ],
        "authors": [
          "@avantonder"
        ]
      }
    },
    {
      "name": "minimap2_align",
      "path": "modules/nf-core/minimap2/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "minimap2_align",
        "description": "A versatile pairwise aligner for genomic and spliced nucleotide sequences",
        "keywords": [
          "align",
          "fasta",
          "fastq",
          "genome",
          "paf",
          "reference"
        ],
        "tools": [
          {
            "minimap2": {
              "description": "A versatile pairwise aligner for genomic and spliced nucleotide sequences.\n",
              "homepage": "https://github.com/lh3/minimap2",
              "documentation": "https://github.com/lh3/minimap2#uguide",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FASTA or FASTQ files of size 1 and 2 for single-end\nand paired-end data, respectively.\n"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "Reference database in FASTA format.\n"
            }
          },
          {
            "bam_format": {
              "type": "boolean",
              "description": "Specify that output should be in BAM format"
            }
          },
          {
            "cigar_paf_format": {
              "type": "boolean",
              "description": "Specify that output CIGAR should be in PAF format"
            }
          },
          {
            "cigar_bam": {
              "type": "boolean",
              "description": "Write CIGAR with >65535 ops at the CG tag. This is recommended when\ndoing XYZ (https://github.com/lh3/minimap2#working-with-65535-cigar-operations)\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "paf": {
              "type": "file",
              "description": "Alignment in PAF format",
              "pattern": "*.paf"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Alignment in BAM format",
              "pattern": "*.bam"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@heuermh",
          "@sofstam",
          "@sateeshperi",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "crisprseq",
          "version": "2.0.0"
        },
        {
          "name": "isoseq",
          "version": "1.1.4"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "minimap2_index",
      "path": "modules/nf-core/minimap2/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "minimap2_index",
        "description": "Provides fasta index required by minimap2 alignment.",
        "keywords": [
          "index",
          "fasta",
          "reference"
        ],
        "tools": [
          {
            "minimap2": {
              "description": "A versatile pairwise aligner for genomic and spliced nucleotide sequences.\n",
              "homepage": "https://github.com/lh3/minimap2",
              "documentation": "https://github.com/lh3/minimap2#uguide",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference database in FASTA format.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Minimap2 fasta index.",
              "pattern": "*.mmi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@yuukiiwa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "crisprseq",
          "version": "2.0.0"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "miniprot_align",
      "path": "modules/nf-core/miniprot/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "miniprot_align",
        "description": "A versatile pairwise aligner for genomic and spliced nucleotide sequences",
        "keywords": [
          "align",
          "fasta",
          "protein",
          "genome",
          "paf",
          "gff"
        ],
        "tools": [
          {
            "miniprot": {
              "description": "A versatile pairwise aligner for genomic and protein sequences.\n",
              "homepage": "https://github.com/lh3/miniprot",
              "documentation": "https://github.com/lh3/miniprot",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pep": {
              "type": "file",
              "description": "a fasta file contains one or multiple protein sequences"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\n"
            }
          },
          {
            "ref": {
              "type": "file",
              "description": "Reference database in FASTA format or miniprot index format."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "paf": {
              "type": "file",
              "description": "Alignment in PAF format",
              "pattern": "*.paf"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "Alignment in gff format",
              "pattern": "*.gff"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@yumisims",
          "@muffato"
        ]
      }
    },
    {
      "name": "miniprot_index",
      "path": "modules/nf-core/miniprot/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "miniprot_index",
        "description": "Provides fasta index required by miniprot alignment.",
        "keywords": [
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "miniprot": {
              "description": "A versatile pairwise aligner for genomic and protein sequences.\n",
              "homepage": "https://github.com/lh3/miniprot",
              "documentation": "https://github.com/lh3/miniprot",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference database in FASTA format.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "miniprot fasta index.",
              "pattern": "*.mpi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@yumisims",
          "@muffato"
        ]
      }
    },
    {
      "name": "miranda",
      "path": "modules/nf-core/miranda/meta.yml",
      "type": "module",
      "meta": {
        "name": "miranda",
        "description": "miRanda is an algorithm for finding genomic targets for microRNAs",
        "keywords": [
          "microrna",
          "mirna",
          "target prediction"
        ],
        "tools": [
          {
            "miranda": {
              "description": "An algorithm for finding genomic targets for microRNAs",
              "homepage": "https://cbio.mskcc.org/miRNA2003/miranda.html",
              "documentation": "https://cbio.mskcc.org/miRNA2003/miranda.html",
              "doi": "10.1186/gb-2003-5-1-r1",
              "licence": "GNU Public License"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "query": {
              "type": "file",
              "description": "FASTA file containing the microRNA query sequences",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "mirbase": {
              "type": "file",
              "description": "FASTA file containing the sequence(s) to be scanned",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Reformatted TXT file containing microRNA targets",
              "pattern": "*.{txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@BarryDigby"
        ]
      },
      "pipelines": [
        {
          "name": "circrna",
          "version": "dev"
        }
      ]
    },
    {
      "name": "mitohifi_findmitoreference",
      "path": "modules/nf-core/mitohifi/findmitoreference/meta.yml",
      "type": "module",
      "meta": {
        "name": "mitohifi_findmitoreference",
        "description": "Download a mitochondrial genome to be used as reference for MitoHiFi",
        "keywords": [
          "mitochondrial genome",
          "reference genome",
          "NCBI"
        ],
        "tools": [
          {
            "findMitoReference.py": {
              "description": "Fetch mitochondrial genome in Fasta and Genbank format from NCBI",
              "homepage": "https://github.com/marcelauliano/MitoHiFi",
              "documentation": "https://github.com/marcelauliano/MitoHiFi",
              "tool_dev_url": "https://github.com/marcelauliano/MitoHiFi",
              "doi": "10.1101/2022.12.23.521667",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "species": {
              "type": "string",
              "description": "Latin name of the species for which a mitochondrial genome should be fetched",
              "pattern": "[A-Z]?[a-z]* [a-z]*"
            }
          },
          {
            "email": {
              "type": "string",
              "description": "Email address for NCBI query"
            }
          },
          {
            "min_length": {
              "type": "integer",
              "description": "Minimum length of the mitochondrial genome",
              "pattern": "[0-9]*"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Downloaded mitochondrial genome in Fasta format",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "gb": {
              "type": "file",
              "description": "Downloaded mitochondrial genome in Genbank format",
              "pattern": "*.gb"
            }
          }
        ],
        "authors": [
          "@verku"
        ]
      }
    },
    {
      "name": "mlst",
      "path": "modules/nf-core/mlst/meta.yml",
      "type": "module",
      "meta": {
        "name": "mlst",
        "description": "Run Torsten Seemann's classic MLST on a genome assembly",
        "keywords": [
          "mlst"
        ],
        "tools": [
          {
            "mlst": {
              "description": "Scan contig files against PubMLST typing schemes",
              "homepage": "https://github.com/tseemann/mlst",
              "licence": [
                "GPL v2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Assembly fasta file",
              "pattern": "*.{fasta,fa,fna}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "MLST calls in tsv format",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@lskatz",
          "@tseemann"
        ]
      }
    },
    {
      "name": "mmseqs_createdb",
      "path": "modules/nf-core/mmseqs/createdb/meta.yml",
      "type": "module",
      "meta": {
        "name": "mmseqs_createdb",
        "description": "Create a MMseqs database from an existing FASTA/Q file",
        "keywords": [
          "protein sequence",
          "databases",
          "clustering",
          "searching",
          "indexing",
          "mmseqs2"
        ],
        "tools": [
          {
            "mmseqs": {
              "description": "MMseqs2: ultra fast and sensitive sequence search and clustering suite",
              "homepage": "https://github.com/soedinglab/MMseqs2",
              "documentation": "https://mmseqs.com/latest/userguide.pdf",
              "tool_dev_url": "https://github.com/soedinglab/MMseqs2",
              "doi": "10.1093/bioinformatics/btw006",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. `[ id:'test', single_end:false ]`\n"
            }
          },
          {
            "sequence": {
              "type": "file",
              "description": "Input sequences in FASTA/Q format to be indexed",
              "pattern": "*.{fasta,fa,fna,fastq,fq}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. `[ id:'test', single_end:false ]`\n"
            }
          },
          {
            "bam": {
              "type": "directory",
              "description": "The created MMseqs2 database"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Joon-Klaps"
        ]
      }
    },
    {
      "name": "mmseqs_createindex",
      "path": "modules/nf-core/mmseqs/createindex/meta.yml",
      "type": "module",
      "meta": {
        "name": "mmseqs_createindex",
        "description": "Creates sequence index for mmseqs database",
        "keywords": [
          "protein sequence",
          "databases",
          "clustering",
          "searching",
          "indexing"
        ],
        "tools": [
          {
            "mmseqs": {
              "description": "MMseqs2: ultra fast and sensitive sequence search and clustering suite",
              "homepage": "https://github.com/soedinglab/MMseqs2",
              "documentation": "https://mmseqs.com/latest/userguide.pdf",
              "tool_dev_url": "https://github.com/soedinglab/MMseqs2",
              "doi": "10.1093/bioinformatics/btw006",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "db": {
              "type": "directory",
              "description": "Directory containing the DB to be indexed\n",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions\n",
              "pattern": "versions.yml"
            }
          },
          {
            "db_indexed": {
              "type": "directory",
              "description": "Directory containing the DB and the generated indexes\n",
              "pattern": "*"
            }
          }
        ],
        "authors": [
          "@JoseEspinosa"
        ]
      },
      "pipelines": [
        {
          "name": "proteinfold",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "mmseqs_databases",
      "path": "modules/nf-core/mmseqs/databases/meta.yml",
      "type": "module",
      "meta": {
        "name": "mmseqs_databases",
        "description": "Download an mmseqs-formatted database",
        "keywords": [
          "database",
          "indexing",
          "clustering",
          "searching"
        ],
        "tools": [
          {
            "mmseqs": {
              "description": "MMseqs2: ultra fast and sensitive sequence search and clustering suite",
              "homepage": "https://github.com/soedinglab/MMseqs2",
              "documentation": "https://mmseqs.com/latest/userguide.pdf",
              "tool_dev_url": "https://github.com/soedinglab/MMseqs2",
              "doi": "10.1093/bioinformatics/btw006",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "database": {
              "type": "string",
              "description": "Database available through the mmseqs2 databases interface - see https://github.com/soedinglab/MMseqs2/wiki#downloading-databases for details"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "database": {
              "type": "directory",
              "description": "Directory containing processed mmseqs database"
            }
          }
        ],
        "authors": [
          "@prototaxites"
        ]
      }
    },
    {
      "name": "mmseqs_tsv2exprofiledb",
      "path": "modules/nf-core/mmseqs/tsv2exprofiledb/meta.yml",
      "type": "module",
      "meta": {
        "name": "mmseqs_tsv2exprofiledb",
        "description": "Conversion of expandable profile to databases to the MMseqs2 databases format",
        "keywords": [
          "protein sequence",
          "databases",
          "clustering",
          "searching",
          "indexing"
        ],
        "tools": [
          {
            "mmseqs": {
              "description": "MMseqs2: ultra fast and sensitive sequence search and clustering suite",
              "homepage": "https://github.com/soedinglab/MMseqs2",
              "documentation": "https://mmseqs.com/latest/userguide.pdf",
              "tool_dev_url": "https://github.com/soedinglab/MMseqs2",
              "doi": "10.1093/bioinformatics/btw006",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "db": {
              "type": "directory",
              "description": "Directory containing the DB to be indexed\n",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions\n",
              "pattern": "versions.yml"
            }
          },
          {
            "db_indexed": {
              "type": "directory",
              "description": "Directory containing the DB and the generated indexes\n",
              "pattern": "*"
            }
          }
        ],
        "authors": [
          "@JoseEspinosa"
        ]
      },
      "pipelines": [
        {
          "name": "proteinfold",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "mobsuite_recon",
      "path": "modules/nf-core/mobsuite/recon/meta.yml",
      "type": "module",
      "meta": {
        "name": "mobsuite_recon",
        "description": "A tool to reconstruct plasmids in bacterial assemblies",
        "keywords": [
          "bacteria",
          "plasmid"
        ],
        "tools": [
          {
            "mobsuite": {
              "description": "Software tools for clustering, reconstruction and typing of plasmids from draft assemblies.",
              "homepage": "https://github.com/phac-nml/mob-suite",
              "documentation": "https://github.com/phac-nml/mob-suite",
              "tool_dev_url": "https://github.com/phac-nml/mob-suite",
              "doi": "10.1099/mgen.0.000435",
              "licence": [
                "Apache License, Version 2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "A bacterial genome assembly in FASTA format",
              "pattern": "*.{fasta,fa,fna}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "chromosome": {
              "type": "file",
              "description": "FASTA file of all contigs found to belong to the chromosome",
              "pattern": "chromosome.fasta"
            }
          },
          {
            "contig_report": {
              "type": "file",
              "description": "Assignment of the contig to chromosome or a particular plasmid grouping",
              "pattern": "contig_report.txt"
            }
          },
          {
            "plasmids": {
              "type": "file",
              "description": "Each plasmid group is written to an individual FASTA",
              "pattern": "plasmid_*.fasta"
            }
          },
          {
            "mobtyper_results": {
              "type": "file",
              "description": "Aggregate MOB-typer report files for all identified plasmid",
              "pattern": "mobtyper_results.txt"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "mosdepth",
      "path": "modules/nf-core/mosdepth/meta.yml",
      "type": "module",
      "meta": {
        "name": "mosdepth",
        "description": "Calculates genome-wide sequencing coverage.",
        "keywords": [
          "mosdepth",
          "bam",
          "cram",
          "coverage"
        ],
        "tools": [
          {
            "mosdepth": {
              "description": "Fast BAM/CRAM depth calculation for WGS, exome, or targeted sequencing.\n",
              "documentation": "https://github.com/brentp/mosdepth",
              "doi": "10.1093/bioinformatics/btx699",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Input BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Index for BAM/CRAM file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing bed information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file with intersected intervals",
              "pattern": "*.{bed}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome FASTA file",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "global_txt": {
              "type": "file",
              "description": "Text file with global cumulative coverage distribution",
              "pattern": "*.{global.dist.txt}"
            }
          },
          {
            "regions_txt": {
              "type": "file",
              "description": "Text file with region cumulative coverage distribution",
              "pattern": "*.{region.dist.txt}"
            }
          },
          {
            "summary_txt": {
              "type": "file",
              "description": "Text file with summary mean depths per chromosome and regions",
              "pattern": "*.{summary.txt}"
            }
          },
          {
            "per_base_bed": {
              "type": "file",
              "description": "BED file with per-base coverage",
              "pattern": "*.{per-base.bed.gz}"
            }
          },
          {
            "per_base_csi": {
              "type": "file",
              "description": "Index file for BED file with per-base coverage",
              "pattern": "*.{per-base.bed.gz.csi}"
            }
          },
          {
            "per_base_d4": {
              "type": "file",
              "description": "D4 file with per-base coverage",
              "pattern": "*.{per-base.d4}"
            }
          },
          {
            "regions_bed": {
              "type": "file",
              "description": "BED file with per-region coverage",
              "pattern": "*.{regions.bed.gz}"
            }
          },
          {
            "regions_csi": {
              "type": "file",
              "description": "Index file for BED file with per-region coverage",
              "pattern": "*.{regions.bed.gz.csi}"
            }
          },
          {
            "quantized_bed": {
              "type": "file",
              "description": "BED file with binned coverage",
              "pattern": "*.{quantized.bed.gz}"
            }
          },
          {
            "quantized_csi": {
              "type": "file",
              "description": "Index file for BED file with binned coverage",
              "pattern": "*.{quantized.bed.gz.csi}"
            }
          },
          {
            "thresholds_bed": {
              "type": "file",
              "description": "BED file with the number of bases in each region that are covered at or above each threshold",
              "pattern": "*.{thresholds.bed.gz}"
            }
          },
          {
            "thresholds_csi": {
              "type": "file",
              "description": "Index file for BED file with threshold coverage",
              "pattern": "*.{thresholds.bed.gz.csi}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh",
          "@ramprasadn",
          "@matthdsm"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "motus_downloaddb",
      "path": "modules/nf-core/motus/downloaddb/meta.yml",
      "type": "module",
      "meta": {
        "name": "motus_downloaddb",
        "description": "Download the mOTUs database",
        "keywords": [
          "classify",
          "metagenomics",
          "fastq",
          "taxonomic profiling",
          "database",
          "download"
        ],
        "tools": [
          {
            "motus": {
              "description": "The mOTU profiler is a computational tool that estimates relative taxonomic abundance of known and currently unknown microbial community members using metagenomic shotgun sequencing data.",
              "documentation": "https://github.com/motu-tool/mOTUs/wiki",
              "tool_dev_url": "https://github.com/motu-tool/mOTUs",
              "doi": "10.1186/s40168-022-01410-z",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "motus_downloaddb": {
              "type": "directory",
              "description": "The mOTUs downloadDB script source file.\nIt is the source file installed or\nremote source in github such as https://raw.githubusercontent.com/motu-tool/mOTUs/master/motus/downloadDB.py\n",
              "pattern": "downloadDB.py"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "The mOTUs database directory",
              "pattern": "db_mOTU"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      }
    },
    {
      "name": "motus_merge",
      "path": "modules/nf-core/motus/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "motus_merge",
        "description": "Taxonomic meta-omics profiling using universal marker genes",
        "keywords": [
          "classify",
          "metagenomics",
          "fastq",
          "taxonomic profiling",
          "merging",
          "merge",
          "otu table"
        ],
        "tools": [
          {
            "motus": {
              "description": "Marker gene-based OTU (mOTU) profiling",
              "homepage": "https://motu-tool.org/",
              "documentation": "https://github.com/motu-tool/mOTUs/wiki",
              "tool_dev_url": "https://github.com/motu-tool/mOTUs",
              "doi": "10.1186/s40168-022-01410-z",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "input": {
              "type": "file",
              "description": "List of output files (more than one) from motus profile,\nor a single directory containing motus output files.\n"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "mOTUs database downloaded by `motus downloadDB`\npattern: \"db_mOTU/\"\n"
            }
          },
          {
            "profile_version_yml": {
              "type": "file",
              "description": "A single versions.yml file output from motus/profile. motus/merge cannot reconstruct\nthis itself without having the motus database present and configured with the tool\nso here we take it from what is already reported by the upstream module.\n",
              "pattern": "versions.yml"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "OTU table in txt format, if BIOM format not requested",
              "pattern": "*.txt"
            }
          },
          {
            "biom": {
              "type": "file",
              "description": "OTU table in biom format, if BIOM format requested",
              "pattern": "*.biom"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "motus_profile",
      "path": "modules/nf-core/motus/profile/meta.yml",
      "type": "module",
      "meta": {
        "name": "motus_profile",
        "description": "Taxonomic meta-omics profiling using universal marker genes",
        "keywords": [
          "classify",
          "metagenomics",
          "fastq",
          "taxonomic profiling"
        ],
        "tools": [
          {
            "motus": {
              "description": "Marker gene-based OTU (mOTU) profiling",
              "homepage": "https://motu-tool.org/",
              "documentation": "https://github.com/motu-tool/mOTUs/wiki",
              "tool_dev_url": "https://github.com/motu-tool/mOTUs",
              "doi": "10.1186/s40168-022-01410-z",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input fastq/fasta files of size 1 and 2 for single-end and paired-end data,\nrespectively.\nOr the intermediate bam file mapped by bwa to the mOTUs database or\nthe output bam file from motus profile.\nOr the intermediate mgc read counts table.\n",
              "pattern": "*.{fastq,fq,fasta,fa,fastq.gz,fq.gz,fasta.gz,fa.gz,.bam,.mgc}"
            }
          },
          {
            "db": {
              "type": "directory",
              "description": "mOTUs database downloaded by `motus downloadDB`\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "out": {
              "type": "file",
              "description": "Results with taxonomic classification of each read",
              "pattern": "*.out"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Optional intermediate sorted BAM file from BWA",
              "pattern": "*.{bam}"
            }
          },
          {
            "mgc": {
              "type": "file",
              "description": "Optional intermediate mgc read count table file saved with `-M`.",
              "pattern": "*.{mgc}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Standard error logging file containing summary statistics",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "msisensor2_msi",
      "path": "modules/nf-core/msisensor2/msi/meta.yml",
      "type": "module",
      "meta": {
        "name": "msisensor2_msi",
        "description": "msisensor2 detection of MSI regions.",
        "keywords": [
          "msi"
        ],
        "tools": [
          {
            "msisensor2": {
              "description": "MSIsensor2 is a novel algorithm based machine learning, featuring a large upgrade in the microsatellite instability (MSI) detection for tumor only sequencing data, including Cell-Free DNA (cfDNA), Formalin-Fixed Paraffin-Embedded(FFPE) and other sample types. The original MSIsensor is specially designed for tumor/normal paired sequencing data.",
              "homepage": "https://github.com/niu-lab/msisensor2",
              "documentation": "https://github.com/niu-lab/msisensor2/blob/master/README.md",
              "tool_dev_url": "https://github.com/niu-lab/msisensor2",
              "licence": "GPL-3.0"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tumor_bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "normal_bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "BED",
              "pattern": "*.bed"
            }
          },
          {
            "models": {
              "type": "file",
              "description": "Folder of MSISensor2 models (available from Github or as a product of msisensor2/scan)",
              "pattern": "*/*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "msi": {
              "type": "file",
              "description": "MSI classifications as a text file"
            }
          },
          {
            "distribution": {
              "type": "file",
              "description": "Read count distributions of MSI regions"
            }
          },
          {
            "somatic": {
              "type": "file",
              "description": "Somatic MSI regions detected."
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "msisensor2_scan",
      "path": "modules/nf-core/msisensor2/scan/meta.yml",
      "type": "module",
      "meta": {
        "name": "msisensor2_scan",
        "description": "msisensor2 detection of MSI regions.",
        "keywords": [
          "msi"
        ],
        "tools": [
          {
            "msisensor2": {
              "description": "MSIsensor2 is a novel algorithm based machine learning, featuring a large upgrade in the microsatellite instability (MSI) detection for tumor only sequencing data, including Cell-Free DNA (cfDNA), Formalin-Fixed Paraffin-Embedded(FFPE) and other sample types. The original MSIsensor is specially designed for tumor/normal paired sequencing data.",
              "homepage": "https://github.com/niu-lab/msisensor2",
              "documentation": "https://github.com/niu-lab/msisensor2/blob/master/README.md",
              "tool_dev_url": "https://github.com/niu-lab/msisensor2",
              "licence": "GPL-3.0"
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Path to reference genome.",
              "pattern": "*.fasta"
            }
          },
          {
            "output": {
              "type": "val",
              "description": "Name of output MSI scan to write."
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "Output scan of MSI regions in FASTA file.",
              "pattern": "*"
            }
          }
        ],
        "authors": [
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "msisensor_msi",
      "path": "modules/nf-core/msisensor/msi/meta.yml",
      "type": "module",
      "meta": {
        "name": "msisensor_msi",
        "description": "Evaluate microsattelite instability (MSI) using paired tumor-normal sequencing data",
        "keywords": [
          "homoploymer,microsatellite"
        ],
        "tools": [
          {
            "msisensor": {
              "description": "MSIsensor is a C++ program to detect replication slippage variants at microsatellite regions, and differentiate them as somatic or germline.",
              "homepage": "https://github.com/ding-lab/msisensor",
              "doi": "10.1093/bioinformatics/btt755",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "normal_bam": {
              "type": "file",
              "description": "Coordinate sorted BAM/CRAM/SAM file from normal tissue",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "normal_bai": {
              "type": "file",
              "description": "Index for coordinate sorted BAM/CRAM/SAM file from normal tissue",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "tumor_bam": {
              "type": "file",
              "description": "Coordinate sorted BAM/CRAM/SAM file from tumor tissue",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "tumor_bai": {
              "type": "file",
              "description": "Index for coordinate sorted BAM/CRAM/SAM file from tumor tissue",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "homopolymers": {
              "type": "file",
              "description": "Output file from MSIsensor scan module",
              "pattern": "*.msisensor_scan.tab"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "MSIsensor MSI final report file",
              "pattern": "*.output"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "MSIsensor MSI DIS report file",
              "pattern": "*.output_dis"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "MSIsensor MSI germline report file",
              "pattern": "*.output_germline"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "MSIsensor MSI somatic report file",
              "pattern": "*.output_somatic"
            }
          }
        ],
        "authors": [
          "@kevbrick"
        ]
      }
    },
    {
      "name": "msisensor_scan",
      "path": "modules/nf-core/msisensor/scan/meta.yml",
      "type": "module",
      "meta": {
        "name": "msisensor_scan",
        "description": "Scan a reference genome to get microsatellite & homopolymer information",
        "keywords": [
          "homoploymer,microsatellite"
        ],
        "tools": [
          {
            "msisensor": {
              "description": "MSIsensor is a C++ program to detect replication slippage variants at microsatellite regions, and differentiate them as somatic or germline.",
              "homepage": "https://github.com/ding-lab/msisensor",
              "doi": "10.1093/bioinformatics/btt755",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "MSIsensor scan output file of homopolymers & minisatellites",
              "pattern": "*.msisensor_scan.txt"
            }
          }
        ],
        "authors": [
          "@kevbrick"
        ]
      }
    },
    {
      "name": "msisensorpro_msisomatic",
      "path": "modules/nf-core/msisensorpro/msisomatic/meta.yml",
      "type": "module",
      "meta": {
        "name": "msisensorpro_msisomatic",
        "description": "MSIsensor-pro evaluates Microsatellite Instability (MSI) for cancer patients with next generation sequencing data. It accepts the whole genome sequencing, whole exome sequencing and target region (panel) sequencing data as input",
        "keywords": [
          "micro-satellite-scan",
          "msisensor-pro",
          "msi",
          "somatic"
        ],
        "tools": [
          {
            "msisensorpro": {
              "description": "Microsatellite Instability (MSI) detection using high-throughput sequencing data.",
              "homepage": "https://github.com/xjtu-omics/msisensor-pro",
              "documentation": "https://github.com/xjtu-omics/msisensor-pro/wiki",
              "tool_dev_url": "https://github.com/xjtu-omics/msisensor-pro",
              "doi": "10.1016/j.gpb.2020.02.001",
              "licence": [
                "Custom Licence"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "normal": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "normal_index": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "tumor": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "tumor_index": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "bed file containing interval information, optional",
              "pattern": "*.{bed}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome",
              "pattern": "*.{fasta}"
            }
          },
          {
            "msisensor_scan": {
              "type": "file",
              "description": "Output from msisensor-pro/scan, conaining list of msi regions",
              "pattern": "*.list"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "output_report": {
              "type": "file",
              "description": "File containing final report with all detected microsatellites, unstable somatic microsatellites, msi score"
            }
          },
          {
            "output_dis": {
              "type": "file",
              "description": "File containing distribution results"
            }
          },
          {
            "output_germline": {
              "type": "file",
              "description": "File containing germline results"
            }
          },
          {
            "output_somatic": {
              "type": "file",
              "description": "File containing somatic results"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "list": {
              "type": "file",
              "description": "File containing microsatellite list",
              "pattern": "*.{list}"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      }
    },
    {
      "name": "msisensorpro_scan",
      "path": "modules/nf-core/msisensorpro/scan/meta.yml",
      "type": "module",
      "meta": {
        "name": "msisensorpro_scan",
        "description": "MSIsensor-pro evaluates Microsatellite Instability (MSI) for cancer patients with next generation sequencing data. It accepts the whole genome sequencing, whole exome sequencing and target region (panel) sequencing data as input",
        "keywords": [
          "micro-satellite-scan",
          "msisensor-pro",
          "scan"
        ],
        "tools": [
          {
            "msisensorpro": {
              "description": "Microsatellite Instability (MSI) detection using high-throughput sequencing data.",
              "homepage": "https://github.com/xjtu-omics/msisensor-pro",
              "documentation": "https://github.com/xjtu-omics/msisensor-pro/wiki",
              "tool_dev_url": "https://github.com/xjtu-omics/msisensor-pro",
              "doi": "10.1016/j.gpb.2020.02.001",
              "licence": [
                "Custom Licence"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome",
              "pattern": "*.{fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "list": {
              "type": "file",
              "description": "File containing microsatellite list",
              "pattern": "*.{list}"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "mtnucratio",
      "path": "modules/nf-core/mtnucratio/meta.yml",
      "type": "module",
      "meta": {
        "name": "mtnucratio",
        "description": "A small Java tool to calculate ratios between MT and nuclear sequencing reads in a given BAM file.",
        "keywords": [
          "mtnucratio",
          "ratio",
          "reads",
          "bam",
          "mitochondrial to nuclear ratio",
          "mitochondria",
          "statistics"
        ],
        "tools": [
          {
            "mtnucratio": {
              "description": "A small tool to determine MT to Nuclear ratios for NGS data.",
              "homepage": "https://github.com/apeltzer/MTNucRatioCalculator",
              "documentation": "https://github.com/apeltzer/MTNucRatioCalculator",
              "tool_dev_url": "https://github.com/apeltzer/MTNucRatioCalculator",
              "doi": "10.1186/s13059-016-0918-z",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "(coordinate) sorted BAM/SAM file",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "mt_id": {
              "type": "string",
              "description": "Identifier of the contig/chromosome of interest (e.g. chromosome, contig) as in the aligned against reference FASTA file, e.g. mt or chrMT for mitochondria"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "mtnucratio": {
              "type": "file",
              "description": "Text file containing metrics (mtreads, mt_cov_avg, nucreads, nuc_cov_avg, mt_nuc_ratio)",
              "pattern": "*.mtnucratio"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON file, containing metadata map with sample name, tool name and version, and metrics as in txt file",
              "pattern": "*.json"
            }
          }
        ],
        "authors": [
          "@louperelo"
        ]
      }
    },
    {
      "name": "multiqc",
      "path": "modules/nf-core/multiqc/meta.yml",
      "type": "module",
      "meta": {
        "name": "MultiQC",
        "description": "Aggregate results from bioinformatics analyses across many samples into a single report",
        "keywords": [
          "QC",
          "bioinformatics tools",
          "Beautiful stand-alone HTML report"
        ],
        "tools": [
          {
            "multiqc": {
              "description": "MultiQC searches a given directory for analysis logs and compiles a HTML report.\nIt's a general use tool, perfect for summarising the output from numerous bioinformatics tools.\n",
              "homepage": "https://multiqc.info/",
              "documentation": "https://multiqc.info/docs/",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "multiqc_files": {
              "type": "file",
              "description": "List of reports / files recognised by MultiQC, for example the html and zip output of FastQC\n"
            }
          },
          {
            "multiqc_config": {
              "type": "file",
              "description": "Optional config yml for MultiQC",
              "pattern": "*.{yml,yaml}"
            }
          },
          {
            "extra_multiqc_config": {
              "type": "file",
              "description": "Second optional config yml for MultiQC. Will override common sections in multiqc_config.",
              "pattern": "*.{yml,yaml}"
            }
          },
          {
            "multiqc_logo": {
              "type": "file",
              "description": "Optional logo file for MultiQC",
              "pattern": "*.{png}"
            }
          }
        ],
        "output": [
          {
            "report": {
              "type": "file",
              "description": "MultiQC report file",
              "pattern": "multiqc_report.html"
            }
          },
          {
            "data": {
              "type": "directory",
              "description": "MultiQC data dir",
              "pattern": "multiqc_data"
            }
          },
          {
            "plots": {
              "type": "file",
              "description": "Plots created by MultiQC",
              "pattern": "*_data"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@abhi18av",
          "@bunop",
          "@drpatelh",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "airrflow",
          "version": "3.1.0"
        },
        {
          "name": "ampliseq",
          "version": "2.6.1"
        },
        {
          "name": "bacass",
          "version": "2.0.0"
        },
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "crisprseq",
          "version": "2.0.0"
        },
        {
          "name": "demultiplex",
          "version": "1.3.2"
        },
        {
          "name": "epitopeprediction",
          "version": "2.2.1"
        },
        {
          "name": "fastquorum",
          "version": "dev"
        },
        {
          "name": "funcscan",
          "version": "1.1.2"
        },
        {
          "name": "genomeannotator",
          "version": "dev"
        },
        {
          "name": "genomeassembler",
          "version": "dev"
        },
        {
          "name": "genomeskim",
          "version": "dev"
        },
        {
          "name": "gwas",
          "version": "dev"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "hlatyping",
          "version": "2.0.0"
        },
        {
          "name": "isoseq",
          "version": "1.1.4"
        },
        {
          "name": "liverctanalysis",
          "version": "dev"
        },
        {
          "name": "mag",
          "version": "2.3.2"
        },
        {
          "name": "metapep",
          "version": "dev"
        },
        {
          "name": "methylseq",
          "version": "2.4.0"
        },
        {
          "name": "mhcquant",
          "version": "2.4.1"
        },
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "nanostring",
          "version": "1.1.1"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "pangenome",
          "version": "dev"
        },
        {
          "name": "proteinfold",
          "version": "1.0.0"
        },
        {
          "name": "quantms",
          "version": "1.1.1"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "scrnaseq",
          "version": "2.3.2"
        },
        {
          "name": "smrnaseq",
          "version": "2.2.1"
        },
        {
          "name": "spatialtranscriptomics",
          "version": "dev"
        },
        {
          "name": "ssds",
          "version": "dev"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "multivcfanalyzer",
      "path": "modules/nf-core/multivcfanalyzer/meta.yml",
      "type": "module",
      "meta": {
        "name": "multivcfanalyzer",
        "description": "SNP table generator from GATK UnifiedGenotyper with functionality geared for aDNA",
        "keywords": [
          "vcf",
          "ancient DNA",
          "aDNA",
          "SNP",
          "GATK UnifiedGenotyper",
          "SNP table"
        ],
        "tools": [
          {
            "multivcfanalyzer": {
              "description": "MultiVCFAnalyzer is a VCF file post-processing tool tailored for aDNA. License on Github repository.",
              "homepage": "https://github.com/alexherbig/MultiVCFAnalyzer",
              "documentation": "https://github.com/alexherbig/MultiVCFAnalyzer",
              "tool_dev_url": "https://github.com/alexherbig/MultiVCFAnalyzer",
              "doi": "10.1038/nature13591",
              "licence": "['GPL >=3']"
            }
          }
        ],
        "input": [
          {
            "vcfs": {
              "type": "file",
              "description": "One or a list of uncompressed VCF file",
              "pattern": "*.vcf"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome VCF was generated against",
              "pattern": "*.{fasta,fna,fa}"
            }
          },
          {
            "snpeff_results": {
              "type": "file",
              "description": "Results from snpEff in txt format (Optional)",
              "pattern": "*.txt"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "GFF file corresponding to reference genome fasta (Optional)",
              "pattern": "*.gff"
            }
          },
          {
            "allele_freqs": {
              "type": "boolean",
              "description": "Whether to include the percentage of reads a given allele is\npresent in in the SNP table.\n"
            }
          },
          {
            "genotype_quality": {
              "type": "integer",
              "description": "Minimum GATK genotyping threshold threshold of which a SNP call\nfalling under is 'discarded'\n"
            }
          },
          {
            "coverage": {
              "type": "integer",
              "description": "Minimum number of a reads that a position must be covered by to be\nreported\n"
            }
          },
          {
            "homozygous_freq": {
              "type": "number",
              "description": "Fraction of reads a base must have to be called 'homozygous'"
            }
          },
          {
            "heterozygous_freq": {
              "type": "mumber",
              "description": "Fraction of which whereby if a call falls above this value, and lower\nthan the homozygous threshold, a base will be called 'heterozygous'.\n"
            }
          },
          {
            "gff_exclude": {
              "type": "file",
              "description": "file listing positions that will be 'filtered' (i.e. ignored)\n(Optional)\n",
              "pattern": "*.vcf"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "full_alignment": {
              "type": "file",
              "description": "Fasta a fasta file of all positions contained in the VCF files i.e. including ref calls",
              "pattern": ".fasta.gz"
            }
          },
          {
            "info_txt": {
              "type": "file",
              "description": "Information about the run",
              "pattern": ".txt"
            }
          },
          {
            "snp_alignment": {
              "type": "file",
              "description": "A fasta file of just SNP positions with samples only",
              "pattern": ".fasta.gz"
            }
          },
          {
            "snp_genome_alignment": {
              "type": "file",
              "description": "A fasta file of just SNP positions with reference genome",
              "pattern": ".fasta.gz"
            }
          },
          {
            "snpstatistics": {
              "type": "file",
              "description": "Some basic statistics about the SNP calls of each sample",
              "pattern": ".tsv"
            }
          },
          {
            "snptable": {
              "type": "file",
              "description": "Basic SNP table of combined positions taken from each VCF file",
              "pattern": ".tsv"
            }
          },
          {
            "snptable_snpeff": {
              "type": "file",
              "description": "Input file for SnpEff",
              "pattern": ".tsv"
            }
          },
          {
            "snptable_uncertainty": {
              "type": "file",
              "description": "Same as above, but with lower case characters indicating uncertain calls",
              "pattern": ".tsv"
            }
          },
          {
            "structure_genotypes": {
              "type": "file",
              "description": "Input file for STRUCTURE",
              "pattern": ".tsv"
            }
          },
          {
            "structure_genotypes_nomissing": {
              "type": "file",
              "description": "Alternate input file for STRUCTURE",
              "pattern": ".tsv"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "Summary statistics in MultiQC JSON format",
              "pattern": ".json"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "mummer",
      "path": "modules/nf-core/mummer/meta.yml",
      "type": "module",
      "meta": {
        "name": "mummer",
        "description": "MUMmer is a system for rapidly aligning entire genomes",
        "keywords": [
          "align",
          "genome",
          "fasta"
        ],
        "tools": [
          {
            "mummer": {
              "description": "MUMmer is a system for rapidly aligning entire genomes",
              "homepage": "http://mummer.sourceforge.net/",
              "documentation": "http://mummer.sourceforge.net/",
              "tool_dev_url": "http://mummer.sourceforge.net/",
              "doi": "10.1186/gb-2004-5-2-r12",
              "licence": [
                "The Artistic License"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ref": {
              "type": "file",
              "description": "FASTA file of the reference sequence",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz}"
            }
          },
          {
            "query": {
              "type": "file",
              "description": "FASTA file of the query sequence",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "coords": {
              "type": "file",
              "description": "File containing coordinates of matches between reference and query sequence",
              "pattern": "*.coords"
            }
          }
        ],
        "authors": [
          "@mjcipriano",
          "@sateeshperi"
        ]
      }
    },
    {
      "name": "muscle",
      "path": "modules/nf-core/muscle/meta.yml",
      "type": "module",
      "meta": {
        "name": "muscle",
        "description": "MUSCLE is a program for creating multiple alignments of amino acid or nucleotide sequences. A range of options are provided that give you the choice of optimizing accuracy, speed, or some compromise between the two",
        "keywords": [
          "msa",
          "multiple sequence alignment"
        ],
        "tools": [
          {
            "muscle": {
              "description": "MUSCLE is a multiple sequence alignment tool with high accuracy and throughput",
              "homepage": "https://www.drive5.com/muscle",
              "documentation": "http://www.drive5.com/muscle/muscle.html#_Toc81224840",
              "doi": "10.1093/nar/gkh340",
              "licence": [
                "http://www.drive5.com/muscle/manual/license.html"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Input sequences for alignment must be in FASTA format",
              "pattern": "*.{fasta,fa,fna}"
            }
          }
        ],
        "output": [
          {
            "aligned_fasta": {
              "type": "file",
              "description": "Multiple sequence alignment produced in FASTA format",
              "pattern": "*.{afa}"
            }
          },
          {
            "msf": {
              "type": "file",
              "description": "GCG Multiple Sequence File (MSF) alignment format (similar to CLUSTALW)",
              "pattern": "*.{msf}"
            }
          },
          {
            "clustalw": {
              "type": "file",
              "description": "Multiple sequence alignment produced in ClustalW format without base/residue numbering",
              "pattern": "*.{clw}"
            }
          },
          {
            "phyi": {
              "type": "file",
              "description": "Multiple sequence alignment produced in PHYLIP interleaved format",
              "pattern": "*.{phyi}"
            }
          },
          {
            "phys": {
              "type": "file",
              "description": "Multiple sequence alignment produced in PHYLIP sequential format",
              "pattern": "*.{phys}"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "Multiple sequence alignment produced in HTML format",
              "pattern": "*.{html}"
            }
          },
          {
            "tree": {
              "type": "file",
              "description": "NJ or UPGMA tree in Newick format produced from a multiple sequence alignment",
              "pattern": "*.{tree}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file of MUSCLE run",
              "pattern": "*{.log}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@MGordon"
        ]
      }
    },
    {
      "name": "mykrobe_predict",
      "path": "modules/nf-core/mykrobe/predict/meta.yml",
      "type": "module",
      "meta": {
        "name": "mykrobe_predict",
        "description": "AMR predictions for supported species",
        "keywords": [
          "fastq",
          "bam",
          "antimicrobial resistance"
        ],
        "tools": [
          {
            "mykrobe": {
              "description": "Antibiotic resistance prediction in minutes",
              "homepage": "http://www.mykrobe.com/",
              "documentation": "https://github.com/Mykrobe-tools/mykrobe/wiki",
              "tool_dev_url": "https://github.com/Mykrobe-tools/mykrobe",
              "doi": "10.1038/ncomms10063",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "seqs": {
              "type": "file",
              "description": "BAM or FASTQ file",
              "pattern": "*.{bam,fastq.gz,fq.gz}"
            }
          },
          {
            "species": {
              "type": "string",
              "description": "Species to make AMR prediction against",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "AMR predictions in CSV format",
              "pattern": "*.csv"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "AMR predictions in JSON format",
              "pattern": "*.json"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "nanocomp",
      "path": "modules/nf-core/nanocomp/meta.yml",
      "type": "module",
      "meta": {
        "name": "nanocomp",
        "description": "Compare multiple runs of long read sequencing data and alignments",
        "keywords": [
          "bam",
          "fasta",
          "fastq",
          "qc",
          "nanopore"
        ],
        "tools": [
          {
            "nanocomp": {
              "description": "Compare multiple runs of long read sequencing data and alignments",
              "homepage": "https://github.com/wdecoster/nanocomp",
              "documentation": "https://github.com/wdecoster/nanocomp",
              "licence": "MIT License"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]"
            }
          },
          {
            "filelist": {
              "type": "file",
              "description": "List of all the files you want to compare, they have to be all the same filetype (either fastq, fasta, bam or Nanopore sequencing summary)",
              "pattern": "*.{fastq,fq,fna,ffn,faa,frn,fa,fasta,txt,bam}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]"
            }
          },
          {
            "report_html": {
              "type": "file",
              "description": "Summary of all collected statistics",
              "pattern": "*NanoComp-report.html"
            }
          },
          {
            "lengths_violin_html": {
              "type": "file",
              "description": "Violin plot of the sequence lengths",
              "pattern": "*NanoComp_lengths_violin.html"
            }
          },
          {
            "log_length_violin_html": {
              "type": "file",
              "description": "Violin plot of the sequence lengths, log function applied",
              "pattern": "*NanoComp_log_length_violin.html"
            }
          },
          {
            "n50_html": {
              "type": "file",
              "description": "Bar plot of N50 sequence length per sample",
              "pattern": "*NanoComp_N50.html"
            }
          },
          {
            "number_of_reads_html": {
              "type": "file",
              "description": "Bar plot of number of reads per sample",
              "pattern": "*NanoComp_number_of_reads.html"
            }
          },
          {
            "overlay_histogram_html": {
              "type": "file",
              "description": "Histogram of all read lengths per sample",
              "pattern": "*NanoComp_OverlayHistogram.html"
            }
          },
          {
            "overlay_histogram_normalized_html": {
              "type": "file",
              "description": "Normalized histogram of all read lengths per sample",
              "pattern": "*NanoComp_OverlayHistogram_Normalized.html"
            }
          },
          {
            "overlay_log_histogram_html": {
              "type": "file",
              "description": "Histogram of all read lengths per sample, log function applied",
              "pattern": "*NanoComp_OverlayLogHistogram.html"
            }
          },
          {
            "overlay_log_histogram_normalized_html": {
              "type": "file",
              "description": "Normalized histogram of all read lengths per sample, log function applied",
              "pattern": "*NanoComp_OverlayLogHistogram_Normalized.html"
            }
          },
          {
            "total_throughput_html": {
              "type": "file",
              "description": "Barplot comparing throughput in bases",
              "pattern": "*NanoComp_total_throughput.html"
            }
          },
          {
            "quals_violin_html": {
              "type": "file",
              "description": "Violin plot of base qualities, only for bam, fastq and sequencing summary input",
              "pattern": "*NanoComp_quals_violin.html"
            }
          },
          {
            "overlay_histogram_identity_html": {
              "type": "file",
              "description": "Histogram of perfect reference identity, only for bam input",
              "pattern": "*NanoComp_OverlayHistogram_Identity.html"
            }
          },
          {
            "overlay_histogram_phredscore_html": {
              "type": "file",
              "description": "Histogram of phred scores, only for bam input",
              "pattern": "*NanoComp_OverlayHistogram_PhredScore.html"
            }
          },
          {
            "percent_identity_violin_html": {
              "type": "file",
              "description": "Violin plot comparing perfect reference identity, only for bam input",
              "pattern": "*NanoComp_percentIdentity_violin.html"
            }
          },
          {
            "active_pores_over_time_html": {
              "type": "file",
              "description": "Scatter plot of active pores over time, only for sequencing summary input",
              "pattern": "*NanoComp_ActivePoresOverTime.html"
            }
          },
          {
            "cumulative_yield_plot_gigabases_html": {
              "type": "file",
              "description": "Scatter plot of cumulative yield, only for sequencing summary input",
              "pattern": "*NanoComp_CumulativeYieldPlot_Gigabases.html"
            }
          },
          {
            "sequencing_speed_over_time_html": {
              "type": "file",
              "description": "Scatter plot of sequencing speed over time, only for sequencing summary input",
              "pattern": "*NanoComp_sequencing_speed_over_time.html"
            }
          },
          {
            "stats_txt": {
              "type": "file",
              "description": "txt file with basic statistics",
              "pattern": "*NanoStats.txt"
            }
          }
        ],
        "authors": [
          "@paulwolk"
        ]
      }
    },
    {
      "name": "nanolyse",
      "path": "modules/nf-core/nanolyse/meta.yml",
      "type": "module",
      "meta": {
        "name": "nanolyse",
        "description": "DNA contaminant removal using NanoLyse",
        "keywords": [
          "contaminant_removal"
        ],
        "tools": [
          {
            "nanolyse": {
              "description": "DNA contaminant removal using NanoLyse\n",
              "homepage": "https://github.com/wdecoster/nanolyse",
              "documentation": "https://github.com/wdecoster/nanolyse#nanolyse",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Basecalled reads in FASTQ.GZ format\n",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "A reference fasta file against which to filter.\n",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Reads with contaminants removed in FASTQ format",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log of the Nanolyse run.",
              "pattern": "*.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@yuukiiwa"
        ]
      },
      "pipelines": [
        {
          "name": "nanoseq",
          "version": "3.1.0"
        }
      ]
    },
    {
      "name": "nanomonsv_parse",
      "path": "modules/nf-core/nanomonsv/parse/meta.yml",
      "type": "module",
      "meta": {
        "name": "nanomonsv_parse",
        "description": "Parse all the supporting reads of putative somatic SVs using nanomonsv.\nAfter successful completion, you will find supporting reads stratified by\ndeletions, insertions, and rearrangements.\nA precursor to \"nanomonsv get\"\n",
        "keywords": [
          "structural variants",
          "nanopore",
          "cancer genome",
          "somatic structural variations",
          "mobile element insertions",
          "long reads"
        ],
        "tools": [
          {
            "nanomonsv": {
              "description": "nanomonsv is a software for detecting somatic structural variations\nfrom paired (tumor and matched control) cancer genome sequence data.\n",
              "homepage": "https://github.com/friend1ws/nanomonsv",
              "documentation": "https://github.com/friend1ws/nanomonsv#commands",
              "tool_dev_url": "https://github.com/friend1ws/nanomonsv",
              "doi": "10.1101/2020.07.22.214262 ",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Aligned BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.{bai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "insertions": {
              "type": "file",
              "description": "Gzipped BED file containing reads supporting insertions",
              "pattern": "*.{bed.gz}"
            }
          },
          {
            "insertions_index": {
              "type": "file",
              "description": "Index for gzipped BED file containing reads supporting insertions",
              "pattern": "*.{bed.gz.tbi}"
            }
          },
          {
            "deletions": {
              "type": "file",
              "description": "Gzipped BED file containing reads supporting deletions",
              "pattern": "*.{bed.gz}"
            }
          },
          {
            "deletions_index": {
              "type": "file",
              "description": "Index for gzipped BED file containing reads supporting deletions",
              "pattern": "*.{bed.gz.tbi}"
            }
          },
          {
            "rearrangements": {
              "type": "file",
              "description": "Gzipped BED file containing reads supporting rearrangements",
              "pattern": "*.{bed.gz}"
            }
          },
          {
            "rearrangements_index": {
              "type": "file",
              "description": "Index for gzipped BED file containing reads supporting rearrangements",
              "pattern": "*.{bed.gz.tbi}"
            }
          },
          {
            "bp_info": {
              "type": "file",
              "description": "Gzipped BED file containing breakpoint info",
              "pattern": "*.{bed.gz}"
            }
          },
          {
            "bp_info_index": {
              "type": "file",
              "description": "Index for gzipped BED file containing breakpoint info",
              "pattern": "*.{bed.gz.tbi}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@awgymer"
        ]
      }
    },
    {
      "name": "nanoplot",
      "path": "modules/nf-core/nanoplot/meta.yml",
      "type": "module",
      "meta": {
        "name": "nanoplot",
        "description": "Run NanoPlot on nanopore-sequenced reads",
        "keywords": [
          "quality control",
          "qc",
          "fastq",
          "sequencing summary",
          "nanopore"
        ],
        "tools": [
          {
            "nanoplot": {
              "description": "NanoPlot is a tool for ploting long-read sequencing data and\nalignment.\n",
              "homepage": "http://nanoplot.bioinf.be",
              "documentation": "https://github.com/wdecoster/NanoPlot",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "List of input basecalled-FastQ files.\n"
            }
          },
          {
            "summary_txt": {
              "type": "file",
              "description": "List of sequencing_summary.txt files from running basecalling.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "NanoPlot report",
              "pattern": "*{.html}"
            }
          },
          {
            "png": {
              "type": "file",
              "description": "Plots generated by NanoPlot",
              "pattern": "*{.png}"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Stats from NanoPlot",
              "pattern": "*{.txt}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "log file of NanoPlot run",
              "pattern": "*{.log}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@yuukiiwa"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        },
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "ncbigenomedownload",
      "path": "modules/nf-core/ncbigenomedownload/meta.yml",
      "type": "module",
      "meta": {
        "name": "ncbigenomedownload",
        "description": "A tool to quickly download assemblies from NCBI's Assembly database",
        "keywords": [
          "fasta",
          "download",
          "assembly"
        ],
        "tools": [
          {
            "ncbigenomedownload": {
              "description": "Download genome files from the NCBI FTP server.",
              "homepage": "https://github.com/kblin/ncbi-genome-download",
              "documentation": "https://github.com/kblin/ncbi-genome-download",
              "tool_dev_url": "https://github.com/kblin/ncbi-genome-download",
              "licence": [
                "Apache Software License"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "accessions": {
              "type": "file",
              "description": "List of accessions (one per line) to download",
              "pattern": "*.txt"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "gbk": {
              "type": "file",
              "description": "GenBank format of the genomic sequence(s) in the assembly",
              "pattern": "*_genomic.gbff.gz"
            }
          },
          {
            "fna": {
              "type": "file",
              "description": "FASTA format of the genomic sequence(s) in the assembly.",
              "pattern": "*_genomic.fna.gz"
            }
          },
          {
            "rm": {
              "type": "file",
              "description": "RepeatMasker output for eukaryotes.",
              "pattern": "*_rm.out.gz"
            }
          },
          {
            "features": {
              "type": "file",
              "description": "Tab-delimited text file reporting locations and attributes for a subset of annotated features",
              "pattern": "*_feature_table.txt.gz"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "Annotation of the genomic sequence(s) in GFF3 format",
              "pattern": "*_genomic.gff.gz"
            }
          },
          {
            "faa": {
              "type": "file",
              "description": "FASTA format of the accessioned protein products annotated on the genome assembly.",
              "pattern": "*_protein.faa.gz"
            }
          },
          {
            "gpff": {
              "type": "file",
              "description": "GenPept format of the accessioned protein products annotated on the genome assembly.",
              "pattern": "*_protein.gpff.gz"
            }
          },
          {
            "wgs_gbk": {
              "type": "file",
              "description": "GenBank flat file format of the WGS master for the assembly",
              "pattern": "*_wgsmaster.gbff.gz"
            }
          },
          {
            "cds": {
              "type": "file",
              "description": "FASTA format of the nucleotide sequences corresponding to all CDS features annotated on the assembly",
              "pattern": "*_cds_from_genomic.fna.gz"
            }
          },
          {
            "rna": {
              "type": "file",
              "description": "FASTA format of accessioned RNA products annotated on the genome assembly",
              "pattern": "*_rna.fna.gz"
            }
          },
          {
            "rna_fna": {
              "type": "file",
              "description": "FASTA format of the nucleotide sequences corresponding to all RNA features annotated on the assembly",
              "pattern": "*_rna_from_genomic.fna.gz"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Tab-delimited text file reporting the name, role and sequence accession.version for objects in the assembly",
              "pattern": "*_assembly_report.txt"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Tab-delimited text file reporting statistics for the assembly",
              "pattern": "*_assembly_stats.txt"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "nextclade_datasetget",
      "path": "modules/nf-core/nextclade/datasetget/meta.yml",
      "type": "module",
      "meta": {
        "name": "nextclade_datasetget",
        "description": "Get dataset for SARS-CoV-2 genome clade assignment, mutation calling, and sequence quality checks (C++ implementation)",
        "keywords": [
          "nextclade",
          "variant",
          "consensus"
        ],
        "tools": [
          {
            "nextclade": {
              "description": "SARS-CoV-2 genome clade assignment, mutation calling, and sequence quality checks",
              "homepage": "https://github.com/nextstrain/nextclade",
              "documentation": "https://github.com/nextstrain/nextclade",
              "tool_dev_url": "https://github.com/nextstrain/nextclade",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "dataset": {
              "type": "string",
              "description": "Name of dataset to retrieve. A list of available datasets can be obtained using the nextclade dataset list command.",
              "pattern": ".+"
            }
          },
          {
            "reference": {
              "type": "string",
              "description": "Accession id to download dataset based on a particular reference sequence. A list of available datasets can be obtained using the nextclade dataset list command.",
              "pattern": ".+"
            }
          },
          {
            "tag": {
              "type": "string",
              "description": "Version tag of the dataset to download. A list of available datasets can be obtained using the nextclade dataset list command.",
              "pattern": ".+"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "prefix": {
              "type": "path",
              "description": "A directory containing the dataset files needed for nextclade run",
              "pattern": "prefix"
            }
          }
        ],
        "authors": [
          "@antunderwood",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "nextclade_run",
      "path": "modules/nf-core/nextclade/run/meta.yml",
      "type": "module",
      "meta": {
        "name": "nextclade_run",
        "description": "SARS-CoV-2 genome clade assignment, mutation calling, and sequence quality checks (C++ implementation)",
        "keywords": [
          "nextclade",
          "variant",
          "consensus"
        ],
        "tools": [
          {
            "nextclade": {
              "description": "SARS-CoV-2 genome clade assignment, mutation calling, and sequence quality checks",
              "homepage": "https://github.com/nextstrain/nextclade",
              "documentation": "https://github.com/nextstrain/nextclade",
              "tool_dev_url": "https://github.com/nextstrain/nextclade",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "dataset": {
              "type": "path",
              "description": "Path containing the dataset files obtained by running nextclade dataset get",
              "pattern": "*"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file containing one or more consensus sequences",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "CSV file containing nextclade results",
              "pattern": "*.{csv}"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON file containing nextclade results",
              "pattern": "*.{json}"
            }
          },
          {
            "json_tree": {
              "type": "file",
              "description": "Auspice JSON V2 containing nextclade results",
              "pattern": "*.{tree.json}"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "TSV file containing nextclade results",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@antunderwood",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "nextgenmap",
      "path": "modules/nf-core/nextgenmap/meta.yml",
      "type": "module",
      "meta": {
        "name": "nextgenmap",
        "description": "Performs fastq alignment to a fasta reference using NextGenMap",
        "keywords": [
          "NextGenMap",
          "ngm",
          "alignment",
          "map",
          "fastq",
          "bam",
          "sam"
        ],
        "tools": [
          {
            "bwa": {
              "description": "NextGenMap is a flexible highly sensitive short read mapping tool that\nhandles much higher mismatch rates than comparable algorithms while\nstill outperforming them in terms of runtime\n",
              "homepage": "https://github.com/Cibiv/NextGenMap",
              "documentation": "https://github.com/Cibiv/NextGenMap/wiki",
              "doi": "10.1093/bioinformatics/btt468",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1, if meta.single_end is true, and 2\nif meta.single_end is false.\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genomic reference fasta file\n",
              "pattern": "*.{fa,fa.gz,fas,fas.gz,fna,fna.gz,fasta,fasta.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information. First item of tuple with\nbam, below.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file containing read alignments. Second item of tuple with\nmeta, above\n",
              "pattern": "*.{bam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@cmatkhan"
        ]
      }
    },
    {
      "name": "ngmaster",
      "path": "modules/nf-core/ngmaster/meta.yml",
      "type": "module",
      "meta": {
        "name": "ngmaster",
        "description": "Serotyping Neisseria gonorrhoeae assemblies",
        "keywords": [
          "fasta",
          "Neisseria gonorrhoeae",
          "serotype"
        ],
        "tools": [
          {
            "ngmaster": {
              "description": "In silico multi-antigen sequence typing for Neisseria gonorrhoeae (NG-MAST)",
              "homepage": "https://github.com/MDU-PHL/ngmaster/blob/master/README.md",
              "documentation": "https://github.com/MDU-PHL/ngmaster/blob/master/README.md",
              "tool_dev_url": "https://github.com/MDU-PHL/ngmaster",
              "doi": "10.1099/mgen.0.000076",
              "licence": [
                "GPL v3 only"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA assembly file",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab-delimited result file",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "ngsbits_samplegender",
      "path": "modules/nf-core/ngsbits/samplegender/meta.yml",
      "type": "module",
      "meta": {
        "name": "ngsbits_samplegender",
        "description": "Determines the gender of a sample from the BAM/CRAM file.",
        "keywords": [
          "gender",
          "cram",
          "bam",
          "short reads"
        ],
        "tools": [
          {
            "ngsbits": {
              "description": "Short-read sequencing tools",
              "homepage": "https://github.com/imgag/ngs-bits",
              "documentation": "https://github.com/imgag/ngs-bits",
              "tool_dev_url": "https://github.com/imgag/ngs-bits",
              "licence": "['MIT license']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "One or more BAM/CRAM files to determine the gender of",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "The index file(s) from the input BAM/CRAM file(s)",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference fasta information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference FASTA to use (mandatory when CRAM files are used)",
              "pattern": "*.{fasta,fa,fna}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference fasta index information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The index of the reference FASTA to use (mandatory when CRAM files are used)",
              "pattern": "*.fai"
            }
          },
          {
            "method": {
              "type": "string",
              "description": "The method to use to define the gender (posibilities are 'xy', 'hetx' and 'sry')",
              "pattern": "(xy|hetx|sry)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "An output TSV file containing the results of the gender prediction",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "ngscheckmate_ncm",
      "path": "modules/nf-core/ngscheckmate/ncm/meta.yml",
      "type": "module",
      "meta": {
        "name": "ngscheckmate_ncm",
        "description": "Determining whether sequencing data comes from the same individual by using SNP matching. Designed for humans on vcf or bam files.",
        "keywords": [
          "ngscheckmate",
          "matching",
          "snp"
        ],
        "tools": [
          {
            "ngscheckmate": {
              "description": "NGSCheckMate is a software package for identifying next generation sequencing (NGS) data files from the same individual, including matching between DNA and RNA.",
              "homepage": "https://github.com/parklab/NGSCheckMate",
              "documentation": "https://github.com/parklab/NGSCheckMate",
              "tool_dev_url": "https://github.com/parklab/NGSCheckMate",
              "doi": "10.1093/nar/gkx193",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "files": {
              "type": "file",
              "description": "VCF or BAM files for each sample, in a merged channel (possibly gzipped). BAM files require an index too.",
              "pattern": "*.{vcf,vcf.gz,bam,bai}"
            }
          },
          {
            "snp_bed": {
              "type": "file",
              "description": "BED file containing the SNPs to analyse",
              "pattern": "*.{bed}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "fasta file for the genome, only used in the bam mode",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "A pdf containing a dendrogram showing how the samples match up",
              "pattern": "*.{pdf}"
            }
          },
          {
            "corr_matrix": {
              "type": "file",
              "description": "A text file containing the correlation matrix between each sample",
              "pattern": "*corr_matrix.txt"
            }
          },
          {
            "matched": {
              "type": "file",
              "description": "A txt file containing only the samples that match with each other",
              "pattern": "*matched.txt"
            }
          },
          {
            "all": {
              "type": "file",
              "description": "A txt file containing all the sample comparisons, whether they match or not",
              "pattern": "*all.txt"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "If ran in bam mode, vcf files for each sample giving the SNP calls used",
              "pattern": "*.vcf"
            }
          }
        ],
        "authors": [
          "@sppearce"
        ]
      }
    },
    {
      "name": "nucmer",
      "path": "modules/nf-core/nucmer/meta.yml",
      "type": "module",
      "meta": {
        "name": "nucmer",
        "description": "NUCmer is a pipeline for the alignment of multiple closely related nucleotide sequences.",
        "keywords": [
          "align",
          "nucleotide"
        ],
        "tools": [
          {
            "nucmer": {
              "description": "NUCmer is a pipeline for the alignment of multiple closely related nucleotide sequences.",
              "homepage": "http://mummer.sourceforge.net/",
              "documentation": "http://mummer.sourceforge.net/",
              "tool_dev_url": "http://mummer.sourceforge.net/",
              "doi": "10.1186/gb-2004-5-2-r12",
              "licence": [
                "The Artistic License"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ref": {
              "type": "file",
              "description": "FASTA file of the reference sequence",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz}"
            }
          },
          {
            "query": {
              "type": "file",
              "description": "FASTA file of the query sequence",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "delta": {
              "type": "file",
              "description": "File containing coordinates of matches between reference and query"
            }
          },
          {
            "coords": {
              "type": "file",
              "description": "NUCmer1.1 coords output file",
              "pattern": "*.{coords}"
            }
          }
        ],
        "authors": [
          "@sateeshperi",
          "@mjcipriano"
        ]
      }
    },
    {
      "name": "odgi_build",
      "path": "modules/nf-core/odgi/build/meta.yml",
      "type": "module",
      "meta": {
        "name": "odgi_build",
        "description": "Construct a dynamic succinct variation graph in ODGI format from a GFAv1.",
        "keywords": [
          "variation graph",
          "pangenome graph",
          "gfa",
          "graph construction"
        ],
        "tools": [
          {
            "odgi": {
              "description": "An optimized dynamic genome/graph implementation",
              "homepage": "https://github.com/pangenome/odgi",
              "documentation": "https://odgi.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/pangenome/odgi",
              "doi": "10.1093/bioinformatics/btac308",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "graph": {
              "type": "file",
              "description": "Pangenome graph in GFA v1.0 format",
              "pattern": "*.{gfa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "og": {
              "type": "file",
              "description": "File containing a pangenome graph in ODGI binary format. Usually ends with '.og'",
              "pattern": "*.{og}"
            }
          }
        ],
        "authors": [
          "@subwaystation"
        ]
      },
      "pipelines": [
        {
          "name": "pangenome",
          "version": "dev"
        }
      ]
    },
    {
      "name": "odgi_draw",
      "path": "modules/nf-core/odgi/draw/meta.yml",
      "type": "module",
      "meta": {
        "name": "odgi_draw",
        "description": "Draw previously-determined 2D layouts of the graph with diverse annotations.",
        "keywords": [
          "variation graph",
          "pangenome graph",
          "gfa",
          "graph drawing"
        ],
        "tools": [
          {
            "odgi": {
              "description": "An optimized dynamic genome/graph implementation",
              "homepage": "https://github.com/pangenome/odgi",
              "documentation": "https://odgi.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/pangenome/odgi",
              "doi": "10.1093/bioinformatics/btac308",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "graph": {
              "type": "file",
              "description": "Pangenome graph in GFA v1.0 format or ODGI binary format",
              "pattern": "*.{gfa,og}"
            }
          },
          {
            "lay": {
              "type": "file",
              "description": "2D layout from 'odgi layout' in LAY binary format",
              "pattern": "*.{lay}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "png": {
              "type": "file",
              "description": "File in PNG format containing a 2D drawing of a pangenome graph",
              "pattern": "*.{png}"
            }
          }
        ],
        "authors": [
          "@subwaystation"
        ]
      },
      "pipelines": [
        {
          "name": "pangenome",
          "version": "dev"
        }
      ]
    },
    {
      "name": "odgi_layout",
      "path": "modules/nf-core/odgi/layout/meta.yml",
      "type": "module",
      "meta": {
        "name": "odgi_layout",
        "description": "Establish 2D layouts of the graph using path-guided stochastic gradient descent. The graph must be sorted and id-compacted.",
        "keywords": [
          "variation graph",
          "pangenome graph",
          "gfa",
          "graph layout"
        ],
        "tools": [
          {
            "odgi": {
              "description": "An optimized dynamic genome/graph implementation",
              "homepage": "https://github.com/pangenome/odgi",
              "documentation": "https://odgi.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/pangenome/odgi",
              "doi": "10.1093/bioinformatics/btac308",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "graph": {
              "type": "file",
              "description": "Pangenome graph in GFA v1.0 format or in ODGI binary format",
              "pattern": "*.{gfa,og}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "lay": {
              "type": "file",
              "description": "File containing a 2D layout of a pangenome graph in a binary format. Usually ends with '.lay'. Optional output specified by the `--out FILE` argument. Either this or the TSV layout output must be specified.",
              "pattern": "*.{lay}"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "File containing a 2D layout of a pangenome graph in TSV format. Optional output specified by the `--tsv FILE` argument. Either this or the binary layout output must be specified.",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@subwaystation"
        ]
      },
      "pipelines": [
        {
          "name": "pangenome",
          "version": "dev"
        }
      ]
    },
    {
      "name": "odgi_sort",
      "path": "modules/nf-core/odgi/sort/meta.yml",
      "type": "module",
      "meta": {
        "name": "odgi_sort",
        "description": "Apply different kind of sorting algorithms to a graph. The most prominent one is the PG-SGD sorting algorithm.",
        "keywords": [
          "variation graph",
          "pangenome graph",
          "gfa",
          "graph layout"
        ],
        "tools": [
          {
            "odgi": {
              "description": "An optimized dynamic genome/graph implementation",
              "homepage": "https://github.com/pangenome/odgi",
              "documentation": "https://odgi.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/pangenome/odgi",
              "doi": "10.1093/bioinformatics/btac308",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "graph": {
              "type": "file",
              "description": "Pangenome graph in GFA v1.0 format or in ODGI binary format",
              "pattern": "*.{gfa,og}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sorted_graph": {
              "type": "file",
              "description": "1D sorted pangenome graph in ODGI binary format",
              "pattern": "*.{og}"
            }
          }
        ],
        "authors": [
          "@subwaystation"
        ]
      },
      "pipelines": [
        {
          "name": "pangenome",
          "version": "dev"
        }
      ]
    },
    {
      "name": "odgi_squeeze",
      "path": "modules/nf-core/odgi/squeeze/meta.yml",
      "type": "module",
      "meta": {
        "name": "odgi_squeeze",
        "description": "Squeezes multiple graphs in ODGI format into the same file in ODGI format.",
        "keywords": [
          "squeeze",
          "odgi",
          "gfa",
          "combine graphs"
        ],
        "tools": [
          {
            "odgi": {
              "description": "An optimized dynamic genome/graph implementation",
              "homepage": "https://github.com/pangenome/odgi",
              "documentation": "https://odgi.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/pangenome/odgi",
              "doi": "10.1093/bioinformatics/btac308",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "graphs": {
              "type": "files",
              "description": "Pangenome graph files in ODGI format.",
              "pattern": "*.{og}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "graph": {
              "type": "file",
              "description": "Squeezed pangenome graph in ODGI format.",
              "pattern": "*.{og}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@subwaystation"
        ]
      },
      "pipelines": [
        {
          "name": "pangenome",
          "version": "dev"
        }
      ]
    },
    {
      "name": "odgi_stats",
      "path": "modules/nf-core/odgi/stats/meta.yml",
      "type": "module",
      "meta": {
        "name": "odgi_stats",
        "description": "Metrics describing a variation graph and its path relationship.",
        "keywords": [
          "variation graph",
          "pangenome graph",
          "gfa",
          "graph stats"
        ],
        "tools": [
          {
            "odgi": {
              "description": "An optimized dynamic genome/graph implementation",
              "homepage": "https://github.com/pangenome/odgi",
              "documentation": "https://odgi.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/pangenome/odgi",
              "doi": "10.1093/bioinformatics/btac308",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "graph": {
              "type": "file",
              "description": "Pangenome graph in binary ODGI or in GFA v1.0 format",
              "pattern": "*.{og,gfa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Optional output file that contains graph statistics in TSV format.",
              "pattern": "*.{tsv}"
            }
          },
          {
            "yaml": {
              "type": "file",
              "description": "Optional output file that contains graph statistics in YAML format.",
              "pattern": "*.{yaml}"
            }
          }
        ],
        "authors": [
          "@subwaystation"
        ]
      },
      "pipelines": [
        {
          "name": "pangenome",
          "version": "dev"
        }
      ]
    },
    {
      "name": "odgi_unchop",
      "path": "modules/nf-core/odgi/unchop/meta.yml",
      "type": "module",
      "meta": {
        "name": "odgi_unchop",
        "description": "Merge unitigs into a single node preserving the node order.",
        "keywords": [
          "variation graph",
          "pangenome graph",
          "gfa",
          "graph unchopping"
        ],
        "tools": [
          {
            "odgi": {
              "description": "An optimized dynamic genome/graph implementation",
              "homepage": "https://github.com/pangenome/odgi",
              "documentation": "https://odgi.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/pangenome/odgi",
              "doi": "10.1093/bioinformatics/btac308",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "graph": {
              "type": "file",
              "description": "Pangenome graph in GFA v1.0 format or in ODGI binary format",
              "pattern": "*.{gfa,og}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "unchopped_graph": {
              "type": "file",
              "description": "Unchopped pangenome graph in ODGI binary format",
              "pattern": "*.{og}"
            }
          }
        ],
        "authors": [
          "@subwaystation"
        ]
      },
      "pipelines": [
        {
          "name": "pangenome",
          "version": "dev"
        }
      ]
    },
    {
      "name": "odgi_view",
      "path": "modules/nf-core/odgi/view/meta.yml",
      "type": "module",
      "meta": {
        "name": "odgi_view",
        "description": "Project a graph into other formats.",
        "keywords": [
          "variation graph",
          "pangenome graph",
          "gfa",
          "graph formats"
        ],
        "tools": [
          {
            "odgi": {
              "description": "An optimized dynamic genome/graph implementation",
              "homepage": "https://github.com/pangenome/odgi",
              "documentation": "https://odgi.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/pangenome/odgi",
              "doi": "10.1093/bioinformatics/btac308",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "graph": {
              "type": "file",
              "description": "Pangenome graph in GFA v1.0 format or in ODGI binary format",
              "pattern": "*.{gfa,og}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "File containing a pangenome graph in GFA v1.0 format.",
              "pattern": "*.{gfa}"
            }
          }
        ],
        "authors": [
          "@subwaystation"
        ]
      },
      "pipelines": [
        {
          "name": "pangenome",
          "version": "dev"
        }
      ]
    },
    {
      "name": "odgi_viz",
      "path": "modules/nf-core/odgi/viz/meta.yml",
      "type": "module",
      "meta": {
        "name": "odgi_viz",
        "description": "Visualize a variation graph in 1D.",
        "keywords": [
          "variation graph",
          "pangenome graph",
          "gfa",
          "graph viz"
        ],
        "tools": [
          {
            "odgi": {
              "description": "An optimized dynamic genome/graph implementation",
              "homepage": "https://github.com/pangenome/odgi",
              "documentation": "https://odgi.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/pangenome/odgi",
              "doi": "10.1093/bioinformatics/btac308",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "graph": {
              "type": "file",
              "description": "Pangenome graph in binary ODGI or in GFA v1.0 format",
              "pattern": "*.{og,gfa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "png": {
              "type": "file",
              "description": "A 1D visualization of a pangenome graph.",
              "pattern": "*.{png}"
            }
          }
        ],
        "authors": [
          "@subwaystation"
        ]
      },
      "pipelines": [
        {
          "name": "pangenome",
          "version": "dev"
        }
      ]
    },
    {
      "name": "oncocnv",
      "path": "modules/nf-core/oncocnv/meta.yml",
      "type": "module",
      "meta": {
        "name": "oncocnv",
        "description": "Calls CNVs in bam files from tumor patients",
        "keywords": [
          "cnv",
          "bam",
          "tumor/normal"
        ],
        "tools": [
          {
            "oncocnv": {
              "description": "a package to detect copy number changes in Deep Sequencing data",
              "homepage": "https://github.com/BoevaLab/ONCOCNV/",
              "documentation": "https://github.com/BoevaLab/ONCOCNV/blob/master/README.md",
              "tool_dev_url": "https://github.com/BoevaLab/ONCOCNV/",
              "doi": "10.1093/bioinformatics/btu436",
              "licence": "GPL-3.0-or-later"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "normal": {
              "type": "file",
              "description": "BAM files",
              "pattern": "*.bam"
            }
          },
          {
            "normal_index": {
              "type": "file",
              "description": "BAM file indices",
              "pattern": "*.bam.bai"
            }
          },
          {
            "tumor": {
              "type": "file",
              "description": "BAM files",
              "pattern": "*.bam"
            }
          },
          {
            "tumor_index": {
              "type": "file",
              "description": "BAM file indices",
              "pattern": "*.bam.bai"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "annotated BED file containing target regions",
              "pattern": "*.bed"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "genome FASTA file",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "png": {
              "type": "file",
              "description": "PNG file containing profile plot",
              "pattern": "*.profile.png"
            }
          },
          {
            "profile": {
              "type": "file",
              "description": "TXT file containing profile data",
              "pattern": "*.profile.txt"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "TXT file containing summarized data",
              "pattern": "*.summary.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@marrip"
        ]
      }
    },
    {
      "name": "optitype",
      "path": "modules/nf-core/optitype/meta.yml",
      "type": "module",
      "meta": {
        "name": "optitype",
        "description": "Perform HLA-I typing of sequencing data",
        "keywords": [
          "hla-typing",
          "ILP",
          "HLA-I"
        ],
        "tools": [
          {
            "optitype": {
              "description": "Precision HLA typing from next-generation sequencing data",
              "homepage": "https://github.com/FRED-2/OptiType",
              "documentation": "https://github.com/FRED-2/OptiType",
              "doi": "10.1093/bioinformatics/btu548",
              "licence": [
                "BSD-3-Clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.{bai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', seq_type:'DNA' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "OptiType Results Folder",
              "pattern": "${prefix}"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "OptiType PDF Plots",
              "pattern": "*.pdf"
            }
          }
        ],
        "authors": [
          "@apeltzer"
        ]
      },
      "pipelines": [
        {
          "name": "hlatyping",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "paftools_sam2paf",
      "path": "modules/nf-core/paftools/sam2paf/meta.yml",
      "type": "module",
      "meta": {
        "name": "paftools_sam2paf",
        "description": "A program to convert bam into paf.",
        "keywords": [
          "paf",
          "bam",
          "conversion"
        ],
        "tools": [
          {
            "paftools": {
              "description": "A program to manipulate paf files / convert to and from paf.\n",
              "homepage": "https://github.com/lh3/minimap2",
              "documentation": "https://github.com/lh3/minimap2/blob/master/README.md",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "An input bam file to be converted into paf."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "paf": {
              "type": "file",
              "description": "An output paf containing detailed data about the sample\n",
              "pattern": "${prefix}.paf"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@DLBPointon"
        ]
      }
    },
    {
      "name": "pairix",
      "path": "modules/nf-core/pairix/meta.yml",
      "type": "module",
      "meta": {
        "name": "pairix",
        "description": "a tool for indexing and querying on a block-compressed text file\ncontaining pairs of genomic coordinates\n",
        "keywords": [
          "index"
        ],
        "tools": [
          {
            "pairix": {
              "description": "2D indexing on bgzipped text files of paired genomic coordinates",
              "homepage": "https://github.com/4dn-dcic/pairix",
              "documentation": "https://github.com/4dn-dcic/pairix",
              "tool_dev_url": "https://github.com/4dn-dcic/pairix",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pair": {
              "type": "file",
              "description": "pair file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "pair index file",
              "pattern": "*.px2"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      },
      "pipelines": [
        {
          "name": "hicar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "pairtools_dedup",
      "path": "modules/nf-core/pairtools/dedup/meta.yml",
      "type": "module",
      "meta": {
        "name": "pairtools_dedup",
        "description": "Find and remove PCR/optical duplicates",
        "keywords": [
          "dedup"
        ],
        "tools": [
          {
            "pairtools": {
              "description": "CLI tools to process mapped Hi-C data",
              "homepage": "http://pairtools.readthedocs.io/",
              "documentation": "http://pairtools.readthedocs.io/",
              "tool_dev_url": "https://github.com/mirnylab/pairtools",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "pair file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "pairs": {
              "type": "file",
              "description": "Duplicates removed pairs",
              "pattern": "*.{pairs.gz}"
            }
          },
          {
            "stat": {
              "type": "file",
              "description": "stats of the pairs",
              "pattern": "*.{pairs.stat}"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      },
      "pipelines": [
        {
          "name": "hicar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "pairtools_flip",
      "path": "modules/nf-core/pairtools/flip/meta.yml",
      "type": "module",
      "meta": {
        "name": "pairtools_flip",
        "description": "Flip pairs to get an upper-triangular matrix",
        "keywords": [
          "flip"
        ],
        "tools": [
          {
            "pairtools": {
              "description": "CLI tools to process mapped Hi-C data",
              "homepage": "http://pairtools.readthedocs.io/",
              "documentation": "http://pairtools.readthedocs.io/",
              "tool_dev_url": "https://github.com/mirnylab/pairtools",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sam": {
              "type": "file",
              "description": "pair file"
            }
          },
          {
            "chromsizes": {
              "type": "file",
              "description": "chromosome size file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "flip": {
              "type": "file",
              "description": "output file of flip",
              "pattern": "*.{flip.gz}"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      },
      "pipelines": [
        {
          "name": "hicar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "pairtools_parse",
      "path": "modules/nf-core/pairtools/parse/meta.yml",
      "type": "module",
      "meta": {
        "name": "pairtools_parse",
        "description": "Find ligation junctions in .sam, make .pairs",
        "keywords": [
          "parse"
        ],
        "tools": [
          {
            "pairtools": {
              "description": "CLI tools to process mapped Hi-C data",
              "homepage": "http://pairtools.readthedocs.io/",
              "documentation": "http://pairtools.readthedocs.io/",
              "tool_dev_url": "https://github.com/mirnylab/pairtools",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "chromsizes": {
              "type": "file",
              "description": "chromosome size file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "pairsam": {
              "type": "file",
              "description": "parsed pair file",
              "pattern": "*.{pairsam.gz}"
            }
          },
          {
            "stat": {
              "type": "file",
              "description": "stats of the pairs",
              "pattern": "*.{pairsam.stat}"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      },
      "pipelines": [
        {
          "name": "hicar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "pairtools_restrict",
      "path": "modules/nf-core/pairtools/restrict/meta.yml",
      "type": "module",
      "meta": {
        "name": "pairtools_restrict",
        "description": "Assign restriction fragments to pairs",
        "keywords": [
          "sort"
        ],
        "tools": [
          {
            "pairtools": {
              "description": "CLI tools to process mapped Hi-C data",
              "homepage": "http://pairtools.readthedocs.io/",
              "documentation": "http://pairtools.readthedocs.io/",
              "tool_dev_url": "https://github.com/mirnylab/pairtools",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pairs": {
              "type": "file",
              "description": "pairs file"
            }
          },
          {
            "frag": {
              "type": "file",
              "description": "a tab-separated BED file with the positions of restriction fragments\n(chrom, start, end).\nCan be generated using cooler digest.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "restrict": {
              "type": "file",
              "description": "Filtered pairs file",
              "pattern": "*.{pairs.gz}"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      },
      "pipelines": [
        {
          "name": "hicar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "pairtools_select",
      "path": "modules/nf-core/pairtools/select/meta.yml",
      "type": "module",
      "meta": {
        "name": "pairtools_select",
        "description": "Select pairs according to given condition by options.args",
        "keywords": [
          "select"
        ],
        "tools": [
          {
            "pairtools": {
              "description": "CLI tools to process mapped Hi-C data",
              "homepage": "http://pairtools.readthedocs.io/",
              "documentation": "http://pairtools.readthedocs.io/",
              "tool_dev_url": "https://github.com/mirnylab/pairtools",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "pairs file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "selected": {
              "type": "file",
              "description": "Selected pairs file",
              "pattern": "*.{selected.pairs.gz}"
            }
          },
          {
            "unselected": {
              "type": "file",
              "description": "Rest pairs file.",
              "pattern": "*.{unselected.pairs.gz}"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      },
      "pipelines": [
        {
          "name": "hicar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "pairtools_sort",
      "path": "modules/nf-core/pairtools/sort/meta.yml",
      "type": "module",
      "meta": {
        "name": "pairtools_sort",
        "description": "Sort a .pairs/.pairsam file",
        "keywords": [
          "sort"
        ],
        "tools": [
          {
            "pairtools": {
              "description": "CLI tools to process mapped Hi-C data",
              "homepage": "http://pairtools.readthedocs.io/",
              "documentation": "http://pairtools.readthedocs.io/",
              "tool_dev_url": "https://github.com/mirnylab/pairtools",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "A pairs file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sorted": {
              "type": "file",
              "description": "Sorted pairs file",
              "pattern": "*.{pairs.gz}"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      },
      "pipelines": [
        {
          "name": "hicar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "panaroo_run",
      "path": "modules/nf-core/panaroo/run/meta.yml",
      "type": "module",
      "meta": {
        "name": "panaroo_run",
        "description": "A fast and scalable tool for bacterial pangenome analysis",
        "keywords": [
          "gff",
          "pan-genome",
          "alignment"
        ],
        "tools": [
          {
            "panaroo": {
              "description": "panaroo - an updated pipeline for pangenome investigation",
              "homepage": "https://gtonkinhill.github.io/panaroo/#/",
              "documentation": "https://gtonkinhill.github.io/panaroo/#/gettingstarted/quickstart",
              "tool_dev_url": "https://github.com/gtonkinhill/panaroo",
              "doi": "10.1186/s13059-020-02090-4",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "A set of GFF3 formatted files",
              "pattern": "*.{gff}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "results": {
              "type": "directory",
              "description": "Directory containing Panaroo result files",
              "pattern": "*/*"
            }
          },
          {
            "aln": {
              "type": "file",
              "description": "Core-genome alignment produced by Panaroo (Optional)",
              "pattern": "*.{fasta}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "pangolin",
      "path": "modules/nf-core/pangolin/meta.yml",
      "type": "module",
      "meta": {
        "name": "pangolin",
        "description": "Phylogenetic Assignment of Named Global Outbreak LINeages",
        "keywords": [
          "covid",
          "pangolin",
          "lineage"
        ],
        "tools": [
          {
            "star": {
              "description": "Phylogenetic Assignment of Named Global Outbreak LINeages\n",
              "homepage": "https://github.com/cov-lineages/pangolin#pangolearn-description",
              "manual": "https://github.com/cov-lineages/pangolin#pangolearn-description",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The genome assembly to be evaluated\n"
            }
          }
        ],
        "output": [
          {
            "report": {
              "type": "file",
              "description": "Pangolin lineage report",
              "pattern": "*.{csv}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kevinmenden",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "parabricks_applybqsr",
      "path": "modules/nf-core/parabricks/applybqsr/meta.yml",
      "type": "module",
      "meta": {
        "name": "parabricks_applybqsr",
        "description": "NVIDIA Clara Parabricks GPU-accelerated apply Base Quality Score Recalibration (BQSR).",
        "keywords": [
          "bqsr",
          "bam",
          "GPU-accelerated",
          "base quality score recalibration"
        ],
        "tools": [
          {
            "parabricks": {
              "description": "NVIDIA Clara Parabricks GPU-accelerated genomics tools",
              "homepage": "https://www.nvidia.com/en-us/clara/genomics/",
              "documentation": "https://docs.nvidia.com/clara/parabricks/",
              "licence": "custom"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information.\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "bam file for sample to be variant called.",
              "pattern": "*.bam"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "bai index corresponding to input bam file. Only necessary if intervals are provided.",
              "pattern": "*.bai"
            }
          },
          {
            "bqsr_table": {
              "type": "file",
              "description": "Table from calculating BQSR. Output from parabricks/fq2bam or gatk4/baserecalibrator.",
              "pattern": "*.table"
            }
          },
          {
            "interval_file": {
              "type": "file",
              "description": "File or files containing genomic intervals for use in base quality score recalibration.",
              "pattern": "*.{bed,interval_list,picard,list,intervals}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference fasta - must be unzipped.",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information.\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions.",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file after applying BQSR.",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "bai index corresponding to output bam file.",
              "pattern": "*.bai"
            }
          }
        ],
        "authors": [
          "@bsiranosian"
        ]
      }
    },
    {
      "name": "parabricks_fq2bam",
      "path": "modules/nf-core/parabricks/fq2bam/meta.yml",
      "type": "module",
      "meta": {
        "name": "parabricks_fq2bam",
        "description": "NVIDIA Clara Parabricks GPU-accelerated alignment, sorting, BQSR calculation, and duplicate marking.",
        "keywords": [
          "align",
          "sort",
          "bqsr",
          "duplicates"
        ],
        "tools": [
          {
            "parabricks": {
              "description": "NVIDIA Clara Parabricks GPU-accelerated genomics tools",
              "homepage": "https://www.nvidia.com/en-us/clara/genomics/",
              "documentation": "https://docs.nvidia.com/clara/parabricks/4.0.1/Documentation/",
              "licence": "custom"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "fastq.gz files",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "interval_file": {
              "type": "file",
              "description": "(optional) file(s) containing genomic intervals for use in base quality score recalibration (BQSR)",
              "pattern": "*.{bed,interval_list,picard,list,intervals}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing fasta information\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "reference fasta file - must be unzipped",
              "pattern": "*.fasta"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing index information\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "reference BWA index",
              "pattern": "*.{amb,ann,bwt,pac,sa}"
            }
          },
          {
            "known_sites": {
              "type": "file",
              "description": "(optional) known sites file(s) for calculating BQSR. markdups must be true to perform BQSR.",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "index corresponding to sorted BAM file",
              "pattern": "*.bai"
            }
          },
          {
            "qc_metrics": {
              "type": "directory",
              "description": "(optional) optional directory of qc metrics",
              "pattern": "qc_metrics"
            }
          },
          {
            "bqsr_table": {
              "type": "file",
              "description": "(optional) table from base quality score recalibration calculation, to be used with parabricks/applybqsr",
              "pattern": "*.table"
            }
          },
          {
            "duplicate_metrics": {
              "type": "file",
              "description": "(optional) metrics calculated from marking duplcates in the bam file",
              "pattern": "*-duplicate-metrics.txt"
            }
          }
        ],
        "authors": [
          "@bsiranosian"
        ]
      }
    },
    {
      "name": "paraclu",
      "path": "modules/nf-core/paraclu/meta.yml",
      "type": "module",
      "meta": {
        "name": "paraclu",
        "description": "Paraclu finds clusters in data attached to sequences.",
        "keywords": [
          "sort"
        ],
        "tools": [
          {
            "paraclu": {
              "description": "Paraclu finds clusters in data attached to sequences.",
              "homepage": "https://gitlab.com/mcfrith/paraclu",
              "documentation": "https://gitlab.com/mcfrith/paraclu",
              "tool_dev_url": "https://gitlab.com/mcfrith/paraclu",
              "licence": [
                "GPL v3-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file",
              "pattern": "*.bed"
            }
          },
          {
            "min_cluster": {
              "type": "integer",
              "description": "Minimum size of cluster",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "clustered BED file",
              "pattern": "*.bed"
            }
          }
        ],
        "authors": [
          "@mashehu"
        ]
      }
    },
    {
      "name": "paragraph_idxdepth",
      "path": "modules/nf-core/paragraph/idxdepth/meta.yml",
      "type": "module",
      "meta": {
        "name": "paragraph_idxdepth",
        "description": "Determines the depth in a BAM/CRAM file",
        "keywords": [
          "bam",
          "cram",
          "depth",
          "paragraph"
        ],
        "tools": [
          {
            "paragraph": {
              "description": "Graph realignment tools for structural variants",
              "homepage": "https://github.com/Illumina/paragraph",
              "documentation": "https://github.com/Illumina/paragraph",
              "tool_dev_url": "https://github.com/Illumina/paragraph",
              "doi": "10.1101/635011",
              "licence": "['Apache License 2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing information for the fasta\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing information for the fasta_fai\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "Index of the BAM/CRAM file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome FASTA",
              "pattern": "*.{fasta,fna,fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "Index of the reference genome FASTA",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "depth": {
              "type": "file",
              "description": "A JSON file containing depth, depth variance, read length and other parameters",
              "pattern": "*.json"
            }
          },
          {
            "binned_depth": {
              "type": "file",
              "description": "A TSV file containing the binned normalized depth. Can only be calculated for CRAM files",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "paragraph_multigrmpy",
      "path": "modules/nf-core/paragraph/multigrmpy/meta.yml",
      "type": "module",
      "meta": {
        "name": "paragraph_multigrmpy",
        "description": "Genotype structural variants using paragraph and grmpy",
        "keywords": [
          "vcf",
          "json",
          "structural variants",
          "graphs",
          "genotyping"
        ],
        "tools": [
          {
            "paragraph": {
              "description": "Graph realignment tools for structural variants",
              "homepage": "https://github.com/Illumina/paragraph",
              "documentation": "https://github.com/Illumina/paragraph",
              "tool_dev_url": "https://github.com/Illumina/paragraph",
              "doi": "10.1101/635011",
              "licence": "['Apache License 2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "variants": {
              "type": "file",
              "description": "A VCF or JSON file containing called structural variants",
              "pattern": "*.{vcf,json}"
            }
          },
          {
            "variants_index": {
              "type": "file",
              "description": "The index for the VCF file",
              "pattern": "*.tbi"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "BAM or CRAM file(s) to genotype against. These should be specified inside the `manifest`",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "reads_index": {
              "type": "file",
              "description": "The index/indices for the BAM/CRAM file(s)",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "manifest": {
              "type": "file",
              "description": "A tab separated file containing information on the BAM/CRAM files.\nThis information can be generated using paragraph/idxdepth.\nMore information can be found here: https://github.com/Illumina/paragraph#sample-manifest\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information for the FASTA file\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference FASTA file used to generate the VCF and BAM/CRAM files",
              "pattern": "*.{fa,fasta,fna}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing sample information for the FASTA index file\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the reference FASTA file",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The genotyped VCF file in BGZIP format",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "The genotyped JSON file in GZIP format",
              "pattern": "*.json.gz"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "paragraph_vcf2paragraph",
      "path": "modules/nf-core/paragraph/vcf2paragraph/meta.yml",
      "type": "module",
      "meta": {
        "name": "paragraph_vcf2paragraph",
        "description": "Convert a VCF file to a JSON graph",
        "keywords": [
          "vcf",
          "json",
          "structural_variants"
        ],
        "tools": [
          {
            "paragraph": {
              "description": "Graph realignment tools for structural variants",
              "homepage": "https://github.com/Illumina/paragraph",
              "documentation": "https://github.com/Illumina/paragraph",
              "tool_dev_url": "https://github.com/Illumina/paragraph",
              "doi": "10.1101/635011",
              "licence": "['Apache License 2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The VCF/BCF file",
              "pattern": "*.{vcf,bcf}(.gz)?"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "graph": {
              "type": "file",
              "description": "The created graph in BGZIP format",
              "pattern": "*.json.gz"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "pasty",
      "path": "modules/nf-core/pasty/meta.yml",
      "type": "module",
      "meta": {
        "name": "pasty",
        "description": "Serogroup Pseudomonas aeruginosa assemblies",
        "keywords": [
          "bacteria",
          "serogroup",
          "fasta",
          "assembly"
        ],
        "tools": [
          {
            "pasty": {
              "description": "A tool for in silico serogrouping of Pseudomonas aeruginosa isolates",
              "homepage": "https://github.com/rpetit3/pasty",
              "documentation": "https://github.com/rpetit3/pasty",
              "tool_dev_url": "https://github.com/rpetit3/pasty",
              "licence": "['Apache-2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "An assembly in FASTA format",
              "pattern": "*.{fasta,fasta.gz,fna,fna.gz,fa,fa.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "A tab-delimited file with the predicted serogroup",
              "pattern": "*.tsv"
            }
          },
          {
            "blast": {
              "type": "file",
              "description": "A tab-delimited file of all blast hits",
              "pattern": "*.blastn.tsv"
            }
          },
          {
            "details": {
              "type": "file",
              "description": "A tab-delimited file with details for each serogroup",
              "pattern": "*.details.tsv"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "pbbam_pbmerge",
      "path": "modules/nf-core/pbbam/pbmerge/meta.yml",
      "type": "module",
      "meta": {
        "name": "pbbam_pbmerge",
        "description": "The pbbam software package provides components to create, query, & edit PacBio BAM files and associated indices. These components include a core C++ library, bindings for additional languages, and command-line utilities.",
        "keywords": [
          "pbbam",
          "pbbam/pbmerge"
        ],
        "tools": [
          {
            "pbbam": {
              "description": "PacBio BAM C++ library",
              "homepage": "https://github.com/PacificBiosciences/pbbioconda",
              "documentation": "https://pbbam.readthedocs.io/en/latest/tools/pbmerge.html",
              "tool_dev_url": "https://github.com/pacificbiosciences/pbbam/",
              "licence": [
                "BSD-3-Clause-Clear"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM files to merge",
              "pattern": "*.bam"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "The merged bam file",
              "pattern": "*.bam"
            }
          },
          {
            "pbi": {
              "type": "file",
              "description": "BAM Pacbio index file",
              "pattern": "*.bam.pbi"
            }
          }
        ],
        "authors": [
          "@sguizard"
        ]
      }
    },
    {
      "name": "pbccs",
      "path": "modules/nf-core/pbccs/meta.yml",
      "type": "module",
      "meta": {
        "name": "pbccs",
        "description": "Pacbio ccs - Generate Higly Accurate Single-Molecule Consensus Reads",
        "keywords": [
          "ccs",
          "pacbio",
          "isoseq",
          "subreads"
        ],
        "tools": [
          {
            "pbccs": {
              "description": "pbccs - Generate Highly Accurate Single-Molecule Consensus Reads (HiFi Reads)",
              "homepage": "https://github.com/PacificBiosciences/pbbioconda",
              "documentation": "https://ccs.how/",
              "tool_dev_url": "https://github.com/PacificBiosciences/ccs",
              "licence": [
                "BSD-3-Clause-Clear"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\nid: id of the split file\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Raw subreads bam",
              "pattern": "*.subreads.bam"
            }
          },
          {
            "pbi": {
              "type": "file",
              "description": "Pacbio BAM Index",
              "pattern": "*.pbi"
            }
          },
          {
            "chunk_num": {
              "type": "integer",
              "description": "BAM part to process"
            }
          },
          {
            "chunk_on": {
              "type": "integer",
              "description": "Total number of bam parts to process"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "CCS sequences in bam format",
              "pattern": "*.bam"
            }
          },
          {
            "pbi": {
              "type": "file",
              "description": "PacBio Index of CCS sequences",
              "pattern": "*.pbi"
            }
          },
          {
            "report_txt": {
              "type": "file",
              "description": "Summary of CCS in txt format",
              "pattern": ".txt"
            }
          },
          {
            "report_json": {
              "type": "file",
              "description": "Summary of CCS in txt json",
              "pattern": ".json"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Metrics about zmws",
              "pattern": "*.json.gz"
            }
          }
        ],
        "authors": [
          "@sguizard"
        ]
      },
      "pipelines": [
        {
          "name": "isoseq",
          "version": "1.1.4"
        }
      ]
    },
    {
      "name": "pbptyper",
      "path": "modules/nf-core/pbptyper/meta.yml",
      "type": "module",
      "meta": {
        "name": "pbptyper",
        "description": "Assign PBP type of Streptococcus pneumoniae assemblies",
        "keywords": [
          "bacteria",
          "pbp",
          "fasta",
          "assembly"
        ],
        "tools": [
          {
            "pbptyper": {
              "description": "In silico Penicillin Binding Protein (PBP) typer for Streptococcus pneumoniae assemblies",
              "homepage": "https://github.com/rpetit3/pbptyper",
              "documentation": "https://github.com/rpetit3/pbptyper",
              "tool_dev_url": "https://github.com/rpetit3/pbptyper",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "An assembly in FASTA format",
              "pattern": "*.{fasta,fasta.gz,fna,fna.gz,fa,fa.gz}"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "A reference PBP database (optional)",
              "pattern": "*.{fasta,fna,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "A tab-delimited file with the predicted PBP type",
              "pattern": "*.tsv"
            }
          },
          {
            "blast": {
              "type": "file",
              "description": "A tab-delimited file of all blast hits",
              "pattern": "*.tblastn.tsv"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "pear",
      "path": "modules/nf-core/pear/meta.yml",
      "type": "module",
      "meta": {
        "name": "pear",
        "description": "PEAR is an ultrafast, memory-efficient and highly accurate pair-end read merger.",
        "keywords": [
          "pair-end",
          "read",
          "merge"
        ],
        "tools": [
          {
            "pear": {
              "description": "paired-end read merger",
              "homepage": "https://cme.h-its.org/exelixis/web/software/pear/",
              "documentation": "https://cme.h-its.org/exelixis/web/software/pear/doc.html",
              "licence": "['Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files with paired-end reads forward and reverse.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "assembled": {
              "type": "file",
              "description": "FastQ file containing Assembled reads.",
              "pattern": "*.{fastq.gz}"
            }
          },
          {
            "unassembled": {
              "type": "file",
              "description": "FastQ files containing Unassembled forward and reverse reads.",
              "pattern": "*.{fastq.gz}"
            }
          },
          {
            "discarded": {
              "type": "file",
              "description": "FastQ file containing discarded reads.",
              "pattern": "*.{fastq.gz}"
            }
          }
        ],
        "authors": [
          "@mirpedrol"
        ]
      },
      "pipelines": [
        {
          "name": "crisprseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "peddy",
      "path": "modules/nf-core/peddy/meta.yml",
      "type": "module",
      "meta": {
        "name": "peddy",
        "description": "Manipulation, validation and exploration of pedigrees",
        "keywords": [
          "pedigrees",
          "ped",
          "family"
        ],
        "tools": [
          {
            "peddy": {
              "description": "genotype, ped correspondence check, ancestry check, sex check. directly, quickly on VCF",
              "homepage": "https://github.com/brentp/peddy",
              "documentation": "https://peddy.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/brentp/peddy",
              "doi": "10.1016/j.ajhg.2017.01.017",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "ped": {
              "type": "file",
              "description": "PED/FAM file",
              "pattern": "*.{ped,fam}"
            }
          },
          {
            "vcf_tbi": {
              "type": "file",
              "description": "TBI file",
              "pattern": "*.{vcf.gz.tbi}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ped": {
              "type": "file",
              "description": "PED/FAM file",
              "pattern": "*.peddy.{ped}"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "HTML file",
              "pattern": "*.{html}"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "CSV file",
              "pattern": "*.{csv}"
            }
          },
          {
            "png": {
              "type": "file",
              "description": "PNG file",
              "pattern": "*.{png}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@rannick"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "peka",
      "path": "modules/nf-core/peka/meta.yml",
      "type": "module",
      "meta": {
        "name": "peka",
        "description": "Runs PEKA CLIP peak k-mer analysis",
        "keywords": [
          "motif",
          "CLIP",
          "iCLIP",
          "genomics",
          "k-mer"
        ],
        "tools": [
          {
            "peka": {
              "description": "Positionally-enriched k-mer analysis (PEKA) is a software package for identifying enriched protein-RNA binding motifs from CLIP datasets",
              "homepage": "https://github.com/ulelab/peka",
              "documentation": "https://github.com/ulelab/peka",
              "tool_dev_url": "https://github.com/ulelab/peka",
              "doi": "10.1186/s13059-022-02755-2",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "peaks": {
              "type": "file",
              "description": "BED file of peak regions",
              "pattern": "*.{bed,bed.gz}"
            }
          },
          {
            "crosslinks": {
              "type": "file",
              "description": "BED file of crosslinks",
              "pattern": "*.{bed,bed.gz}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome reference sequence used",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "FAI file corresponding to the reference sequence",
              "pattern": "*.{fai}"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "A segmented GTF used to annotate peaks",
              "pattern": "*.{gtf}"
            }
          }
        ],
        "output": [
          {
            "cluster": {
              "type": "file",
              "description": "TSV file of summed occurrence distributions of k-mers within defined clusters",
              "pattern": "*.tsv"
            }
          },
          {
            "distribution": {
              "type": "file",
              "description": "TSV file with calculated PEKA score and occurrence distribution for all possible k-mers",
              "pattern": "*.tsv"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "PDF file with graphs showing k-mer occurrence distributions around thresholded crosslink sites",
              "pattern": "*.pdf"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kkuret",
          "@codeprimate123",
          "@chris-cheshire",
          "@charlotteanne"
        ]
      }
    },
    {
      "name": "phantompeakqualtools",
      "path": "modules/nf-core/phantompeakqualtools/meta.yml",
      "type": "module",
      "meta": {
        "name": "phantompeakqualtools",
        "description": "\"This package computes informative enrichment and quality measures\nfor ChIP-seq/DNase-seq/FAIRE-seq/MNase-seq data. It can also be used\nto obtain robust estimates of the predominant fragment length or\ncharacteristic tag shift values in these assays.\"\n",
        "keywords": [
          "ChIP-Seq",
          "QC",
          "phantom peaks"
        ],
        "tools": [
          {
            "phantompeakqualtools": {
              "description": "\"This package computes informative enrichment and quality measures\nfor ChIP-seq/DNase-seq/FAIRE-seq/MNase-seq data. It can also be used\nto obtain robust estimates of the predominant fragment length or\ncharacteristic tag shift values in these assays.\"\n",
              "documentation": "https://github.com/kundajelab/phantompeakqualtools",
              "tool_dev_url": "https://github.com/kundajelab/phantompeakqualtools",
              "doi": "10.1101/gr.136184.111",
              "licence": "['BSD-3-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "spp": {
              "type": "file",
              "description": "A ChIP-Seq Processing Pipeline file containing\npeakshift/phantomPeak results\n",
              "pattern": "*.{out}"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "A pdf containing save cross-correlation plots",
              "pattern": "*.{pdf}"
            }
          },
          {
            "rdata": {
              "type": "file",
              "description": "Rdata file containing the R session",
              "pattern": "*.{Rdata}"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@Emiller88",
          "@JoseEspinosa"
        ]
      },
      "pipelines": [
        {
          "name": "chipseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "phispy",
      "path": "modules/nf-core/phispy/meta.yml",
      "type": "module",
      "meta": {
        "name": "PhiSpy",
        "description": "Predict prophages in bacterial genomes",
        "keywords": [
          "genomics",
          "virus",
          "phage",
          "prophage",
          "annotation",
          "identification"
        ],
        "tools": [
          {
            "phispy": {
              "description": "Prophage finder using multiple metrics",
              "homepage": "https://github.com/linsalrob/PhiSpy/blob/master/README.md",
              "documentation": "https://github.com/linsalrob/PhiSpy/blob/master/README.md",
              "tool_dev_url": "https://github.com/linsalrob/PhiSpy/",
              "doi": "10.1093/nar/gks406",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gbk": {
              "type": "file",
              "description": "Genome file in .gbk or .gbff format.",
              "pattern": "*.{gbk,gbff}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "coordinates": {
              "type": "file",
              "description": "Coordinates of each prophage identified in the genome,\nand their att sites (if found).\n",
              "pattern": "*.{tsv}"
            }
          },
          {
            "gbk": {
              "type": "file",
              "description": "A duplicate GenBank record that is the same as the input record,\nbut we have inserted the prophage information, including att\nsites into the record.\n",
              "pattern": "*.{gbk,gbff}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "File containing the PhiSpy execution log",
              "pattern": "*.{log}"
            }
          },
          {
            "information": {
              "type": "file",
              "description": "File containing all the genes of the genome, one per line.\nThe tenth column describes how likely the gene is a phage gene.\n",
              "pattern": "*.{tsv}"
            }
          },
          {
            "bacteria_fasta": {
              "type": "file",
              "description": "Genome with prophage regions masked with N.",
              "pattern": "*.{fasta}"
            }
          },
          {
            "bacteria_gbk": {
              "type": "file",
              "description": "Genome sequences identified as bacterial.",
              "pattern": "*.{gbk}"
            }
          },
          {
            "phage_fasta": {
              "type": "file",
              "description": "Phage sequences extracted from the genome.",
              "pattern": "*.{fasta}"
            }
          },
          {
            "phage_gbk": {
              "type": "file",
              "description": "Phage sequences extracted from the genome.",
              "pattern": "*.{gbk}"
            }
          },
          {
            "prophage_gff": {
              "type": "file",
              "description": "Prophage information in GFF3 format.",
              "pattern": "*.{gff3}"
            }
          },
          {
            "prophage_tbl": {
              "type": "file",
              "description": "File containing prophage number and its location in the genome.\n",
              "pattern": "*.{tbl}"
            }
          },
          {
            "prophage_tsv": {
              "type": "file",
              "description": "A file containing simpler version of the coordinates file,\nwith only prophage number, contig, start and stop.\n",
              "pattern": "*.{tsv}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@jvfe"
        ]
      }
    },
    {
      "name": "phyloflash",
      "path": "modules/nf-core/phyloflash/meta.yml",
      "type": "module",
      "meta": {
        "name": "phyloflash",
        "description": "phyloFlash is a pipeline to rapidly reconstruct the SSU rRNAs and explore phylogenetic composition of an illumina (meta)genomic dataset.",
        "keywords": [
          "metagenomics",
          "illumina datasets",
          "phylogenetic composition"
        ],
        "tools": [
          {
            "phyloflash": {
              "description": "phyloFlash is a pipeline to rapidly reconstruct the SSU rRNAs and explore phylogenetic composition of an illumina (meta)genomic dataset.",
              "homepage": "https://hrgv.github.io/phyloFlash/",
              "documentation": "https://hrgv.github.io/phyloFlash/usage.html",
              "tool_dev_url": "https://github.com/HRGV/phyloFlash",
              "doi": "10.1128/mSystems.00920-20",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Channel containing single or paired-end reads",
              "pattern": "*.{fastq.gz,fq.gz}"
            }
          },
          {
            "sliva_db": {
              "type": "directory",
              "description": "Folder containing the SILVA database",
              "pattern": "ref"
            }
          },
          {
            "univec_db": {
              "type": "directory",
              "description": "Folder containing UniVec database",
              "pattern": "UniVec"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "results": {
              "type": "directory",
              "description": "Folder containing the results of phyloFlash analysis",
              "pattern": "${prefix}*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@abhi18av"
        ]
      }
    },
    {
      "name": "picard_addorreplacereadgroups",
      "path": "modules/nf-core/picard/addorreplacereadgroups/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_addorreplacereadgroups",
        "description": "Assigns all the reads in a file to a single new read-group",
        "keywords": [
          "add",
          "replace",
          "read-group"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360037226472-AddOrReplaceReadGroups-Picard-",
              "tool_dev_url": "https://github.com/broadinstitute/picard",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Input BAM file",
              "pattern": "*.{bam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.{bai}"
            }
          }
        ],
        "authors": [
          "@sateeshperi",
          "@mjcipriano",
          "@hseabolt",
          "@cmatKhan",
          "@muffato"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "picard_bedtointervallist",
      "path": "modules/nf-core/picard/bedtointervallist/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_bedtointervallist",
        "description": "Creates an interval list from a bed file and a reference dict",
        "keywords": [
          "bed",
          "interval list",
          "picard",
          "convert"
        ],
        "tools": [
          {
            "gatk4": {
              "description": "Developed in the Data Sciences Platform at the Broad Institute, the toolkit offers a wide variety of tools\nwith a primary focus on variant discovery and genotyping. Its powerful processing engine\nand high-performance computing features make it capable of taking on projects of any size.\n",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/categories/360002369672s",
              "doi": "10.1158/1538-7445.AM2017-3590",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Input bed file",
              "pattern": "*.bed"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome']\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "Sequence dictionary",
              "pattern": "*.dict"
            }
          },
          {
            "arguments_file": {
              "type": "file",
              "description": "File containing command line arguments (optional)",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "interval_list": {
              "type": "file",
              "description": "gatk interval list file",
              "pattern": "*.interval_list"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kevinmenden",
          "@matthdsm"
        ]
      }
    },
    {
      "name": "picard_cleansam",
      "path": "modules/nf-core/picard/cleansam/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_cleansam",
        "description": "Cleans the provided BAM, soft-clipping beyond-end-of-reference alignments and setting MAPQ to 0 for unmapped reads",
        "keywords": [
          "clean",
          "bam"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360036491452-CleanSam-Picard-",
              "tool_dev_url": "https://github.com/broadinstitute/picard",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.{bam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sam": {
              "type": "file",
              "description": "Cleaned BAM file",
              "pattern": "*.{bam}"
            }
          }
        ],
        "authors": [
          "@sateeshperi",
          "@mjcipriano",
          "@hseabolt"
        ]
      }
    },
    {
      "name": "picard_collecthsmetrics",
      "path": "modules/nf-core/picard/collecthsmetrics/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_collecthsmetrics",
        "description": "Collects hybrid-selection (HS) metrics for a SAM or BAM file.",
        "keywords": [
          "alignment",
          "metrics",
          "statistics",
          "insert",
          "hybrid-selection",
          "quality",
          "bam"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://broadinstitute.github.io/picard/",
              "tool_dev_url": "https://github.com/broadinstitute/picard/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "An aligned BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Optional aligned BAM/CRAM/SAM file index",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "bait_intervals": {
              "type": "file",
              "description": "An interval file that contains the locations of the baits used.",
              "pattern": "*.{interval_list,bed,bed.gz}"
            }
          },
          {
            "target_intervals": {
              "type": "file",
              "description": "An interval file that contains the locations of the targets.",
              "pattern": "*.{interval_list,bed,bed.gz}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "A reference file to calculate dropout metrics measuring reduced representation of reads.\nOptional input.\n",
              "pattern": "*.{fa,fasta,fna}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of FASTA file. Only needed when fasta is supplied.",
              "pattern": "*.fai"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Sequence dictionary of FASTA file. Only needed when bed interval lists are supplied.",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Alignment metrics files generated by picard",
              "pattern": "*_{metrics}"
            }
          }
        ],
        "authors": [
          "@projectoriented",
          "@matthdsm"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "picard_collectinsertsizemetrics",
      "path": "modules/nf-core/picard/collectinsertsizemetrics/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_collectinsertsizemetrics",
        "description": "Collect metrics about the insert size distribution of a paired-end library.",
        "keywords": [
          "metrics",
          "alignment",
          "insert",
          "statistics",
          "bam"
        ],
        "tools": [
          {
            "picard": {
              "description": "Java tools for working with NGS data in the BAM format",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://broadinstitute.github.io/picard/",
              "tool_dev_url": "https://github.com/broadinstitute/picard",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "Histogram plots of the insert size metrics computed by Picard",
              "pattern": "*.pdf"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Values used by Picard to generate the insert size histograms",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@FerriolCalvet"
        ]
      }
    },
    {
      "name": "picard_collectmultiplemetrics",
      "path": "modules/nf-core/picard/collectmultiplemetrics/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_collectmultiplemetrics",
        "description": "Collect multiple metrics from a BAM file",
        "keywords": [
          "alignment",
          "metrics",
          "statistics",
          "insert",
          "quality",
          "bam"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://broadinstitute.github.io/picard/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "SAM/BAM/CRAM file",
              "pattern": "*.{sam,bam,cram}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Optional SAM/BAM/CRAM file index",
              "pattern": "*.{sai,bai,crai}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome']\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome fasta file"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome']\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of FASTA file. Only needed when fasta is supplied.",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Alignment metrics files generated by picard",
              "pattern": "*_{metrics}"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "PDF plots of metrics",
              "pattern": "*.{pdf}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "ssds",
          "version": "dev"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "picard_collectrnaseqmetrics",
      "path": "modules/nf-core/picard/collectrnaseqmetrics/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_collectrnaseqmetrics",
        "description": "Collect metrics from a RNAseq BAM file",
        "keywords": [
          "rna",
          "bam",
          "metrics",
          "alignment",
          "statistics",
          "quality"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://broadinstitute.github.io/picard/",
              "tool_dev_url": "https://github.com/broadinstitute/picard",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false, strandedness:true ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/SAM file",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "ref_flat": {
              "type": "file",
              "description": "Genome ref_flat file"
            }
          },
          {
            "gene_pred": {
              "type": "file",
              "description": "genome gene_pred file as an alternative to the ref_flat file"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome fasta file"
            }
          },
          {
            "rrna_intervals": {
              "type": "file",
              "description": "Interval file of ribosomal RNA regions"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "RNA alignment metrics files generated by picard",
              "pattern": "*.rna_metrics"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "Plot normalized position vs. coverage in a pdf file generated by picard"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@anoronh4"
        ]
      }
    },
    {
      "name": "picard_collectwgsmetrics",
      "path": "modules/nf-core/picard/collectwgsmetrics/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_collectwgsmetrics",
        "description": "Collect metrics about coverage and performance of whole genome sequencing (WGS) experiments.",
        "keywords": [
          "alignment",
          "metrics",
          "statistics",
          "quality",
          "bam"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://broadinstitute.github.io/picard/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Aligned reads file",
              "pattern": "*.{bam, cram}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "(Optional) Aligned reads file index",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome fasta file",
              "pattern": "*.{fa,fasta,fna}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Genome fasta file index",
              "pattern": "*.{fai}"
            }
          },
          {
            "intervallist": {
              "type": "file",
              "description": "Picard Interval List. Defines which contigs to include. Can be generated from a BED file with GATK BedToIntervalList."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Alignment metrics files generated by picard",
              "pattern": "*_{metrics}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@flowuenne",
          "@lassefolkersen",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        }
      ]
    },
    {
      "name": "picard_createsequencedictionary",
      "path": "modules/nf-core/picard/createsequencedictionary/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_createsequencedictionary",
        "description": "Creates a sequence dictionary for a reference sequence.",
        "keywords": [
          "sequence",
          "dictionary",
          "picard"
        ],
        "tools": [
          {
            "picard": {
              "description": "Creates a sequence dictionary file (with \".dict\" extension) from a reference sequence provided in FASTA format, which is required by many processing and analysis tools. The output file contains a header but no SAMRecords, and the header contains only sequence records.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360036712531-CreateSequenceDictionary-Picard-",
              "tool_dev_url": "https://github.com/broadinstitute/picard",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "picard dictionary file",
              "pattern": "*.{dict}"
            }
          }
        ],
        "authors": [
          "@sateeshperi",
          "@mjcipriano",
          "@hseabolt"
        ]
      }
    },
    {
      "name": "picard_crosscheckfingerprints",
      "path": "modules/nf-core/picard/crosscheckfingerprints/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_crosscheckfingerprints",
        "description": "Checks that all data in the set of input files appear to come from the same individual",
        "keywords": [
          "alignment",
          "metrics",
          "statistics",
          "fingerprint",
          "bam"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://broadinstitute.github.io/picard/",
              "tool_dev_url": "https://github.com/broadinstitute/picard/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input1": {
              "type": "file",
              "description": "List containing 1 or more bam/vcf files or a file containing filepaths",
              "pattern": "*.{bam,vcf,vcf.gz,txt,fofn}"
            }
          },
          {
            "input2": {
              "type": "file",
              "description": "Optional list containing 1 or more bam/vcf files or a file containing filepaths",
              "pattern": "*.{bam,vcf,vcf.gz,txt,fofn}"
            }
          },
          {
            "haplotype_map": {
              "type": "file",
              "description": "Haplotype map file",
              "pattern": "*.{txt,vcf,vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "crosscheck_metrics": {
              "type": "file",
              "description": "Metrics created by crosscheckfingerprints",
              "pattern": "*.{crosscheck_metrics.txt}"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "picard_fastqtosam",
      "path": "modules/nf-core/picard/fastqtosam/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_fastqtosam",
        "description": "Converts a FASTQ file to an unaligned BAM or SAM file.",
        "keywords": [
          "fastq",
          "unaligned",
          "bam"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360036510672-FastqToSam-Picard-",
              "tool_dev_url": "https://github.com/broadinstitute/picard",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Unaligned bam file",
              "pattern": "*.{bam}"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "picard_filtersamreads",
      "path": "modules/nf-core/picard/filtersamreads/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_filtersamreads",
        "description": "Filters SAM/BAM files to include/exclude either aligned/unaligned reads or based on a read list",
        "keywords": [
          "bam",
          "filter"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://broadinstitute.github.io/picard/",
              "tool_dev_url": "https://github.com/broadinstitute/picard",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "List of BAM files. If filtering without read list must be sorted by queryname with picard sortsam",
              "pattern": "*.{bam}"
            }
          },
          {
            "filter": {
              "type": "value",
              "description": "Picard filter type",
              "pattern": "includeAligned|excludeAligned|includeReadList|excludeReadList"
            }
          },
          {
            "readlist": {
              "type": "file",
              "description": "Optional text file containing reads IDs to include or exclude"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Filtered BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "picard_fixmateinformation",
      "path": "modules/nf-core/picard/fixmateinformation/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_fixmateinformation",
        "description": "Verify mate-pair information between mates and fix if needed",
        "keywords": [
          "mate-pair"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360036713471-FixMateInformation-Picard-",
              "tool_dev_url": "https://github.com/broadinstitute/picard",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.{bam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "mate-pair verified BAM file",
              "pattern": "*.{bam}"
            }
          }
        ],
        "authors": [
          "@sateeshperi",
          "@mjcipriano",
          "@hseabolt"
        ]
      }
    },
    {
      "name": "picard_liftovervcf",
      "path": "modules/nf-core/picard/liftovervcf/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_liftovervcf",
        "description": "Lifts over a VCF file from one reference build to another.",
        "keywords": [
          "vcf",
          "picard",
          "liftovervcf"
        ],
        "tools": [
          {
            "picard": {
              "description": "Move annotations from one assembly to another",
              "homepage": "https://gatk.broadinstitute.org/hc/en-us/articles/360037060932-LiftoverVcf-Picard",
              "documentation": "https://gatk.broadinstitute.org/hc/en-us/articles/360037060932-LiftoverVcf-Picard",
              "tool_dev_url": "https://github.com/broadinstitute/picard",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]"
            }
          },
          {
            "input_vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "dictionary for fasta file",
              "pattern": "*.{dict}"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "chain": {
              "type": "file",
              "description": "The liftover chain file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf_lifted": {
              "type": "file",
              "description": "VCF file containing successfully lifted variants",
              "pattern": "*.{lifted.vcf.gz}"
            }
          },
          {
            "vcf_unlifted": {
              "type": "file",
              "description": "VCF file containing unsuccessfully lifted variants",
              "pattern": "*.{unlifted.vcf.gz}"
            }
          }
        ],
        "authors": [
          "@lucpen",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "picard_markduplicates",
      "path": "modules/nf-core/picard/markduplicates/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_markduplicates",
        "description": "Locate and tag duplicate reads in a BAM file",
        "keywords": [
          "markduplicates",
          "pcr",
          "duplicates",
          "bam",
          "sam",
          "cram"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://broadinstitute.github.io/picard/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome fasta file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Reference genome fasta index",
              "pattern": "*.{fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file with duplicate reads marked/removed",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "An optional BAM index file. If desired, --CREATE_INDEX must be passed as a flag",
              "pattern": "*.{bai}"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Duplicate metrics file generated by picard",
              "pattern": "*.{metrics.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@projectoriented",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "methylseq",
          "version": "2.4.0"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "ssds",
          "version": "dev"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "picard_mergesamfiles",
      "path": "modules/nf-core/picard/mergesamfiles/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_mergesamfiles",
        "description": "Merges multiple BAM files into a single file",
        "keywords": [
          "merge",
          "alignment",
          "bam",
          "sam"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://broadinstitute.github.io/picard/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "List of BAM files",
              "pattern": "*.{bam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Merged BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "picard_renamesampleinvcf",
      "path": "modules/nf-core/picard/renamesampleinvcf/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_renamesampleinvcf",
        "description": "changes name of sample in the vcf file",
        "keywords": [
          "picard",
          "picard/renamesampleinvcf"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://broadinstitute.github.io/picard/",
              "tool_dev_url": "https://github.com/broadinstitute/picard",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf,vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf,vcf.gz}"
            }
          }
        ],
        "authors": [
          "@Lucpen"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "picard_scatterintervalsbyns",
      "path": "modules/nf-core/picard/scatterintervalsbyns/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_scatterintervalsbyns",
        "description": "Writes an interval list created by splitting a reference at Ns.A Program for breaking up a reference into intervals of alternating regions of N and ACGT bases",
        "keywords": [
          "interval_list",
          "scatter",
          "regions"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://broadinstitute.github.io/picard/",
              "tool_dev_url": "https://github.com/broadinstitute/picard",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing fasta information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Fasta file to derive the intervals from",
              "pattern": "*.{fasta,fa,fna}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing fai information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of the fasta file",
              "pattern": "*.fai"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing dictionary information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "Sequence dictionary of the fasta file",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "The scattered intervals",
              "pattern": "*.interval_list"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "picard_sortsam",
      "path": "modules/nf-core/picard/sortsam/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_sortsam",
        "description": "Sorts BAM/SAM files based on a variety of picard specific criteria",
        "keywords": [
          "sort",
          "bam",
          "sam"
        ],
        "tools": [
          {
            "picard": {
              "description": "A set of command line tools (in Java) for manipulating high-throughput sequencing (HTS)\ndata and formats such as SAM/BAM/CRAM and VCF.\n",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://broadinstitute.github.io/picard/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "sort_order": {
              "type": "value",
              "description": "Picard sort order type",
              "pattern": "unsorted|queryname|coordinate|duplicate|unknown"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM/CRAM/SAM file",
              "pattern": "*.{bam}"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "ssds",
          "version": "dev"
        }
      ]
    },
    {
      "name": "picard_sortvcf",
      "path": "modules/nf-core/picard/sortvcf/meta.yml",
      "type": "module",
      "meta": {
        "name": "picard_sortvcf",
        "description": "Sorts vcf files",
        "keywords": [
          "sort",
          "vcf",
          "sortvcf"
        ],
        "tools": [
          {
            "picard": {
              "description": "Java tools for working with NGS data in the BAM/CRAM/SAM and VCF format",
              "homepage": "https://broadinstitute.github.io/picard/",
              "documentation": "https://broadinstitute.github.io/picard/command-line-overview.html#SortVcf",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome fasta file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "Reference genome dictionary file",
              "pattern": "*.{dict}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Sorted VCF file",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "pilon",
      "path": "modules/nf-core/pilon/meta.yml",
      "type": "module",
      "meta": {
        "name": "pilon",
        "description": "Automatically improve draft assemblies and find variation among strains, including large event detection",
        "keywords": [
          "polishing",
          "assembly",
          "variant calling"
        ],
        "tools": [
          {
            "pilon": {
              "description": "Pilon is an automated genome assembly improvement and variant detection tool.",
              "homepage": "https://github.com/broadinstitute/pilon/wiki",
              "documentation": "https://github.com/broadinstitute/pilon/wiki/Requirements-&-Usage",
              "tool_dev_url": "https://github.com/broadinstitute/pilon",
              "doi": "10.1371/journal.pone.0112963",
              "licence": "['GPL v2']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA of the input genome",
              "pattern": "*.{fasta}"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file of reads aligned to the input genome",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAI file (BAM index) of BAM reads aligned to the input genome",
              "pattern": "*.{bai}"
            }
          },
          {
            "pilon_mode": {
              "type": "string",
              "description": "Indicates the type of bam file used (frags for paired-end sequencing of DNA fragments, such as Illumina paired-end reads of fragment size <1000bp, jumps for paired sequencing data of larger insert size, such as Illumina mate pair libraries, typically of insert size >1000bp, unpaired for unpaired sequencing reads, bam will automatically classify the BAM as one of the three types above (version 1.17 and higher).",
              "enum": [
                "frags",
                "jumps",
                "unpaired",
                "bam"
              ]
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "improved_assembly": {
              "type": "file",
              "description": "fasta file, improved assembly",
              "pattern": "*.{fasta}"
            }
          },
          {
            "change_record": {
              "type": "file",
              "description": "file containing a space-delimited record of every change made in the assembly as instructed by the --fix option",
              "pattern": "*.{change}"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Pilon variant output",
              "pattern": "*.{vcf}"
            }
          },
          {
            "tracks_bed": {
              "type": "file",
              "description": "files that may be viewed in genome browsers such as IGV, GenomeView, and other applications that support these formats",
              "pattern": "*.{bed}"
            }
          },
          {
            "tracks_wig": {
              "type": "file",
              "description": "files that may be viewed in genome browsers such as IGV, GenomeView, and other applications that support these formats",
              "pattern": "*.{wig}"
            }
          }
        ],
        "authors": [
          "@scorreard"
        ]
      }
    },
    {
      "name": "pindel_pindel",
      "path": "modules/nf-core/pindel/pindel/meta.yml",
      "type": "module",
      "meta": {
        "name": "pindel_pindel",
        "description": "Pindel can detect breakpoints of large deletions, medium sized insertions, inversions, tandem duplications and other structural variants at single-based resolution from next-gen sequence data",
        "keywords": [
          "deletions",
          "insertions",
          "tandem duplications"
        ],
        "tools": [
          {
            "pindel": {
              "description": "Pindel can detect breakpoints of large deletions, medium sized insertions, inversions, tandem duplications and other structural variants at single-based resolution from next-gen sequence data",
              "homepage": "https://gmt.genome.wustl.edu/packages/pindel/",
              "documentation": "https://gmt.genome.wustl.edu/packages/pindel/user-manual.html",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information, insert_size is either determined using Picard/CollectInsertSizeMetrics\nor a sensible default - setting ext.args2 to either in modules.conf\ne.g. [ id:'test', single_end:false, insert_size:500 ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.bai"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file containing regions of interest"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input reference genome fasta file"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Input reference genome fasta index file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bp": {
              "type": "file",
              "description": "File containing breakpoints",
              "pattern": "*_{BP}"
            }
          },
          {
            "cem": {
              "type": "file",
              "description": "File containing close end reads",
              "pattern": "*_{CloseEndMapped}"
            }
          },
          {
            "del": {
              "type": "file",
              "description": "File containing deletions",
              "pattern": "*_{D}"
            }
          },
          {
            "dd": {
              "type": "file",
              "description": "File containing dispersed duplications",
              "pattern": "*_{DD}"
            }
          },
          {
            "int_{final": {
              "type": "file",
              "description": "File containing interchromosomal events",
              "pattern": "*_{INT_final}"
            }
          },
          {
            "inv": {
              "type": "file",
              "description": "File containing inversions",
              "pattern": "*_{INV}"
            }
          },
          {
            "li": {
              "type": "file",
              "description": "File containing long insertions",
              "pattern": "*_{LI}"
            }
          },
          {
            "rp": {
              "type": "file",
              "description": "File containing read-pair evidence",
              "pattern": "*_{RP}"
            }
          },
          {
            "si": {
              "type": "file",
              "description": "File containing short insertions",
              "pattern": "*_{SI}"
            }
          },
          {
            "td": {
              "type": "file",
              "description": "File containing tandem duplications",
              "pattern": "*_{TD}"
            }
          }
        ],
        "authors": [
          "@marrip"
        ]
      }
    },
    {
      "name": "pints_caller",
      "path": "modules/nf-core/pints/caller/meta.yml",
      "type": "module",
      "meta": {
        "name": "pints_caller",
        "description": "Main caller script for peak calling",
        "keywords": [
          "peak-calling",
          "CoPRO",
          "GRO-cap",
          "PRO-cap",
          "CAGE",
          "NETCAGE",
          "RAMPAGE",
          "csRNA-seq",
          "STRIPE-seq",
          "PRO-seq",
          "GRO-seq"
        ],
        "tools": [
          {
            "pints": {
              "description": "Peak Identifier for Nascent Transcripts Starts (PINTS)",
              "homepage": "https://pints.yulab.org/",
              "documentation": "https://github.com/hyulab/PINTS/blob/main/README.md",
              "tool_dev_url": "https://github.com/hyulab/PINTS",
              "doi": "10.1038/s41587-022-01211-7",
              "licence": "['GPL']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bams": {
              "type": "file",
              "description": "BAM/ file",
              "pattern": "*.{bam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "divergent_TREs": {
              "type": "file",
              "description": "Divergent TREs",
              "pattern": "*_divergent_peaks.bed",
              "optional": true
            }
          },
          {
            "bidirectional_TREs": {
              "type": "file",
              "description": "Divergent TREs and convergent TREs",
              "pattern": "*_bidirectional_peaks.bed",
              "optional": true
            }
          },
          {
            "unidirectional_TREs": {
              "type": "file",
              "description": "Unidirectional TREs, maybe lncRNAs transcribed from enhancers (e-lncRNAs)",
              "pattern": "*_unidirectional_peaks.bed",
              "optional": true
            }
          },
          {
            "peakcalling_log": {
              "type": "file",
              "description": "Peakcalling log for debugging purposes",
              "pattern": "peakcalling_*.log"
            }
          }
        ],
        "authors": [
          "@Emiller88"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        }
      ]
    },
    {
      "name": "pirate",
      "path": "modules/nf-core/pirate/meta.yml",
      "type": "module",
      "meta": {
        "name": "pirate",
        "description": "Pangenome toolbox for bacterial genomes",
        "keywords": [
          "gff",
          "pan-genome",
          "alignment"
        ],
        "tools": [
          {
            "pirate": {
              "description": "Pangenome analysis and threshold evaluation toolbox",
              "homepage": "https://github.com/SionBayliss/PIRATE",
              "documentation": "https://github.com/SionBayliss/PIRATE/wiki",
              "tool_dev_url": "https://github.com/SionBayliss/PIRATE",
              "doi": "10.1093/gigascience/giz119",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "A set of GFF3 formatted files",
              "pattern": "*.{gff}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "results": {
              "type": "directory",
              "description": "Directory containing PIRATE result files",
              "pattern": "*/*"
            }
          },
          {
            "aln": {
              "type": "file",
              "description": "Core-genome alignment produced by PIRATE (Optional)",
              "pattern": "*.{fasta}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "plasmidfinder",
      "path": "modules/nf-core/plasmidfinder/meta.yml",
      "type": "module",
      "meta": {
        "name": "plasmidfinder",
        "description": "Identify plasmids in bacterial sequences and assemblies",
        "keywords": [
          "fasta",
          "fastq",
          "plasmid"
        ],
        "tools": [
          {
            "plasmidfinder": {
              "description": "PlasmidFinder allows identification of plasmids in total or partial sequenced isolates of bacteria.",
              "homepage": "https://cge.cbs.dtu.dk/services/PlasmidFinder/",
              "documentation": "https://bitbucket.org/genomicepidemiology/plasmidfinder",
              "tool_dev_url": "https://bitbucket.org/genomicepidemiology/plasmidfinder",
              "doi": "10.1128/AAC.02412-14",
              "licence": "['Apache-2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "seqs": {
              "type": "file",
              "description": "Input FASTA or FASTQ formatted genome sequences",
              "pattern": "*.{fastq.gz,fq.gz,fastq.gz,fna.gz,fa.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "The results from analysis in JSON format",
              "pattern": "*.json"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "The summary of results from analysis",
              "pattern": "*.txt"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "The results from analysis in TSV format",
              "pattern": "*.tsv"
            }
          },
          {
            "genome_seq": {
              "type": "file",
              "description": "FASTA of sequences in the input with a hit",
              "pattern": "*-hit_in_genome_seq.fsa"
            }
          },
          {
            "plasmid_seq": {
              "type": "file",
              "description": "FASTA of plasmid sequences with a hit against the input",
              "pattern": "*-plasmid_seqs.fsa"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "plasmidid",
      "path": "modules/nf-core/plasmidid/meta.yml",
      "type": "module",
      "meta": {
        "name": "plasmidid",
        "description": "assembles bacterial plasmids",
        "keywords": [
          "assembly",
          "plasmid",
          "bacterial"
        ],
        "tools": [
          {
            "plasmidid": {
              "description": "Pipeline for plasmid identification and reconstruction",
              "homepage": "https://github.com/BU-ISCIII/plasmidID/wiki",
              "documentation": "https://github.com/BU-ISCIII/plasmidID#readme",
              "tool_dev_url": "https://github.com/BU-ISCIII/plasmidID",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "scaffold": {
              "type": "file",
              "description": "Fasta file containing scaffold\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA reference file",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "html file with results rendered",
              "pattern": "*.{html}"
            }
          },
          {
            "tab": {
              "type": "file",
              "description": "Results in a tabular file",
              "pattern": "*.{tab}"
            }
          },
          {
            "images": {
              "type": "directory",
              "description": "Directory containing the images produced by plasmidid",
              "pattern": "images"
            }
          },
          {
            "logs": {
              "type": "directory",
              "description": "Directory containing the logs produced by plasmidid",
              "pattern": "logs"
            }
          },
          {
            "data": {
              "type": "directory",
              "description": "Directory containing the data produced by plasmidid",
              "pattern": "data"
            }
          },
          {
            "database": {
              "type": "directory",
              "description": "Directory containing the database produced by plasmidid",
              "pattern": "database"
            }
          },
          {
            "fasta_files": {
              "type": "directory",
              "description": "Directory containing the fasta files produced by plasmidid",
              "pattern": "fasta_files"
            }
          },
          {
            "kmer": {
              "type": "directory",
              "description": "Directory containing the kmer files produced by plasmidid",
              "pattern": "database"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "platypus",
      "path": "modules/nf-core/platypus/meta.yml",
      "type": "module",
      "meta": {
        "name": "platypus",
        "description": "Platypus is a tool that efficiently and accurately calling genetic variants from next-generation DNA sequencing data",
        "keywords": [
          "variant calling",
          "dna sequencing"
        ],
        "tools": [
          {
            "platypus": {
              "description": "Platypus is a tool designed for efficient and accurate variant-detection in high-throughput sequencing data.",
              "homepage": "https://www.well.ox.ac.uk/research/research-groups/lunter-group/lunter-group/platypus-a-haplotype-based-variant-caller-for-next-generation-sequence-data",
              "documentation": "https://www.well.ox.ac.uk/research/research-groups/lunter-group/lunter-group/platypus-documentation",
              "tool_dev_url": "https://github.com/andyrimmer/Platypus",
              "doi": "10.1038/ng.3036",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "tumor_file": {
              "type": "file",
              "description": "Tumor or metastatic sample, BAM or CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "tummor_file_bai": {
              "type": "file",
              "description": "Index of BAMfile",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "control_file": {
              "type": "file",
              "description": "Control (or blood) of matching tumor/metastatic sample, BAM or CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "control_file_bai": {
              "type": "file",
              "description": "Index of BAMfile",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fa"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fai"
            }
          },
          {
            "skipregions_file": {
              "type": "file",
              "description": "File with regions to skip, region as comma-separated list of chr:start-end, or just list of chr, or nothing",
              "pattern": "*.bed|*.txt|*.tab"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Output VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index of VCF file",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file",
              "pattern": "*.log"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "*.{version.txt}"
            }
          }
        ],
        "authors": [
          "@kubranarci"
        ]
      }
    },
    {
      "name": "plink2_extract",
      "path": "modules/nf-core/plink2/extract/meta.yml",
      "type": "module",
      "meta": {
        "name": "plink2_extract",
        "description": "Subset plink pfiles with a text file of variant identifiers",
        "keywords": [
          "plink2",
          "extract"
        ],
        "tools": [
          {
            "plink2": {
              "description": "Whole genome association analysis toolset, designed to perform a range\nof basic, large-scale analyses in a computationally efficient manner\n",
              "homepage": "http://www.cog-genomics.org/plink/2.0/",
              "documentation": "http://www.cog-genomics.org/plink/2.0/general_usage",
              "doi": "10.1186/s13742-015-0047-8",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pgen": {
              "type": "file",
              "description": "PLINK 2 binary genotype table",
              "pattern": "*.{pgen}"
            }
          },
          {
            "psam": {
              "type": "file",
              "description": "PLINK 2 sample information file",
              "pattern": "*.{psam}"
            }
          },
          {
            "pvar": {
              "type": "file",
              "description": "PLINK 2 variant information file",
              "pattern": "*.{pvar}"
            }
          },
          {
            "variants": {
              "type": "file",
              "description": "A text file containing variant identifiers to keep (one per line)",
              "pattern": "*.{keep}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "extract_pgen": {
              "type": "file",
              "description": "PLINK 2 binary genotype table, containing extracted variants",
              "pattern": "*.{pgen}"
            }
          },
          {
            "extract_psam": {
              "type": "file",
              "description": "PLINK 2 sample information file associated with the extracted data",
              "pattern": "*.{psam}"
            }
          },
          {
            "extract_pvar": {
              "type": "file",
              "description": "PLINK 2 variant information file, containing extracted variants",
              "pattern": "*.{pvar.zst}"
            }
          }
        ],
        "authors": [
          "@nebfield"
        ]
      }
    },
    {
      "name": "plink2_score",
      "path": "modules/nf-core/plink2/score/meta.yml",
      "type": "module",
      "meta": {
        "name": "plink2_score",
        "description": "Apply a scoring system to each sample in a plink 2 fileset",
        "keywords": [
          "plink2",
          "score"
        ],
        "tools": [
          {
            "plink2": {
              "description": "Whole genome association analysis toolset, designed to perform a range\nof basic, large-scale analyses in a computationally efficient manner\n",
              "homepage": "http://www.cog-genomics.org/plink/2.0/",
              "documentation": "http://www.cog-genomics.org/plink/2.0/general_usage",
              "doi": "10.1186/s13742-015-0047-8",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pgen": {
              "type": "file",
              "description": "PLINK 2 binary genotype table",
              "pattern": "*.{pgen}"
            }
          },
          {
            "psam": {
              "type": "file",
              "description": "PLINK 2 sample information file",
              "pattern": "*.{psam}"
            }
          },
          {
            "pvar": {
              "type": "file",
              "description": "PLINK 2 variant information file",
              "pattern": "*.{pvar}"
            }
          },
          {
            "scorefile": {
              "type": "file",
              "description": "A text file containing variant identifiers and weights",
              "pattern": "*.{scores,txt,scorefile}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "score": {
              "type": "file",
              "description": "A text file containing sample scores, in plink 2 .sscore format",
              "pattern": "*.{sscore}"
            }
          }
        ],
        "authors": [
          "@nebfield"
        ]
      }
    },
    {
      "name": "plink2_vcf",
      "path": "modules/nf-core/plink2/vcf/meta.yml",
      "type": "module",
      "meta": {
        "name": "plink2_vcf",
        "description": "Import variant genetic data using plink2",
        "keywords": [
          "plink2",
          "import"
        ],
        "tools": [
          {
            "plink2": {
              "description": "Whole genome association analysis toolset, designed to perform a range\nof basic, large-scale analyses in a computationally efficient manner\n",
              "homepage": "http://www.cog-genomics.org/plink/2.0/",
              "documentation": "http://www.cog-genomics.org/plink/2.0/general_usage",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Variant calling file (vcf)",
              "pattern": "*.{vcf}, *.{vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "pgen": {
              "type": "file",
              "description": "PLINK 2 binary genotype table",
              "pattern": "*.{pgen}"
            }
          },
          {
            "psam": {
              "type": "file",
              "description": "PLINK 2 sample information file",
              "pattern": "*.{psam}"
            }
          },
          {
            "pvar": {
              "type": "file",
              "description": "PLINK 2 variant information file",
              "pattern": "*.{pvar.zst}"
            }
          }
        ],
        "authors": [
          "@nebfield"
        ]
      }
    },
    {
      "name": "plink_bcf",
      "path": "modules/nf-core/plink/bcf/meta.yml",
      "type": "module",
      "meta": {
        "name": "plink_bcf",
        "description": "Analyses binary variant call format (BCF) files using plink",
        "keywords": [
          "plink",
          "bcf",
          "bed",
          "bim",
          "fam"
        ],
        "tools": [
          {
            "plink": {
              "description": "Whole genome association analysis toolset, designed to perform a range of basic, large-scale analyses in a computationally efficient manner.",
              "homepage": "https://www.cog-genomics.org/plink",
              "documentation": "https://www.cog-genomics.org/plink/1.9/data#",
              "tool_dev_url": "https://www.cog-genomics.org/plink/1.9/dev",
              "licence": [
                "GPL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bcf": {
              "type": "file",
              "description": "Binary variant call format file (bcf)",
              "pattern": "*.{bcf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "PLINK binary biallelic genotype table",
              "pattern": "*.{bed}"
            }
          },
          {
            "bim": {
              "type": "file",
              "description": "PLINK extended MAP file",
              "pattern": "*.{bim}"
            }
          },
          {
            "fam": {
              "type": "file",
              "description": "PLINK sample information file",
              "pattern": "*.{fam}"
            }
          }
        ],
        "authors": [
          "@atrigila"
        ]
      }
    },
    {
      "name": "plink_exclude",
      "path": "modules/nf-core/plink/exclude/meta.yml",
      "type": "module",
      "meta": {
        "name": "plink_exclude",
        "description": "Exclude variant identifiers from plink bfiles",
        "keywords": [
          "exclude",
          "plink"
        ],
        "tools": [
          {
            "plink": {
              "description": "Whole genome association analysis toolset, designed to perform a range of basic, large-scale analyses in a computationally efficient manner.",
              "homepage": "https://www.cog-genomics.org/plink",
              "licence": [
                "GPL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "PLINK binary biallelic genotype table",
              "pattern": "*.{bed}"
            }
          },
          {
            "bim": {
              "type": "file",
              "description": "PLINK extended MAP file",
              "pattern": "*.{bim}"
            }
          },
          {
            "fam": {
              "type": "file",
              "description": "PLINK sample information file",
              "pattern": "*.{fam}"
            }
          },
          {
            "variants": {
              "type": "file",
              "description": "A text file containing variant identifiers to remove (one per line)",
              "pattern": "*.{txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "PLINK binary biallelic genotype table file",
              "pattern": "*.{bed}"
            }
          },
          {
            "bim": {
              "type": "file",
              "description": "PLINK extended MAP file",
              "pattern": "*.{bim}"
            }
          },
          {
            "fam": {
              "type": "file",
              "description": "PLINK sample information file",
              "pattern": "*.{fam}"
            }
          }
        ],
        "authors": [
          "@atrigila"
        ]
      }
    },
    {
      "name": "plink_extract",
      "path": "modules/nf-core/plink/extract/meta.yml",
      "type": "module",
      "meta": {
        "name": "plink_extract",
        "description": "Subset plink bfiles with a text file of variant identifiers",
        "keywords": [
          "extract",
          "plink"
        ],
        "tools": [
          {
            "plink": {
              "description": "Whole genome association analysis toolset, designed to perform a range of basic, large-scale analyses in a computationally efficient manner.",
              "homepage": "https://www.cog-genomics.org/plink",
              "licence": [
                "GPL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "PLINK binary biallelic genotype table",
              "pattern": "*.{bed}"
            }
          },
          {
            "bim": {
              "type": "file",
              "description": "PLINK extended MAP file",
              "pattern": "*.{bim}"
            }
          },
          {
            "fam": {
              "type": "file",
              "description": "PLINK sample information file",
              "pattern": "*.{fam}"
            }
          },
          {
            "variants": {
              "type": "file",
              "description": "A text file containing variant identifiers to keep (one per line)",
              "pattern": "*.{keep}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "PLINK binary biallelic genotype table",
              "pattern": "*.{bed}"
            }
          },
          {
            "bim": {
              "type": "file",
              "description": "PLINK extended MAP file",
              "pattern": "*.{bim}"
            }
          },
          {
            "fam": {
              "type": "file",
              "description": "PLINK sample information file",
              "pattern": "*.{fam}"
            }
          }
        ],
        "authors": [
          "@nebfield"
        ]
      }
    },
    {
      "name": "plink_indep",
      "path": "modules/nf-core/plink/indep/meta.yml",
      "type": "module",
      "meta": {
        "name": "plink_indep",
        "description": "Produce a pruned subset of markers that are in approximate linkage equilibrium with each other.",
        "keywords": [
          "plink",
          "indep",
          "variant pruning",
          "bim",
          "fam"
        ],
        "tools": [
          {
            "plink": {
              "description": "Whole genome association analysis toolset, designed to perform a range of basic, large-scale analyses in a computationally efficient manner.",
              "homepage": "https://www.cog-genomics.org/plink",
              "documentation": "https://www.cog-genomics.org/plink/1.9/data#",
              "tool_dev_url": "https://www.cog-genomics.org/plink/1.9/dev",
              "licence": [
                "GPL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "PLINK binary biallelic genotype table file",
              "pattern": "*.{bed}"
            }
          },
          {
            "bim": {
              "type": "file",
              "description": "PLINK extended MAP file",
              "pattern": "*.{bim}"
            }
          },
          {
            "fam": {
              "type": "file",
              "description": "PLINK sample information file",
              "pattern": "*.{fam}"
            }
          },
          {
            "window_size": {
              "type": "value",
              "description": "Window size in variant count or kilobase (if the 'kb' modifier is present) units, a variant count to shift the window at the end of each step, and a variance inflation factor (VIF) threshold.",
              "pattern": "*.{}"
            }
          },
          {
            "variant_count": {
              "type": "value",
              "description": "Variant count to shift the window at the end of each step.",
              "pattern": "*.{}"
            }
          },
          {
            "variance_inflation_factor": {
              "type": "value",
              "description": "Variance inflation factor (VIF) threshold. At each step, all variants in the current window with VIF exceeding the threshold are removed.",
              "pattern": "*.{}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "prunein": {
              "type": "file",
              "description": "File with IDs of pruned subset of markers that are in approximate linkage equilibrium with each other",
              "pattern": "*.{prune.in}"
            }
          },
          {
            "pruneout": {
              "type": "file",
              "description": "File with IDs of excluded variants",
              "pattern": "*.{prune.out}"
            }
          }
        ],
        "authors": [
          "@atrigila"
        ]
      }
    },
    {
      "name": "plink_indeppairwise",
      "path": "modules/nf-core/plink/indeppairwise/meta.yml",
      "type": "module",
      "meta": {
        "name": "plink_indeppairwise",
        "description": "Produce a pruned subset of markers that are in approximate linkage equilibrium with each other. Pairs of variants in the current window with squared correlation greater than the threshold are noted and variants are greedily pruned from the window until no such pairs remain.",
        "keywords": [
          "plink",
          "indep pairwise",
          "variant pruning",
          "bim",
          "fam"
        ],
        "tools": [
          {
            "plink": {
              "description": "Whole genome association analysis toolset, designed to perform a range of basic, large-scale analyses in a computationally efficient manner.",
              "homepage": "https://www.cog-genomics.org/plink",
              "documentation": "https://www.cog-genomics.org/plink/1.9/data",
              "tool_dev_url": "https://www.cog-genomics.org/plink/1.9/dev",
              "licence": [
                "GPL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "PLINK binary biallelic genotype table file",
              "pattern": "*.{bed}"
            }
          },
          {
            "bim": {
              "type": "file",
              "description": "PLINK extended MAP file",
              "pattern": "*.{bim}"
            }
          },
          {
            "fam": {
              "type": "file",
              "description": "PLINK sample information file",
              "pattern": "*.{fam}"
            }
          },
          {
            "window_size": {
              "type": "number",
              "description": "Window size in variant count or kilobase (if the 'kb' modifier is present) units, a variant count to shift the window at the end of each step, and a variance inflation factor (VIF) threshold.",
              "pattern": "*.{}"
            }
          },
          {
            "variant_count": {
              "type": "number",
              "description": "Variant count to shift the window at the end of each step.",
              "pattern": "*.{}"
            }
          },
          {
            "r2_threshold": {
              "type": "number",
              "description": "Pairwise r2 threshold. At each step, pairs of variants in the current window with squared correlation greater than the threshold are noted, and variants are greedily pruned from the window until no such pairs remain",
              "pattern": "*.{}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "prunein": {
              "type": "file",
              "description": "File with IDs of pruned subset of markers that are in approximate linkage equilibrium with each other",
              "pattern": "*.{prune.in}"
            }
          },
          {
            "pruneout": {
              "type": "file",
              "description": "File with IDs of excluded variants",
              "pattern": "*.{prune.out}"
            }
          }
        ],
        "authors": [
          "@atrigila"
        ]
      }
    },
    {
      "name": "plink_recode",
      "path": "modules/nf-core/plink/recode/meta.yml",
      "type": "module",
      "meta": {
        "name": "plink_recode",
        "description": "Recodes plink bfiles into a new text fileset applying different modifiers",
        "keywords": [
          "recode"
        ],
        "tools": [
          {
            "plink": {
              "description": "Whole genome association analysis toolset, designed to perform a range of basic, large-scale analyses in a computationally efficient manner.",
              "homepage": "https://www.cog-genomics.org/plink",
              "documentation": "https://www.cog-genomics.org/plink/1.9/data#recode",
              "tool_dev_url": "https://www.cog-genomics.org/plink/1.9/dev",
              "licence": "['GPL']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "PLINK binary biallelic genotype table file",
              "pattern": "*.{bed}"
            }
          },
          {
            "bim": {
              "type": "file",
              "description": "PLINK extended MAP file",
              "pattern": "*.{bim}"
            }
          },
          {
            "fam": {
              "type": "file",
              "description": "PLINK sample information file",
              "pattern": "*.{fam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "ped": {
              "type": "file",
              "description": "PLINK/MERLIN/Haploview text pedigree + genotype table file. Produced by the default \"--recode\" or by \"--recode 12\".",
              "pattern": "*.{ped}"
            }
          },
          {
            "map": {
              "type": "file",
              "description": "PLINK text fileset variant information file. Produced by the default \"--recode\" or by \"--recode 12\".",
              "pattern": "*.{map}"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Text file. Produced by \"--recode 23\". Can only be used in a file with only one sample.",
              "pattern": "*.{txt}"
            }
          },
          {
            "raw": {
              "type": "file",
              "description": "Additive + dominant component file. Produced by \"--recode AD\" or \"--recode A\".",
              "pattern": "*.{raw}"
            }
          },
          {
            "traw": {
              "type": "file",
              "description": "Variant-major additive component file. Produced by \"--recode A-transpose\".",
              "pattern": "*.{traw}"
            }
          },
          {
            "beagle-dat": {
              "type": "file",
              "description": "Single BEAGLE unphased genotype file. Produced by \"--recode beagle\" in 'beagle-nomap' mode.",
              "pattern": "*.{beagle.dat}"
            }
          },
          {
            "chr-dat": {
              "type": "file",
              "description": "BEAGLE unphased genotype and variant information files. Produced by \"--recode beagle\".",
              "pattern": "*.{*.chr-*.dat}"
            }
          },
          {
            "chr-map": {
              "type": "file",
              "description": "BEAGLE variant information files. Produced by \"--recode beagle\".",
              "pattern": "*.{*chr-*.map}"
            }
          },
          {
            "geno": {
              "type": "file",
              "description": "BIMBAM genotype file. Produced by \"--recode bimbam\".",
              "pattern": "*.{recode.geno.txt}"
            }
          },
          {
            "pheno": {
              "type": "file",
              "description": "BIMBAM phenotype file. Produced by \"--recode bimbam\".",
              "pattern": "*.{recode.pheno.txt}"
            }
          },
          {
            "pos": {
              "type": "file",
              "description": "BIMBAM variant position file. Produced by \"--recode bimbam\".",
              "pattern": "*.{recode.pos.txt}"
            }
          },
          {
            "phase": {
              "type": "file",
              "description": "fastPHASE format. Produced by \"--recode fastphase\".",
              "pattern": "*.{recode.phase.inp}"
            }
          },
          {
            "info": {
              "type": "file",
              "description": "Haploview map file. Produced by \"--recode HV\".",
              "pattern": "*.{info}"
            }
          },
          {
            "lgen": {
              "type": "file",
              "description": "PLINK long-format genotype file. Produced by \"--recode lgen\".",
              "pattern": "*.{lgen}"
            }
          },
          {
            "list": {
              "type": "file",
              "description": "Genotype list file. Produced by \"--recode list\".",
              "pattern": "*.{list}"
            }
          },
          {
            "gen": {
              "type": "file",
              "description": "Oxford genotype file format. Produced by \"--recode oxford\".",
              "pattern": "*.{gen}"
            }
          },
          {
            "genz": {
              "type": "file",
              "description": "Compressed Oxford genotype file format. Produced by \"--recode oxford gen-gz\".",
              "pattern": "*.{genz}"
            }
          },
          {
            "sample": {
              "type": "file",
              "description": "Oxford sample information file. Produced by \"--recode oxford\".",
              "pattern": "*.{sample}"
            }
          },
          {
            "rlist": {
              "type": "file",
              "description": "Rare genotype list file. Produced by \"--recode rlist\".",
              "pattern": "*.{rlist}"
            }
          },
          {
            "strctin": {
              "type": "file",
              "description": "Structure-format file. Produced by \"--recode structure\".",
              "pattern": "*.{strct_in}"
            }
          },
          {
            "tped": {
              "type": "file",
              "description": "Transposed text PED file. Produced by \"--recode transpose\".",
              "pattern": "*.{tped}"
            }
          },
          {
            "tfam": {
              "type": "file",
              "description": "Transposed text FAM file. Produced by \"--recode transpose\".",
              "pattern": "*.{tfam}"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Variant calling file (VCF). Produced by \"--recode vcf\".",
              "pattern": "*.{vcf}"
            }
          },
          {
            "vcfgz": {
              "type": "file",
              "description": "Compressed variant calling file (VCF). Produced by \"--recode vcf bgz\".",
              "pattern": "*.{vcf.gz}"
            }
          }
        ],
        "authors": [
          "@atrigila"
        ]
      }
    },
    {
      "name": "plink_vcf",
      "path": "modules/nf-core/plink/vcf/meta.yml",
      "type": "module",
      "meta": {
        "name": "plink_vcf",
        "description": "Analyses variant calling files using plink",
        "keywords": [
          "plink",
          "vcf"
        ],
        "tools": [
          {
            "plink": {
              "description": "Whole genome association analysis toolset, designed to perform a range\nof basic, large-scale analyses in a computationally efficient manner\n",
              "homepage": "https://www.cog-genomics.org/plink",
              "tool_dev_url": "https://www.cog-genomics.org/plink/1.9/dev",
              "licence": [
                "GPL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Variant calling file (vcf)",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "PLINK binary biallelic genotype table",
              "pattern": "*.{bed}"
            }
          },
          {
            "bim": {
              "type": "file",
              "description": "PLINK extended MAP file",
              "pattern": "*.{bim}"
            }
          },
          {
            "fam": {
              "type": "file",
              "description": "PLINK sample information file",
              "pattern": "*.{fam}"
            }
          }
        ],
        "authors": [
          "@Mxrcon",
          "@abhi18av"
        ]
      }
    },
    {
      "name": "pmdtools_filter",
      "path": "modules/nf-core/pmdtools/filter/meta.yml",
      "type": "module",
      "meta": {
        "name": "pmdtools_filter",
        "description": "pmdtools command to filter ancient DNA molecules from others",
        "keywords": [
          "pmdtools",
          "aDNA",
          "filter",
          "damage"
        ],
        "tools": [
          {
            "pmdtools": {
              "description": "Compute postmortem damage patterns and decontaminate ancient genomes",
              "homepage": "https://github.com/pontussk/PMDtools",
              "documentation": "https://github.com/pontussk/PMDtools",
              "tool_dev_url": "https://github.com/pontussk/PMDtools",
              "doi": "10.1073/pnas.1318934111",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.bai"
            }
          },
          {
            "threshold": {
              "type": "value",
              "description": "Post-mortem damage score threshold"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "FASTA file",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Filtered BAM file",
              "pattern": "*.bam"
            }
          }
        ],
        "authors": [
          "@alexandregilardet"
        ]
      }
    },
    {
      "name": "porechop_abi",
      "path": "modules/nf-core/porechop/abi/meta.yml",
      "type": "module",
      "meta": {
        "name": "porechop_abi",
        "description": "Extension of Porechop whose purpose is to process adapter sequences in ONT reads.",
        "keywords": [
          "porechop_abi",
          "adapter",
          "nanopore"
        ],
        "tools": [
          {
            "porechop_abi": {
              "description": "Extension of Porechop whose purpose is to process adapter sequences in ONT reads.",
              "homepage": "https://github.com/bonsai-team/Porechop_ABI",
              "documentation": "https://github.com/bonsai-team/Porechop_ABI",
              "tool_dev_url": "https://github.com/bonsai-team/Porechop_ABI",
              "doi": "10.1101/2022.07.07.499093",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "fastq/fastq.gz file",
              "pattern": "*.{fastq,fastq.gz,fq,fq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Adapter-trimmed fastq.gz file",
              "pattern": "*fastq.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file containing stdout information",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@sofstam"
        ]
      }
    },
    {
      "name": "porechop_porechop",
      "path": "modules/nf-core/porechop/porechop/meta.yml",
      "type": "module",
      "meta": {
        "name": "porechop_porechop",
        "description": "Adapter removal and demultiplexing of Oxford Nanopore reads",
        "keywords": [
          "adapter",
          "nanopore",
          "demultiplexing"
        ],
        "tools": [
          {
            "porechop": {
              "description": "Adapter removal and demultiplexing of Oxford Nanopore reads",
              "homepage": "https://github.com/rrwick/Porechop",
              "documentation": "https://github.com/rrwick/Porechop",
              "tool_dev_url": "https://github.com/rrwick/Porechop",
              "doi": "10.1099/mgen.0.000132",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "fastq/fastq.gz file",
              "pattern": "*.{fastq,fastq.gz,fq,fq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Demultiplexed and/or adapter-trimmed fastq.gz file",
              "pattern": "*.{fastq.gz}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file containing stdout information",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@ggabernet",
          "@jasmezz",
          "@d4straub",
          "@LaurenceKuhl",
          "@SusiJo",
          "@jonasscheid",
          "@jonoave",
          "@GokceOGUZ",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "preseq_ccurve",
      "path": "modules/nf-core/preseq/ccurve/meta.yml",
      "type": "module",
      "meta": {
        "name": "preseq_ccurve",
        "description": "Software for predicting library complexity and genome coverage in high-throughput sequencing",
        "keywords": [
          "preseq",
          "library",
          "complexity"
        ],
        "tools": [
          {
            "preseq": {
              "description": "Software for predicting library complexity and genome coverage in high-throughput sequencing",
              "homepage": "http://smithlabresearch.org/software/preseq/",
              "documentation": "http://smithlabresearch.org/wp-content/uploads/manual.pdf",
              "tool_dev_url": "https://github.com/smithlabcode/preseq",
              "licence": [
                "GPL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "ccurve": {
              "type": "file",
              "description": "File containing output of Preseq c curve",
              "pattern": "*.{c_curve.txt}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file containing stderr produced by Preseq",
              "pattern": "*.{log}"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@Emiller88"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        }
      ]
    },
    {
      "name": "preseq_lcextrap",
      "path": "modules/nf-core/preseq/lcextrap/meta.yml",
      "type": "module",
      "meta": {
        "name": "preseq_lcextrap",
        "description": "Software for predicting library complexity and genome coverage in high-throughput sequencing",
        "keywords": [
          "preseq",
          "library",
          "complexity"
        ],
        "tools": [
          {
            "preseq": {
              "description": "Software for predicting library complexity and genome coverage in high-throughput sequencing",
              "homepage": "http://smithlabresearch.org/software/preseq/",
              "documentation": "http://smithlabresearch.org/wp-content/uploads/manual.pdf",
              "tool_dev_url": "https://github.com/smithlabcode/preseq",
              "licence": [
                "GPL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "lc_extrap": {
              "type": "file",
              "description": "File containing output of Preseq lcextrap",
              "pattern": "*.{lc_extrap.txt}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file containing stderr produced by Preseq",
              "pattern": "*.{log}"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@Emiller88"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "methylseq",
          "version": "2.4.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "pretextmap",
      "path": "modules/nf-core/pretextmap/meta.yml",
      "type": "module",
      "meta": {
        "name": "pretextmap",
        "description": "converts sam/bam/cram/pairs into genome contact map",
        "keywords": [
          "contact",
          "bam",
          "map"
        ],
        "tools": [
          {
            "pretextmap": {
              "description": "Paired REad TEXTure Mapper. Converts SAM formatted read pairs into genome contact maps.",
              "homepage": "https://github.com/wtsi-hpag/PretextMap",
              "documentation": "https://github.com/wtsi-hpag/PretextMap/blob/master/README.md",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file or pairs formatted reads file",
              "pattern": "*.{bam,cram,sam,pairs.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "pretext": {
              "type": "file",
              "description": "pretext map",
              "pattern": "*.pretext"
            }
          }
        ],
        "authors": [
          "@marrip",
          "@getrudeln"
        ]
      }
    },
    {
      "name": "pretextsnapshot",
      "path": "modules/nf-core/pretextsnapshot/meta.yml",
      "type": "module",
      "meta": {
        "name": "pretextsnapshot",
        "description": "a module to generate images from Pretext contact maps.",
        "keywords": [
          "pretext",
          "image",
          "hic",
          "png",
          "jpg",
          "bmp",
          "contact maps"
        ],
        "tools": [
          {
            "pretextsnapshot": {
              "description": "Commandline image generator for Pretext Hi-C genome contact maps.",
              "homepage": "https://github.com/wtsi-hpag/PretextSnapshot",
              "tool_dev_url": "https://github.com/wtsi-hpag/PretextSnapshot",
              "licence": "['https://github.com/wtsi-hpag/PretextSnapshot/blob/master/LICENSE']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "pretext_map": {
              "type": "file",
              "description": "pretext hic map",
              "pattern": "*.pretext"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "image": {
              "type": "file",
              "description": "image of a hic contact map",
              "pattern": "*.{png,jpg,bmp}"
            }
          }
        ],
        "authors": [
          "@epaule"
        ]
      }
    },
    {
      "name": "prinseqplusplus",
      "path": "modules/nf-core/prinseqplusplus/meta.yml",
      "type": "module",
      "meta": {
        "name": "prinseqplusplus",
        "description": "PRINSEQ++ is a C++ implementation of the prinseq-lite.pl program. It can be used to filter, reformat or trim genomic and metagenomic sequence data",
        "keywords": [
          "fastq",
          "fasta",
          "filter",
          "trim"
        ],
        "tools": [
          {
            "prinseqplusplus": {
              "description": "PRINSEQ++ - Multi-threaded C++ sequence cleaning",
              "homepage": "https://github.com/Adrian-Cantu/PRINSEQ-plus-plus",
              "documentation": "https://github.com/Adrian-Cantu/PRINSEQ-plus-plus",
              "tool_dev_url": "https://github.com/Adrian-Cantu/PRINSEQ-plus-plus",
              "doi": "10.7287/peerj.preprints.27553v1",
              "licence": "['GPL v2']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end\ndata, respectively.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "good_reads": {
              "type": "file",
              "description": "Reads passing filter(s) in gzipped FASTQ format",
              "pattern": "*_good_out_{R1,R2}.fastq.gz"
            }
          },
          {
            "single_reads": {
              "type": "file",
              "description": "Single reads without the pair passing filter(s) in gzipped FASTQ format\n",
              "pattern": "*_single_out_{R1,R2}.fastq.gz"
            }
          },
          {
            "bad_reads": {
              "type": "file",
              "description": "Reads without not passing filter(s) in gzipped FASTQ format\n",
              "pattern": "*_bad_out_{R1,R2}.fastq.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Verbose level 2 STDOUT information in a log file\n",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "prodigal",
      "path": "modules/nf-core/prodigal/meta.yml",
      "type": "module",
      "meta": {
        "name": "prodigal",
        "description": "Prodigal (Prokaryotic Dynamic Programming Genefinding Algorithm) is a microbial (bacterial and archaeal) gene finding program",
        "keywords": [
          "prokaryotes",
          "gene finding",
          "microbial"
        ],
        "tools": [
          {
            "prodigal": {
              "description": "Prodigal (Prokaryotic Dynamic Programming Genefinding Algorithm) is a microbial (bacterial and archaeal) gene finding program",
              "homepage": "https://github.com/hyattpd/Prodigal",
              "documentation": "https://github.com/hyattpd/prodigal/wiki",
              "tool_dev_url": "https://github.com/hyattpd/Prodigal",
              "doi": "10.1186/1471-2105-11-119",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "genome": {
              "type": "file",
              "description": "fasta/fasta.gz file"
            }
          },
          {
            "output_format": {
              "type": "string",
              "description": "Output format (\"gbk\"/\"gff\"/\"sqn\"/\"sco\")"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "nucleotide_fasta": {
              "type": "file",
              "description": "nucleotide sequences file",
              "pattern": "*.{fna}"
            }
          },
          {
            "amino_acid_fasta": {
              "type": "file",
              "description": "protein translations file",
              "pattern": "*.{faa}"
            }
          },
          {
            "all_gene_annotations": {
              "type": "file",
              "description": "complete starts file",
              "pattern": "*.{_all.txt}"
            }
          },
          {
            "gene_annotations": {
              "type": "file",
              "description": "gene annotations in output_format given as input",
              "pattern": "*.{output_format}"
            }
          }
        ],
        "authors": [
          "@grst"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        },
        {
          "name": "mag",
          "version": "2.3.2"
        },
        {
          "name": "metapep",
          "version": "dev"
        }
      ]
    },
    {
      "name": "prokka",
      "path": "modules/nf-core/prokka/meta.yml",
      "type": "module",
      "meta": {
        "name": "prokka",
        "description": "Whole genome annotation of small genomes (bacterial, archeal, viral)",
        "keywords": [
          "annotation",
          "fasta",
          "prokka"
        ],
        "tools": [
          {
            "prokka": {
              "description": "Rapid annotation of prokaryotic genomes",
              "homepage": "https://github.com/tseemann/prokka",
              "doi": "10.1093/bioinformatics/btu153",
              "licence": [
                "GPL v2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file to be annotated. Has to contain at least a non-empty string dummy value.\n"
            }
          },
          {
            "proteins": {
              "type": "file",
              "description": "FASTA file of trusted proteins to first annotate from (optional)"
            }
          },
          {
            "prodigal_tf": {
              "type": "file",
              "description": "Training file to use for Prodigal (optional)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "annotation in GFF3 format, containing both sequences and annotations",
              "pattern": "*.{gff}"
            }
          },
          {
            "gbk": {
              "type": "file",
              "description": "annotation in GenBank format, containing both sequences and annotations",
              "pattern": "*.{gbk}"
            }
          },
          {
            "fna": {
              "type": "file",
              "description": "nucleotide FASTA file of the input contig sequences",
              "pattern": "*.{fna}"
            }
          },
          {
            "faa": {
              "type": "file",
              "description": "protein FASTA file of the translated CDS sequences",
              "pattern": "*.{faa}"
            }
          },
          {
            "ffn": {
              "type": "file",
              "description": "nucleotide FASTA file of all the prediction transcripts (CDS, rRNA, tRNA, tmRNA, misc_RNA)",
              "pattern": "*.{ffn}"
            }
          },
          {
            "sqn": {
              "type": "file",
              "description": "an ASN1 format \"Sequin\" file for submission to Genbank",
              "pattern": "*.{sqn}"
            }
          },
          {
            "fsa": {
              "type": "file",
              "description": "nucleotide FASTA file of the input contig sequences, used by \"tbl2asn\" to create the .sqn file",
              "pattern": "*.{fsa}"
            }
          },
          {
            "tbl": {
              "type": "file",
              "description": "feature Table file, used by \"tbl2asn\" to create the .sqn file",
              "pattern": "*.{tbl}"
            }
          },
          {
            "err": {
              "type": "file",
              "description": "unacceptable annotations - the NCBI discrepancy report.",
              "pattern": "*.{err}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "contains all the output that Prokka produced during its run",
              "pattern": "*.{log}"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "statistics relating to the annotated features found",
              "pattern": "*.{txt}"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "tab-separated file of all features (locus_tag,ftype,len_bp,gene,EC_number,COG,product)",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      },
      "pipelines": [
        {
          "name": "bacass",
          "version": "2.0.0"
        },
        {
          "name": "funcscan",
          "version": "1.1.2"
        },
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "purecn_coverage",
      "path": "modules/nf-core/purecn/coverage/meta.yml",
      "type": "module",
      "meta": {
        "name": "purecn_coverage",
        "description": "Calculate intervals coverage for each sample. N.B. the tool can not handle staging files with symlinks, stageInMode should be set to 'link'.",
        "keywords": [
          "copy number alteration calling",
          "intervals coverage",
          "hybrid capture sequencing",
          "targeted sequencing",
          "DNA sequencing"
        ],
        "tools": [
          {
            "purecn": {
              "description": "Copy number calling and SNV classification using targeted short read sequencing",
              "homepage": "https://bioconductor.org/packages/release/bioc/html/PureCN.html",
              "documentation": "https://bioconductor.org/packages/release/bioc/html/PureCN.html",
              "tool_dev_url": "https://github.com/lima1/PureCN",
              "doi": "10.1186/s13029-016-0060-z",
              "licence": "Artistic-2.0",
              "args_id": "$args"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.{bai}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Annotated targets optimized for copy number calling",
              "pattern": "*.txt"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Intervals coverage file",
              "pattern": "*.txt.gz"
            }
          },
          {
            "png": {
              "type": "file",
              "description": "GC-normalized intervals coverage plot.\nGenerated only when GC-normalization is enabled.\n",
              "pattern": "*.png"
            }
          },
          {
            "loess_qc_txt": {
              "type": "file",
              "description": "GC-normalized intervals coverage metrics.\nGenerated only when GC-normalization is enabled.\n",
              "pattern": "*_loess_qc.txt"
            }
          },
          {
            "loess_txt": {
              "type": "file",
              "description": "GC-normalized intervals coverage file.\nGenerated only when GC-normalization is enabled.\n",
              "pattern": "*_loess.txt.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@aldosr",
          "@lbeltrame"
        ]
      }
    },
    {
      "name": "purecn_intervalfile",
      "path": "modules/nf-core/purecn/intervalfile/meta.yml",
      "type": "module",
      "meta": {
        "name": "purecn_intervalfile",
        "description": "Generate on and off-target intervals for PureCN from a list of targets",
        "keywords": [
          "copy number alteration calling",
          "genomic intervals",
          "hybrid capture sequencing",
          "targeted sequencing",
          "DNA sequencing"
        ],
        "tools": [
          {
            "purecn": {
              "description": "Copy number calling and SNV classification using targeted short read sequencing",
              "homepage": "https://bioconductor.org/packages/release/bioc/html/PureCN.html",
              "documentation": "https://bioconductor.org/packages/release/bioc/html/PureCN.html",
              "tool_dev_url": "https://github.com/lima1/PureCN",
              "doi": "10.1186/s13029-016-0060-z.",
              "licence": "Artistic-2.0",
              "args_id": "$args"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "target_bed": {
              "type": "file",
              "description": "BED file of target intervals",
              "pattern": "*.bed"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'fasta' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA reference sequence of the genome being used",
              "pattern": "*.fasta"
            }
          },
          {
            "genome": {
              "type": "string",
              "description": "Genome used for the BED file (e.g., \"hg38\", \"mm10\"...)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "txt": {
              "type": "file",
              "pattern": "*.txt",
              "description": "Annotated targets optimized for copy number calling\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "pattern": "*.bed",
              "description": "Modified and optimized targets exported as a BED file.\nGenerate the file using the --export command-line switch\nIntervalFile.R.\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@aldosr",
          "@lbeltrame"
        ]
      }
    },
    {
      "name": "purecn_normaldb",
      "path": "modules/nf-core/purecn/normaldb/meta.yml",
      "type": "module",
      "meta": {
        "name": "purecn_normaldb",
        "description": "Build a normal database for coverage normalization from all the (GC-normalized) normal coverage files. N.B. as reported in https://www.bioconductor.org/packages/devel/bioc/vignettes/PureCN/inst/doc/Quick.html, it is advised to provide a normal panel (VCF format) to precompute mapping bias for faster runtimes.",
        "keywords": [
          "copy number alteration calling",
          "normal database",
          "panel of normals",
          "hybrid capture sequencing",
          "targeted sequencing",
          "DNA sequencing"
        ],
        "tools": [
          {
            "purecn": {
              "description": "Copy number calling and SNV classification using targeted short read sequencing",
              "homepage": "https://bioconductor.org/packages/release/bioc/html/PureCN.html",
              "documentation": "https://bioconductor.org/packages/release/bioc/html/PureCN.html",
              "tool_dev_url": "https://github.com/lima1/PureCN",
              "doi": "10.1186/s13029-016-0060-z",
              "licence": "Artistic-2.0",
              "args_id": "$args"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "coverage_files": {
              "type": "file",
              "description": "Coverage files from normal samples",
              "pattern": "*.txt.gz"
            }
          },
          {
            "normal_vcf": {
              "type": "file",
              "description": "Normal panel in VCF format, used to precompute mapping bias\nfor faster runtimes. Optional.\n",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "genome": {
              "type": "string",
              "description": "Genome build"
            }
          },
          {
            "assay": {
              "type": "string",
              "description": "Assay name"
            }
          }
        ],
        "output": [
          {
            "rds": {
              "type": "file",
              "description": "File containing the generated panel of normals",
              "pattern": "normalDB*.rds"
            }
          },
          {
            "png": {
              "type": "file",
              "description": "Plot of interval weights calculated from the panel of normals",
              "pattern": "interval_weights*.png"
            }
          },
          {
            "bias_rds": {
              "type": "file",
              "description": "Calculated mapping bias from the normal files",
              "pattern": "mapping_bias*.rds"
            }
          },
          {
            "bias_bed": {
              "type": "file",
              "description": "Calculated mapping bias sites from the normal files",
              "pattern": "mapping_bias_hq_sites*.bed"
            }
          },
          {
            "low_cov_bed": {
              "type": "file",
              "description": "BED with possibly low coverage targets identified, only\ngenerated if there are low coverage targets\n",
              "pattern": "low_coverage_targets*.bed"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@aldosr",
          "@lbeltrame"
        ]
      }
    },
    {
      "name": "purgedups_calcuts",
      "path": "modules/nf-core/purgedups/calcuts/meta.yml",
      "type": "module",
      "meta": {
        "name": "purgedups_calcuts",
        "description": "Calculate coverage cutoffs to determine when to purge duplicated sequence.",
        "keywords": [
          "coverage",
          "cutoff",
          "purge duplications"
        ],
        "tools": [
          {
            "purgedups": {
              "description": "Purge_dups is a package used to purge haplotigs and overlaps in an assembly based on read depth",
              "homepage": "https://github.com/dfguan/purge_dups",
              "documentation": "https://github.com/dfguan/purge_dups",
              "tool_dev_url": "https://github.com/dfguan/purge_dups",
              "doi": "10.1093/bioinformatics/btaa025",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "stat": {
              "type": "file",
              "description": "Histogram of coverage",
              "pattern": "*.stat"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "cutoff": {
              "type": "file",
              "description": "Cutoff file",
              "pattern": "*.cutoffs"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file",
              "pattern": ".calcuts.log"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      }
    },
    {
      "name": "purgedups_getseqs",
      "path": "modules/nf-core/purgedups/getseqs/meta.yml",
      "type": "module",
      "meta": {
        "name": "purgedups_getseqs",
        "description": "Separates out sequences purged of falsely duplicated sequences.",
        "keywords": [
          "haplotype purging",
          "duplicate purging",
          "false duplications",
          "assembly curation"
        ],
        "tools": [
          {
            "purgedups": {
              "description": "Purge_dups is a package used to purge haplotigs and overlaps in an assembly based on read depth",
              "homepage": "https://github.com/dfguan/purge_dups",
              "documentation": "https://github.com/dfguan/purge_dups",
              "tool_dev_url": "https://github.com/dfguan/purge_dups",
              "doi": "10.1093/bioinformatics/btaa025",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "Draft assembly in fasta format",
              "pattern": "*.fasta"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Bed file listing duplicated sequences, produced by PURGEDUPS_PURGEDUPS",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "haplotigs": {
              "type": "file",
              "description": "Fasta file containing purged haplotigs",
              "pattern": "*.hap.fa"
            }
          },
          {
            "purged": {
              "type": "file",
              "description": "Fasta file purged of duplicated haplotigs",
              "pattern": "*.purged.fa"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      }
    },
    {
      "name": "purgedups_pbcstat",
      "path": "modules/nf-core/purgedups/pbcstat/meta.yml",
      "type": "module",
      "meta": {
        "name": "purgedups_pbcstat",
        "description": "Create read depth histogram and base-level read depth for an assembly based on pacbio data",
        "keywords": [
          "sort",
          "genome assembly",
          "purge duplications",
          "read depth"
        ],
        "tools": [
          {
            "purgedups": {
              "description": "Purge_dups is a package used to purge haplotigs and overlaps in an assembly based on read depth",
              "homepage": "https://github.com/dfguan/purge_dups",
              "documentation": "https://github.com/dfguan/purge_dups",
              "tool_dev_url": "https://github.com/dfguan/purge_dups",
              "doi": "10.1093/bioinformatics/btaa025",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "paf_alignment": {
              "type": "file",
              "description": "PAF alignment file",
              "pattern": "*.paf"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "stat": {
              "type": "file",
              "description": "PacBio Statistic file",
              "pattern": "*.PB.stat"
            }
          },
          {
            "basecov": {
              "type": "file",
              "description": "PacBio Base coverage file",
              "pattern": "*.PB.base.cov"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      }
    },
    {
      "name": "purgedups_purgedups",
      "path": "modules/nf-core/purgedups/purgedups/meta.yml",
      "type": "module",
      "meta": {
        "name": "purgedups_purgedups",
        "description": "Purge haplotigs and overlaps for an assembly",
        "keywords": [
          "Haplotype purging",
          "Duplication purging",
          "False duplications",
          "Assembly curation",
          "Read depth"
        ],
        "tools": [
          {
            "purgedups": {
              "description": "Purge_dups is a package used to purge haplotigs and overlaps in an assembly based on read depth",
              "homepage": "https://github.com/dfguan/purge_dups",
              "documentation": "https://github.com/dfguan/purge_dups",
              "tool_dev_url": "https://github.com/dfguan/purge_dups",
              "doi": "10.1093/bioinformatics/btaa025",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "basecov": {
              "type": "file",
              "description": "A file containing a histogram of base coverage. Obtained from PURGEDUPS_PBCSTAT",
              "pattern": "*.PB.base.cov"
            }
          },
          {
            "cutoff": {
              "type": "file",
              "description": "A file containing duplication cutoff points. Obtained from PURGEDUPS_CALCUTS",
              "pattern": "*.cutoffs"
            }
          },
          {
            "paf": {
              "type": "file",
              "description": "A file of assembly alignments to itself",
              "pattern": "*.paf(.gz)?"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "A bed file of sequences purged of false duplications",
              "pattern": "*.bed"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "A log of the tool output",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      }
    },
    {
      "name": "purgedups_splitfa",
      "path": "modules/nf-core/purgedups/splitfa/meta.yml",
      "type": "module",
      "meta": {
        "name": "purgedups_splitfa",
        "description": "Split fasta file by 'N's to aid in self alignment for duplicate purging",
        "keywords": [
          "split assembly",
          "duplicate purging"
        ],
        "tools": [
          {
            "purgedups": {
              "description": "Purge_dups is a package used to purge haplotigs and overlaps in an assembly based on read depth",
              "homepage": "https://github.com/dfguan/purge_dups",
              "documentation": "https://github.com/dfguan/purge_dups",
              "tool_dev_url": "https://github.com/dfguan/purge_dups",
              "doi": "10.1093/bioinformatics/btaa025",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "Draft assembly file",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "split_fasta": {
              "type": "file",
              "description": "Fasta split by N's",
              "pattern": "*.fasta.gz"
            }
          }
        ],
        "authors": [
          "@mahesh-panchal"
        ]
      }
    },
    {
      "name": "pycoqc",
      "path": "modules/nf-core/pycoqc/meta.yml",
      "type": "module",
      "meta": {
        "name": "pycoqc",
        "description": "write your description here",
        "keywords": [
          "qc",
          "quality control",
          "sequencing",
          "nanopore"
        ],
        "tools": [
          {
            "pycoqc": {
              "description": "PycoQC computes metrics and generates interactive QC plots for Oxford Nanopore technologies sequencing data",
              "homepage": "https://github.com/tleonardi/pycoQC",
              "documentation": "https://tleonardi.github.io/pycoQC/",
              "tool_dev_url": "https://github.com/tleonardi/pycoQC",
              "doi": "10.21105/joss.01236",
              "licence": [
                "GNU General Public v3 (GPL v3)"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "sequencing summary file",
              "pattern": "*.{txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "Results in HTML format"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "Results in JSON format",
              "pattern": "*.{json}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "pydamage_analyze",
      "path": "modules/nf-core/pydamage/analyze/meta.yml",
      "type": "module",
      "meta": {
        "name": "pydamage_analyze",
        "description": "Damage parameter estimation for ancient DNA",
        "keywords": [
          "ancient DNA",
          "aDNA",
          "de novo assembly",
          "filtering",
          "damage",
          "deamination",
          "miscoding lesions",
          "C to T",
          "palaeogenomics",
          "archaeogenomics",
          "palaeogenetics",
          "archaeogenetics"
        ],
        "tools": [
          {
            "pydamage": {
              "description": "Damage parameter estimation for ancient DNA",
              "homepage": "https://github.com/maxibor/pydamage",
              "documentation": "https://pydamage.readthedocs.io/",
              "tool_dev_url": "https://github.com/maxibor/pydamage",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "PyDamage results as csv files",
              "pattern": "*.csv"
            }
          }
        ],
        "authors": [
          "@maxibor"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "pydamage_filter",
      "path": "modules/nf-core/pydamage/filter/meta.yml",
      "type": "module",
      "meta": {
        "name": "pydamage_filter",
        "description": "Damage parameter estimation for ancient DNA",
        "keywords": [
          "ancient DNA",
          "aDNA",
          "de novo assembly",
          "filtering",
          "damage",
          "deamination",
          "miscoding lesions",
          "C to T",
          "palaeogenomics",
          "archaeogenomics",
          "palaeogenetics",
          "archaeogenetics"
        ],
        "tools": [
          {
            "pydamage": {
              "description": "Damage parameter estimation for ancient DNA",
              "homepage": "https://github.com/maxibor/pydamage",
              "documentation": "https://pydamage.readthedocs.io/",
              "tool_dev_url": "https://github.com/maxibor/pydamage",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "csv file from pydamage analyze",
              "pattern": "*.csv"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "PyDamage filtered results as csv file",
              "pattern": "*.csv"
            }
          }
        ],
        "authors": [
          "@maxibor"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "pyrodigal",
      "path": "modules/nf-core/pyrodigal/meta.yml",
      "type": "module",
      "meta": {
        "name": "pyrodigal",
        "description": "Pyrodigal is a Python module that provides bindings to Prodigal, a fast, reliable protein-coding gene prediction for prokaryotic genomes.",
        "keywords": [
          "sort",
          "annotation",
          "prediction",
          "prokaryote"
        ],
        "tools": [
          {
            "pyrodigal": {
              "description": "Pyrodigal is a Python module that provides bindings to Prodigal (ORF finder for microbial sequences) using Cython.",
              "homepage": "https://pyrodigal.readthedocs.org/",
              "documentation": "https://pyrodigal.readthedocs.org/",
              "tool_dev_url": "https://github.com/althonos/pyrodigal/",
              "doi": "10.21105/joss.04296",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file",
              "pattern": "*.{fasta.gz,fa.gz,fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "gene annotations in gff format",
              "pattern": "*.{gff.gz}"
            }
          },
          {
            "faa": {
              "type": "file",
              "description": "protein translations file",
              "pattern": "*.{faa.gz}"
            }
          },
          {
            "fna": {
              "type": "file",
              "description": "nucleotide sequences file",
              "pattern": "*.{fna.gz}"
            }
          },
          {
            "score": {
              "type": "file",
              "description": "all potential genes (with scores)",
              "pattern": "*.{score.gz}"
            }
          }
        ],
        "authors": [
          "@louperelo"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "qcat",
      "path": "modules/nf-core/qcat/meta.yml",
      "type": "module",
      "meta": {
        "name": "qcat",
        "description": "Demultiplexer for Nanopore samples",
        "keywords": [
          "demultiplex"
        ],
        "tools": [
          {
            "qcat": {
              "description": "A demultiplexer for Nanopore samples\n",
              "homepage": "https://github.com/nanoporetech/qcat",
              "documentation": "https://github.com/nanoporetech/qcat#qcat",
              "licence": [
                "MPL-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Non-demultiplexed fastq files\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Demultiplexed fastq samples",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@yuukiiwa",
          "@drpatelh"
        ]
      }
    },
    {
      "name": "qualimap_bamqc",
      "path": "modules/nf-core/qualimap/bamqc/meta.yml",
      "type": "module",
      "meta": {
        "name": "qualimap_bamqc",
        "description": "Evaluate alignment data",
        "keywords": [
          "quality control",
          "qc",
          "bam"
        ],
        "tools": [
          {
            "qualimap": {
              "description": "Qualimap 2 is a platform-independent application written in\nJava and R that provides both a Graphical User Interface and\na command-line interface to facilitate the quality control of\nalignment sequencing data and its derivatives like feature counts.\n",
              "homepage": "http://qualimap.bioinfo.cipf.es/",
              "documentation": "http://qualimap.conesalab.org/doc_html/index.html",
              "doi": "10.1093/bioinformatics/bts503",
              "licence": [
                "GPL-2.0-only"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "Feature file with regions of interest",
              "pattern": "*.{gff,gtf,bed}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "results": {
              "type": "dir",
              "description": "Qualimap results dir",
              "pattern": "*/*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@phue"
        ]
      },
      "pipelines": [
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "methylseq",
          "version": "2.4.0"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "qualimap_bamqccram",
      "path": "modules/nf-core/qualimap/bamqccram/meta.yml",
      "type": "module",
      "meta": {
        "name": "qualimap_bamqccram",
        "description": "Evaluate alignment data",
        "keywords": [
          "quality control",
          "qc",
          "bam"
        ],
        "tools": [
          {
            "qualimap": {
              "description": "Qualimap 2 is a platform-independent application written in\nJava and R that provides both a Graphical User Interface and\na command-line interface to facilitate the quality control of\nalignment sequencing data and its derivatives like feature counts.\n",
              "homepage": "http://qualimap.bioinfo.cipf.es/",
              "documentation": "http://qualimap.conesalab.org/doc_html/index.html",
              "doi": "10.1093/bioinformatics/bts503",
              "licence": [
                "GPL-2.0-only"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bacramm": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "Feature file with regions of interest",
              "pattern": "*.{gff,gtf,bed}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference file of cram file",
              "pattern": "*.{fasta,fa,fna}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "results": {
              "type": "directory",
              "description": "Qualimap results dir",
              "pattern": "*/*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      },
      "pipelines": [
        {
          "name": "methylseq",
          "version": "2.4.0"
        }
      ]
    },
    {
      "name": "quast",
      "path": "modules/nf-core/quast/meta.yml",
      "type": "module",
      "meta": {
        "name": "quast",
        "description": "Quality Assessment Tool for Genome Assemblies",
        "keywords": [
          "quast",
          "assembly",
          "quality"
        ],
        "tools": [
          {
            "quast": {
              "description": "QUAST calculates quality metrics for genome assemblies\n",
              "homepage": "http://bioinf.spbau.ru/quast",
              "doi": "10.1093/bioinformatics/btt086",
              "licence": [
                "GPL-2.0-only"
              ]
            }
          }
        ],
        "input": [
          {
            "consensus": {
              "type": "file",
              "description": "Fasta file containing the assembly of interest\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The genome assembly to be evaluated. Has to contain at least a non-empty string dummy value.\n"
            }
          },
          {
            "use_fasta": {
              "type": "boolean",
              "description": "Whether to use the provided fasta reference genome file"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "The genome GFF file. Has to contain at least a non-empty string dummy value."
            }
          },
          {
            "use_gff": {
              "type": "boolean",
              "description": "Whether to use the provided gff reference annotation file"
            }
          }
        ],
        "output": [
          {
            "quast": {
              "type": "directory",
              "description": "Directory containing complete quast report",
              "pattern": "{prefix}/"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "tab-separated version of the summary, suitable for spreadsheets and mqc",
              "pattern": "report.tsv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "bacass",
          "version": "2.0.0"
        },
        {
          "name": "genomeassembler",
          "version": "dev"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "racon",
      "path": "modules/nf-core/racon/meta.yml",
      "type": "module",
      "meta": {
        "name": "racon",
        "description": "Consensus module for raw de novo DNA assembly of long uncorrected reads",
        "keywords": [
          "assembly",
          "pacbio",
          "nanopore",
          "polish"
        ],
        "tools": [
          {
            "racon": {
              "description": "Ultrafast consensus module for raw de novo genome assembly of long uncorrected reads.",
              "homepage": "https://github.com/lbcb-sci/racon",
              "documentation": "https://github.com/lbcb-sci/racon",
              "tool_dev_url": "https://github.com/lbcb-sci/racon",
              "doi": "10.1101/gr.214270.116",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files. Racon expects single end reads",
              "pattern": "*.{fastq,fastq.gz,fq,fq.gz}"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "Genome assembly to be improved",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "paf": {
              "type": "file",
              "description": "Alignment in PAF format",
              "pattern": "*.paf"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "improved_assembly": {
              "type": "file",
              "description": "Improved genome assembly",
              "pattern": "*_assembly_consensus.fasta.gz"
            }
          }
        ],
        "authors": [
          "@avantonder"
        ]
      },
      "pipelines": [
        {
          "name": "crisprseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "rapidnj",
      "path": "modules/nf-core/rapidnj/meta.yml",
      "type": "module",
      "meta": {
        "name": "rapidnj",
        "description": "Produces a Newick format phylogeny from a multiple sequence alignment using a Neighbour-Joining algorithm. Capable of bacterial genome size alignments.",
        "keywords": [
          "phylogeny",
          "newick",
          "neighbour-joining"
        ],
        "tools": [
          {
            "rapidnj": {
              "description": "RapidNJ is an algorithmic engineered implementation of canonical neighbour-joining. It uses an efficient search heuristic to speed-up the core computations of the neighbour-joining method that enables RapidNJ to outperform other state-of-the-art neighbour-joining implementations.",
              "homepage": "https://birc.au.dk/software/rapidnj",
              "documentation": "https://birc.au.dk/software/rapidnj",
              "tool_dev_url": "https://github.com/somme89/rapidNJ",
              "doi": "10.1007/978-3-540-87361-7_10",
              "licence": [
                "GPL v2"
              ]
            }
          }
        ],
        "input": [
          {
            "alignment": {
              "type": "file",
              "description": "A FASTA format multiple sequence alignment file",
              "pattern": "*.{fasta,fas,fa,mfa}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "phylogeny": {
              "type": "file",
              "description": "A phylogeny in Newick format",
              "pattern": "*.{tre}"
            }
          },
          {
            "stockholm_alignment": {
              "type": "file",
              "description": "An alignment in Stockholm format",
              "pattern": "*.{sth}"
            }
          }
        ],
        "authors": [
          "@aunderwo",
          "@avantonder"
        ]
      }
    },
    {
      "name": "rasusa",
      "path": "modules/nf-core/rasusa/meta.yml",
      "type": "module",
      "meta": {
        "name": "rasusa",
        "description": "Randomly subsample sequencing reads to a specified coverage",
        "keywords": [
          "coverage",
          "depth",
          "subsampling"
        ],
        "tools": [
          {
            "rasusa": {
              "description": "Randomly subsample sequencing reads to a specified coverage",
              "homepage": "https://github.com/mbhall88/rasusa",
              "documentation": "https://github.com/mbhall88/rasusa/blob/master/README.md",
              "tool_dev_url": "https://github.com/mbhall88/rasusa",
              "doi": "10.5281/zenodo.3731394",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input paired-end FastQ files"
            }
          },
          {
            "genome_size": {
              "type": "string",
              "description": "Genome size of the species"
            }
          },
          {
            "depth_cutoff": {
              "type": "integer",
              "description": "Depth of coverage cutoff"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Reads with subsampled coverage",
              "pattern": "*.fastq.gz"
            }
          }
        ],
        "authors": [
          "@thanhleviet"
        ]
      }
    },
    {
      "name": "raven",
      "path": "modules/nf-core/raven/meta.yml",
      "type": "module",
      "meta": {
        "name": "raven",
        "description": "De novo genome assembler for long uncorrected reads.",
        "keywords": [
          "de novo",
          "assembly",
          "genome",
          "genome assembler",
          "long uncorrected reads"
        ],
        "tools": [
          {
            "raven": {
              "description": "Raven is a de novo genome assembler for long uncorrected reads.",
              "homepage": "https://github.com/lbcb-sci/raven",
              "documentation": "https://github.com/lbcb-sci/raven#usage",
              "tool_dev_url": "https://github.com/lbcb-sci/raven",
              "doi": "10.1038/s43588-021-00073-4",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', suffix:'bacteria' ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Input file in FASTA/FASTQ format.",
              "pattern": "*.{fasta,fastq,fasta.gz,fastq.gz,fa,fq,fa.gz,fq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', suffix:'bacteria' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Assembled FASTA file",
              "pattern": "*.fasta.gz"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Repeat graph",
              "pattern": "*.gfa.gz"
            }
          }
        ],
        "authors": [
          "@fmalmeida"
        ]
      }
    },
    {
      "name": "raxmlng",
      "path": "modules/nf-core/raxmlng/meta.yml",
      "type": "module",
      "meta": {
        "name": "raxmlng",
        "description": "RAxML-NG is a phylogenetic tree inference tool which uses maximum-likelihood (ML) optimality criterion.",
        "keywords": [
          "phylogeny",
          "newick",
          "maximum likelihood"
        ],
        "tools": [
          {
            "raxmlng": {
              "description": "RAxML-NG is a phylogenetic tree inference tool which uses maximum-likelihood (ML) optimality criterion.",
              "homepage": "https://github.com/amkozlov/raxml-ng",
              "documentation": "https://github.com/amkozlov/raxml-ng/wiki",
              "tool_dev_url": "https://github.com/amkozlov/raxml-ng",
              "doi": "10.1093/bioinformatics/btz305",
              "licence": [
                "GPL v2-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "alignment": {
              "type": "file",
              "description": "A FASTA format multiple sequence alignment file",
              "pattern": "*.{fasta,fas,fa,mfa}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "phylogeny": {
              "type": "file",
              "description": "A phylogeny in Newick format",
              "pattern": "*.{raxml.bestTree}"
            }
          },
          {
            "phylogeny_bootstrapped": {
              "type": "file",
              "description": "A phylogeny in Newick format with bootstrap values",
              "pattern": "*.{raxml.support}"
            }
          }
        ],
        "authors": [
          "@avantonder",
          "@aunderwo"
        ]
      }
    },
    {
      "name": "rgi_main",
      "path": "modules/nf-core/rgi/main/meta.yml",
      "type": "module",
      "meta": {
        "name": "rgi_main",
        "description": "Predict antibiotic resistance from protein or nucleotide data",
        "keywords": [
          "bacteria",
          "fasta",
          "antibiotic resistance"
        ],
        "tools": [
          {
            "rgi": {
              "description": "This tool provides a preliminary annotation of your DNA sequence(s) based upon the data available in The Comprehensive Antibiotic Resistance Database (CARD). Hits to genes tagged with Antibiotic Resistance ontology terms will be highlighted. As CARD expands to include more pathogens, genomes, plasmids, and ontology terms this tool will grow increasingly powerful in providing first-pass detection of antibiotic resistance associated genes. See license at CARD website",
              "homepage": "https://card.mcmaster.ca",
              "documentation": "https://github.com/arpcard/rgi",
              "tool_dev_url": "https://github.com/arpcard/rgi",
              "doi": "10.1093/nar/gkz935",
              "licence": [
                "https://card.mcmaster.ca/about"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Nucleotide or protein sequences in FASTA format",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz,faa,faa.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON formatted file with RGI results",
              "pattern": "*.{json}"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab-delimited file with RGI results",
              "pattern": "*.{txt}"
            }
          },
          {
            "temp": {
              "type": "directory",
              "description": "Directory containing various intermediate files",
              "pattern": "temp/"
            }
          },
          {
            "tool_version": {
              "type": "string",
              "description": "The version of the tool in string format (useful for downstream tools such as hAMRronization)"
            }
          },
          {
            "db_version": {
              "type": "string",
              "description": "The version of the used database in string format (useful for downstream tools such as hAMRronization)"
            }
          }
        ],
        "authors": [
          "@rpetit3",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        }
      ]
    },
    {
      "name": "rhocall_annotate",
      "path": "modules/nf-core/rhocall/annotate/meta.yml",
      "type": "module",
      "meta": {
        "name": "rhocall_annotate",
        "description": "Markup VCF file using rho-calls.",
        "keywords": [
          "roh",
          "rhocall",
          "runs_of_homozygosity"
        ],
        "tools": [
          {
            "rhocall": {
              "description": "Call regions of homozygosity and make tentative UPD calls.",
              "homepage": "https://github.com/dnil/rhocall",
              "documentation": "https://github.com/dnil/rhocall",
              "tool_dev_url": "https://github.com/dnil",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "vcf file",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "vcf index file",
              "pattern": "*.{tbi}"
            }
          },
          {
            "roh": {
              "type": "file",
              "description": "Bcftools roh style TSV file with CHR,POS,AZ,QUAL",
              "pattern": "*.{roh}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file with AZ windows.",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "vcf file",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "rmarkdownnotebook",
      "path": "modules/nf-core/rmarkdownnotebook/meta.yml",
      "type": "module",
      "meta": {
        "name": "rmarkdownnotebook",
        "description": "Render an rmarkdown notebook. Supports parametrization.",
        "keywords": [
          "R",
          "notebook",
          "reports"
        ],
        "tools": [
          {
            "rmarkdown": {
              "description": "Dynamic Documents for R",
              "homepage": "https://rmarkdown.rstudio.com/",
              "documentation": "https://rmarkdown.rstudio.com/lesson-1.html",
              "tool_dev_url": "https://github.com/rstudio/rmarkdown",
              "licence": "GPL-3"
            }
          }
        ],
        "params": [
          {
            "parametrize": {
              "type": "boolean",
              "description": "If true, parametrize the notebook"
            }
          },
          {
            "implicit_params": {
              "type": "boolean",
              "description": "If true (default), include the implicit params\n  * `input_dir`, which points to the directory containing the files added via `input_files`,\n  * `artifact_dir`, which points to the directory where the notebook should place output files, and\n  * `cpus`, which contains the value of ${task.cpus}\n"
            }
          },
          {
            "meta_params": {
              "type": "boolean",
              "description": "If true, include a parameter `meta` which contains the information specified\nvia the `meta` input channel.\n"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "notebook": {
              "type": "file",
              "description": "Rmarkdown file",
              "pattern": "*.{Rmd}"
            }
          },
          {
            "parameters": {
              "type": "map",
              "description": "Groovy map with notebook parameters which will be passed to\nrmarkdown to generate parametrized reports.\n"
            }
          },
          {
            "input_files": {
              "type": "file",
              "description": "One or multiple files serving as input data for the notebook.",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "HTML report generated from Rmarkdown",
              "pattern": "*.html"
            }
          },
          {
            "session_info": {
              "type": "file",
              "description": "dump of R SessionInfo",
              "pattern": "*.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@grst"
        ]
      }
    },
    {
      "name": "roary",
      "path": "modules/nf-core/roary/meta.yml",
      "type": "module",
      "meta": {
        "name": "roary",
        "description": "Calculate pan-genome from annotated bacterial assemblies in GFF3 format",
        "keywords": [
          "gff",
          "pan-genome",
          "alignment"
        ],
        "tools": [
          {
            "roary": {
              "description": "Rapid large-scale prokaryote pan genome analysis",
              "homepage": "http://sanger-pathogens.github.io/Roary/",
              "documentation": "http://sanger-pathogens.github.io/Roary/",
              "tool_dev_url": "https://github.com/sanger-pathogens/Roary/",
              "doi": "10.1093/bioinformatics/btv421",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "A set of GFF3 formatted files",
              "pattern": "*.{gff}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "results": {
              "type": "directory",
              "description": "Directory containing Roary result files",
              "pattern": "*/*"
            }
          },
          {
            "aln": {
              "type": "file",
              "description": "Core-genome alignment produced by Roary (Optional)",
              "pattern": "*.{aln}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "rsem_calculateexpression",
      "path": "modules/nf-core/rsem/calculateexpression/meta.yml",
      "type": "module",
      "meta": {
        "name": "rsem_calculateexpression",
        "description": "Calculate expression with RSEM",
        "keywords": [
          "rsem",
          "expression",
          "quantification"
        ],
        "tools": [
          {
            "rseqc": {
              "description": "RSEM: accurate transcript quantification from RNA-Seq data with or without a reference genome\n",
              "homepage": "https://github.com/deweylab/RSEM",
              "documentation": "https://github.com/deweylab/RSEM",
              "doi": "10.1186/1471-2105-12-323",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Input reads for quantification",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "RSEM index",
              "pattern": "rsem/*"
            }
          }
        ],
        "output": [
          {
            "counts_gene": {
              "type": "file",
              "description": "Expression counts on gene level",
              "pattern": "*.genes.results"
            }
          },
          {
            "counts_transctips": {
              "type": "file",
              "description": "Expression counts on transcript level",
              "pattern": "*.isoforms.results"
            }
          },
          {
            "stat": {
              "type": "file",
              "description": "RSEM statistics",
              "pattern": "*.stat"
            }
          },
          {
            "logs": {
              "type": "file",
              "description": "RSEM logs",
              "pattern": "*.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam_star": {
              "type": "file",
              "description": "BAM file generated by STAR (optional)",
              "pattern": "*.STAR.genome.bam"
            }
          },
          {
            "bam_genome": {
              "type": "file",
              "description": "Genome BAM file (optional)",
              "pattern": "*.genome.bam"
            }
          },
          {
            "bam_transcript": {
              "type": "file",
              "description": "Transcript BAM file (optional)",
              "pattern": "*.transcript.bam"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "rsem_preparereference",
      "path": "modules/nf-core/rsem/preparereference/meta.yml",
      "type": "module",
      "meta": {
        "name": "rsem_preparereference",
        "description": "Prepare a reference genome for RSEM",
        "keywords": [
          "rsem",
          "genome",
          "index"
        ],
        "tools": [
          {
            "rseqc": {
              "description": "RSEM: accurate transcript quantification from RNA-Seq data with or without a reference genome\n",
              "homepage": "https://github.com/deweylab/RSEM",
              "documentation": "https://github.com/deweylab/RSEM",
              "doi": "10.1186/1471-2105-12-323",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "The Fasta file of the reference genome",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "The GTF file of the reference genome",
              "pattern": "*.gtf"
            }
          }
        ],
        "output": [
          {
            "rsem": {
              "type": "directory",
              "description": "RSEM index directory",
              "pattern": "rsem"
            }
          },
          {
            "transcript_fasta": {
              "type": "file",
              "description": "Fasta file of transcripts",
              "pattern": "rsem/*transcripts.fa"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "rseqc_bamstat",
      "path": "modules/nf-core/rseqc/bamstat/meta.yml",
      "type": "module",
      "meta": {
        "name": "rseqc_bamstat",
        "description": "Generate statistics from a bam file",
        "keywords": [
          "bam",
          "qc",
          "bamstat"
        ],
        "tools": [
          {
            "rseqc": {
              "description": "RSeQC package provides a number of useful modules that can comprehensively evaluate\nhigh throughput sequence data especially RNA-seq data.\n",
              "homepage": "http://rseqc.sourceforge.net/",
              "documentation": "http://rseqc.sourceforge.net/",
              "doi": "10.1093/bioinformatics/bts356",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "the bam file to calculate statistics of",
              "pattern": "*.{bam}"
            }
          }
        ],
        "output": [
          {
            "txt": {
              "type": "file",
              "description": "bam statistics report",
              "pattern": "*.bam_stat.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "rseqc_inferexperiment",
      "path": "modules/nf-core/rseqc/inferexperiment/meta.yml",
      "type": "module",
      "meta": {
        "name": "rseqc_inferexperiment",
        "description": "Infer strandedness from sequencing reads",
        "keywords": [
          "rnaseq",
          "experiment"
        ],
        "tools": [
          {
            "rseqc": {
              "description": "RSeQC package provides a number of useful modules that can comprehensively evaluate\nhigh throughput sequence data especially RNA-seq data.\n",
              "homepage": "http://rseqc.sourceforge.net/",
              "documentation": "http://rseqc.sourceforge.net/",
              "doi": "10.1093/bioinformatics/bts356",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "the bam file to calculate statistics of",
              "pattern": "*.{bam}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "a bed file for the reference gene model",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "txt": {
              "type": "file",
              "description": "infer_experiment results report",
              "pattern": "*.infer_experiment.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "rseqc_innerdistance",
      "path": "modules/nf-core/rseqc/innerdistance/meta.yml",
      "type": "module",
      "meta": {
        "name": "rseqc_innerdistance",
        "description": "Calculate inner distance between read pairs.",
        "keywords": [
          "fragment_size",
          "inner_distance"
        ],
        "tools": [
          {
            "rseqc": {
              "description": "RSeQC package provides a number of useful modules that can comprehensively evaluate\nhigh throughput sequence data especially RNA-seq data.\n",
              "homepage": "http://rseqc.sourceforge.net/",
              "documentation": "http://rseqc.sourceforge.net/",
              "doi": "10.1093/bioinformatics/bts356",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "the alignment in bam format",
              "pattern": "*.{bam}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "a bed file for the reference gene model",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "distance": {
              "type": "file",
              "description": "the inner distances",
              "pattern": "*.inner_distance.txt"
            }
          },
          {
            "freq": {
              "type": "file",
              "description": "frequencies of different insert sizes",
              "pattern": "*.inner_distance_freq.txt"
            }
          },
          {
            "mean": {
              "type": "file",
              "description": "mean/median values of inner distances",
              "pattern": "*.inner_distance_mean.txt"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "distribution plot of inner distances",
              "pattern": "*.inner_distance_plot.pdf"
            }
          },
          {
            "rscript": {
              "type": "file",
              "description": "script to reproduce the plot",
              "pattern": "*.inner_distance_plot.R"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "rseqc_junctionannotation",
      "path": "modules/nf-core/rseqc/junctionannotation/meta.yml",
      "type": "module",
      "meta": {
        "name": "rseqc_junctionannotation",
        "description": "compare detected splice junctions to reference gene model",
        "keywords": [
          "junctions",
          "splicing",
          "rnaseq"
        ],
        "tools": [
          {
            "rseqc": {
              "description": "RSeQC package provides a number of useful modules that can comprehensively evaluate\nhigh throughput sequence data especially RNA-seq data.\n",
              "homepage": "http://rseqc.sourceforge.net/",
              "documentation": "http://rseqc.sourceforge.net/",
              "doi": "10.1093/bioinformatics/bts356",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "the alignment in bam format",
              "pattern": "*.{bam}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "a bed file for the reference gene model",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "bed": {
              "type": "file",
              "description": "bed file of annotated junctions",
              "pattern": "*.junction.bed"
            }
          },
          {
            "interact_bed": {
              "type": "file",
              "description": "Interact bed file",
              "pattern": "*.Interact.bed"
            }
          },
          {
            "xls": {
              "type": "file",
              "description": "xls file with junction information",
              "pattern": "*.xls"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "junction plot",
              "pattern": "*.junction.pdf"
            }
          },
          {
            "events_pdf": {
              "type": "file",
              "description": "events plot",
              "pattern": "*.events.pdf"
            }
          },
          {
            "rscript": {
              "type": "file",
              "description": "Rscript to reproduce the plots",
              "pattern": "*.r"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file of execution",
              "pattern": "*.junction_annotation.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "rseqc_junctionsaturation",
      "path": "modules/nf-core/rseqc/junctionsaturation/meta.yml",
      "type": "module",
      "meta": {
        "name": "rseqc_junctionsaturation",
        "description": "compare detected splice junctions to reference gene model",
        "keywords": [
          "junctions",
          "splicing",
          "rnaseq"
        ],
        "tools": [
          {
            "rseqc": {
              "description": "RSeQC package provides a number of useful modules that can comprehensively evaluate\nhigh throughput sequence data especially RNA-seq data.\n",
              "homepage": "http://rseqc.sourceforge.net/",
              "documentation": "http://rseqc.sourceforge.net/",
              "doi": "10.1093/bioinformatics/bts356",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "the alignment in bam format",
              "pattern": "*.{bam}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "a bed file for the reference gene model",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "pdf": {
              "type": "file",
              "description": "Junction saturation report",
              "pattern": "*.pdf"
            }
          },
          {
            "rscript": {
              "type": "file",
              "description": "Junction saturation R-script",
              "pattern": "*.r"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "rseqc_readdistribution",
      "path": "modules/nf-core/rseqc/readdistribution/meta.yml",
      "type": "module",
      "meta": {
        "name": "rseqc_readdistribution",
        "description": "Calculate how mapped reads are distributed over genomic features",
        "keywords": [
          "read distribution",
          "genomics",
          "rnaseq"
        ],
        "tools": [
          {
            "rseqc": {
              "description": "RSeQC package provides a number of useful modules that can comprehensively evaluate\nhigh throughput sequence data especially RNA-seq data.\n",
              "homepage": "http://rseqc.sourceforge.net/",
              "documentation": "http://rseqc.sourceforge.net/",
              "doi": "10.1093/bioinformatics/bts356",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "the alignment in bam format",
              "pattern": "*.{bam}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "a bed file for the reference gene model",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "txt": {
              "type": "file",
              "description": "the read distribution report",
              "pattern": "*.read_distribution.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "rseqc_readduplication",
      "path": "modules/nf-core/rseqc/readduplication/meta.yml",
      "type": "module",
      "meta": {
        "name": "rseqc_readduplication",
        "description": "Calculate read duplication rate",
        "keywords": [
          "rnaseq",
          "duplication"
        ],
        "tools": [
          {
            "rseqc": {
              "description": "RSeQC package provides a number of useful modules that can comprehensively evaluate\nhigh throughput sequence data especially RNA-seq data.\n",
              "homepage": "http://rseqc.sourceforge.net/",
              "documentation": "http://rseqc.sourceforge.net/",
              "doi": "10.1093/bioinformatics/bts356",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "the alignment in bam format",
              "pattern": "*.{bam}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "a bed file for the reference gene model",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "seq_xls": {
              "type": "file",
              "description": "Read duplication rate determined from mapping position of read",
              "pattern": "*seq.DupRate.xls"
            }
          },
          {
            "pos_xls": {
              "type": "file",
              "description": "Read duplication rate determined from sequence of read",
              "pattern": "*pos.DupRate.xls"
            }
          },
          {
            "pdf": {
              "type": "file",
              "description": "plot of duplication rate",
              "pattern": "*.pdf"
            }
          },
          {
            "rscript": {
              "type": "file",
              "description": "script to reproduce the plot",
              "pattern": "*.R"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "rseqc_tin",
      "path": "modules/nf-core/rseqc/tin/meta.yml",
      "type": "module",
      "meta": {
        "name": "rseqc_tin",
        "description": "Calculte TIN (transcript integrity number) from RNA-seq reads",
        "keywords": [
          "rnaseq",
          "transcript",
          "integrity"
        ],
        "tools": [
          {
            "rseqc": {
              "description": "RSeQC package provides a number of useful modules that can comprehensively evaluate\nhigh throughput sequence data especially RNA-seq data.\n",
              "homepage": "http://rseqc.sourceforge.net/",
              "documentation": "http://rseqc.sourceforge.net/",
              "doi": "10.1093/bioinformatics/bts356",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Input BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Index for input BAM file",
              "pattern": "*.{bai}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file containing the reference gene model",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "txt": {
              "type": "file",
              "description": "TXT file containing tin.py results summary",
              "pattern": "*.txt"
            }
          },
          {
            "xls": {
              "type": "file",
              "description": "XLS file containing tin.py results",
              "pattern": "*.xls"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "rtgtools_format",
      "path": "modules/nf-core/rtgtools/format/meta.yml",
      "type": "module",
      "meta": {
        "name": "rtgtools_format",
        "description": "Converts the contents of sequence data files (FASTA/FASTQ/SAM/BAM) into the RTG Sequence Data File (SDF) format.",
        "keywords": [
          "rtg",
          "fasta",
          "fastq",
          "bam",
          "sam"
        ],
        "tools": [
          {
            "rtgtools": {
              "description": "RealTimeGenomics Tools -- Utilities for accurate VCF comparison and manipulation",
              "homepage": "https://www.realtimegenomics.com/products/rtg-tools",
              "documentation": "https://github.com/RealTimeGenomics/rtg-tools",
              "tool_dev_url": "https://github.com/RealTimeGenomics/rtg-tools",
              "licence": "['BSD']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input1": {
              "type": "file",
              "description": "FASTA, FASTQ, BAM or SAM file. This should be the left input file when using paired end FASTQ/FASTA data",
              "pattern": "*.{fasta,fa,fna,fastq,fastq.gz,fq,fq.gz,bam,sam}"
            }
          },
          {
            "input2": {
              "type": "file",
              "description": "The right input file when using paired end FASTQ/FASTA data",
              "pattern": "*.{fasta,fa,fna,fastq,fastq.gz,fq,fq.gz}"
            }
          },
          {
            "sam_rg": {
              "type": "file",
              "description": "A file containing a single readgroup header as a SAM header. This can also be supplied as a string in `task.ext.args` as `--sam-rg <rg_line>`.",
              "pattern": "*.{txt,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sdf": {
              "type": "directory",
              "description": "The sequence dictionary format folder created from the input file(s)",
              "pattern": "*.sdf"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "rtgtools_pedfilter",
      "path": "modules/nf-core/rtgtools/pedfilter/meta.yml",
      "type": "module",
      "meta": {
        "name": "rtgtools_pedfilter",
        "description": "Converts a PED file to VCF headers",
        "keywords": [
          "rtgtools",
          "pedfilter",
          "vcf",
          "ped"
        ],
        "tools": [
          {
            "rtgtools": {
              "description": "RealTimeGenomics Tools -- Utilities for accurate VCF comparison and manipulation",
              "homepage": "https://www.realtimegenomics.com/products/rtg-tools",
              "documentation": "https://github.com/RealTimeGenomics/rtg-tools",
              "tool_dev_url": "https://github.com/RealTimeGenomics/rtg-tools",
              "licence": "['BSD']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "The input file, can be either a PED or a VCF file",
              "pattern": "*.{vcf,vcf.gz,ped}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "The output file, can be either a filtered PED file\nor a VCF file containing the PED headers (needs --vcf as argument)\n",
              "pattern": "*.{vcf.gz,ped}"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "rtgtools_rocplot",
      "path": "modules/nf-core/rtgtools/rocplot/meta.yml",
      "type": "module",
      "meta": {
        "name": "rtgtools_rocplot",
        "description": "Plot ROC curves from vcfeval ROC data files, either to an image, or an interactive GUI. The interactive GUI isn't possible for nextflow.",
        "keywords": [
          "rtgtools",
          "rocplot",
          "validation",
          "vcf"
        ],
        "tools": [
          {
            "rtgtools": {
              "description": "RealTimeGenomics Tools -- Utilities for accurate VCF comparison and manipulation",
              "homepage": "https://www.realtimegenomics.com/products/rtg-tools",
              "documentation": "https://github.com/RealTimeGenomics/rtg-tools",
              "tool_dev_url": "https://github.com/RealTimeGenomics/rtg-tools",
              "licence": "['BSD']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Input TSV ROC files created with RTGTOOLS_VCFEVAL",
              "pattern": "*.tsv.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "png": {
              "type": "file",
              "description": "The resulting rocplot in PNG format",
              "pattern": "*.png"
            }
          },
          {
            "svg": {
              "type": "file",
              "description": "The resulting rocplot in SVG format",
              "pattern": "*.svg"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "rtgtools_vcfeval",
      "path": "modules/nf-core/rtgtools/vcfeval/meta.yml",
      "type": "module",
      "meta": {
        "name": "rtgtools_vcfeval",
        "description": "The VCFeval tool of RTG tools. It is used to evaluate called variants for agreement with a baseline variant set",
        "keywords": [
          "benchmarking",
          "vcf",
          "rtg-tools"
        ],
        "tools": [
          {
            "rtgtools": {
              "description": "RealTimeGenomics Tools -- Utilities for accurate VCF comparison and manipulation",
              "homepage": "https://www.realtimegenomics.com/products/rtg-tools",
              "documentation": "https://github.com/RealTimeGenomics/rtg-tools",
              "tool_dev_url": "https://github.com/RealTimeGenomics/rtg-tools",
              "licence": "['BSD']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "query_vcf": {
              "type": "file",
              "description": "A VCF with called variants to benchmark against the standard",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "query_vcf_index": {
              "type": "file",
              "description": "The index of the called VCF (optional)",
              "pattern": "*.tbi"
            }
          },
          {
            "truth_vcf": {
              "type": "file",
              "description": "A standard VCF to compare against",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "truth_vcf_index": {
              "type": "file",
              "description": "The index of the standard VCF (optional)",
              "pattern": "*.tbi"
            }
          },
          {
            "truth_bed": {
              "type": "file",
              "description": "A BED file containining the strict regions where VCFeval should only evaluate the fully overlapping variants (optional)",
              "pattern": "*.bed"
            }
          },
          {
            "evaluation_bed": {
              "type": "file",
              "description": "A BED file containing the regions where VCFeval will evaluate every fully and partially overlapping variant (optional)",
              "pattern": "*.bed"
            }
          },
          {
            "sdf": {
              "type": "file",
              "description": "The SDF (RTG Sequence Data File) folder of the reference genome"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tp_vcf": {
              "type": "file",
              "description": "A VCF file for the true positive variants",
              "pattern": "*.tp.vcf.gz"
            }
          },
          {
            "tp_tbi": {
              "type": "file",
              "description": "The index of the VCF file for the true positive variants",
              "pattern": "*.tp.vcf.gz.tbi"
            }
          },
          {
            "fn_vcf": {
              "type": "file",
              "description": "A VCF file for the false negative variants",
              "pattern": "*.fn.vcf.gz"
            }
          },
          {
            "fn_tbi": {
              "type": "file",
              "description": "The index of the VCF file for the false negative variants",
              "pattern": "*.fn.vcf.gz.tbi"
            }
          },
          {
            "fp_vcf": {
              "type": "file",
              "description": "A VCF file for the false positive variants",
              "pattern": "*.fp.vcf.gz"
            }
          },
          {
            "fp_tbi": {
              "type": "file",
              "description": "The index of the VCF file for the false positive variants",
              "pattern": "*.fp.vcf.gz.tbi"
            }
          },
          {
            "baseline_vcf": {
              "type": "file",
              "description": "A VCF file for the true positive variants from the baseline",
              "pattern": "*.tp-baseline.vcf.gz"
            }
          },
          {
            "baseline_tbi": {
              "type": "file",
              "description": "The index of the VCF file for the true positive variants from the baseline",
              "pattern": "*.tp-baseline.vcf.gz.tbi"
            }
          },
          {
            "snp_roc": {
              "type": "file",
              "description": "TSV files containing ROC data for the SNPs",
              "pattern": "*.snp_roc.tsv.gz"
            }
          },
          {
            "non_snp_roc": {
              "type": "file",
              "description": "TSV files containing ROC data for all variants except SNPs",
              "pattern": "*.non_snp_roc.tsv.gz"
            }
          },
          {
            "weighted_roc": {
              "type": "file",
              "description": "TSV files containing weighted ROC data for all variants",
              "pattern": "*.weighted_snp_roc.tsv.gz"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "A TXT file containing the summary of the evaluation",
              "pattern": "*.summary.txt"
            }
          },
          {
            "phasing": {
              "type": "file",
              "description": "A TXT file containing the data on the phasing",
              "pattern": "*.phasing.txt"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "salmon_index",
      "path": "modules/nf-core/salmon/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "salmon_index",
        "description": "Create index for salmon",
        "keywords": [
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "salmon": {
              "description": "Salmon is a tool for wicked-fast transcript quantification from RNA-seq data\n",
              "homepage": "https://salmon.readthedocs.io/en/latest/salmon.html",
              "manual": "https://salmon.readthedocs.io/en/latest/salmon.html",
              "doi": "10.1038/nmeth.4197",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "genome_fasta": {
              "type": "file",
              "description": "Fasta file of the reference genome"
            }
          },
          {
            "transcriptome_fasta": {
              "type": "file",
              "description": "Fasta file of the reference transcriptome"
            }
          }
        ],
        "output": [
          {
            "index": {
              "type": "directory",
              "description": "Folder containing the star index files",
              "pattern": "salmon"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kevinmenden",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "salmon_quant",
      "path": "modules/nf-core/salmon/quant/meta.yml",
      "type": "module",
      "meta": {
        "name": "salmon_quant",
        "description": "gene/transcript quantification with Salmon",
        "keywords": [
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "salmon": {
              "description": "Salmon is a tool for wicked-fast transcript quantification from RNA-seq data\n",
              "homepage": "https://salmon.readthedocs.io/en/latest/salmon.html",
              "manual": "https://salmon.readthedocs.io/en/latest/salmon.html",
              "doi": "10.1038/nmeth.4197",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files for single-end or paired-end data.\nMultiple single-end fastqs or pairs of paired-end fastqs are\nhandled.\n"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "Folder containing the star index files"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "GTF of the reference transcriptome"
            }
          },
          {
            "transcriptome_fasta": {
              "type": "file",
              "description": "Fasta file of the reference transcriptome"
            }
          },
          {
            "alignment_mode": {
              "type": "boolean",
              "description": "whether to run salmon in alignment mode"
            }
          },
          {
            "lib_type": {
              "type": "string",
              "description": "Override library type inferred based on strandedness defined in meta object\n"
            }
          }
        ],
        "output": [
          {
            "results": {
              "type": "directory",
              "description": "Folder containing the quantification results for a specific sample",
              "pattern": "${prefix}"
            }
          },
          {
            "json_info": {
              "type": "file",
              "description": "File containing meta information from Salmon quant",
              "pattern": "*info.json"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kevinmenden",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "salsa2",
      "path": "modules/nf-core/salsa2/meta.yml",
      "type": "module",
      "meta": {
        "name": "salsa2",
        "description": "SALSA, A tool to scaffold long read assemblies with HiC",
        "keywords": [
          "assembly",
          "hi-c",
          "scaffolding",
          "long reads",
          "salsa",
          "salsa2"
        ],
        "tools": [
          {
            "salsa2": {
              "description": "Salsa is a tool to scaffold long read assemblies with Hi-C.",
              "homepage": "https://github.com/marbl/SALSA",
              "documentation": "https://github.com/marbl/SALSA",
              "tool_dev_url": "https://github.com/marbl/SALSA",
              "doi": "10.1186/s12864-017-3879-z",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Fasta file of assembly. Headers must not contain ':'",
              "pattern": "*.{fa, fasta}"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Fasta index file of assembly containing the length of contigs.",
              "pattern": "*.{fa.fai, fasta.fai}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file of alignments sorted by read names, e.g., from HiC-Pro",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Sequences for the scaffolds generated by the algorithm",
              "pattern": "*_scaffolds_FINAL.fasta"
            }
          },
          {
            "agp": {
              "type": "file",
              "description": "AGP style output for the scaffolds describing the assignment, orientation and ordering of contigs along the scaffolds",
              "pattern": "*_scaffolds_FINAL.agp"
            }
          },
          {
            "agp_original_coordinates": {
              "type": "file",
              "description": "Secondary output AGP file with names and coordinates matching the original input assembly (optional)",
              "pattern": "*scaffolds_FINAL.original-coordinates.agp"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@scorreard"
        ]
      }
    },
    {
      "name": "sam2lca_analyze",
      "path": "modules/nf-core/sam2lca/analyze/meta.yml",
      "type": "module",
      "meta": {
        "name": "sam2lca_analyze",
        "description": "Calling lowest common ancestors from multi-mapped reads in SAM/BAM/CRAM files",
        "keywords": [
          "LCA",
          "alignment",
          "bam",
          "metagenomics",
          "Ancestor",
          "multimapper"
        ],
        "tools": [
          {
            "sam2lca": {
              "description": "Lowest Common Ancestor on SAM/BAM/CRAM alignment files",
              "homepage": "https://github.com/maxibor/sam2lca",
              "documentation": "https://sam2lca.readthedocs.io",
              "doi": "10.21105/joss.04360",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM/CRAM/SAM index",
              "pattern": "*.{bai,.crai}"
            }
          },
          {
            "database": {
              "type": "file",
              "description": "Directory containing the sam2lca database",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "CSV file containing the sam2lca results",
              "pattern": "*.csv"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON file containing the sam2lca results",
              "pattern": "*.json"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Optional sorted BAM/CRAM/SAM file annotated with LCA taxonomic informations",
              "pattern": "*.bam"
            }
          }
        ],
        "authors": [
          "@maxibor"
        ]
      }
    },
    {
      "name": "sambamba_flagstat",
      "path": "modules/nf-core/sambamba/flagstat/meta.yml",
      "type": "module",
      "meta": {
        "name": "sambamba_flagstat",
        "description": "Outputs some statistics drawn from read flags.",
        "keywords": [
          "stats",
          "flagstat",
          "sambamba"
        ],
        "tools": [
          {
            "sambamba": {
              "description": "Tools for working with SAM/BAM data",
              "homepage": "https://lomereiter.github.io/sambamba/docs/sambamba-view.html",
              "documentation": "https://lomereiter.github.io/sambamba/docs/sambamba-view.html",
              "tool_dev_url": "https://github.com/biod/sambamba",
              "licence": "['GPL v2']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.{bam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Stats file",
              "pattern": "*.{stats}"
            }
          }
        ],
        "authors": [
          "@kubranarci"
        ]
      }
    },
    {
      "name": "sambamba_markdup",
      "path": "modules/nf-core/sambamba/markdup/meta.yml",
      "type": "module",
      "meta": {
        "name": "sambamba_markdup",
        "description": "find and mark duplicate reads in BAM file",
        "keywords": [
          "markduplicates",
          "duplicates",
          "bam"
        ],
        "tools": [
          {
            "sambamba": {
              "description": "process your BAM data faster!",
              "homepage": "https://lomereiter.github.io/sambamba/docs/sambamba-view.html",
              "documentation": "https://lomereiter.github.io/sambamba/docs/sambamba-view.html",
              "tool_dev_url": "https://github.com/biod/sambamba",
              "licence": "['GPL v2']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "authors": [
          "@BioInf2305"
        ]
      }
    },
    {
      "name": "samblaster",
      "path": "modules/nf-core/samblaster/meta.yml",
      "type": "module",
      "meta": {
        "name": "samblaster",
        "description": "This module combines samtools and samblaster in order to use\nsamblaster capability to filter or tag SAM files, with the advantage\nof maintaining both input and output in BAM format.\nSamblaster input must contain a sequence header: for this reason it has been piped\nwith the \"samtools view -h\" command.\nAdditional desired arguments for samtools can be passed using:\noptions.args2 for the input bam file\noptions.args3 for the output bam file\n",
        "keywords": [
          "sort",
          "duplicate marking",
          "bam"
        ],
        "tools": [
          {
            "samblaster": {
              "description": "samblaster is a fast and flexible program for marking duplicates in read-id grouped paired-end SAM files.\nIt can also optionally output discordant read pairs and/or split read mappings to separate SAM files,\nand/or unmapped/clipped reads to a separate FASTQ file.\nBy default, samblaster reads SAM input from stdin and writes SAM to stdout.\n",
              "documentation": "https://github.com/GregoryFaust/samblaster",
              "tool_dev_url": "https://github.com/GregoryFaust/samblaster",
              "doi": "10.1093/bioinformatics/btu314",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Tagged or filtered BAM file",
              "pattern": "*.bam"
            }
          }
        ],
        "authors": [
          "@lescai"
        ]
      },
      "subworkflows": [
        "fastq_create_umi_consensus_fgbio"
      ],
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "samtools_ampliconclip",
      "path": "modules/nf-core/samtools/ampliconclip/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_ampliconclip",
        "description": "Clips read alignments where they match BED file defined regions",
        "keywords": [
          "amplicon",
          "clipping",
          "ampliconclip",
          "samtools"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file of regions to be removed (e.g. amplicon primers)",
              "pattern": "*.{bed}"
            }
          },
          {
            "save_cliprejects": {
              "type": "value",
              "description": "Save filtered reads to a file"
            }
          },
          {
            "save_clipstats": {
              "type": "value",
              "description": "Save clipping stats to a file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Clipped reads BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Clipping statistics text file",
              "pattern": "*.{clipstats.txt}"
            }
          },
          {
            "rejects_bam": {
              "type": "file",
              "description": "Filtered reads BAM file",
              "pattern": "*.{cliprejects.bam}"
            }
          }
        ],
        "authors": [
          "@bjohnnyd"
        ]
      }
    },
    {
      "name": "samtools_bam2fq",
      "path": "modules/nf-core/samtools/bam2fq/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_bam2fq",
        "description": "The module uses bam2fq method from samtools to\nconvert a SAM, BAM or CRAM file to FASTQ format\n",
        "keywords": [
          "bam2fq",
          "samtools",
          "fastq"
        ],
        "tools": [
          {
            "samtools": {
              "description": "Tools for dealing with SAM, BAM and CRAM files",
              "documentation": "http://www.htslib.org/doc/1.1/samtools.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "inputbam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "split": {
              "type": "boolean",
              "description": "TRUE/FALSE value to indicate if reads should be separated into\n/1, /2 and if present other, or singleton.\nNote: choosing TRUE will generate 4 different files.\nChoosing FALSE will produce a single file, which will be interleaved in case\nthe input contains paired reads.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "FASTQ files, which will be either a group of 4 files (read_1, read_2, other and singleton)\nor a single interleaved .fq.gz file if the user chooses not to split the reads.\n",
              "pattern": "*.fq.gz"
            }
          }
        ],
        "authors": [
          "@lescai"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "samtools_calmd",
      "path": "modules/nf-core/samtools/calmd/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_calmd",
        "description": "calculates MD and NM tags",
        "keywords": [
          "calmd",
          "bam",
          "cram"
        ],
        "tools": [
          {
            "samtoolscalmd": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "tool_dev_url": "https://github.com/samtools/samtools",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA ref file",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "authors": [
          "@JackCurragh"
        ]
      }
    },
    {
      "name": "samtools_cat",
      "path": "modules/nf-core/samtools/cat/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_cat",
        "description": "Concatenate BAM or CRAM file",
        "keywords": [
          "merge",
          "bam",
          "sam",
          "cram"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_files": {
              "type": "file",
              "description": "BAM/CRAM files",
              "pattern": "*.{bam,cram}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Concatenated BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "cram": {
              "type": "file",
              "description": "Concatenated CRAM file",
              "pattern": "*.{cram}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "samtools_collate",
      "path": "modules/nf-core/samtools/collate/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_collate",
        "description": "shuffles and groups reads together by their names",
        "keywords": [
          "collate",
          "bam"
        ],
        "tools": [
          {
            "samtools": {
              "description": "Tools for dealing with SAM, BAM and CRAM files",
              "homepage": "http://www.htslib.org",
              "documentation": "https://www.htslib.org/doc/samtools-collate.html",
              "tool_dev_url": "https://github.com/samtools/samtools",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "Collated BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "authors": [
          "@priyanka-surana"
        ]
      }
    },
    {
      "name": "samtools_collatefastq",
      "path": "modules/nf-core/samtools/collatefastq/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_collatefastq",
        "description": "The module uses collate and then fastq methods from samtools to\nconvert a SAM, BAM or CRAM file to FASTQ format\n",
        "keywords": [
          "bam2fq",
          "samtools",
          "fastq"
        ],
        "tools": [
          {
            "samtools": {
              "description": "Tools for dealing with SAM, BAM and CRAM files",
              "documentation": "http://www.htslib.org/doc/1.1/samtools.html",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome fasta file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "interleave": {
              "type": "boolean",
              "description": "If true, the output is a single interleaved paired-end FASTQ\nIf false, the output split paired-end FASTQ\n",
              "default": false
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "R1 and R2 FASTQ files\n",
              "pattern": "*_{1,2}.fq.gz"
            }
          },
          {
            "fastq_interleaved": {
              "type": "file",
              "description": "Interleaved paired end FASTQ files\n",
              "pattern": "*_interleaved.fq.gz"
            }
          },
          {
            "fastq_other": {
              "type": "file",
              "description": "FASTQ files with reads where the READ1 and READ2 FLAG bits set are either both set or both unset.\n",
              "pattern": "*_other.fq.gz"
            }
          },
          {
            "fastq_singleton": {
              "type": "file",
              "description": "FASTQ files with singleton reads.\n",
              "pattern": "*_singleton.fq.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@lescai",
          "@maxulysse",
          "@matthdsm"
        ]
      },
      "pipelines": [
        {
          "name": "hlatyping",
          "version": "2.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "samtools_convert",
      "path": "modules/nf-core/samtools/convert/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_convert",
        "description": "convert and then index CRAM -> BAM or BAM -> CRAM file",
        "keywords": [
          "view",
          "index",
          "bam",
          "cram"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BAM/CRAM index file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference file to create the CRAM file",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "alignment_index": {
              "type": "file",
              "description": "filtered/converted BAM/CRAM file + index",
              "pattern": "*{.bam/cram,.bai/crai}"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "*.{version.txt}"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen",
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "samtools_coverage",
      "path": "modules/nf-core/samtools/coverage/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_coverage",
        "description": "produces a histogram or table of coverage per chromosome",
        "keywords": [
          "depth",
          "samtools",
          "bam"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAM/CRAM index file",
              "pattern": "*.{bai,crai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "coverage": {
              "type": "file",
              "description": "Tabulated text containing the coverage at each position or region or an ASCII-art histogram (with --histogram).",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@LouisLeNezet"
        ]
      }
    },
    {
      "name": "samtools_depth",
      "path": "modules/nf-core/samtools/depth/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_depth",
        "description": "Computes the depth at each position or region.",
        "keywords": [
          "depth",
          "samtools",
          "statistics",
          "coverage"
        ],
        "tools": [
          {
            "samtools": {
              "description": "Tools for dealing with SAM, BAM and CRAM files; samtools depth – computes the read depth at each position or region",
              "homepage": "http://www.htslib.org",
              "documentation": "http://www.htslib.org/doc/samtools-depth.html",
              "tool_dev_url": "https://github.com/samtools/samtools",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "sorted BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "The output of samtools depth has three columns - the name of the contig or chromosome, the position and the number of reads aligned at that position",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@louperelo"
        ]
      }
    },
    {
      "name": "samtools_dict",
      "path": "modules/nf-core/samtools/dict/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_dict",
        "description": "Create a sequence dictionary file from a FASTA file",
        "keywords": [
          "dict",
          "fasta"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "FASTA dictionary file",
              "pattern": "*.{dict}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@muffato"
        ]
      }
    },
    {
      "name": "samtools_faidx",
      "path": "modules/nf-core/samtools/faidx/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_faidx",
        "description": "Index FASTA file",
        "keywords": [
          "index",
          "fasta",
          "faidx"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "FASTA index file",
              "pattern": "*.{fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "FASTA index file",
              "pattern": "*.{fai}"
            }
          },
          {
            "gzi": {
              "type": "file",
              "description": "Optional gzip index file for compressed inputs",
              "pattern": "*.gzi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@ewels",
          "@phue"
        ]
      },
      "pipelines": [
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "crisprseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "mag",
          "version": "2.3.2"
        },
        {
          "name": "methylseq",
          "version": "2.4.0"
        },
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "pangenome",
          "version": "dev"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "samtools_fasta",
      "path": "modules/nf-core/samtools/fasta/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_fasta",
        "description": "Converts a SAM/BAM/CRAM file to FASTA",
        "keywords": [
          "bam",
          "sam",
          "cram",
          "fasta"
        ],
        "tools": [
          {
            "samtools": {
              "description": "Tools for dealing with SAM, BAM and CRAM files",
              "homepage": "http://www.htslib.org",
              "documentation": "https://www.htslib.org/doc/samtools-fasta.html",
              "tool_dev_url": "https://github.com/samtools/samtools",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "interleave": {
              "type": "boolean",
              "description": "Set true for interleaved fasta files"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Compressed FASTA file(s) with reads with either the READ1 or READ2 flag set in separate files.",
              "pattern": "*_{1,2}.fasta.gz"
            }
          },
          {
            "interleaved": {
              "type": "file",
              "description": "Compressed FASTA file with reads with either the READ1 or READ2 flag set in a combined file. Needs collated input file.",
              "pattern": "*_interleaved.fasta.gz"
            }
          },
          {
            "singleton": {
              "type": "file",
              "description": "Compressed FASTA file with singleton reads",
              "pattern": "*_singleton.fasta.gz"
            }
          },
          {
            "other": {
              "type": "file",
              "description": "Compressed FASTA file with reads with either both READ1 and READ2 flags set or unset",
              "pattern": "*_other.fasta.gz"
            }
          }
        ],
        "authors": [
          "@priyanka-surana"
        ]
      }
    },
    {
      "name": "samtools_fastq",
      "path": "modules/nf-core/samtools/fastq/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_fastq",
        "description": "Converts a SAM/BAM/CRAM file to FASTQ",
        "keywords": [
          "bam",
          "sam",
          "cram",
          "fastq"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "interleave": {
              "type": "boolean",
              "description": "Set true for interleaved fastq file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Compressed FASTQ file(s) with reads with either the READ1 or READ2 flag set in separate files.",
              "pattern": "*_{1,2}.fastq.gz"
            }
          },
          {
            "interleaved": {
              "type": "file",
              "description": "Compressed FASTQ file with reads with either the READ1 or READ2 flag set in a combined file. Needs collated input file.",
              "pattern": "*_interleaved.fastq.gz"
            }
          },
          {
            "singleton": {
              "type": "file",
              "description": "Compressed FASTQ file with singleton reads",
              "pattern": "*_singleton.fastq.gz"
            }
          },
          {
            "other": {
              "type": "file",
              "description": "Compressed FASTQ file with reads with either both READ1 and READ2 flags set or unset",
              "pattern": "*_other.fastq.gz"
            }
          }
        ],
        "authors": [
          "@priyanka-surana",
          "@suzannejin"
        ]
      },
      "pipelines": [
        {
          "name": "genomeassembler",
          "version": "dev"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        }
      ]
    },
    {
      "name": "samtools_fixmate",
      "path": "modules/nf-core/samtools/fixmate/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_fixmate",
        "description": "Samtools fixmate is a tool that can fill in information (insert size, cigar, mapq) about paired end reads onto the corresponding other read. Also has options to remove secondary/unmapped alignments and recalculate whether reads are proper pairs.",
        "keywords": [
          "fixmate",
          "samtools",
          "insert size",
          "repair",
          "bam",
          "paired",
          "read pairs"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "tool_dev_url": "https://github.com/samtools/samtools",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file, must be sorted by name, not coordinate",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "A BAM/CRAM/SAM file with mate information added and/or proper pairs recalled",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "authors": [
          "@sppearce"
        ]
      }
    },
    {
      "name": "samtools_flagstat",
      "path": "modules/nf-core/samtools/flagstat/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_flagstat",
        "description": "Counts the number of alignments in a BAM/CRAM/SAM file for each FLAG type",
        "keywords": [
          "stats",
          "mapping",
          "counts",
          "bam",
          "sam",
          "cram"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Index for BAM/CRAM/SAM file",
              "pattern": "*.{bai,crai,sai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "flagstat": {
              "type": "file",
              "description": "File containing samtools flagstat output",
              "pattern": "*.{flagstat}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "methylseq",
          "version": "2.4.0"
        },
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "smrnaseq",
          "version": "2.2.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "samtools_getrg",
      "path": "modules/nf-core/samtools/getrg/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_getrg",
        "description": "filter/convert SAM/BAM/CRAM file",
        "keywords": [
          "view",
          "bam",
          "sam",
          "cram",
          "readgroup"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "readgroup": {
              "type": "stdout",
              "description": "File containing readgroup string(s)"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "samtools_idxstats",
      "path": "modules/nf-core/samtools/idxstats/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_idxstats",
        "description": "Reports alignment summary statistics for a BAM/CRAM/SAM file",
        "keywords": [
          "stats",
          "mapping",
          "counts",
          "chromosome",
          "bam",
          "sam",
          "cram"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Index for BAM/CRAM/SAM file",
              "pattern": "*.{bai,crai,sai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "idxstats": {
              "type": "file",
              "description": "File containing samtools idxstats output",
              "pattern": "*.{idxstats}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "smrnaseq",
          "version": "2.2.1"
        },
        {
          "name": "ssds",
          "version": "dev"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "samtools_index",
      "path": "modules/nf-core/samtools/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_index",
        "description": "Index SAM/BAM/CRAM file",
        "keywords": [
          "index",
          "bam",
          "sam",
          "cram"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "crai": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "csi": {
              "type": "file",
              "description": "CSI index file",
              "pattern": "*.{csi}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@ewels",
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "bacass",
          "version": "2.0.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "crisprseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "methylseq",
          "version": "2.4.0"
        },
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "smrnaseq",
          "version": "2.2.1"
        },
        {
          "name": "ssds",
          "version": "dev"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "samtools_markdup",
      "path": "modules/nf-core/samtools/markdup/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_markdup",
        "description": "mark duplicate alignments in a coordinate sorted file",
        "keywords": [
          "bam",
          "duplicates",
          "markduplicates",
          "samtools"
        ],
        "tools": [
          {
            "samtools": {
              "description": "Tools for dealing with SAM, BAM and CRAM files",
              "homepage": "http://www.htslib.org",
              "documentation": "https://www.htslib.org/doc/samtools-markdup.html",
              "tool_dev_url": "https://github.com/samtools/samtools",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "Sorted BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "authors": [
          "@priyanka-surana"
        ]
      }
    },
    {
      "name": "samtools_merge",
      "path": "modules/nf-core/samtools/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_merge",
        "description": "Merge BAM or CRAM file",
        "keywords": [
          "merge",
          "bam",
          "sam",
          "cram"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_files": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference file the CRAM was created with (optional)",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of the reference file the CRAM was created with (optional)",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "cram": {
              "type": "file",
              "description": "CRAM file",
              "pattern": "*.{cram}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "csi": {
              "type": "file",
              "description": "BAM index file (optional)",
              "pattern": "*.csi"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@yuukiiwa ",
          "@maxulysse",
          "@FriederikeHanssen",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "samtools_mpileup",
      "path": "modules/nf-core/samtools/mpileup/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_mpileup",
        "description": "BAM",
        "keywords": [
          "mpileup",
          "bam",
          "sam",
          "cram"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA reference file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Interval FILE",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "mpileup": {
              "type": "file",
              "description": "mpileup file",
              "pattern": "*.{mpileup}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@joseespinosa"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "samtools_sort",
      "path": "modules/nf-core/samtools/sort/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_sort",
        "description": "Sort SAM/BAM/CRAM file",
        "keywords": [
          "sort",
          "bam",
          "sam",
          "cram"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "csi": {
              "type": "file",
              "description": "BAM index file (optional)",
              "pattern": "*.csi"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@ewels"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "bacass",
          "version": "2.0.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "methylseq",
          "version": "2.4.0"
        },
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "smrnaseq",
          "version": "2.2.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "samtools_stats",
      "path": "modules/nf-core/samtools/stats/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_stats",
        "description": "Produces comprehensive statistics from SAM/BAM/CRAM file",
        "keywords": [
          "statistics",
          "counts",
          "bam",
          "sam",
          "cram"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file from alignment",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAI/CRAI file from alignment",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference file the CRAM was created with (optional)",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "File containing samtools stats output",
              "pattern": "*.{stats}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@FriederikeHanssen",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "methylseq",
          "version": "2.4.0"
        },
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "smrnaseq",
          "version": "2.2.1"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "samtools_view",
      "path": "modules/nf-core/samtools/view/meta.yml",
      "type": "module",
      "meta": {
        "name": "samtools_view",
        "description": "filter/convert SAM/BAM/CRAM file",
        "keywords": [
          "view",
          "bam",
          "sam",
          "cram"
        ],
        "tools": [
          {
            "samtools": {
              "description": "SAMtools is a set of utilities for interacting with and post-processing\nshort DNA sequence read alignments in the SAM, BAM and CRAM formats, written by Heng Li.\nThese files are generated as output by short read aligners like BWA.\n",
              "homepage": "http://www.htslib.org/",
              "documentation": "http://www.htslib.org/doc/samtools.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BAM.BAI/BAM.CSI/CRAM.CRAI file (optional)",
              "pattern": "*.{.bai,.csi,.crai}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference file the CRAM was created with (optional)",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "qname": {
              "type": "file",
              "description": "Optional file with read names to output only select alignments",
              "pattern": "*.{txt,list}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "optional filtered/converted BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "cram": {
              "type": "file",
              "description": "optional filtered/converted CRAM file",
              "pattern": "*.{cram}"
            }
          },
          {
            "sam": {
              "type": "file",
              "description": "optional filtered/converted SAM file",
              "pattern": "*.{sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "optional BAM file index",
              "pattern": "*.{bai}"
            }
          },
          {
            "csi": {
              "type": "file",
              "description": "optional tabix BAM file index",
              "pattern": "*.{csi}"
            }
          },
          {
            "crai": {
              "type": "file",
              "description": "optional CRAM file index",
              "pattern": "*.{crai}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@joseespinosa",
          "@FriederikeHanssen",
          "@priyanka-surana"
        ]
      },
      "pipelines": [
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "hlatyping",
          "version": "2.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "ssds",
          "version": "dev"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "scimap_mcmicro",
      "path": "modules/nf-core/scimap/mcmicro/meta.yml",
      "type": "module",
      "meta": {
        "name": "scimap_mcmicro",
        "description": "SCIMAP is a suite of tools that enables spatial single-cell analyses",
        "keywords": [
          "sort",
          "spatial",
          "single cell"
        ],
        "tools": [
          {
            "scimap": {
              "description": "Scimap is a scalable toolkit for analyzing spatial molecular data.",
              "homepage": "https://scimap.xyz/",
              "documentation": "https://scimap.xyz/All%20Functions/A.%20Pre%20Processing/sm.pp.mcmicro_to_scimap/",
              "tool_dev_url": "https://github.com/labsyspharm/scimap",
              "licence": "MIT License"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "cellByFeature": {
              "type": "file",
              "description": "CSV file with cell by feature table",
              "pattern": "*.{csv}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "annotedDataCsv": {
              "type": "file",
              "description": "Sorted CSV file",
              "pattern": "*.{csv}"
            }
          },
          {
            "annotedDataH5ad": {
              "type": "file",
              "description": "Sorted H5AD file",
              "pattern": "*.{h5ad}"
            }
          }
        ],
        "authors": [
          "@luiskuhn"
        ]
      }
    },
    {
      "name": "scoary",
      "path": "modules/nf-core/scoary/meta.yml",
      "type": "module",
      "meta": {
        "name": "scoary",
        "description": "Use pangenome outputs for GWAS",
        "keywords": [
          "gwas",
          "pangenome",
          "prokaryote"
        ],
        "tools": [
          {
            "scoary": {
              "description": "Microbial pan-GWAS using the output from Roary",
              "homepage": "https://github.com/AdmiralenOla/Scoary",
              "documentation": "https://github.com/AdmiralenOla/Scoary",
              "tool_dev_url": "https://github.com/AdmiralenOla/Scoary",
              "doi": "10.1186/s13059-016-1108-8",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "genes": {
              "type": "file",
              "description": "A presence/absence matrix of genes in the pan-genome",
              "pattern": "*.csv"
            }
          },
          {
            "traits": {
              "type": "file",
              "description": "A CSV file containing trait information per-sample",
              "pattern": "*.csv"
            }
          },
          {
            "tree": {
              "type": "file",
              "description": "A Newick formtted tree for phylogenetic analyses",
              "pattern": "*.{dnd,nwk,treefile}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "Gene associations in a CSV file per trait",
              "pattern": "*.csv"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "scramble_clusteranalysis",
      "path": "modules/nf-core/scramble/clusteranalysis/meta.yml",
      "type": "module",
      "meta": {
        "name": "scramble_clusteranalysis",
        "description": "The Cluster Analysis tool of Scramble analyses and interprets the soft-clipped clusters found by `cluster_identifier`",
        "keywords": [
          "soft-clipped clusters",
          "scramble"
        ],
        "tools": [
          {
            "scramble": {
              "description": "Soft Clipped Read Alignment Mapper",
              "homepage": "https://github.com/GeneDx/scramble",
              "documentation": "https://github.com/GeneDx/scramble",
              "tool_dev_url": "https://github.com/GeneDx/scramble",
              "licence": "['CC']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "clusters": {
              "type": "file",
              "description": "Tab-delimited text file containing soft-clipped clusters. Has to be generated using scramble/clusteridentifier",
              "pattern": "*clusters.txt"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Optional fasta reference file. This file is needed to create a VCF file and to evaluate predicted deletions.",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "mei_ref": {
              "type": "file",
              "description": "Optional fasta file containing the MEI reference. This file should only be supplied in special occasions where the default isn't correct",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "meis_tab": {
              "type": "file",
              "description": "Tab-delimited text file containing MEI calls",
              "pattern": "*_MEIs.txt"
            }
          },
          {
            "dels_tab": {
              "type": "file",
              "description": "Tab-delimited text file containing predicted deletions",
              "pattern": "*_PredictedDeletions.txt"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "A VCF file containing the MEI calls and/or the predicted deletions (depending on the given arguments)",
              "pattern": "*.vcf"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "scramble_clusteridentifier",
      "path": "modules/nf-core/scramble/clusteridentifier/meta.yml",
      "type": "module",
      "meta": {
        "name": "scramble_clusteridentifier",
        "description": "The cluster_identifier tool of Scramble identifies soft clipped clusters",
        "keywords": [
          "bam",
          "cram",
          "soft-clipped clusters"
        ],
        "tools": [
          {
            "scramble": {
              "description": "Soft Clipped Read Alignment Mapper",
              "homepage": "https://github.com/GeneDx/scramble",
              "documentation": "https://github.com/GeneDx/scramble",
              "tool_dev_url": "https://github.com/GeneDx/scramble",
              "licence": "['CC']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "Index of the BAM/CRAM file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference FASTA file (mandatory when using CRAM files)",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "clusters": {
              "type": "file",
              "description": "Tab-delimited file containing the soft-clipped clusters",
              "pattern": "*.clusters.txt"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "seacr_callpeak",
      "path": "modules/nf-core/seacr/callpeak/meta.yml",
      "type": "module",
      "meta": {
        "name": "seacr_callpeak",
        "description": "Call peaks using SEACR on sequenced reads in bedgraph format",
        "keywords": [
          "peak-caller",
          "peaks",
          "bedgraph",
          "cut&tag",
          "cut&run",
          "chromatin",
          "seacr"
        ],
        "tools": [
          {
            "seacr": {
              "description": "SEACR is intended to call peaks and enriched regions from sparse CUT&RUN\nor chromatin profiling data in which background is dominated by \"zeroes\"\n(i.e. regions with no read coverage).\n",
              "homepage": "https://github.com/FredHutch/SEACR",
              "documentation": "https://github.com/FredHutch/SEACR",
              "licence": [
                "GPL-2.0-only"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bedgraph": {
              "type": "file",
              "description": "The target bedgraph file from which the peaks will be calculated.\n"
            }
          },
          {
            "ctrlbedgraph": {
              "type": "file",
              "description": "Control (IgG) data bedgraph file to generate an empirical threshold for peak calling.\n"
            }
          },
          {
            "threshold": {
              "type": "integer",
              "description": "Threshold value used to call peaks if the ctrlbedgraph input is set to []. Set to 1 if using a control bedgraph\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Bed file containing the calculated peaks.",
              "pattern": "*.bed"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@chris-cheshire"
        ]
      },
      "pipelines": [
        {
          "name": "cutandrun",
          "version": "3.1"
        }
      ]
    },
    {
      "name": "segemehl_align",
      "path": "modules/nf-core/segemehl/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "segemehl_align",
        "description": "A multi-split mapping algorithm for circular RNA, splicing, trans-splicing and fusion detection",
        "keywords": [
          "alignment",
          "circrna",
          "splicing",
          "fusions"
        ],
        "tools": [
          {
            "segemehl": {
              "description": "A multi-split mapping algorithm for circular RNA, splicing, trans-splicing and fusion detection",
              "homepage": "https://www.bioinf.uni-leipzig.de/Software/segemehl/",
              "documentation": "https://www.bioinf.uni-leipzig.de/Software/segemehl/",
              "doi": "10.1186/gb-2014-15-2-r34",
              "licence": "GPL v3"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "FASTA or FASTQ files",
              "pattern": "*.{fa,fasta,fq,fastq,fq.gz,fastq.gz}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome FASTA file used to construct Segemehl",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Segemehl Index file from SEGEMEHL_INDEX",
              "pattern": "*.idx"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "results": {
              "type": "directory",
              "description": "Directory containing genomic alignments in SAM format\n  (please add \"-b\" flag to task.ext.args for BAM)\nIn addition to split-read alignments files when -S parameter used.\n  [ *.{sam,bam}, *.trns.txt, *.mult.bed, *.sngl.bed ]\n",
              "pattern": "${meta.id}*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@BarryDigby"
        ]
      },
      "pipelines": [
        {
          "name": "circrna",
          "version": "dev"
        }
      ]
    },
    {
      "name": "segemehl_index",
      "path": "modules/nf-core/segemehl/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "segemehl_index",
        "description": "Generate genome indices for segemehl align",
        "keywords": [
          "index",
          "circrna",
          "splicing",
          "fusions"
        ],
        "tools": [
          {
            "segemehl": {
              "description": "A multi-split mapping algorithm for circular RNA, splicing, trans-splicing and fusion detection",
              "homepage": "https://www.bioinf.uni-leipzig.de/Software/segemehl/",
              "documentation": "https://www.bioinf.uni-leipzig.de/Software/segemehl/",
              "doi": "10.1186/gb-2014-15-2-r34",
              "licence": "GPL v3"
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome FASTA file",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "index": {
              "type": "file",
              "description": "Segemehl index file",
              "pattern": "*.{idx}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@BarryDigby"
        ]
      },
      "pipelines": [
        {
          "name": "circrna",
          "version": "dev"
        }
      ]
    },
    {
      "name": "semibin_singleeasybin",
      "path": "modules/nf-core/semibin/singleeasybin/meta.yml",
      "type": "module",
      "meta": {
        "name": "semibin_singleeasybin",
        "description": "metagenomic binning with self-supervised learning",
        "keywords": [
          "binning",
          "assembly-binning",
          "metagenomics"
        ],
        "tools": [
          {
            "semibin": {
              "description": "Metagenomic binning with semi-supervised siamese neural network",
              "homepage": "https://github.com/BigDataBiology/SemiBin",
              "documentation": "https://semibin.readthedocs.io/en/latest/",
              "tool_dev_url": "https://github.com/BigDataBiology/SemiBin",
              "doi": "10.1038/s41467-022-29843-y",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Fasta file of the assembled contigs",
              "pattern": "*.{fa,fasta,fna,fa.gz,fasta.gz,fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "generated files",
              "pattern": "*.csv"
            }
          },
          {
            "h5": {
              "type": "file",
              "description": "trained model",
              "pattern": "*.h5"
            }
          },
          {
            "output_prerecluster_bins": {
              "type": "file",
              "description": "output_prerecluster_bins",
              "pattern": "output_prerecluster_bins/*.fa"
            }
          },
          {
            "output_recluster_bins": {
              "type": "file",
              "description": "output_recluster_bins",
              "pattern": "output_recluster_bins/*.fa"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "information of bins",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@BigDataBiology"
        ]
      }
    },
    {
      "name": "sentieon_applyvarcal",
      "path": "modules/nf-core/sentieon/applyvarcal/meta.yml",
      "type": "module",
      "meta": {
        "name": "sentieon_applyvarcal",
        "description": "Apply a score cutoff to filter variants based on a recalibration table.\nSentieon's Aplyvarcal performs the second pass in a two-stage process called Variant Quality Score Recalibration (VQSR).\nSpecifically, it applies filtering to the input variants based on the recalibration table produced\nin the previous step VarCal and a target sensitivity value.\nhttps://support.sentieon.com/manual/usages/general/#applyvarcal-algorithm\n",
        "keywords": [
          "sentieon",
          "applyvarcal",
          "varcal",
          "VQSR"
        ],
        "tools": [
          {
            "sentieon": {
              "description": "Sentieon® provides complete solutions for secondary DNA/RNA analysis for a variety of sequencing platforms, including short and long reads.\nOur software improves upon BWA, STAR, Minimap2, GATK, HaplotypeCaller, Mutect, and Mutect2 based pipelines and is deployable on any generic-CPU-based computing system.\n",
              "homepage": "https://www.sentieon.com/",
              "documentation": "https://www.sentieon.com/"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file to be recalibrated, this should be the same file as used for the first stage VariantRecalibrator.",
              "pattern": "*.vcf"
            }
          },
          {
            "vcf_tbi": {
              "type": "file",
              "description": "tabix index for the input vcf file.",
              "pattern": "*.vcf.tbi"
            }
          },
          {
            "recal": {
              "type": "file",
              "description": "Recalibration file produced when the input vcf was run through VariantRecalibrator in stage 1.",
              "pattern": "*.recal"
            }
          },
          {
            "recal_index": {
              "type": "file",
              "description": "Index file for the recalibration file.",
              "pattern": ".recal.idx"
            }
          },
          {
            "tranches": {
              "type": "file",
              "description": "Tranches file produced when the input vcf was run through VariantRecalibrator in stage 1.",
              "pattern": ".tranches"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "compressed vcf file containing the recalibrated variants.",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index of recalibrated vcf file.",
              "pattern": "*vcf.gz.tbi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions.",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@assp8200"
        ]
      }
    },
    {
      "name": "sentieon_bwaindex",
      "path": "modules/nf-core/sentieon/bwaindex/meta.yml",
      "type": "module",
      "meta": {
        "name": "sentieon_bwaindex",
        "description": "Create BWA index for reference genome",
        "keywords": [
          "index",
          "fasta",
          "genome",
          "reference",
          "sentieon"
        ],
        "tools": [
          {
            "sentieon": {
              "description": "Sentieon® provides complete solutions for secondary DNA/RNA analysis for a variety of sequencing platforms, including short and long reads.\nOur software improves upon BWA, STAR, Minimap2, GATK, HaplotypeCaller, Mutect, and Mutect2 based pipelines and is deployable on any generic-CPU-based computing system.\n",
              "homepage": "https://www.sentieon.com/",
              "documentation": "https://www.sentieon.com/"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BWA genome index files",
              "pattern": "*.{amb,ann,bwt,pac,sa}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@maxulysse"
        ]
      }
    },
    {
      "name": "sentieon_bwamem",
      "path": "modules/nf-core/sentieon/bwamem/meta.yml",
      "type": "module",
      "meta": {
        "name": "sentieon_bwamem",
        "description": "Performs fastq alignment to a fasta reference using Sentieon's BWA MEM",
        "keywords": [
          "mem",
          "bwa",
          "alignment",
          "map",
          "fastq",
          "bam",
          "sentieon"
        ],
        "tools": [
          {
            "sentieon": {
              "description": "Sentieon® provides complete solutions for secondary DNA/RNA analysis for a variety of sequencing platforms, including short and long reads.\nOur software improves upon BWA, STAR, Minimap2, GATK, HaplotypeCaller, Mutect, and Mutect2 based pipelines and is deployable on any generic-CPU-based computing system.\n",
              "homepage": "https://www.sentieon.com/",
              "documentation": "https://www.sentieon.com/"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Genome fastq files (single-end or paired-end)"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BWA genome index files",
              "pattern": "*.{amb,ann,bwt,pac,sa}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome fasta file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the FASTA reference.",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file.",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAI file",
              "pattern": "*.bai"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@asp8200"
        ]
      }
    },
    {
      "name": "sentieon_dedup",
      "path": "modules/nf-core/sentieon/dedup/meta.yml",
      "type": "module",
      "meta": {
        "name": "sentieon_dedup",
        "description": "Runs the sentieon tool LocusCollector followed by Dedup. LocusCollector collects read information that is used by Dedup which in turn marks or removes duplicate reads.",
        "keywords": [
          "mem",
          "dedup",
          "map",
          "bam",
          "cram",
          "sentieon"
        ],
        "tools": [
          {
            "sentieon": {
              "description": "Sentieon® provides complete solutions for secondary DNA/RNA analysis for a variety of sequencing platforms, including short and long reads.\nOur software improves upon BWA, STAR, Minimap2, GATK, HaplotypeCaller, Mutect, and Mutect2 based pipelines and is deployable on any generic-CPU-based computing system.\n",
              "homepage": "https://www.sentieon.com/",
              "documentation": "https://www.sentieon.com/"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file.",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAI file",
              "pattern": "*.bai"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome fasta file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the FASTA reference.",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "cram": {
              "type": "file",
              "description": "CRAM file",
              "pattern": "*.cram"
            }
          },
          {
            "crai": {
              "type": "file",
              "description": "CRAM index file",
              "pattern": "*.crai"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file.",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAI file",
              "pattern": "*.bai"
            }
          },
          {
            "score": {
              "type": "file",
              "description": "The score file indicates which reads LocusCollector finds are likely duplicates.",
              "pattern": "*.score"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Output file containing Dedup metrics incl. histogram data.",
              "pattern": "*.metrics"
            }
          },
          {
            "metrics_multiqc_tsv": {
              "type": "file",
              "description": "Output tsv-file containing Dedup metrics excl. histogram data.",
              "pattern": "*.metrics.multiqc.tsv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@asp8200"
        ]
      }
    },
    {
      "name": "sentieon_gvcftyper",
      "path": "modules/nf-core/sentieon/gvcftyper/meta.yml",
      "type": "module",
      "meta": {
        "name": "SENTIEON_GVCFTYPER",
        "description": "Perform joint genotyping on one or more samples pre-called with Sentieon's Haplotyper.\n",
        "keywords": [
          "joint genotyping",
          "genotype",
          "gvcf"
        ],
        "tools": [
          {
            "sentieon": {
              "description": "Sentieon® provides complete solutions for secondary DNA/RNA analysis for a variety of sequencing platforms, including short and long reads.\nOur software improves upon BWA, STAR, Minimap2, GATK, HaplotypeCaller, Mutect, and Mutect2 based pipelines and is deployable on any generic-CPU-based computing system.\n",
              "homepage": "https://www.sentieon.com/",
              "documentation": "https://www.sentieon.com/"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gvcfs": {
              "type": "file",
              "description": "gVCF(.gz) file\n",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "tbis": {
              "type": "file",
              "description": "index of gvcf file\n",
              "pattern": "*.tbi"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Interval file with the genomic regions included in the library (optional)"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Reference fasta index file",
              "pattern": "*.fai"
            }
          },
          {
            "dbsnp": {
              "type": "file",
              "description": "dbSNP VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "dbsnp_tbi": {
              "type": "file",
              "description": "dbSNP VCF index file",
              "pattern": "*.tbi"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Genotyped VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Tbi index for VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@asp8200"
        ]
      }
    },
    {
      "name": "sentieon_haplotyper",
      "path": "modules/nf-core/sentieon/haplotyper/meta.yml",
      "type": "module",
      "meta": {
        "name": "sentieon_haplotyper",
        "description": "Runs Sentieon's haplotyper for germline variant calling.",
        "keywords": [
          "sentieon",
          "haplotypecaller",
          "haplotype"
        ],
        "tools": [
          {
            "sentieon": {
              "description": "Sentieon® provides complete solutions for secondary DNA/RNA analysis for a variety of sequencing platforms, including short and long reads.\nOur software improves upon BWA, STAR, Minimap2, GATK, HaplotypeCaller, Mutect, and Mutect2 based pipelines and is deployable on any generic-CPU-based computing system.\n",
              "homepage": "https://www.sentieon.com/",
              "documentation": "https://www.sentieon.com/"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file from alignment",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAI/CRAI file from alignment",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "Bed file with the genomic regions included in the library (optional)"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome fasta file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "The index of the FASTA reference.",
              "pattern": "*.fai"
            }
          },
          {
            "dbsnp": {
              "type": "file",
              "description": "VCF file containing known sites (optional)"
            }
          },
          {
            "dbsnp_tbi": {
              "type": "file",
              "description": "VCF index of dbsnp (optional)"
            }
          },
          {
            "emit_vcf": {
              "type": "string",
              "description": "Controls the vcf output from the haplotyper.\nIf emit_vcf is set to \"all\" then the haplotyper will output a vcf generated by the haplotyper in emit-mode \"all\".\nIf emit_vcf is set to \"confident\" then the haplotyper will output a vcf generated by the haplotyper in emit-mode \"confident\".\nIf emit_vcf is set to \"variant\" then the haplotyper will output a vcf generated by the haplotyper in emit_mode \"confident\".\n"
            }
          },
          {
            "emit_gvcf": {
              "type": "boolean",
              "description": "If true, the haplotyper will output a gvcf"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information.\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF file",
              "pattern": "*.unfiltered.vcf.gz"
            }
          },
          {
            "vcf_tbi": {
              "type": "file",
              "description": "Index of VCF file",
              "pattern": "*.unfiltered.vcf.gz.tbi"
            }
          },
          {
            "gvcf": {
              "type": "file",
              "description": "Compressed GVCF file",
              "pattern": "*.g.vcf.gz"
            }
          },
          {
            "gvcf_tbi": {
              "type": "file",
              "description": "Index of GVCF file",
              "pattern": "*.g.vcf.gz.tbi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@asp8200"
        ]
      }
    },
    {
      "name": "sentieon_varcal",
      "path": "modules/nf-core/sentieon/varcal/meta.yml",
      "type": "module",
      "meta": {
        "name": "sentieon_varcal",
        "description": "Module for Sentieons VarCal. The VarCal algorithm calculates the Variant Quality Score Recalibration (VQSR).\nVarCal builds a recalibration model for scoring variant quality.\nhttps://support.sentieon.com/manual/usages/general/#varcal-algorithm\n",
        "keywords": [
          "sentieon",
          "varcal",
          "variant recalibration"
        ],
        "tools": [
          {
            "sentieon": {
              "description": "Sentieon® provides complete solutions for secondary DNA/RNA analysis for a variety of sequencing platforms, including short and long reads.\nOur software improves upon BWA, STAR, Minimap2, GATK, HaplotypeCaller, Mutect, and Mutect2 based pipelines and is deployable on any generic-CPU-based computing system.\n",
              "homepage": "https://www.sentieon.com/",
              "documentation": "https://www.sentieon.com/"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "input vcf file containing the variants to be recalibrated",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "tbi file matching with -vcf",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "resource_vcf": {
              "type": "file",
              "description": "all resource vcf files that are used with the corresponding '--resource' label",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "resource_tbi": {
              "type": "file",
              "description": "all resource tbi files that are used with the corresponding '--resource' label",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "labels": {
              "type": "string",
              "description": "necessary arguments for Sentieon's VarCal. Specified to directly match the resources provided. More information can be found at https://support.sentieon.com/manual/usages/general/#varcal-algorithm"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "fasta.fai"
            }
          }
        ],
        "output": [
          {
            "recal": {
              "type": "file",
              "description": "Output recal file used by ApplyVQSR",
              "pattern": "*.recal"
            }
          },
          {
            "idx": {
              "type": "file",
              "description": "Index file for the recal output file",
              "pattern": "*.idx"
            }
          },
          {
            "tranches": {
              "type": "file",
              "description": "Output tranches file used by ApplyVQSR",
              "pattern": "*.tranches"
            }
          },
          {
            "plots": {
              "type": "file",
              "description": "Optional output rscript file to aid in visualization of the input data and learned model.",
              "pattern": "*plots.R"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "*.versions.yml"
            }
          }
        ],
        "authors": [
          "@asp8200"
        ]
      }
    },
    {
      "name": "seqkit_grep",
      "path": "modules/nf-core/seqkit/grep/meta.yml",
      "type": "module",
      "meta": {
        "name": "seqkit_grep",
        "description": "Select sequences from a large file based on name/ID",
        "keywords": [
          "filter",
          "seqkit",
          "subseq",
          "grep"
        ],
        "tools": [
          {
            "seqkit": {
              "description": "Cross-platform and ultrafast toolkit for FASTA/Q file manipulation, written by Wei Shen.",
              "homepage": "https://bioinf.shenwei.me/seqkit/usage/",
              "documentation": "https://bioinf.shenwei.me/seqkit/usage/",
              "tool_dev_url": "https://github.com/shenwei356/seqkit/",
              "doi": "10.1371/journal.pone.0163962",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sequence": {
              "type": "file",
              "description": "Fasta or fastq file containing sequences to be filtered\n",
              "pattern": "*.{fa,fna,faa,fasta,fq,fastq}[.gz]"
            }
          },
          {
            "pattern": {
              "type": "file",
              "description": "pattern file (one record per line). If no pattern is given, a string can be specificied within the args using '-p pattern_string'\n",
              "pattern": "*.{txt,tsv}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "filter": {
              "type": "file",
              "description": "Fasta or fastq file containing the filtered sequences\n",
              "pattern": "*.{fa,fq}[.gz]"
            }
          }
        ],
        "authors": [
          "@Joon-Klaps"
        ]
      }
    },
    {
      "name": "seqkit_pair",
      "path": "modules/nf-core/seqkit/pair/meta.yml",
      "type": "module",
      "meta": {
        "name": "seqkit_pair",
        "description": "match up paired-end reads from two fastq files",
        "keywords": [
          "seqkit",
          "pair"
        ],
        "tools": [
          {
            "seqkit": {
              "description": "Cross-platform and ultrafast toolkit for FASTA/Q file manipulation, written by Wei Shen.",
              "homepage": "https://bioinf.shenwei.me/seqkit/usage/",
              "documentation": "https://bioinf.shenwei.me/seqkit/usage/",
              "tool_dev_url": "https://github.com/shenwei356/seqkit/",
              "doi": "10.1371/journal.pone.0163962",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input paired-end FastQ files.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Paired fastq reads",
              "pattern": "*.paired.fastq.gz"
            }
          },
          {
            "unpaired_reads": {
              "type": "file",
              "description": "Unpaired reads (optional)",
              "pattern": "*.unpaired.fastq.gz"
            }
          }
        ],
        "authors": [
          "@sateeshperi",
          "@mjcipriano",
          "@hseabolt"
        ]
      }
    },
    {
      "name": "seqkit_replace",
      "path": "modules/nf-core/seqkit/replace/meta.yml",
      "type": "module",
      "meta": {
        "name": "seqkit_replace",
        "description": "Use seqkit to find/replace strings within sequences and sequence headers",
        "keywords": [
          "seqkit",
          "replace"
        ],
        "tools": [
          {
            "seqkit": {
              "description": "Cross-platform and ultrafast toolkit for FASTA/Q file manipulation, written by Wei Shen.",
              "homepage": "https://bioinf.shenwei.me/seqkit/usage/",
              "documentation": "https://bioinf.shenwei.me/seqkit/usage/",
              "tool_dev_url": "https://github.com/shenwei356/seqkit/",
              "doi": "10.1371/journal.pone.016396"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastx": {
              "type": "file",
              "description": "fasta/q file",
              "pattern": "*.{fasta,fastq,fa,fq,fas,fna,faa}*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fastx": {
              "type": "file",
              "description": "fasta/q file with replaced values",
              "pattern": "*.{fasta,fastq,fa,fq,fas,fna,faa}*"
            }
          }
        ],
        "authors": [
          "@mjcipriano"
        ]
      }
    },
    {
      "name": "seqkit_split2",
      "path": "modules/nf-core/seqkit/split2/meta.yml",
      "type": "module",
      "meta": {
        "name": "seqkit_split2",
        "description": "Split single or paired-end fastq.gz files",
        "keywords": [
          "split",
          "fastq"
        ],
        "tools": [
          {
            "seqkit": {
              "description": "Cross-platform and ultrafast toolkit for FASTA/Q file manipulation, written by Wei Shen.\n",
              "homepage": "https://github.com/shenwei356/seqkit",
              "documentation": "https://bioinf.shenwei.me/seqkit/",
              "doi": "10.1371/journal.pone.0163962",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "FastQ files",
              "pattern": "*.{fq.gz/fastq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Split fastq files",
              "pattern": "*.{fq.gz/fastq.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      }
    },
    {
      "name": "seqkit_stats",
      "path": "modules/nf-core/seqkit/stats/meta.yml",
      "type": "module",
      "meta": {
        "name": "seqkit_stats",
        "description": "simple statistics of FASTA/Q files",
        "keywords": [
          "seqkit",
          "stats"
        ],
        "tools": [
          {
            "seqkit": {
              "description": "Cross-platform and ultrafast toolkit for FASTA/Q file manipulation, written by Wei Shen.",
              "homepage": "https://bioinf.shenwei.me/seqkit/usage/",
              "documentation": "https://bioinf.shenwei.me/seqkit/usage/",
              "tool_dev_url": "https://github.com/shenwei356/seqkit/",
              "doi": "10.1371/journal.pone.0163962",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Either FASTA or FASTQ files.\n",
              "pattern": "*.{fa,fna,faa,fasta,fq,fastq}[.gz]"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Tab-separated output file with basic sequence statistics.\n",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@Midnighter"
        ]
      }
    },
    {
      "name": "seqsero2",
      "path": "modules/nf-core/seqsero2/meta.yml",
      "type": "module",
      "meta": {
        "name": "seqsero2",
        "description": "Salmonella serotype prediction from reads and assemblies",
        "keywords": [
          "fasta",
          "fastq",
          "salmonella",
          "sertotype"
        ],
        "tools": [
          {
            "seqsero2": {
              "description": "Salmonella serotype prediction from genome sequencing data",
              "homepage": "https://github.com/denglab/SeqSero2",
              "documentation": "https://github.com/denglab/SeqSero2",
              "tool_dev_url": "https://github.com/denglab/SeqSero2",
              "doi": "10.1128/AEM.01746-19",
              "licence": [
                "GPL v2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "seqs": {
              "type": "file",
              "description": "FASTQ or FASTA formated sequences",
              "pattern": "*.{fq.gz,fastq.gz,fna.gz,fna,fasta.gz,fasta,fa.gz,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "A log of serotype antigen results",
              "pattern": "*_log.txt"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab-delimited summary of the SeqSero2 results",
              "pattern": "*_result.tsv"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Detailed summary of the SeqSero2 results",
              "pattern": "*_result.txt"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "seqtk_cutn",
      "path": "modules/nf-core/seqtk/cutn/meta.yml",
      "type": "module",
      "meta": {
        "name": "seqtk_cutn",
        "description": "Generates a BED file containing genomic locations of lengths of N.",
        "keywords": [
          "cut",
          "fasta",
          "seqtk"
        ],
        "tools": [
          {
            "seqtk": {
              "description": "Seqtk is a fast and lightweight tool for processing sequences in the FASTA or FASTQ format. Seqtk mergepe command merges pair-end reads into one interleaved file.",
              "homepage": "https://github.com/lh3/seqtk",
              "documentation": "https://docs.csc.fi/apps/seqtk/",
              "tool_dev_url": "https://github.com/lh3/seqtk",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "A single fasta file to be split.",
              "pattern": "*.{fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "The output bed which summarised locations of cuts",
              "pattern": "*.{bed}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@DLBPointon"
        ]
      }
    },
    {
      "name": "seqtk_mergepe",
      "path": "modules/nf-core/seqtk/mergepe/meta.yml",
      "type": "module",
      "meta": {
        "name": "seqtk_mergepe",
        "description": "Interleave pair-end reads from FastQ files",
        "keywords": [
          "interleave"
        ],
        "tools": [
          {
            "seqtk": {
              "description": "Seqtk is a fast and lightweight tool for processing sequences in the FASTA or FASTQ format. Seqtk mergepe command merges pair-end reads into one interleaved file.",
              "homepage": "https://github.com/lh3/seqtk",
              "documentation": "https://docs.csc.fi/apps/seqtk/",
              "tool_dev_url": "https://github.com/lh3/seqtk",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,respectively.",
              "pattern": "*.{fastq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "If single-end reads, the output is the same as the input, 1 FastQ file for each read. If pair-end reads, the read pairs will be interleaved and output as 1 FastQ file for each read pair.",
              "pattern": "*.{fastq.gz}"
            }
          }
        ],
        "authors": [
          "@emnilsson"
        ]
      }
    },
    {
      "name": "seqtk_rename",
      "path": "modules/nf-core/seqtk/rename/meta.yml",
      "type": "module",
      "meta": {
        "name": "seqtk_rename",
        "description": "Rename sequence names in FASTQ or FASTA files.",
        "keywords": [
          "rename"
        ],
        "tools": [
          {
            "seqtk": {
              "description": "Seqtk is a fast and lightweight tool for processing sequences in the FASTA or FASTQ format. The seqtk rename command renames sequence names.",
              "homepage": "https://github.com/lh3/seqtk",
              "documentation": "https://docs.csc.fi/apps/seqtk/",
              "tool_dev_url": "https://github.com/lh3/seqtk",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "sequences": {
              "type": "file",
              "description": "A FASTQ or FASTA file",
              "pattern": "*.{fastq.gz, fastq, fq, fq.gz, fasta, fastq.gz, fa, fa.gz, fas, fas.gz, fna, fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sequences": {
              "type": "file",
              "description": "FASTQ/FASTA file containing renamed sequences",
              "pattern": "*.{fastq.gz, fasta.gz}"
            }
          }
        ],
        "authors": [
          "@hseabolt",
          "@mjcipriano",
          "@sateeshperi"
        ]
      }
    },
    {
      "name": "seqtk_sample",
      "path": "modules/nf-core/seqtk/sample/meta.yml",
      "type": "module",
      "meta": {
        "name": "seqtk_sample",
        "description": "Subsample reads from FASTQ files",
        "keywords": [
          "sample"
        ],
        "tools": [
          {
            "seqtk": {
              "description": "Seqtk is a fast and lightweight tool for processing sequences in the FASTA or FASTQ format. Seqtk sample command subsamples sequences.",
              "homepage": "https://github.com/lh3/seqtk",
              "documentation": "https://docs.csc.fi/apps/seqtk/",
              "tool_dev_url": "https://github.com/lh3/seqtk",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files",
              "pattern": "*.{fastq.gz}"
            }
          },
          {
            "sample_size": {
              "type": "value",
              "description": "Number of reads to sample."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Subsampled FastQ files",
              "pattern": "*.{fastq.gz}"
            }
          }
        ],
        "authors": [
          "@kaurravneet4123",
          "@sidorov-si",
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "seqtk_seq",
      "path": "modules/nf-core/seqtk/seq/meta.yml",
      "type": "module",
      "meta": {
        "name": "seqtk_seq",
        "description": "Common transformation operations on FASTA or FASTQ files.",
        "keywords": [
          "seq"
        ],
        "tools": [
          {
            "seqtk": {
              "description": "Seqtk is a fast and lightweight tool for processing sequences in the FASTA or FASTQ format. The seqtk seq command enables common transformation operations on FASTA or FASTQ files.",
              "homepage": "https://github.com/lh3/seqtk",
              "documentation": "https://docs.csc.fi/apps/seqtk/",
              "tool_dev_url": "https://github.com/lh3/seqtk",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "sequences": {
              "type": "file",
              "description": "A FASTQ or FASTA file",
              "pattern": "*.{fastq.gz, fastq, fq, fq.gz, fasta, fastq.gz, fa, fa.gz, fas, fas.gz, fna, fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sequences": {
              "type": "file",
              "description": "FASTQ/FASTA file containing renamed sequences",
              "pattern": "*.{fastq.gz, fasta.gz}"
            }
          }
        ],
        "authors": [
          "@hseabolt",
          "@mjcipriano",
          "@sateeshperi"
        ]
      },
      "pipelines": [
        {
          "name": "crisprseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "seqtk_subseq",
      "path": "modules/nf-core/seqtk/subseq/meta.yml",
      "type": "module",
      "meta": {
        "name": "seqtk_subseq",
        "description": "Select only sequences that match the filtering condition",
        "keywords": [
          "filtering,selection"
        ],
        "tools": [
          {
            "seqtk": {
              "description": "Seqtk is a fast and lightweight tool for processing sequences in the FASTA or FASTQ format",
              "homepage": "https://github.com/lh3/seqtk",
              "documentation": "https://docs.csc.fi/apps/seqtk/",
              "tool_dev_url": "https://github.com/lh3/seqtk",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "sequences": {
              "type": "file",
              "description": "FASTQ/FASTA file",
              "pattern": "*.{fq,fq.gz,fa,fa.gz}"
            }
          },
          {
            "filter_list": {
              "type": "file",
              "description": "BED file or a text file with a list of sequence names",
              "pattern": "*.{bed,lst}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sequences": {
              "type": "file",
              "description": "FASTQ/FASTA file",
              "pattern": "*.{fq.gz,fa.gz}"
            }
          }
        ],
        "authors": [
          "@sidorov-si"
        ]
      }
    },
    {
      "name": "sequencetools_pileupcaller",
      "path": "modules/nf-core/sequencetools/pileupcaller/meta.yml",
      "type": "module",
      "meta": {
        "name": "sequencetools_pileupcaller",
        "description": "PileupCaller is a tool to create genotype calls from bam files using read-sampling methods",
        "keywords": [
          "genotyping",
          "mpileup",
          "random draw",
          "pseudohaploid",
          "pseudodiploid",
          "freqsum",
          "plink",
          "bed",
          "eigenstrat"
        ],
        "tools": [
          {
            "sequencetools": {
              "description": "Tools for population genetics on sequencing data",
              "homepage": "https://github.com/stschiff/sequenceTools",
              "documentation": "https://github.com/stschiff/sequenceTools#readme",
              "tool_dev_url": "https://github.com/stschiff/sequenceTools",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "mpileup": {
              "type": "file",
              "description": "samtools mpileup output."
            }
          },
          {
            "snpfile": {
              "type": "file",
              "description": "Eigenstrat format .snp file of the sites in the mpileup file to call genotypes on.\nOnly alleles matching the Ref and Alt alleles of the provided snp file will be called.\n"
            }
          },
          {
            "calling_method": {
              "type": "value",
              "description": "The desired calling method for pileupcaller. One of 'randomHaploid', 'randomDiploid', or 'majorityCall'."
            }
          },
          {
            "output_format": {
              "type": "value",
              "description": "The desired output format. One of 'PLINK', 'EIGENSTRAT', or 'FREQSUM'."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "eigenstrat": {
              "type": "file",
              "description": "A tuple containing the output Eigenstrat-formatted geno, snp and ind files.",
              "pattern": "*.{geno,snp,ind}.txt"
            }
          },
          {
            "plink": {
              "type": "file",
              "description": "A tuple containing the output Plink-formatted bed, bim and fam files.",
              "pattern": "*.{bed,bim,fam}"
            }
          },
          {
            "freqsum": {
              "type": "file",
              "description": "The output freqsum-formatted file.",
              "pattern": "*.freqsum.gz"
            }
          }
        ],
        "authors": [
          "@TCLamnidis"
        ]
      }
    },
    {
      "name": "sequenzautils_bam2seqz",
      "path": "modules/nf-core/sequenzautils/bam2seqz/meta.yml",
      "type": "module",
      "meta": {
        "name": "sequenzautils_bam2seqz",
        "description": "Sequenza-utils bam2seqz process BAM and Wiggle files to produce a seqz file",
        "keywords": [
          "bam2seqz"
        ],
        "tools": [
          {
            "sequenzautils": {
              "description": "Sequenza-utils provides 3 main command line programs to transform common NGS file format - such as FASTA, BAM - to input files for the Sequenza R package. The program - bam2seqz - process a paired set of BAM/pileup files (tumour and matching normal), and GC-content genome-wide information, to extract the common positions with A and B alleles frequencies.",
              "homepage": "https://sequenza-utils.readthedocs.io/en/latest/index.html",
              "documentation": "https://sequenza-utils.readthedocs.io/en/latest/index.html",
              "doi": "10.1093/annonc/mdu479",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "normalbam": {
              "type": "file",
              "description": "BAM file from the reference/normal sample",
              "pattern": "*.{bam}"
            }
          },
          {
            "tumourbam": {
              "type": "file",
              "description": "BAM file from the tumour sample",
              "pattern": "*.{bam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference FASTA file",
              "pattern": "*.{fasta}"
            }
          },
          {
            "wigfile": {
              "type": "file",
              "description": "GC content wiggle file",
              "pattern": "*.{wig.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "seqz": {
              "type": "file",
              "description": "Seqz file",
              "pattern": "*.{seqz.gz}"
            }
          }
        ],
        "authors": [
          "@kaurravneet4123"
        ]
      }
    },
    {
      "name": "sequenzautils_gcwiggle",
      "path": "modules/nf-core/sequenzautils/gcwiggle/meta.yml",
      "type": "module",
      "meta": {
        "name": "sequenzautils_gcwiggle",
        "description": "Sequenza-utils gc_wiggle computes the GC percentage across the sequences, and returns a file in the UCSC wiggle format, given a fasta file and a window size.",
        "keywords": [
          "gc_wiggle"
        ],
        "tools": [
          {
            "sequenzautils": {
              "description": "Sequenza-utils provides 3 main command line programs to transform common NGS file format - such as FASTA, BAM - to input files for the Sequenza R package. The program -gc_wiggle- takes fasta file as an input, computes GC percentage across the sequences and returns a file in the UCSC wiggle format.",
              "homepage": "https://sequenza-utils.readthedocs.io/en/latest/index.html",
              "documentation": "https://sequenza-utils.readthedocs.io/en/latest/index.html",
              "doi": "10.1093/annonc/mdu479",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file",
              "pattern": "*.{fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "wig": {
              "type": "file",
              "description": "GC Wiggle track file",
              "pattern": "*.{wig.gz}"
            }
          }
        ],
        "authors": [
          "@kaurravneet4123"
        ]
      }
    },
    {
      "name": "seqwish_induce",
      "path": "modules/nf-core/seqwish/induce/meta.yml",
      "type": "module",
      "meta": {
        "name": "seqwish_induce",
        "description": "Induce a variation graph in GFA format from alignments in PAF format",
        "keywords": [
          "induce",
          "paf",
          "gfa",
          "graph",
          "variation graph"
        ],
        "tools": [
          {
            "seqwish": {
              "description": "seqwish implements a lossless conversion from pairwise alignments between\nsequences to a variation graph encoding the sequences and their alignments.\n",
              "homepage": "https://github.com/ekg/seqwish",
              "documentation": "https://github.com/ekg/seqwish",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "paf": {
              "type": "list",
              "description": "comma-separated PAF file(s) of alignments, single entry allowed",
              "pattern": "[*.{paf,paf.gz},*.{paf,paf.gz},...]"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file used to generate alignments",
              "pattern": "*.{fa,fa.gz,fasta,fasta.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Variation graph in GFA 1.0 format",
              "pattern": "*.{gfa}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@heuermh"
        ]
      },
      "pipelines": [
        {
          "name": "pangenome",
          "version": "dev"
        }
      ]
    },
    {
      "name": "seroba_run",
      "path": "modules/nf-core/seroba/run/meta.yml",
      "type": "module",
      "meta": {
        "name": "seroba_run",
        "description": "Determine Streptococcus pneumoniae serotype from Illumina paired-end reads",
        "keywords": [
          "fastq",
          "serotype",
          "Streptococcus pneumoniae"
        ],
        "tools": [
          {
            "seroba": {
              "description": "SeroBA is a k-mer based pipeline to identify the Serotype from Illumina NGS reads for given references.",
              "homepage": "https://sanger-pathogens.github.io/seroba/",
              "documentation": "https://sanger-pathogens.github.io/seroba/",
              "tool_dev_url": "https://github.com/sanger-pathogens/seroba",
              "doi": "10.1099/mgen.0.000186",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Input Illunina paired-end FASTQ files",
              "pattern": "*.{fq.gz,fastq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "The predicted serotype in tab-delimited format",
              "pattern": "*.tsv"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "A detailed description of the predicted serotype",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "sexdeterrmine",
      "path": "modules/nf-core/sexdeterrmine/meta.yml",
      "type": "module",
      "meta": {
        "name": "sexdeterrmine",
        "description": "Calculate the relative coverage on the Gonosomes vs Autosomes from the output of samtools depth, with error bars.",
        "keywords": [
          "sex determination",
          "genetic sex",
          "relative coverage",
          "ancient dna"
        ],
        "tools": [
          {
            "sexdeterrmine": {
              "description": "A python script carry out calculate the relative coverage of X and Y chromosomes, and their associated error bars, out of capture data.",
              "homepage": "https://github.com/TCLamnidis/Sex.DetERRmine",
              "documentation": "https://github.com/TCLamnidis/Sex.DetERRmine/README.md",
              "tool_dev_url": "https://github.com/TCLamnidis/Sex.DetERRmine",
              "doi": "10.1038/s41467-018-07483-5",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "depth": {
              "type": "file",
              "description": "Output from samtools depth (with header)",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON formatted table of relative coverages on the X and Y, with associated error bars.",
              "pattern": "*.json"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "TSV table of relative coverages on the X and Y, with associated error bars.",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@TCLamnidis"
        ]
      }
    },
    {
      "name": "sgdemux",
      "path": "modules/nf-core/sgdemux/meta.yml",
      "type": "module",
      "meta": {
        "name": "sgdemux",
        "description": "Demultiplex bgzip'd fastq files",
        "keywords": [
          "demultiplex",
          "fastq",
          "bgzip"
        ],
        "tools": [
          {
            "sgdemux": {
              "description": "Tool for demultiplexing sequencing data generated on Singular Genomics' sequencing instruments.",
              "homepage": "https://github.com/Singular-Genomics/singular-demux",
              "documentation": "https://github.com/Singular-Genomics/singular-demux#sgdemux",
              "licence": "['For Singular G4™ Sequencing Platform only']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sample_sheet": {
              "type": "file",
              "description": "sample_sheet file (either a Singular Genomics sample sheet, or a two column csv wih Sample_Barcode and Sample_ID)",
              "pattern": "*.{csv}"
            }
          },
          {
            "fastqs_dir": {
              "type": "directory",
              "description": "Input directory containing bgzipped (not gzip) FASTQ files"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sample_fastq": {
              "type": "file",
              "description": "Demultiplexed per-sample FASTQ files",
              "pattern": "output/*_R*.fastq.gz"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "Demultiplexing summary stats; control_reads_omitted failing_reads_omitted, total_templates\n",
              "pattern": "output/metrics.tsv"
            }
          },
          {
            "most_frequent_unmatched": {
              "type": "file",
              "description": "File containing approx. counts of barcodes that did not match the expected barcodes\n",
              "pattern": "output/most_frequence_unmatched.tsv"
            }
          },
          {
            "per_project_metrics": {
              "type": "file",
              "description": "Summary metrics for samples in the same project",
              "pattern": "output/per_project_metrics.tsv"
            }
          },
          {
            "per_sample_metrics": {
              "type": "file",
              "description": "Summary metrics for each sample",
              "pattern": "output/per_sample_metrics.tsv"
            }
          },
          {
            "sample_barcode_hop_metrics": {
              "type": "file",
              "description": "File output for dual-indexed runs with barcodes which are unexpected combinations of\nexpected barcodes e.g. expected barcodes = AA-TT/GG-CC and observed barcodes = AA-CC/GG-TT\n",
              "pattern": "output/sample_barcode_hop_metrics/tsv"
            }
          }
        ],
        "authors": [
          "Samantha White: @samfulcrum"
        ]
      },
      "pipelines": [
        {
          "name": "demultiplex",
          "version": "1.3.2"
        }
      ]
    },
    {
      "name": "shapeit5_ligate",
      "path": "modules/nf-core/shapeit5/ligate/meta.yml",
      "type": "module",
      "meta": {
        "name": "shapeit5_ligate",
        "description": "Ligate multiple phased BCF/VCF files into a single whole chromosome file.\nTypically run to ligate multiple chunks of phased common variants.\n",
        "keywords": [
          "ligate",
          "haplotype",
          "shapeit"
        ],
        "tools": [
          {
            "shapeit5": {
              "description": "Fast and accurate method for estimation of haplotypes (phasing)",
              "homepage": "https://odelaneau.github.io/shapeit5/",
              "documentation": "https://odelaneau.github.io/shapeit5/docs/documentation",
              "tool_dev_url": "https://github.com/odelaneau/shapeit5",
              "doi": "10.1101/2022.10.19.512867 ",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_list": {
              "type": "file",
              "description": "VCF/BCF files containing genotype probabilities (GP field).\nThe files should be ordered by genomic position.\n",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "input_list_index": {
              "type": "file",
              "description": "VCF/BCF files index.",
              "pattern": "*.csi"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "merged_variants": {
              "type": "file",
              "description": "Output VCF/BCF file for the merged regions.\nPhased information (HS field) is updated accordingly for the full region.\n",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          }
        ],
        "authors": [
          "@louislenezet"
        ]
      }
    },
    {
      "name": "shapeit5_phasecommon",
      "path": "modules/nf-core/shapeit5/phasecommon/meta.yml",
      "type": "module",
      "meta": {
        "name": "shapeit5_phasecommon",
        "description": "Tool to phase common sites, typically SNP array data, or the first step of WES/WGS data.",
        "keywords": [
          "phasing",
          "haplotype",
          "shapeit"
        ],
        "tools": [
          {
            "shapeit5": {
              "description": "Fast and accurate method for estimation of haplotypes (phasing)",
              "homepage": "https://odelaneau.github.io/shapeit5/",
              "documentation": "https://odelaneau.github.io/shapeit5/docs/documentation",
              "tool_dev_url": "https://github.com/odelaneau/shapeit5",
              "doi": "10.1101/2022.10.19.512867 ",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "Target dataset in VCF/BCF format defined at all variable positions.\nThe file could possibly be without GT field (for efficiency reasons a file containing only the positions is recommended).\n",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "Index file of the input VCF/BCF file containing genotype likelihoods.",
              "pattern": "*.{vcf.gz.csi,bcf.gz.csi}"
            }
          },
          {
            "pedigree": {
              "type": "file",
              "description": "Pedigree information in the following format: offspring father mother.\n",
              "pattern": "*.{txt, tsv}"
            }
          },
          {
            "region": {
              "type": "string",
              "description": "Target region, usually a full chromosome (e.g. chr20:1000000-2000000 or chr20).\nFor chrX, please treat PAR and non-PAR regions as different choromosome in order to avoid mixing ploidy.\n",
              "pattern": "chrXX:leftBufferPosition-rightBufferPosition"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "Reference panel of haplotypes in VCF/BCF format.",
              "pattern": "*.{vcf.gz,bcf.gz}"
            }
          },
          {
            "reference_index": {
              "type": "file",
              "description": "Index file of the Reference panel file.",
              "pattern": "*.{vcf.gz.csi,bcf.gz.csi}"
            }
          },
          {
            "scaffold": {
              "type": "file",
              "description": "Scaffold of haplotypes in VCF/BCF format.",
              "pattern": "*.{vcf.gz,bcf.gz}"
            }
          },
          {
            "scaffold_index": {
              "type": "file",
              "description": "Index file of the scaffold file.",
              "pattern": "*.{vcf.gz.csi,bcf.gz.csi}"
            }
          },
          {
            "map": {
              "type": "file",
              "description": "File containing the genetic map.",
              "pattern": "*.gmap"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "phased_variants": {
              "type": "file",
              "description": "Phased haplotypes in VCF/BCF format.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@LouisLeNezet"
        ]
      }
    },
    {
      "name": "shapeit5_phaserare",
      "path": "modules/nf-core/shapeit5/phaserare/meta.yml",
      "type": "module",
      "meta": {
        "name": "shapeit5_phaserare",
        "description": "Tool to phase rare variants onto a scaffold of common variants (output of phase_common / ligate).\nRequire feature AVX2.\n",
        "keywords": [
          "phasing",
          "rare variants",
          "haplotype",
          "shapeit"
        ],
        "tools": [
          {
            "shapeit5": {
              "description": "Fast and accurate method for estimation of haplotypes (phasing)",
              "homepage": "https://odelaneau.github.io/shapeit5/",
              "documentation": "https://odelaneau.github.io/shapeit5/docs/documentation",
              "tool_dev_url": "https://github.com/odelaneau/shapeit5",
              "doi": "10.1101/2022.10.19.512867 ",
              "licence": "['MIT']"
            }
          }
        ],
        "requirement": "AVX2",
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_plain": {
              "type": "file",
              "description": "Genotypes to be phased in plain VCF/BCF format.\n",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "input_plain_index": {
              "type": "file",
              "description": "Index file of the input_plain VCF/BCF file containing genotype likelihoods.",
              "pattern": "*.{vcf.gz.csi,bcf.gz.csi}"
            }
          },
          {
            "input_region": {
              "type": "string",
              "description": "Region to be considered in --input-plain (e.g. chr20:1000000-2000000 or chr20).\nFor chrX, please treat PAR and non-PAR regions as different choromosome in order to avoid mixing ploidy.\n",
              "pattern": "chrXX:leftBufferPosition-rightBufferPosition"
            }
          },
          {
            "pedigree": {
              "type": "file",
              "description": "Pedigree information in the following format: offspring father mother.\n",
              "pattern": "*.{txt, tsv}"
            }
          },
          {
            "scaffold": {
              "type": "file",
              "description": "Scaffold of haplotypes in VCF/BCF format.",
              "pattern": "*.{vcf.gz,bcf.gz}"
            }
          },
          {
            "scaffold_index": {
              "type": "file",
              "description": "Index file of the scaffold file.",
              "pattern": "*.{vcf.gz.csi,bcf.gz.csi}"
            }
          },
          {
            "scaffold_region": {
              "type": "string",
              "description": "Region to be considered in --scaffold (e.g. chr20:1000000-2000000 or chr20).\n",
              "pattern": "chrXX:leftBufferPosition-rightBufferPosition"
            }
          },
          {
            "map": {
              "type": "file",
              "description": "File containing the genetic map.",
              "pattern": "*.gmap"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "phased_variants": {
              "type": "file",
              "description": "Phased haplotypes in VCF/BCF format.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@LouisLeNezet"
        ]
      }
    },
    {
      "name": "shapeit5_switch",
      "path": "modules/nf-core/shapeit5/switch/meta.yml",
      "type": "module",
      "meta": {
        "name": "shapeit5_switch",
        "description": "Program to compute switch error rate and genotyping error rate given simulated or trio data.",
        "keywords": [
          "error",
          "phasing"
        ],
        "tools": [
          {
            "shapeit5": {
              "description": "Fast and accurate method for estimation of haplotypes (phasing)",
              "homepage": "https://odelaneau.github.io/shapeit5/",
              "documentation": "https://odelaneau.github.io/shapeit5/docs/documentation",
              "tool_dev_url": "https://github.com/odelaneau/shapeit5",
              "doi": "10.1101/2022.10.19.512867 ",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "estimate": {
              "type": "file",
              "description": "Imputed data.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "estimate_index": {
              "type": "file",
              "description": "Index file of the freq VCF/BCF file.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "region": {
              "type": "string",
              "description": "Target region used for imputation, including left and right buffers (e.g. chr20:1000000-2000000).",
              "pattern": "chrXX:leftBufferPosition-rightBufferPosition"
            }
          },
          {
            "pedigree": {
              "type": "file",
              "description": "Pedigree information in the following format: offspring father mother.\n",
              "pattern": "*.{txt, tsv}"
            }
          },
          {
            "truth": {
              "type": "file",
              "description": "Validation dataset called at the same positions as the imputed file.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "truth_index": {
              "type": "file",
              "description": "Index file of the truth VCF/BCF file.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "freq": {
              "type": "file",
              "description": "File containing allele frequencies at each site.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "freq_index": {
              "type": "file",
              "description": "Index file of the freq VCF/BCF file.",
              "pattern": "*.{vcf.gz.csi,bcf.gz.csi}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "errors": {
              "type": "file",
              "description": "Estimates errors from the phased file.",
              "pattern": "*.txt.gz"
            }
          }
        ],
        "authors": [
          "@LouisLeNezet"
        ]
      }
    },
    {
      "name": "shasta",
      "path": "modules/nf-core/shasta/meta.yml",
      "type": "module",
      "meta": {
        "name": "shasta",
        "description": "The goal of the Shasta long read assembler is to rapidly produce accurate assembled sequence using DNA reads generated by Oxford Nanopore flow cells as input. Please note Assembler is design to focus on speed, so assembly may be considered somewhat non-deterministic as final assembly may vary across executions. See https://github.com/chanzuckerberg/shasta/issues/296.",
        "keywords": [
          "nanopore",
          "de-novo",
          "assembly",
          "longread"
        ],
        "tools": [
          {
            "shasta": {
              "description": "Rapidly produce accurate assembled sequence using as input DNA reads generated by Oxford Nanopore flow cells.",
              "homepage": "https://chanzuckerberg.github.io/shasta/index.html",
              "documentation": "https://chanzuckerberg.github.io/shasta/index.html",
              "tool_dev_url": "https://github.com/chanzuckerberg/shasta",
              "doi": "10.1038/s41587-020-0503-6",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Input file in FASTQ format.",
              "pattern": "*.{fastq,fastq.gz,fq,fq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "Assembled FASTA file",
              "pattern": "${prefix}_Assembly.fasta.gz"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Repeat graph",
              "pattern": "${prefix}_Assembly.gfa.gz"
            }
          },
          {
            "results": {
              "type": "dir",
              "description": "Resulting assembly directory",
              "pattern": "ShastaRun"
            }
          }
        ],
        "authors": [
          "@fmalmeida"
        ]
      }
    },
    {
      "name": "shasum",
      "path": "modules/nf-core/shasum/meta.yml",
      "type": "module",
      "meta": {
        "name": "shasum",
        "description": "Print SHA256 (256-bit) checksums.",
        "keywords": [
          "checksum",
          "sha256",
          "256 bit"
        ],
        "tools": [
          {
            "md5sum": {
              "description": "Create an SHA256 (256-bit) checksum.",
              "homepage": "https://www.gnu.org",
              "documentation": "https://linux.die.net/man/1/shasum",
              "licence": "GPLv3+"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "file": {
              "type": "file",
              "description": "Any file",
              "pattern": "*.*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "checksum": {
              "type": "file",
              "description": "File containing checksum",
              "pattern": "*.sha256"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "shigatyper",
      "path": "modules/nf-core/shigatyper/meta.yml",
      "type": "module",
      "meta": {
        "name": "shigatyper",
        "description": "Determine Shigella serotype from Illumina or Oxford Nanopore reads",
        "keywords": [
          "fastq",
          "shigella",
          "serotype"
        ],
        "tools": [
          {
            "shigatyper": {
              "description": "Typing tool for Shigella spp. from WGS Illumina sequencing",
              "homepage": "https://github.com/CFSAN-Biostatistics/shigatyper",
              "documentation": "https://github.com/CFSAN-Biostatistics/shigatyper",
              "tool_dev_url": "https://github.com/CFSAN-Biostatistics/shigatyper",
              "doi": "10.1128/AEM.00165-19",
              "licence": "['Public Domain']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false, is_ont:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Illumina or Nanopore FASTQ file",
              "pattern": "*.fastq.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "A TSV formatted file with ShigaTyper results",
              "pattern": "*.tsv"
            }
          },
          {
            "hits": {
              "type": "file",
              "description": "A TSV formatted file with individual gene hits",
              "pattern": "*-hits.tsv"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "shigeifinder",
      "path": "modules/nf-core/shigeifinder/meta.yml",
      "type": "module",
      "meta": {
        "name": "shigeifinder",
        "description": "Determine Shigella serotype from assemblies or Illumina paired-end reads",
        "keywords": [
          "fastq",
          "fasta",
          "shigella",
          "serotype"
        ],
        "tools": [
          {
            "shigeifinder": {
              "description": "Cluster informed Shigella and EIEC serotyping tool from Illumina reads and assemblies",
              "homepage": "https://mgtdb.unsw.edu.au/ShigEiFinder/",
              "documentation": "https://github.com/LanLab/ShigEiFinder",
              "tool_dev_url": "https://github.com/LanLab/ShigEiFinder",
              "doi": "10.1099/mgen.0.000704",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "seqs": {
              "type": "file",
              "description": "Assembly or paired-end Illumina reads",
              "pattern": "*.{fasta,fasta.gz,fastq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "A TSV formatted file with ShigEiFinder results",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "shinyngs_app",
      "path": "modules/nf-core/shinyngs/app/meta.yml",
      "type": "module",
      "meta": {
        "name": "shinyngs_app",
        "description": "build and deploy Shiny apps for interactively mining differential abundance data",
        "keywords": [
          "differential",
          "expression",
          "rna-seq",
          "deseq2"
        ],
        "tools": [
          {
            "shinyngs": {
              "description": "Provides Shiny applications for various array and NGS applications. Currently very RNA-seq centric, with plans for expansion.",
              "homepage": "https://github.com/pinin4fjords/shinyngs",
              "documentation": "https://rawgit.com/pinin4fjords/shinyngs/master/vignettes/shinyngs.html",
              "tool_dev_url": "https://github.com/pinin4fjords/shinyngs",
              "licence": "['AGPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing information on experiment, at a minimum an id.\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing information on experiment, at a minimum an id. To match meta.\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "sample": {
              "type": "file",
              "description": "CSV-format sample sheet with sample metadata\n"
            }
          },
          {
            "feature_meta": {
              "type": "file",
              "description": "TSV-format feature (e.g. gene) metadata\n"
            }
          },
          {
            "assay_files": {
              "type": "file",
              "description": "List of TSV-format matrix files representing different measures for the same samples (e.g. raw and normalised).\n"
            }
          },
          {
            "contrasts": {
              "type": "file",
              "description": "CSV-format file with four columns identifying the sample sheet variable, reference level, treatment level, and optionally a comma-separated list of covariates used as blocking factors.\n"
            }
          },
          {
            "differential_results": {
              "type": "file",
              "description": "List of TSV-format differential analysis outputs, one per row of the contrasts file\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing information on experiment.\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "data": {
              "type": "file",
              "description": "A shinyngs ExploratorySummarizedExperiment\nobject serialized with saveRDS().\n",
              "pattern": "app/data.rds"
            }
          },
          {
            "app": {
              "type": "file",
              "description": "The mini R script required build an application from data.rds.\n",
              "pattern": "app/app.R"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "shinyngs_staticdifferential",
      "path": "modules/nf-core/shinyngs/staticdifferential/meta.yml",
      "type": "module",
      "meta": {
        "name": "shinyngs_staticdifferential",
        "description": "Make plots for interpretation of differential abundance statistics",
        "keywords": [
          "rnaseq",
          "plot",
          "differential",
          "shinyngs"
        ],
        "tools": [
          {
            "shinyngs": {
              "description": "Provides Shiny applications for various array and NGS applications. Currently very RNA-seq centric, with plans for expansion.",
              "homepage": "https://github.com/pinin4fjords/shinyngs",
              "documentation": "https://rawgit.com/pinin4fjords/shinyngs/master/vignettes/shinyngs.html",
              "tool_dev_url": "https://github.com/pinin4fjords/shinyngs",
              "licence": "['AGPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing contrast information, to be passed as reference\nand target levels, like '--reference_level $meta.reference\n--treatment_level $meta.target'\ne.g. [ variable:'treatment', reference:'treated', control:'saline', blocking:'' ]\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing information on experiment represented by max,\nfeatures and samples, at a minimum an id.\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "differential_results": {
              "type": "file",
              "description": "CSV or TSV-format tabular file with differential analysis outputs\n"
            }
          },
          {
            "sample": {
              "type": "file",
              "description": "CSV or TSV-format sample sheet with sample metadata\n"
            }
          },
          {
            "feature_meta": {
              "type": "file",
              "description": "CSV or TSV-format feature (e.g. gene) metadata\n"
            }
          },
          {
            "assay_file": {
              "type": "file",
              "description": "CSV or TSV matrix file to use alongside differential statistics in\ninterpretation. Usually a normalised form.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing contrast information\ne.g. [ variable:'treatment', reference:'treated', control:'saline', blocking:'' ]\n"
            }
          },
          {
            "volcanos_png": {
              "type": "file",
              "description": "Meta-keyed tuple containing a PNG output for a volcano plot built from\nthe differential result table.\n"
            }
          },
          {
            "volcanos_html": {
              "type": "file",
              "description": "Meta-keyed tuple containing an HTML output for a volcano plot built\nfrom the differential result table.\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "shinyngs_staticexploratory",
      "path": "modules/nf-core/shinyngs/staticexploratory/meta.yml",
      "type": "module",
      "meta": {
        "name": "shinyngs_staticexploratory",
        "description": "Make exploratory plots for analysis of matrix data, including PCA, Boxplots and density plots",
        "keywords": [
          "exploratory",
          "plot",
          "boxplot",
          "density",
          "PCA"
        ],
        "tools": [
          {
            "shinyngs": {
              "description": "Provides Shiny applications for various array and NGS applications. Currently very RNA-seq centric, with plans for expansion.",
              "homepage": "https://github.com/pinin4fjords/shinyngs",
              "documentation": "https://rawgit.com/pinin4fjords/shinyngs/master/vignettes/shinyngs.html",
              "tool_dev_url": "https://github.com/pinin4fjords/shinyngs",
              "licence": "['AGPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing information on variables for use in plots,\nprobably experimental information, but at a minimum an id.\ne.g. [ id:'treatment' ]\n"
            }
          },
          {
            "sample": {
              "type": "file",
              "description": "CSV-format sample sheet with sample metadata\n"
            }
          },
          {
            "feature_meta": {
              "type": "file",
              "description": "TSV-format feature (e.g. gene) metadata\n"
            }
          },
          {
            "assay_files": {
              "type": "file",
              "description": "List of TSV-format matrix files representing different measures for the same samples (e.g. raw and normalised).\n"
            }
          }
        ],
        "output": [
          {
            "boxplots_png": {
              "type": "file",
              "description": "Meta-keyed tuple containing PNG output for box plots covering input\nmatrices.\n"
            }
          },
          {
            "boxplots_html": {
              "type": "file",
              "description": "Meta-keyed tuple containing HTML output for box plots covering input\nmatrices.\n"
            }
          },
          {
            "densities_png": {
              "type": "file",
              "description": "Meta-keyed tuple containing PNG output for density plots\ncovering input matrices.\n"
            }
          },
          {
            "densities_html": {
              "type": "file",
              "description": "Meta-keyed tuple containing HTML output for density plots\ncovering input matrices.\n"
            }
          },
          {
            "pca2d_png": {
              "type": "file",
              "description": "Meta-keyed tuple containing a PNG output for 2D PCA plots covering\nspecified input matrix (by default the last one in the input list.\n"
            }
          },
          {
            "pca2d_html": {
              "type": "file",
              "description": "Meta-keyed tuple containing an HTML output for 2D PCA plots covering\nspecified input matrix (by default the last one in the input list.\n"
            }
          },
          {
            "pca3d_png": {
              "type": "file",
              "description": "Meta-keyed tuple containing a PNG output for 3D PCA plots covering\nspecified input matrix (by default the last one in the input list.\n"
            }
          },
          {
            "pca3d_html": {
              "type": "file",
              "description": "Meta-keyed tuple containing an HTML output for 3D PCA plots covering\nspecified input matrix (by default the last one in the input list.\n"
            }
          },
          {
            "mad_png": {
              "type": "file",
              "description": "Meta-keyed tuple containing a PNG output for MAD correlation plots\ncovering specified input matrix (by default the last one in the input\nlist.\n"
            }
          },
          {
            "mad_dendro": {
              "type": "file",
              "description": "Meta-keyed tuple containing an HTML output for MAD correlation plots\ncovering specified input matrix (by default the last one in the input\nlist.\n"
            }
          },
          {
            "dendro": {
              "type": "file",
              "description": "Meta-keyed tuple containing a PNG, for a sample clustering\ndendrogramcovering specified input matrix (by default the last one in\nthe input list.\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "shinyngs_validatefomcomponents",
      "path": "modules/nf-core/shinyngs/validatefomcomponents/meta.yml",
      "type": "module",
      "meta": {
        "name": "shinyngs_validatefomcomponents",
        "description": "validate consistency of feature and sample annotations with matrices and contrasts",
        "keywords": [
          "expression",
          "features",
          "observations",
          "validation"
        ],
        "tools": [
          {
            "shinyngs": {
              "description": "Provides Shiny applications for various array and NGS applications. Currently very RNA-seq centric, with plans for expansion.",
              "homepage": "https://github.com/pinin4fjords/shinyngs",
              "documentation": "https://rawgit.com/pinin4fjords/shinyngs/master/vignettes/shinyngs.html",
              "tool_dev_url": "https://github.com/pinin4fjords/shinyngs",
              "licence": "['AGPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing information on experiment, at a minimum an id.\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing information on features.\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing information on contrasts.\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing information on experiment, at a minimum an id. To match meta.\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "sample": {
              "type": "file",
              "description": "CSV-format sample sheet with sample metadata\n"
            }
          },
          {
            "feature_meta": {
              "type": "file",
              "description": "TSV-format feature (e.g. gene) metadata\n"
            }
          },
          {
            "assay_files": {
              "type": "file",
              "description": "List of TSV-format matrix files representing different measures for the same samples (e.g. raw and normalised).\n"
            }
          },
          {
            "contrasts": {
              "type": "file",
              "description": "CSV-format file with four columns identifying the sample sheet variable, reference level, treatment level, and optionally a comma-separated list of covariates used as blocking factors.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing information on experiment.\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "sample_meta": {
              "type": "file",
              "description": "File containing validated sample metadata",
              "pattern": "/*.sample_metadata.tsv"
            }
          },
          {
            "feature_meta": {
              "type": "file",
              "description": "File containing validated feature metadata",
              "pattern": "/*.feature_metadata.tsv",
              "optional": true
            }
          },
          {
            "assays": {
              "type": "file",
              "description": "Files containing validated matrices",
              "pattern": "/*.assay.tsv"
            }
          },
          {
            "contrasts": {
              "type": "file",
              "description": "Files containing validated matrices",
              "pattern": "/*.contrasts_file.tsv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "shovill",
      "path": "modules/nf-core/shovill/meta.yml",
      "type": "module",
      "meta": {
        "name": "shovill",
        "description": "Assemble bacterial isolate genomes from Illumina paired-end reads",
        "keywords": [
          "bacterial",
          "assembly",
          "illumina"
        ],
        "tools": [
          {
            "shovill": {
              "description": "Microbial assembly pipeline for Illumina paired-end reads",
              "homepage": "https://github.com/tseemann/shovill",
              "documentation": "https://github.com/tseemann/shovill/blob/master/README.md",
              "licence": [
                "GPL v2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input paired-end FastQ files"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "contigs": {
              "type": "file",
              "description": "The final assembly produced by Shovill",
              "pattern": "contigs.fa"
            }
          },
          {
            "corrections": {
              "type": "file",
              "description": "List of post-assembly corrections made by Shovill",
              "pattern": "shovill.corrections"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Full log file for bug reporting",
              "pattern": "shovill.log"
            }
          },
          {
            "raw_contigs": {
              "type": "file",
              "description": "Raw assembly produced by the assembler (SKESA, SPAdes, MEGAHIT, or Velvet)",
              "pattern": "{skesa,spades,megahit,velvet}.fasta"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Assembly graph produced by MEGAHIT, SPAdes, or Velvet",
              "pattern": "contigs.{fastg,gfa,LastGraph}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "sickle",
      "path": "modules/nf-core/sickle/meta.yml",
      "type": "module",
      "meta": {
        "name": "sickle",
        "description": "A windowed adaptive trimming tool for FASTQ files using quality",
        "keywords": [
          "fastq",
          "sliding window",
          "trimming"
        ],
        "tools": [
          {
            "sickle": {
              "description": "a tool that determines clipping of reads on 3' end and 5'end based on base quality ",
              "homepage": "https://github.com/najoshi/sickle",
              "tool_dev_url": "https://github.com/najoshi/sickle",
              "licence": "['MIT License']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data, respectively. File of forward reads must be supplied first and reverse reads as the second e.g. [\"read.1.fastq.gz\",\"read.2.fastq.gz\"]",
              "pattern": "*.{fq,fastq,fq.gz,fastq.gz}"
            }
          },
          {
            "qual_type": {
              "type": "string",
              "description": "sickle needs a base quality values, which could be either illumina, solexa or sanger",
              "pattern": "illumina or solexa or sanger"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false, qual:'Illumina'  ]\n"
            }
          },
          {
            "single_trimmed": {
              "type": "file",
              "description": "5' or 3' trimmed (based on base quality) single-end fastq file",
              "pattern": "*.se.trimmed.fastq.gz"
            }
          },
          {
            "paired1_trimmed": {
              "type": "file",
              "description": "5' or 3' trimmed  (based on base quality) R1 fastq file",
              "pattern": "*.pe1.trimmed.fastq.gz"
            }
          },
          {
            "paired2_trimmed": {
              "type": "file",
              "description": "5' or 3' trimmed  (based on base quality) R2 fastq file",
              "pattern": "*.pe2.trimmed.fastq.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "log file",
              "pattern": "*.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@BioInf2305"
        ]
      }
    },
    {
      "name": "sistr",
      "path": "modules/nf-core/sistr/meta.yml",
      "type": "module",
      "meta": {
        "name": "sistr",
        "description": "Serovar prediction of salmonella assemblies",
        "keywords": [
          "bacteria",
          "fasta",
          "salmonella"
        ],
        "tools": [
          {
            "sistr": {
              "description": "Salmonella In Silico Typing Resource (SISTR) commandline tool for serovar prediction",
              "homepage": "https://github.com/phac-nml/sistr_cmd",
              "documentation": "https://github.com/phac-nml/sistr_cmd",
              "tool_dev_url": "https://github.com/phac-nml/sistr_cmd",
              "doi": "10.1371/journal.pone.0147101",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Nucleotide or protein sequences in FASTA format",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz,faa,faa.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "SISTR serovar prediction",
              "pattern": "*.{tsv}"
            }
          },
          {
            "allele_json": {
              "type": "file",
              "description": "Allele sequences and info to JSON",
              "pattern": "*.{json}"
            }
          },
          {
            "allele_fasta": {
              "type": "file",
              "description": "FASTA file destination of novel cgMLST alleles",
              "pattern": "*.{fasta}"
            }
          },
          {
            "cgmlst_csv": {
              "type": "file",
              "description": "CSV file destination for cgMLST allelic profiles",
              "pattern": "*.{csv}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "slimfastq",
      "path": "modules/nf-core/slimfastq/meta.yml",
      "type": "module",
      "meta": {
        "name": "slimfastq",
        "description": "Fast, efficient, lossless compression of FASTQ files.",
        "keywords": [
          "FASTQ",
          "compression",
          "lossless"
        ],
        "tools": [
          {
            "slimfastq": {
              "description": "slimfastq efficiently compresses/decompresses FASTQ files",
              "homepage": "https://github.com/Infinidat/slimfastq",
              "tool_dev_url": "https://github.com/Infinidat/slimfastq",
              "licence": "['BSD-3-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Either a single-end FASTQ file or paired-end files.",
              "pattern": "*.{fq.gz,fastq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sfq": {
              "type": "file",
              "description": "Either one or two sequence files in slimfastq compressed format.",
              "pattern": "*.{sfq}"
            }
          }
        ],
        "authors": [
          "@Midnighter"
        ]
      }
    },
    {
      "name": "smncopynumbercaller",
      "path": "modules/nf-core/smncopynumbercaller/meta.yml",
      "type": "module",
      "meta": {
        "name": "smncopynumbercaller",
        "description": "tool to call the copy number of full-length SMN1, full-length SMN2, as well as SMN2Δ7–8 (SMN2 with a deletion of Exon7-8) from a whole-genome sequencing (WGS) BAM file.",
        "keywords": [
          "copy number, BAM, CRAM, SMN1, SMN2"
        ],
        "tools": [
          {
            "smncopynumbercaller": {
              "description": "call copy number of SMN1, SMN2, SMN2Δ7–8 from a bam file",
              "homepage": "https://github.com/Illumina/SMNCopyNumberCaller",
              "documentation": "https://github.com/Illumina/SMNCopyNumberCaller",
              "tool_dev_url": "https://github.com/Illumina/SMNCopyNumberCaller",
              "doi": "10.1038/s41436-020-0754-0",
              "licence": "Apache License Version 2.0"
            }
          }
        ],
        "input": [
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM/CRAM index file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "run_metrics": {
              "type": "file",
              "description": "File containing run parameters of SMNCopyNumberCaller",
              "pattern": "*.{json}"
            }
          },
          {
            "smncopynumber": {
              "type": "file",
              "description": "File containing the output of SMNCopyNumberCaller",
              "pattern": "*.{tsv}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@peterpru"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "smoothxg",
      "path": "modules/nf-core/smoothxg/meta.yml",
      "type": "module",
      "meta": {
        "name": "smoothxg",
        "description": "Linearize and simplify variation graph in GFA format using blocked partial order alignment",
        "keywords": [
          "gfa",
          "graph",
          "pangenome",
          "variation graph",
          "POA"
        ],
        "tools": [
          {
            "smoothxg": {
              "description": "smoothxg linearizes and simplifies variation graphs using blocked partial\norder alignment.\n",
              "homepage": "https://github.com/pangenome/smoothxg",
              "documentation": "https://github.com/pangenome/smoothxg",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Variation graph in GFA 1.0 format",
              "pattern": "*.{gfa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Linearized and simplified graph in GFA 1.0 format",
              "pattern": "*.smoothxg.{gfa}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "maf": {
              "type": "file",
              "description": "write the multiple sequence alignments (MSAs) in MAF format in this file (optional)",
              "pattern": "*.{maf}"
            }
          }
        ],
        "authors": [
          "@heuermh, @subwaystation"
        ]
      },
      "pipelines": [
        {
          "name": "pangenome",
          "version": "dev"
        }
      ]
    },
    {
      "name": "smoove_call",
      "path": "modules/nf-core/smoove/call/meta.yml",
      "type": "module",
      "meta": {
        "name": "smoove_call",
        "description": "smoove simplifies and speeds calling and genotyping SVs for short reads. It also improves specificity by removing many spurious alignment signals that are indicative of low-level noise and often contribute to spurious calls. Developped by Brent Pedersen.",
        "keywords": [
          "structural variants",
          "SV",
          "vcf",
          "wgs"
        ],
        "tools": [
          {
            "smoove": {
              "description": "structural variant calling and genotyping with existing tools, but, smoothly",
              "homepage": "https://github.com/brentp/smoove",
              "documentation": "https://brentp.github.io/post/smoove/",
              "tool_dev_url": "https://github.com/brentp/smoove",
              "licence": "['Apache-2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Index of BAM/CRAM file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "exclude_beds": {
              "type": "file",
              "description": "A BED file containing the regions to exclude from the SV calling",
              "pattern": "*.bed"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.{fasta,fna,fa}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF file",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "authors": [
          "@scorreard",
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "snapaligner_align",
      "path": "modules/nf-core/snapaligner/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "snapaligner_align",
        "description": "Performs fastq alignment to a fasta reference using SNAP",
        "keywords": [
          "alignment",
          "map",
          "fastq",
          "bam",
          "sam"
        ],
        "tools": [
          {
            "snapaligner": {
              "description": "Scalable Nucleotide Alignment Program -- a fast and accurate read aligner for high-throughput sequencing data",
              "homepage": "http://snap.cs.berkeley.edu",
              "documentation": "https://1drv.ms/b/s!AhuEg_0yZD86hcpblUt-muHKYsG8fA?e=R8ogug",
              "tool_dev_url": "https://github.com/amplab/snap",
              "doi": "10.1101/2021.11.23.469039",
              "licence": "['Apache v2']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input fastq files of size 2 for paired fastq or 1 for bam or single fastq",
              "pattern": "*.{fastq.gz,fq.gz,fastq,fq,bam}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "List of SNAP genome index files",
              "pattern": "{Genome,GenomeIndex,GenomeIndexHash,OverflowTable}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Aligned BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Optional aligned BAM file index",
              "pattern": "*.{bai}"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "snapaligner_index",
      "path": "modules/nf-core/snapaligner/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "snapaligner_index",
        "description": "Create a SNAP index for reference genome",
        "keywords": [
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "snapaligner": {
              "description": "Scalable Nucleotide Alignment Program -- a fast and accurate read aligner for high-throughput sequencing data",
              "homepage": "http://snap.cs.berkeley.edu",
              "documentation": "https://1drv.ms/b/s!AhuEg_0yZD86hcpblUt-muHKYsG8fA?e=R8ogug",
              "tool_dev_url": "https://github.com/amplab/snap",
              "doi": "10.1101/2021.11.23.469039",
              "licence": "['Apache v2']"
            }
          }
        ],
        "input": [
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          },
          {
            "altcontigfile": {
              "type": "file",
              "description": "Optional file with a list of alt contig names, one per line."
            }
          },
          {
            "nonaltcontigfile": {
              "type": "file",
              "description": "Optional file that contains a list of contigs (one per line) that will not be marked ALT regardless of size."
            }
          },
          {
            "altliftoverfile": {
              "type": "file",
              "description": "Optional file containing ALT-to-REF mappings (SAM format). e.g., hs38DH.fa.alt from bwa-kit."
            }
          }
        ],
        "output": [
          {
            "index": {
              "type": "file",
              "description": "SNAP genome index files",
              "pattern": "{Genome,GenomeIndex,GenomeIndexHash,OverflowTable}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "sniffles",
      "path": "modules/nf-core/sniffles/meta.yml",
      "type": "module",
      "meta": {
        "name": "sniffles",
        "description": "structural-variant calling with sniffles",
        "keywords": [
          "sniffles",
          "structural-variant calling"
        ],
        "tools": [
          {
            "sniffles": {
              "description": "a fast structural variant caller for long-read sequencing",
              "homepage": "https://github.com/fritzsedlazeck/Sniffles",
              "documentation": "https://github.com/fritzsedlazeck/Sniffles#readme",
              "tool_dev_url": "https://github.com/fritzsedlazeck/Sniffles",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Index of BAM file",
              "pattern": "*.bai"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'fasta' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference database in FASTA format\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "snf": {
              "type": "file",
              "description": "Compressed SNF file",
              "pattern": "*.snf.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@christopher-hakkaart",
          "@yuukiiwa"
        ]
      }
    },
    {
      "name": "snippy_core",
      "path": "modules/nf-core/snippy/core/meta.yml",
      "type": "module",
      "meta": {
        "name": "snippy_core",
        "description": "Core-SNP alignment from Snippy outputs",
        "keywords": [
          "core",
          "alignment",
          "bacteria",
          "snippy"
        ],
        "tools": [
          {
            "snippy": {
              "description": "Rapid bacterial SNP calling and core genome alignments",
              "homepage": "https://github.com/tseemann/snippy",
              "documentation": "https://github.com/tseemann/snippy",
              "tool_dev_url": "https://github.com/tseemann/snippy",
              "licence": "['GPL v2']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Annotated variants in VCF format",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "aligned_fa": {
              "type": "file",
              "description": "A version of the reference but with - at position with depth=0 and N for 0 < depth < --mincov (does not have variants)",
              "pattern": "*.aligned.fa.gz"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "Reference genome in GenBank (preferred) or FASTA format",
              "pattern": "*.{gbk,gbk.gz,gbff,gbff.gz,fa,fa.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "aln": {
              "type": "file",
              "description": "A core SNP alignment in FASTA format",
              "pattern": "*.aln"
            }
          },
          {
            "full_aln": {
              "type": "file",
              "description": "A whole genome SNP alignment (includes invariant sites)",
              "pattern": "*.full.aln"
            }
          },
          {
            "tab": {
              "type": "file",
              "description": "Tab-separated columnar list of core SNP sites with alleles but NO annotations",
              "pattern": "*.tab"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Multi-sample VCF file with genotype GT tags for all discovered alleles",
              "pattern": "*.vcf"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Tab-separated columnar list of alignment/core-size statistics",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "snippy_run",
      "path": "modules/nf-core/snippy/run/meta.yml",
      "type": "module",
      "meta": {
        "name": "snippy_run",
        "description": "Rapid haploid variant calling",
        "keywords": [
          "variant",
          "fastq",
          "bacteria"
        ],
        "tools": [
          {
            "snippy": {
              "description": "Rapid bacterial SNP calling and core genome alignments",
              "homepage": "https://github.com/tseemann/snippy",
              "documentation": "https://github.com/tseemann/snippy",
              "tool_dev_url": "https://github.com/tseemann/snippy",
              "licence": "['GPL v2']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n",
              "pattern": "*.{fq,fastq,fq.gz,fastq.gz}"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Reference genome in GenBank (preferred) or FASTA format",
              "pattern": "*.{gbk,gbk.gz,fa,fa.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tab": {
              "type": "file",
              "description": "A simple tab-separated summary of all the variants",
              "pattern": "*.tab"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "A comma-separated version of the .tab file",
              "pattern": "*.csv"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "A HTML version of the .tab file",
              "pattern": "*.html"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The final annotated variants in VCF format",
              "pattern": "*.vcf"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "The variants in BED format",
              "pattern": "*.bed"
            }
          },
          {
            "gff": {
              "type": "file",
              "description": "The variants in GFF3 format",
              "pattern": "*.gff"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "The alignments in BAM format. Includes unmapped, multimapping reads. Excludes duplicates.",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Index for the .bam file",
              "pattern": "*.bam.bai"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "A log file with the commands run and their outputs",
              "pattern": "*.log"
            }
          },
          {
            "aligned_fa": {
              "type": "file",
              "description": "A version of the reference but with - at position with depth=0 and N for 0 < depth < --mincov (does not have variants)",
              "pattern": "*.aligned.fa"
            }
          },
          {
            "consensus_fa": {
              "type": "file",
              "description": "A version of the reference genome with all variants instantiated",
              "pattern": "*.consensus.fa"
            }
          },
          {
            "consensus_subs_fa": {
              "type": "file",
              "description": "A version of the reference genome with only substitution variants instantiated",
              "pattern": "*.consensus.subs.fa"
            }
          },
          {
            "raw_vcf": {
              "type": "file",
              "description": "The unfiltered variant calls from Freebayes",
              "pattern": "*.raw.vcf"
            }
          },
          {
            "filt_vcf": {
              "type": "file",
              "description": "The filtered variant calls from Freebayes",
              "pattern": "*.filt.vcf"
            }
          },
          {
            "vcf_gz": {
              "type": "file",
              "description": "Compressed .vcf file via BGZIP",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "vcf_csi": {
              "type": "file",
              "description": "Index for the .vcf.gz via bcftools index",
              "pattern": "*.vcf.gz.csi"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Tab-separated columnar list of statistics",
              "pattern": "*.txt"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "snpdists",
      "path": "modules/nf-core/snpdists/meta.yml",
      "type": "module",
      "meta": {
        "name": "snpdists",
        "description": "Pairwise SNP distance matrix from a FASTA sequence alignment",
        "keywords": [
          "snp-dists",
          "distance-matrix"
        ],
        "tools": [
          {
            "snpdists": {
              "description": "Convert a FASTA alignment to SNP distance matrix",
              "homepage": "https://github.com/tseemann/snp-dists",
              "documentation": "https://github.com/tseemann/snp-dists",
              "tool_dev_url": "https://github.com/tseemann/snp-dists",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "alignment": {
              "type": "file",
              "description": "The input FASTA sequence alignment file",
              "pattern": "*.{fasta,fasta.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "The output TSV file containing SNP distance matrix",
              "pattern": "*.tsv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@abhi18av"
        ]
      }
    },
    {
      "name": "snpeff_download",
      "path": "modules/nf-core/snpeff/download/meta.yml",
      "type": "module",
      "meta": {
        "name": "SNPEFF_DOWNLOAD",
        "description": "Genetic variant annotation and functional effect prediction toolbox",
        "keywords": [
          "annotation"
        ],
        "tools": [
          {
            "snpeff": {
              "description": "SnpEff is a variant annotation and effect prediction tool.\nIt annotates and predicts the effects of genetic variants on genes and proteins (such as amino acid changes).\n",
              "homepage": "https://pcingola.github.io/SnpEff/",
              "documentation": "https://pcingola.github.io/SnpEff/se_introduction/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "vcf to annotate\n"
            }
          },
          {
            "db": {
              "type": "value",
              "description": "which db to annotate with\n"
            }
          }
        ],
        "output": [
          {
            "cache": {
              "type": "file",
              "description": "snpEff cache\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "snpeff_snpeff",
      "path": "modules/nf-core/snpeff/snpeff/meta.yml",
      "type": "module",
      "meta": {
        "name": "SNPEFF_SNPEFF",
        "description": "Genetic variant annotation and functional effect prediction toolbox",
        "keywords": [
          "annotation",
          "variant",
          "effect prediction"
        ],
        "tools": [
          {
            "snpeff": {
              "description": "SnpEff is a variant annotation and effect prediction tool.\nIt annotates and predicts the effects of genetic variants on genes and proteins (such as amino acid changes).\n",
              "homepage": "https://pcingola.github.io/SnpEff/",
              "documentation": "https://pcingola.github.io/SnpEff/se_introduction/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "vcf to annotate\n"
            }
          },
          {
            "db": {
              "type": "string",
              "description": "which db to annotate with\n"
            }
          },
          {
            "cache": {
              "type": "file",
              "description": "path to snpEff cache (optional)\n"
            }
          }
        ],
        "output": [
          {
            "vcf": {
              "type": "file",
              "description": "annotated vcf\n",
              "pattern": "*.ann.vcf"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "snpEff report csv file",
              "pattern": "*.csv"
            }
          },
          {
            "summary_html": {
              "type": "file",
              "description": "snpEff summary statistics in html file",
              "pattern": "*.html"
            }
          },
          {
            "genes_txt": {
              "type": "file",
              "description": "txt (tab separated) file having counts of the number of variants affecting each transcript and gene",
              "pattern": "*.genes.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "snpsift_annotate",
      "path": "modules/nf-core/snpsift/annotate/meta.yml",
      "type": "module",
      "meta": {
        "name": "snpsift_annotate",
        "description": "Annotate a VCF file with another VCF file",
        "keywords": [
          "variant calling",
          "annotate",
          "snpsift",
          "cancer genomics"
        ],
        "tools": [
          {
            "snpsift": {
              "description": "SnpSift is a toolbox that allows you to filter and manipulate annotated files",
              "homepage": "https://pcingola.github.io/SnpEff/ss_introduction/",
              "documentation": "https://pcingola.github.io/SnpEff/ss_introduction/",
              "tool_dev_url": "https://github.com/pcingola/SnpEff",
              "doi": "10.3389/fgene.2012.00035",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information regarding vcf file provided\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf, vcf.gz}"
            }
          },
          {
            "vcf_tbi": {
              "type": "file",
              "description": "Tabix file for compressed vcf provided",
              "pattern": "*.{tbi}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy map containing sample information regarding database provided\n"
            }
          },
          {
            "database": {
              "type": "file",
              "description": "Database for use to annotate",
              "pattern": "*.{vcf/vcf.gz}"
            }
          },
          {
            "dbs_tbi": {
              "type": "file",
              "description": "Tabix file for compressed database provided",
              "pattern": "*.{tbi}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Variant Calling File annotated",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "authors": [
          "@LlaneroHiboreo"
        ]
      }
    },
    {
      "name": "snpsift_dbnsfp",
      "path": "modules/nf-core/snpsift/dbnsfp/meta.yml",
      "type": "module",
      "meta": {
        "name": "snpsift_dbnsfp",
        "description": "The dbNSFP is an integrated database of functional predictions from multiple algorithms",
        "keywords": [
          "variant calling",
          "dbnsfp",
          "snpsift",
          "cancer genomics",
          "predictions"
        ],
        "tools": [
          {
            "snpsift": {
              "description": "SnpSift is a toolbox that allows you to filter and manipulate annotated files",
              "homepage": "https://pcingola.github.io/SnpEff/ss_introduction/",
              "documentation": "https://pcingola.github.io/SnpEff/ss_dbnsfp/",
              "tool_dev_url": "https://github.com/pcingola/SnpEff",
              "doi": "10.3389/fgene.2012.00035",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information regarding vcf file provided\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf, vcf.gz}"
            }
          },
          {
            "vcf_tbi": {
              "type": "file",
              "description": "Tabix file for compressed vcf provided",
              "pattern": "*.{tbi}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy map containing sample information regarding database provided\n"
            }
          },
          {
            "database": {
              "type": "file",
              "description": "Database for use to annotate",
              "pattern": "*.{vcf/vcf.gz}"
            }
          },
          {
            "dbs_tbi": {
              "type": "file",
              "description": "Tabix file for compressed database provided",
              "pattern": "*.{tbi}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Variant Calling File annotated",
              "pattern": "*.{vcf}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@LlaneroHiboreo"
        ]
      }
    },
    {
      "name": "snpsift_split",
      "path": "modules/nf-core/snpsift/split/meta.yml",
      "type": "module",
      "meta": {
        "name": "snpsift_split",
        "description": "Splits/Joins VCF(s) file into chromosomes",
        "keywords": [
          "split",
          "join",
          "vcf"
        ],
        "tools": [
          {
            "snpsift": {
              "description": "SnpSift is a toolbox that allows you to filter and manipulate annotated files",
              "homepage": "https://pcingola.github.io/SnpEff/ss_introduction/",
              "documentation": "https://pcingola.github.io/SnpEff/ss_introduction/",
              "tool_dev_url": "https://github.com/pcingola/SnpEff",
              "doi": "10.3389/fgene.2012.00035",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file (split) or list of files (join)",
              "description": "VCF file(s)",
              "pattern": "*.{vcf,vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "out_vcfs": {
              "type": "file",
              "description": "Split/Joined VCF file(s)",
              "pattern": "*.vcf"
            }
          }
        ],
        "authors": [
          "@SusiJo",
          "@jonasscheid"
        ]
      }
    },
    {
      "name": "snpsites",
      "path": "modules/nf-core/snpsites/meta.yml",
      "type": "module",
      "meta": {
        "name": "snpsites",
        "description": "Rapidly extracts SNPs from a multi-FASTA alignment.",
        "keywords": [
          "SNPs",
          "invariant",
          "constant"
        ],
        "tools": [
          {
            "snpsites": {
              "description": "Rapidly extracts SNPs from a multi-FASTA alignment.",
              "homepage": "https://www.sanger.ac.uk/tool/snp-sites/",
              "documentation": "https://github.com/sanger-pathogens/snp-sites",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "alignment": {
              "type": "file",
              "description": "fasta alignment file",
              "pattern": "*.{fasta,fas,fa,aln}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Variant fasta file",
              "pattern": "*.{fas}"
            }
          },
          {
            "constant_sites": {
              "type": "file",
              "description": "Text file containing counts of constant sites",
              "pattern": "*.{sites.txt}"
            }
          }
        ],
        "authors": [
          "@avantonder"
        ]
      }
    },
    {
      "name": "somalier_ancestry",
      "path": "modules/nf-core/somalier/ancestry/meta.yml",
      "type": "module",
      "meta": {
        "name": "somalier_ancestry",
        "description": "Somalier can extract informative sites, evaluate relatedness, and perform quality-control on BAM/CRAM/BCF/VCF/GVCF or from jointly-called VCFs",
        "keywords": [
          "relatedness",
          "QC",
          "bam",
          "cram",
          "vcf",
          "gvcf",
          "ancestry",
          "identity",
          "kinship",
          "informative sites",
          "family"
        ],
        "tools": [
          {
            "somalier": {
              "description": "Somalier can extract informative sites, evaluate relatedness, and perform quality-control on BAM/CRAM/BCF/VCF/GVCF or from jointly-called VCFs",
              "homepage": "https://github.com/brentp/somalier",
              "documentation": "https://github.com/brentp/somalier",
              "tool_dev_url": "https://github.com/brentp/somalier",
              "doi": "10.1186/s13073-020-00761-2",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "query_somalier_files": {
              "type": "file",
              "description": "Set of somalier files for query samples. Obtained via somalier extract.",
              "pattern": "*.{somalier}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing labelled samples information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "labelled_somalier_files": {
              "type": "file",
              "description": "Set of somalier files for labelled samples. e.g. Somalier files for 1kg https://zenodo.org/record/3479773/files/1kg.somalier.tar.gz?download=1",
              "pattern": "*.{somalier}"
            }
          },
          {
            "labels_tsv": {
              "type": "file",
              "description": "TSV for labelled samples. e.g. Somalier labels for 1kg https://raw.githubusercontent.com/brentp/somalier/master/scripts/ancestry-labels-1kg.tsv",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "TSV with ancestry information for query and labelled samples.",
              "pattern": "*.{-ancestry.tsv}"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "html file with ancestry information for query and labelled samples.",
              "pattern": "*.{-ancestry.html}"
            }
          }
        ],
        "authors": [
          "@atrigila"
        ]
      }
    },
    {
      "name": "somalier_extract",
      "path": "modules/nf-core/somalier/extract/meta.yml",
      "type": "module",
      "meta": {
        "name": "somalier_extract",
        "description": "Somalier can extract informative sites, evaluate relatedness, and perform quality-control on BAM/CRAM/BCF/VCF/GVCF or from jointly-called VCFs",
        "keywords": [
          "relatedness",
          "QC",
          "bam",
          "cram",
          "vcf",
          "gvcf",
          "ancestry",
          "identity",
          "kinship",
          "informative sites",
          "family"
        ],
        "tools": [
          {
            "somalier": {
              "description": "Somalier can extract informative sites, evaluate relatedness, and perform quality-control on BAM/CRAM/BCF/VCF/GVCF or from jointly-called VCFs",
              "homepage": "https://github.com/brentp/somalier",
              "documentation": "https://github.com/brentp/somalier/blob/master/README.md",
              "tool_dev_url": "https://github.com/brentp/somalier",
              "doi": "10.1186/s13073-020-00761-2",
              "licence": "MIT License"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM/SAM/BCF/VCF/GVCF or jointly-called VCF file"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "index file of the input data, e.g., bam.bai, cram.crai"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.{fasta,fna,fas,fa}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "FASTA index file",
              "pattern": "*.fai"
            }
          },
          {
            "sites": {
              "type": "file",
              "description": "sites file in VCF format which can be taken from https://github.com/brentp/somalier",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "extract": {
              "type": "file",
              "description": "binary output file based on extracted sites",
              "pattern": "*.{somalier}"
            }
          }
        ],
        "authors": [
          "@ashotmarg",
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "somalier_relate",
      "path": "modules/nf-core/somalier/relate/meta.yml",
      "type": "module",
      "meta": {
        "name": "somalier_relate",
        "description": "Somalier can extract informative sites, evaluate relatedness, and perform quality-control on BAM/CRAM/BCF/VCF/GVCF or from jointly-called VCFs",
        "keywords": [
          "relatedness",
          "QC",
          "bam",
          "cram",
          "vcf",
          "gvcf",
          "ancestry",
          "identity",
          "kinship",
          "informative sites",
          "family"
        ],
        "tools": [
          {
            "somalier": {
              "description": "Somalier can extract informative sites, evaluate relatedness, and perform quality-control on BAM/CRAM/BCF/VCF/GVCF or from jointly-called VCFs",
              "homepage": "https://github.com/brentp/somalier",
              "documentation": "https://github.com/brentp/somalier/blob/master/README.md",
              "tool_dev_url": "https://github.com/brentp/somalier",
              "doi": "10.1186/s13073-020-00761-2",
              "licence": "MIT License"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "extract": {
              "type": "file(s)",
              "description": "extract file(s) from Somalier extract",
              "pattern": "*.somalier"
            }
          },
          {
            "ped": {
              "type": "file",
              "description": "optional path to a ped or fam file indicating the expected relationships among samples",
              "pattern": "*.{ped,fam}"
            }
          },
          {
            "sample_groups": {
              "type": "file",
              "description": "optional path to expected groups of samples such as tumor normal pairs specified as comma-separated groups per line",
              "pattern": "*.{txt,csv}"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "html file",
              "pattern": "*.html"
            }
          },
          {
            "pairs_tsv": {
              "type": "file",
              "description": "tsv file with output stats for pairs of samples",
              "pattern": "*.pairs.tsv"
            }
          },
          {
            "samples_tsv": {
              "type": "file",
              "description": "tsv file with sample-level information",
              "pattern": "*.samples.tsv"
            }
          }
        ],
        "authors": [
          "@ashotmarg",
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "sortmerna",
      "path": "modules/nf-core/sortmerna/meta.yml",
      "type": "module",
      "meta": {
        "name": "sortmerna",
        "description": "Local sequence alignment tool for filtering, mapping and clustering.",
        "keywords": [
          "filtering",
          "mapping",
          "clustering",
          "rRNA",
          "ribosomal RNA"
        ],
        "tools": [
          {
            "SortMeRNA": {
              "description": "The core algorithm is based on approximate seeds and allows for sensitive analysis of NGS reads. The main application of SortMeRNA is filtering rRNA from metatranscriptomic data. SortMeRNA takes as input files of reads (fasta, fastq, fasta.gz, fastq.gz) and one or multiple rRNA database file(s), and sorts apart aligned and rejected reads into two files. Additional applications include clustering and taxonomy assignation available through QIIME v1.9.1. SortMeRNA works with Illumina, Ion Torrent and PacBio data, and can produce SAM and BLAST-like alignments.",
              "homepage": "https://hpc.nih.gov/apps/sortmeRNA.html",
              "documentation": "https://github.com/biocore/sortmerna/wiki/",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "fastas": {
              "type": "file",
              "description": "Path to reference file(s)\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "The filtered fastq reads",
              "pattern": "*fastq.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "SortMeRNA log file",
              "pattern": "*sortmerna.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@mashehu"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "sourmash_compare",
      "path": "modules/nf-core/sourmash/compare/meta.yml",
      "type": "module",
      "meta": {
        "name": "sourmash_compare",
        "description": "Compare many FracMinHash signatures generated by sourmash sketch.",
        "keywords": [
          "compare",
          "FracMinHash sketch",
          "containment",
          "sourmash",
          "metagenomics",
          "genomics",
          "kmer"
        ],
        "tools": [
          {
            "sourmash": {
              "description": "Compute and compare FracMinHash signatures for DNA and protein data sets.",
              "homepage": "https://sourmash.readthedocs.io/",
              "documentation": "https://sourmash.readthedocs.io/",
              "tool_dev_url": "https://github.com/sourmash-bio/sourmash",
              "doi": "10.21105/joss.00027",
              "licence": "['BSD-3-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "signatures": {
              "type": "file",
              "description": "Files containing signatures (hash sketches) of samples",
              "pattern": "*.{sig}"
            }
          },
          {
            "file_list": {
              "type": "file",
              "description": "An optional file specifying a list of file paths that should be appended to the input signatures.\n"
            }
          },
          {
            "save_numpy_matrix": {
              "type": "boolean",
              "description": "If true, output will contain a (dis)similarity matrix numpy binary format.\nAt least one of save_numpy_matrix or save_csv is required.\n"
            }
          },
          {
            "save_csv": {
              "type": "boolean",
              "description": "If true, output will contain a (dis)similarity matrix in CSV format\nAt least one of save_numpy_matrix or save_csv is required.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "numpy_matrix": {
              "type": "file",
              "description": "An optional (dis)similarity matrix numpy binary format",
              "pattern": "*.comp"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "An optional (dis)similarity matrix in CSV format",
              "pattern": "*.comp.csv"
            }
          },
          {
            "labels": {
              "type": "file",
              "description": "A text file that specifies the labels in the output numpy_matrix",
              "pattern": "*.comp.labels.txt"
            }
          }
        ],
        "authors": [
          "@taylorreiter"
        ]
      }
    },
    {
      "name": "sourmash_gather",
      "path": "modules/nf-core/sourmash/gather/meta.yml",
      "type": "module",
      "meta": {
        "name": "sourmash_gather",
        "description": "Search a metagenome sourmash signature against one or many reference databases and return the minimum set of genomes that contain the k-mers in the metagenome.",
        "keywords": [
          "FracMinHash sketch",
          "signature",
          "kmer",
          "containment",
          "sourmash",
          "genomics",
          "metagenomics",
          "taxonomic classification",
          "taxonomic profiling"
        ],
        "tools": [
          {
            "sourmash": {
              "description": "Compute and compare FracMinHash signatures for DNA data sets.",
              "homepage": "https://sourmash.readthedocs.io/",
              "documentation": "https://sourmash.readthedocs.io/",
              "tool_dev_url": "https://github.com/sourmash-bio/sourmash",
              "doi": "10.21105/joss.00027",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "signature": {
              "type": "file",
              "description": "File containing signatures (hash sketches) of a sample",
              "pattern": "*.{sig}"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "Sourmash database (a list of signatures, SBTs, or signature zip files)"
            }
          },
          {
            "save_unassigned": {
              "type": "boolean",
              "description": "If true, output will contain a file that is a sourmash signature containing the unassigned hashes from the query\n"
            }
          },
          {
            "save_matches_sig": {
              "type": "boolean",
              "description": "If true, output will contain a file that is a sourmash signature composed of the FracMinHash sketches that were matched in the database and that matched the query\n"
            }
          },
          {
            "save_prefetch": {
              "type": "boolean",
              "description": "If true, output will contain a file with all prefetch-matched signatures from the database\n"
            }
          },
          {
            "save_prefetch_csv": {
              "type": "boolean",
              "description": "If true, output will contain a csv file with the names of all prefetch-matched signatures\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "result": {
              "type": "file",
              "description": "Table with signatures classified as belonging to any of the genomes\nin the sourmash database(s).\n",
              "pattern": "*{csv.gz}"
            }
          },
          {
            "matches": {
              "type": "file",
              "description": "A signature containing FracMinHash sketches of genomes\nin the sourmash database.\n",
              "pattern": "*{sig.zip}"
            }
          },
          {
            "unassigned": {
              "type": "file",
              "description": "A FracMinHash sketch containing hashes (k-mers) that did not match to any of the genomes\nin the sourmash database(s).\n",
              "pattern": "*{sig.zip}"
            }
          },
          {
            "prefetch": {
              "type": "file",
              "description": "All prefetch-matched signatures from the database.\n",
              "pattern": "*{sig.zip}"
            }
          },
          {
            "prefetchcsv": {
              "type": "file",
              "description": "The names of all prefetch-matched signatures from the database in CSV format.\n",
              "pattern": "*{csv.gz}"
            }
          }
        ],
        "authors": [
          "@vmikk",
          "@taylorreiter"
        ]
      }
    },
    {
      "name": "sourmash_index",
      "path": "modules/nf-core/sourmash/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "sourmash_index",
        "description": "Create a database of sourmash signatures (a group of FracMinHash sketches) to be used as references.",
        "keywords": [
          "signatures",
          "sourmash",
          "genomics",
          "metagenomics",
          "mapping",
          "kmer"
        ],
        "tools": [
          {
            "sourmash": {
              "description": "Compute and compare FracMinHash signatures for DNA data sets.",
              "homepage": "https://sourmash.readthedocs.io/",
              "documentation": "https://sourmash.readthedocs.io/",
              "tool_dev_url": "https://github.com/sourmash-bio/sourmash",
              "doi": "10.21105/joss.00027",
              "licence": "['BSD-3-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "signatures": {
              "type": "file",
              "description": "Files containing signature (hash sketches) of reference genomes",
              "pattern": "*.{sig}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "signature_index": {
              "type": "file",
              "description": "Database of signatures",
              "pattern": "*.{sbt.zip}"
            }
          }
        ],
        "authors": [
          "@emnilsson"
        ]
      }
    },
    {
      "name": "sourmash_sketch",
      "path": "modules/nf-core/sourmash/sketch/meta.yml",
      "type": "module",
      "meta": {
        "name": "sourmash_sketch",
        "description": "Create a signature (a group of FracMinHash sketches) of a sequence using sourmash",
        "keywords": [
          "hash sketch",
          "sourmash",
          "genomics",
          "metagenomics",
          "taxonomic classification",
          "taxonomic profiling",
          "kmer"
        ],
        "tools": [
          {
            "sourmash": {
              "description": "Compute and compare FracMinHash signatures for DNA and protein data sets.",
              "homepage": "https://sourmash.readthedocs.io/",
              "documentation": "https://sourmash.readthedocs.io/",
              "tool_dev_url": "https://github.com/sourmash-bio/sourmash",
              "doi": "10.21105/joss.00027",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sequence": {
              "type": "file",
              "description": "FASTA or FASTQ file containing (genomic, transcriptomic, or proteomic) sequence data",
              "pattern": "*.{fna,fa,fasta,fastq,fq,faa}.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "signatures": {
              "type": "file",
              "description": "FracMinHash signature of the given sequence",
              "pattern": "*.{sig}"
            }
          }
        ],
        "authors": [
          "@Midnighter"
        ]
      }
    },
    {
      "name": "sourmash_taxannotate",
      "path": "modules/nf-core/sourmash/taxannotate/meta.yml",
      "type": "module",
      "meta": {
        "name": "sourmash_taxannotate",
        "description": "Annotate list of metagenome members (based on sourmash signature matches) with taxonomic information.",
        "keywords": [
          "fracminhash sketch",
          "signature",
          "kmer",
          "containment",
          "sourmash",
          "genomics",
          "metagenomics",
          "taxonomic classification",
          "taxonomic profiling"
        ],
        "tools": [
          {
            "sourmash": {
              "description": "Compute and compare FracMinHash signatures for DNA data sets.",
              "homepage": "https://sourmash.readthedocs.io/",
              "documentation": "https://sourmash.readthedocs.io/",
              "tool_dev_url": "https://github.com/sourmash-bio/sourmash",
              "doi": "10.21105/joss.00027",
              "licence": [
                "BSD-3-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gather_results": {
              "type": "file",
              "description": "Mandatory table with signatures classified as belonging to any of the genomes\nin the sourmash database(s), result of `sourmash gather` command.\n"
            }
          },
          {
            "taxonomy": {
              "type": "file",
              "description": "One or more databases with lineages (in CSV format, Mandatory)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "result": {
              "type": "file",
              "description": "Table with signatures classified as belonging to any of the genomes\nin the sourmash database(s) with an additional 'lineage' column\ncontaining the taxonomic information for each database match.\n",
              "pattern": "*{csv.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@vmikk",
          "@taylorreiter"
        ]
      }
    },
    {
      "name": "spaceranger_count",
      "path": "modules/nf-core/spaceranger/count/meta.yml",
      "type": "module",
      "meta": {
        "name": "spaceranger_count",
        "description": "Module to use the 10x Spaceranger pipeline to proces 10x spatial transcriptomics data",
        "keywords": [
          "align",
          "count",
          "spatial",
          "spaceranger",
          "imaging"
        ],
        "tools": [
          {
            "spaceranger": {
              "description": "Visium Spatial Gene Expression is a next-generation molecular profiling solution for classifying tissue\nbased on total mRNA. Space Ranger is a set of analysis pipelines that process Visium Spatial Gene Expression\ndata with brightfield and fluorescence microscope images. Space Ranger allows users to map the whole\ntranscriptome in formalin fixed paraffin embedded (FFPE) and fresh frozen tissues to discover novel\ninsights into normal development, disease pathology, and clinical translational research. Space Ranger provides\npipelines for end to end analysis of Visium Spatial Gene Expression experiments.\n",
              "homepage": "https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/what-is-space-ranger",
              "documentation": "https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/what-is-space-ranger",
              "tool_dev_url": "https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/what-is-space-ranger",
              "licence": "10x Genomics EULA"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', slide:'10L13-020', area: 'B1']\n\n`id`, `slide` and `area` are mandatory information!\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n",
              "pattern": "${Sample_Name}_S1_L00${Lane_Number}_${I1,I2,R1,R2}_001.fastq.gz"
            }
          },
          {
            "image": {
              "type": "file",
              "description": "Brightfield tissue H&E image in JPEG or TIFF format.",
              "pattern": "*.{tif,tiff,jpg,jpeg}"
            }
          },
          {
            "cytaimage": {
              "type": "file",
              "description": "CytAssist instrument captured eosin stained Brightfield tissue image with fiducial\nframe in TIFF format. The size of this image is set at 3k in both dimensions and this image should\nnot be modified any way before passing it as input to either Space Ranger or Loupe Browser.\n",
              "pattern": "*.{tif,tiff}"
            }
          },
          {
            "darkimage": {
              "type": "file",
              "description": "Optional for dark background fluorescence microscope image input. Multi-channel, dark-background fluorescence\nimage as either a single, multi-layer TIFF file or as multiple TIFF or JPEG files.\n",
              "pattern": "*.{tif,tiff,jpg,jpeg}"
            }
          },
          {
            "colorizedimage": {
              "type": "file",
              "description": "Required for color composite fluorescence microscope image input.\nA color composite of one or more fluorescence image channels saved as a single-page,\nsingle-file color TIFF or JPEG.\n",
              "pattern": "*.{tif,tiff,jpg,jpeg}"
            }
          },
          {
            "alignment": {
              "type": "file",
              "description": "OPTIONAL - Path to manual image alignment.",
              "pattern": "*.json"
            }
          },
          {
            "slidefile": {
              "type": "file",
              "description": "OPTIONAL - Path to slide specifications.",
              "pattern": "*.json"
            }
          },
          {
            "reference": {
              "type": "directory",
              "description": "Folder containing all the reference indices needed by Spaceranger"
            }
          },
          {
            "probeset": {
              "type": "file",
              "description": "OPTIONAL - Probe set specification.",
              "pattern": "*.csv"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "outs": {
              "type": "file",
              "description": "Files containing the outputs of Cell Ranger, see official 10X Genomics documentation for a complete list",
              "pattern": "${meta.id}/outs/*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@grst"
        ]
      },
      "pipelines": [
        {
          "name": "spatialtranscriptomics",
          "version": "dev"
        }
      ]
    },
    {
      "name": "spaceranger_mkgtf",
      "path": "modules/nf-core/spaceranger/mkgtf/meta.yml",
      "type": "module",
      "meta": {
        "name": "spaceranger_mkgtf",
        "description": "Module to build a filtered GTF needed by the 10x Genomics Cell Ranger tool. Uses the cellranger mkgtf command.",
        "keywords": [
          "reference",
          "mkref",
          "index",
          "spaceranger"
        ],
        "tools": [
          {
            "spaceranger": {
              "description": "Visium Spatial Gene Expression is a next-generation molecular profiling solution for classifying tissue\nbased on total mRNA. Space Ranger is a set of analysis pipelines that process Visium Spatial Gene Expression\ndata with brightfield and fluorescence microscope images. Space Ranger allows users to map the whole\ntranscriptome in formalin fixed paraffin embedded (FFPE) and fresh frozen tissues to discover novel\ninsights into normal development, disease pathology, and clinical translational research. Space Ranger provides\npipelines for end to end analysis of Visium Spatial Gene Expression experiments.\n",
              "homepage": "https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/what-is-space-ranger",
              "documentation": "https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/what-is-space-ranger",
              "tool_dev_url": "https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/what-is-space-ranger",
              "licence": "10x Genomics EULA"
            }
          }
        ],
        "input": [
          {
            "gtf": {
              "type": "file",
              "description": "The reference GTF transcriptome file",
              "pattern": "*.gtf"
            }
          }
        ],
        "output": [
          {
            "gtf": {
              "type": "directory",
              "description": "The filtered GTF transcriptome file",
              "pattern": "*.filtered.gtf"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@grst"
        ]
      }
    },
    {
      "name": "spaceranger_mkref",
      "path": "modules/nf-core/spaceranger/mkref/meta.yml",
      "type": "module",
      "meta": {
        "name": "spaceranger_mkref",
        "description": "Module to build the reference needed by the 10x Genomics Spaceranger tool. Uses the spaceranger mkref command.",
        "keywords": [
          "reference",
          "mkref",
          "index",
          "spaceranger"
        ],
        "tools": [
          {
            "spaceranger": {
              "description": "Visium Spatial Gene Expression is a next-generation molecular profiling solution for classifying tissue\nbased on total mRNA. Space Ranger is a set of analysis pipelines that process Visium Spatial Gene Expression\ndata with brightfield and fluorescence microscope images. Space Ranger allows users to map the whole\ntranscriptome in formalin fixed paraffin embedded (FFPE) and fresh frozen tissues to discover novel\ninsights into normal development, disease pathology, and clinical translational research. Space Ranger provides\npipelines for end to end analysis of Visium Spatial Gene Expression experiments.\n",
              "homepage": "https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/what-is-space-ranger",
              "documentation": "https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/what-is-space-ranger",
              "tool_dev_url": "https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/what-is-space-ranger",
              "licence": "10x Genomics EULA"
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome FASTA file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "Reference transcriptome GTF file",
              "pattern": "*.gtf"
            }
          },
          {
            "reference_name": {
              "type": "string",
              "description": "The name to give the new reference folder",
              "pattern": "str"
            }
          }
        ],
        "output": [
          {
            "reference": {
              "type": "directory",
              "description": "Folder containing all the reference indices needed by Cell Ranger"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@grst"
        ]
      }
    },
    {
      "name": "spades",
      "path": "modules/nf-core/spades/meta.yml",
      "type": "module",
      "meta": {
        "name": "spades",
        "description": "Assembles a small genome (bacterial, fungal, viral)",
        "keywords": [
          "genome",
          "assembly",
          "genome assembler",
          "small genome",
          "de novo assembler"
        ],
        "tools": [
          {
            "spades": {
              "description": "SPAdes (St. Petersburg genome assembler) is intended for both standard isolates and single-cell MDA bacteria assemblies.",
              "homepage": "http://cab.spbu.ru/files/release3.15.0/manual.html",
              "documentation": "http://cab.spbu.ru/files/release3.15.0/manual.html",
              "tool_dev_url": "https://github.com/ablab/spades",
              "doi": "10.1089/cmb.2012.0021",
              "licence": [
                "GPL v2"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "illumina": {
              "type": "file",
              "description": "List of input FastQ (Illumina or PacBio CCS reads) files\nof size 1 and 2 for single-end and paired-end data,\nrespectively. This input data type is required.\n"
            }
          },
          {
            "pacbio": {
              "type": "file",
              "description": "List of input PacBio CLR FastQ files of size 1.\n"
            }
          },
          {
            "nanopore": {
              "type": "file",
              "description": "List of input FastQ files of size 1, originating from Oxford Nanopore technology.\n"
            }
          },
          {
            "yml": {
              "type": "file",
              "description": "Path to yml file containing read information.\nThe raw FASTQ files listed in this YAML file MUST be supplied to the respective illumina/pacbio/nanopore input channel(s) _in addition_ to this YML.\nFile entries in this yml must contain only the file name and no paths.\n",
              "pattern": "*.{yml,yaml}"
            }
          },
          {
            "hmm": {
              "type": "file",
              "description": "File or directory with amino acid HMMs for Spades HMM-guided mode."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "scaffolds": {
              "type": "file",
              "description": "Fasta file containing scaffolds\n",
              "pattern": "*.fa.gz"
            }
          },
          {
            "contigs": {
              "type": "file",
              "description": "Fasta file containing contigs\n",
              "pattern": "*.fa.gz"
            }
          },
          {
            "transcripts": {
              "type": "file",
              "description": "Fasta file containing transcripts\n",
              "pattern": "*.fa.gz"
            }
          },
          {
            "gene_clusters": {
              "type": "file",
              "description": "Fasta file containing gene_clusters\n",
              "pattern": "*.fa.gz"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "gfa file containing assembly\n",
              "pattern": "*.gfa.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Spades log file\n",
              "pattern": "*.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@JoseEspinosa",
          "@drpatelh",
          "@d4straub"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "spatyper",
      "path": "modules/nf-core/spatyper/meta.yml",
      "type": "module",
      "meta": {
        "name": "spatyper",
        "description": "Computational method for finding spa types.",
        "keywords": [
          "fasta",
          "spatype"
        ],
        "tools": [
          {
            "spatyper": {
              "description": "Computational method for finding spa types.",
              "homepage": "https://github.com/HCGB-IGTP/spaTyper",
              "documentation": "https://github.com/HCGB-IGTP/spaTyper",
              "tool_dev_url": "https://github.com/HCGB-IGTP/spaTyper",
              "doi": "10.5281/zenodo.4063625",
              "licence": [
                "LGPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA assembly file",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz}"
            }
          },
          {
            "repeats": {
              "type": "file",
              "description": "spa repeat sequences in FASTA format (Optional)",
              "pattern": "*.{fasta}"
            }
          },
          {
            "repeat_order": {
              "type": "file",
              "description": "spa types and order of repeats (Optional)",
              "pattern": "*.{txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab-delimited results",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "sratools_fasterqdump",
      "path": "modules/nf-core/sratools/fasterqdump/meta.yml",
      "type": "module",
      "meta": {
        "name": "sratools_fasterqdump",
        "description": "Extract sequencing reads in FASTQ format from a given NCBI Sequence Read Archive (SRA).",
        "keywords": [
          "sequencing",
          "FASTQ",
          "dump"
        ],
        "tools": [
          {
            "sratools": {
              "description": "SRA Toolkit and SDK from NCBI",
              "homepage": "https://github.com/ncbi/sra-tools",
              "documentation": "https://github.com/ncbi/sra-tools/wiki",
              "tool_dev_url": "https://github.com/ncbi/sra-tools",
              "licence": [
                "Public Domain"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sra": {
              "type": "directory",
              "description": "Directory containing ETL data for the given SRA.",
              "pattern": "*/*.sra"
            }
          },
          {
            "ncbi_settings": {
              "type": "file",
              "description": "An NCBI user settings file.\n",
              "pattern": "*.mkfg"
            }
          },
          {
            "certificate": {
              "type": "file",
              "description": "Path to a JWT cart file used to access protected dbGAP data on SRA using the sra-toolkit\n",
              "pattern": "*.cart"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Extracted FASTQ file or files if the sequencing reads are paired-end.",
              "pattern": "*.fastq.gz"
            }
          }
        ],
        "authors": [
          "@Midnighter"
        ]
      },
      "pipelines": [
        {
          "name": "fetchngs",
          "version": "1.10.0"
        }
      ]
    },
    {
      "name": "sratools_prefetch",
      "path": "modules/nf-core/sratools/prefetch/meta.yml",
      "type": "module",
      "meta": {
        "name": "sratools_prefetch",
        "description": "Download sequencing data from the NCBI Sequence Read Archive (SRA).",
        "keywords": [
          "sequencing",
          "fastq",
          "prefetch"
        ],
        "tools": [
          {
            "sratools": {
              "description": "SRA Toolkit and SDK from NCBI",
              "homepage": "https://github.com/ncbi/sra-tools",
              "documentation": "https://github.com/ncbi/sra-tools/wiki",
              "tool_dev_url": "https://github.com/ncbi/sra-tools",
              "licence": [
                "Public Domain"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "id": {
              "type": "string",
              "description": "A string denoting an SRA id.\n"
            }
          },
          {
            "ncbi_settings": {
              "type": "file",
              "description": "An NCBI user settings file.\n",
              "pattern": "*.mkfg"
            }
          },
          {
            "certificate": {
              "type": "file",
              "description": "Path to a JWT cart file used to access protected dbGAP data on SRA using the sra-toolkit\n",
              "pattern": "*.cart"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sra": {
              "type": "directory",
              "description": "Directory containing the ETL data for the given SRA id.\n",
              "pattern": "*/*.sra"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Midnighter"
        ]
      },
      "pipelines": [
        {
          "name": "fetchngs",
          "version": "1.10.0"
        }
      ]
    },
    {
      "name": "srst2_srst2",
      "path": "modules/nf-core/srst2/srst2/meta.yml",
      "type": "module",
      "meta": {
        "name": "srst2_srst2",
        "description": "Short Read Sequence Typing for Bacterial Pathogens is a program designed to take Illumina sequence data,\na MLST database and/or a database of gene sequences (e.g. resistance genes, virulence genes, etc)\nand report the presence of STs and/or reference genes.\n",
        "keywords": [
          "mlst",
          "typing",
          "illumina"
        ],
        "tools": [
          {
            "srst2": {
              "description": "Short Read Sequence Typing for Bacterial Pathogens",
              "homepage": "http://katholt.github.io/srst2/",
              "documentation": "https://github.com/katholt/srst2/blob/master/README.md",
              "tool_dev_url": "https://github.com/katholt/srst2",
              "doi": "10.1186/s13073-014-0090-6",
              "licence": [
                "BSD"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map0.2.0-4",
              "description": "Groovy Map containing sample information\nid: should be the identification number or sample name\nsingle_end: should be true for single end data and false for paired in data\ndb: should be either 'gene' to use the --gene_db option or \"mlst\" to use the --mlst_db option\ne.g. [ id:'sample', single_end:false , db:'gene']\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "gzipped fasta file. If files are NOT in\nMiSeq format sample_S1_L001_R1_001.fastq.gz uses --forward and --reverse parameters; otherwise\ndefault is _1, i.e. expect forward reads as sample_1.fastq.gz).\n",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "Database in FASTA format",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'sample', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "A detailed report, with one row per gene per sample described here github.com/katholt/srst2#gene-typing",
              "pattern": "*_fullgenes_*_results.txt"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "A tabulated summary report of samples x genes.",
              "pattern": "*_genes_*_results.txt"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "A tabulated summary report of mlst subtyping.",
              "pattern": "*_mlst_*_results.txt"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM file",
              "pattern": "*.sorted.bam"
            }
          },
          {
            "pileup": {
              "type": "file",
              "description": "SAMtools pileup file",
              "pattern": "*.pileup"
            }
          }
        ],
        "authors": [
          "@jvhagey"
        ]
      }
    },
    {
      "name": "ssuissero",
      "path": "modules/nf-core/ssuissero/meta.yml",
      "type": "module",
      "meta": {
        "name": "ssuissero",
        "description": "Serotype prediction of Streptococcus suis assemblies",
        "keywords": [
          "bacteria",
          "fasta",
          "streptococcus"
        ],
        "tools": [
          {
            "ssuissero": {
              "description": "Rapid Streptococcus suis serotyping pipeline for Nanopore Data",
              "homepage": "https://github.com/jimmyliu1326/SsuisSero",
              "documentation": "https://github.com/jimmyliu1326/SsuisSero",
              "tool_dev_url": "https://github.com/jimmyliu1326/SsuisSero",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Assembly in FASTA format",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz,faa,faa.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab-delimited serotype prediction",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "stadeniolib_scramble",
      "path": "modules/nf-core/stadeniolib/scramble/meta.yml",
      "type": "module",
      "meta": {
        "name": "stadeniolib_scramble",
        "description": "Advanced sequence file format conversions",
        "keywords": [
          "sam",
          "bam",
          "cram",
          "compression"
        ],
        "tools": [
          {
            "scramble": {
              "description": "Staden Package 'io_lib' (sometimes referred to as libstaden-read by distributions). This contains code for reading and writing a variety of Bioinformatics / DNA Sequence formats.",
              "homepage": "https://github.com/jkbonfield/io_lib",
              "documentation": "https://github.com/jkbonfield/io_lib/blob/master/README.md",
              "tool_dev_url": "https://github.com/jkbonfield/io_lib",
              "licence": "['BSD']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome in FASTA format",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "FASTA index file from samtools faidx",
              "pattern": "*.{fai}"
            }
          },
          {
            "gzi": {
              "type": "file",
              "description": "Optional gzip index file for BAM inputs",
              "pattern": "*.gzi"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Converted reads",
              "pattern": "*.{sam, bam, cram}"
            }
          },
          {
            "gzi": {
              "type": "Optional file",
              "description": "gzip index file for BAM outputs",
              "pattern": ".{bam.gzi}"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "staphopiasccmec",
      "path": "modules/nf-core/staphopiasccmec/meta.yml",
      "type": "module",
      "meta": {
        "name": "staphopiasccmec",
        "description": "Predicts Staphylococcus aureus SCCmec type based on primers.",
        "keywords": [
          "amr",
          "fasta",
          "sccmec"
        ],
        "tools": [
          {
            "staphopiasccmec": {
              "description": "Predicts Staphylococcus aureus SCCmec type based on primers.",
              "homepage": "https://staphopia.emory.edu",
              "documentation": "https://github.com/staphopia/staphopia-sccmec",
              "tool_dev_url": "https://github.com/staphopia/staphopia-sccmec",
              "doi": "10.7717/peerj.5261",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA assembly file",
              "pattern": "*.{fasta,fasta.gz,fa,fa.gz,fna,fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Tab-delimited results",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "star_align",
      "path": "modules/nf-core/star/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "star_align",
        "description": "Align reads to a reference genome using STAR",
        "keywords": [
          "align",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "star": {
              "description": "STAR is a software package for mapping DNA sequences against\na large reference genome, such as the human genome.\n",
              "homepage": "https://github.com/alexdobin/STAR",
              "manual": "https://github.com/alexdobin/STAR/blob/master/doc/STARmanual.pdf",
              "doi": "10.1093/bioinformatics/bts635",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "index": {
              "type": "directory",
              "description": "STAR genome index",
              "pattern": "star"
            }
          }
        ],
        "output": [
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "log_final": {
              "type": "file",
              "description": "STAR final log file",
              "pattern": "*Log.final.out"
            }
          },
          {
            "log_out": {
              "type": "file",
              "description": "STAR lot out file",
              "pattern": "*Log.out"
            }
          },
          {
            "log_progress": {
              "type": "file",
              "description": "STAR log progress file",
              "pattern": "*Log.progress.out"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam_sorted": {
              "type": "file",
              "description": "Sorted BAM file of read alignments (optional)",
              "pattern": "*sortedByCoord.out.bam"
            }
          },
          {
            "bam_transcript": {
              "type": "file",
              "description": "Output BAM file of transcriptome alignment (optional)",
              "pattern": "*toTranscriptome.out.bam"
            }
          },
          {
            "bam_unsorted": {
              "type": "file",
              "description": "Unsorted BAM file of read alignments (optional)",
              "pattern": "*Aligned.unsort.out.bam"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Unmapped FastQ files (optional)",
              "pattern": "*fastq.gz"
            }
          },
          {
            "tab": {
              "type": "file",
              "description": "STAR output tab file(s) (optional)",
              "pattern": "*.tab"
            }
          },
          {
            "junction": {
              "type": "file",
              "description": "STAR chimeric junction output file (optional)",
              "pattern": "*.out.junction"
            }
          },
          {
            "wig": {
              "type": "file",
              "description": "STAR output wiggle format file(s) (optional)",
              "pattern": "*.wig"
            }
          },
          {
            "bedgraph": {
              "type": "file",
              "description": "STAR output bedGraph format file(s) (optional)",
              "pattern": "*.bg"
            }
          }
        ],
        "authors": [
          "@kevinmenden",
          "@drpatelh",
          "@praveenraj2018"
        ]
      },
      "pipelines": [
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "star_genomegenerate",
      "path": "modules/nf-core/star/genomegenerate/meta.yml",
      "type": "module",
      "meta": {
        "name": "star_genomegenerate",
        "description": "Create index for STAR",
        "keywords": [
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "star": {
              "description": "STAR is a software package for mapping DNA sequences against\na large reference genome, such as the human genome.\n",
              "homepage": "https://github.com/alexdobin/STAR",
              "manual": "https://github.com/alexdobin/STAR/blob/master/doc/STARmanual.pdf",
              "doi": "10.1093/bioinformatics/bts635",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Fasta file of the reference genome"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "GTF file of the reference genome"
            }
          }
        ],
        "output": [
          {
            "index": {
              "type": "directory",
              "description": "Folder containing the star index files",
              "pattern": "star"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kevinmenden",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "scrnaseq",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "stranger",
      "path": "modules/nf-core/stranger/meta.yml",
      "type": "module",
      "meta": {
        "name": "stranger",
        "description": "Annotates output files from ExpansionHunter with the pathologic implications of the repeat sizes.",
        "keywords": [
          "STR",
          "repeat_expansions",
          "annotate",
          "vcf"
        ],
        "tools": [
          {
            "stranger": {
              "description": "Annotate VCF files with str variants",
              "homepage": "https://github.com/moonso/stranger",
              "documentation": "https://github.com/moonso/stranger",
              "tool_dev_url": "https://github.com/moonso/stranger",
              "doi": "10.5281/zenodo.4548873",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF with repeat expansions",
              "pattern": "*.{vcf.gz,vcf}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "variant_catalog": {
              "type": "file",
              "description": "json file with repeat expansion sites to genotype",
              "pattern": "*.{json}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "annotated VCF with keys STR_STATUS, NormalMax and PathologicMin",
              "pattern": "*.{vcf.gz}"
            }
          }
        ],
        "authors": [
          "@ljmesi"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "strelka_germline",
      "path": "modules/nf-core/strelka/germline/meta.yml",
      "type": "module",
      "meta": {
        "name": "strelka_germline",
        "description": "Strelka2 is a fast and accurate small variant caller optimized for analysis of germline variation",
        "keywords": [
          "variantcalling",
          "germline",
          "wgs",
          "vcf",
          "variants"
        ],
        "tools": [
          {
            "strelka": {
              "description": "Strelka calls somatic and germline small variants from mapped sequencing reads",
              "homepage": "https://github.com/Illumina/strelka",
              "documentation": "https://github.com/Illumina/strelka/blob/v2.9.x/docs/userGuide/README.md",
              "tool_dev_url": "https://github.com/Illumina/strelka",
              "doi": "10.1038/s41592-018-0051-x",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "input_index": {
              "type": "file",
              "description": "BAM/CRAI index file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "target_bed": {
              "type": "file",
              "description": "An optional bed file",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "gzipped germline variant file",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "vcf_tbi": {
              "type": "file",
              "description": "index file for the vcf file",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "genome_vcf": {
              "type": "file",
              "description": "variant records and compressed non-variant blocks",
              "pattern": "*_genome.vcf.gz"
            }
          },
          {
            "genome_vcf_tbi": {
              "type": "file",
              "description": "index file for the genome_vcf file",
              "pattern": "*_genome.vcf.gz.tbi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@arontommi"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "strelka_somatic",
      "path": "modules/nf-core/strelka/somatic/meta.yml",
      "type": "module",
      "meta": {
        "name": "strelka_somatic",
        "description": "Strelka2 is a fast and accurate small variant caller optimized for analysis of germline variation in small cohorts and somatic variation in tumor/normal sample pairs",
        "keywords": [
          "variant calling",
          "germline",
          "wgs",
          "vcf",
          "variants"
        ],
        "tools": [
          {
            "strelka": {
              "description": "Strelka calls somatic and germline small variants from mapped sequencing reads",
              "homepage": "https://github.com/Illumina/strelka",
              "documentation": "https://github.com/Illumina/strelka/blob/v2.9.x/docs/userGuide/README.md",
              "tool_dev_url": "https://github.com/Illumina/strelka",
              "doi": "10.1038/s41592-018-0051-x",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input_normal": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "input_index_normal": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "input_tumor": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "input_index_tumor": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "manta_candidate_small_indels": {
              "type": "file",
              "description": "VCF.gz file",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "manta_candidate_small_indels_tbi": {
              "type": "file",
              "description": "VCF.gz index file",
              "pattern": "*.tbi"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome reference FASTA file",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Genome reference FASTA index file",
              "pattern": "*.{fa.fai,fasta.fai}"
            }
          },
          {
            "target_bed": {
              "type": "file",
              "description": "BED file containing target regions for variant calling",
              "pattern": "*.{bed}"
            }
          },
          {
            "target_bed_tbi": {
              "type": "file",
              "description": "Index for BED file containing target regions for variant calling",
              "pattern": "*.{bed.tbi}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf_indels": {
              "type": "file",
              "description": "Gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "vcf_indels_tbi": {
              "type": "file",
              "description": "Index for gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz.tbi}"
            }
          },
          {
            "vcf_snvs": {
              "type": "file",
              "description": "Gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "vcf_snvs_tbi": {
              "type": "file",
              "description": "Index for gzipped VCF file containing variants",
              "pattern": "*.{vcf.gz.tbi}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "stringtie_merge",
      "path": "modules/nf-core/stringtie/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "stringtie_merge",
        "description": "Merges the annotation gtf file and the stringtie output gtf files",
        "keywords": [
          "merge",
          "gtf",
          "reference"
        ],
        "tools": [
          {
            "stringtie2": {
              "description": "Transcript assembly and quantification for RNA-Seq\n",
              "homepage": "https://ccb.jhu.edu/software/stringtie/index.shtml",
              "documentation": "https://ccb.jhu.edu/software/stringtie/index.shtml?t=manual",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "stringtie_gtf": {
              "type": "file",
              "description": "Stringtie transcript gtf output(s).\n",
              "pattern": "*.gtf"
            }
          },
          {
            "annotation_gtf": {
              "type": "file",
              "description": "Annotation gtf file (optional).\n",
              "pattern": "*.gtf"
            }
          }
        ],
        "output": [
          {
            "merged_gtf": {
              "type": "map",
              "description": "Merged gtf from annotation and stringtie output gtfs.\n",
              "pattern": "*.gtf"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@yuukiiwa"
        ]
      },
      "pipelines": [
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        }
      ]
    },
    {
      "name": "stringtie_stringtie",
      "path": "modules/nf-core/stringtie/stringtie/meta.yml",
      "type": "module",
      "meta": {
        "name": "stringtie_stringtie",
        "description": "Transcript assembly and quantification for RNA-Se",
        "keywords": [
          "transcript",
          "assembly",
          "quantification",
          "gtf"
        ],
        "tools": [
          {
            "stringtie2": {
              "description": "Transcript assembly and quantification for RNA-Seq\n",
              "homepage": "https://ccb.jhu.edu/software/stringtie/index.shtml",
              "documentation": "https://ccb.jhu.edu/software/stringtie/index.shtml?t=manual",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Stringtie transcript gtf output(s).\n"
            }
          },
          {
            "annotation_gtf": {
              "type": "file",
              "description": "Annotation gtf file (optional).\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "transcript_gtf": {
              "type": "file",
              "description": "transcript gtf",
              "pattern": "*.{transcripts.gtf}"
            }
          },
          {
            "coverage_gtf": {
              "type": "file",
              "description": "coverage gtf",
              "pattern": "*.{coverage.gtf}"
            }
          },
          {
            "abudance": {
              "type": "file",
              "description": "abudance",
              "pattern": "*.{abudance.txt}"
            }
          },
          {
            "ballgown": {
              "type": "file",
              "description": "for running ballgown",
              "pattern": "*.{ballgown}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "rnafusion",
          "version": "2.3.4"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "subread_featurecounts",
      "path": "modules/nf-core/subread/featurecounts/meta.yml",
      "type": "module",
      "meta": {
        "name": "subread_featurecounts",
        "description": "Count reads that map to genomic features",
        "keywords": [
          "counts",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "featurecounts": {
              "description": "featureCounts is a highly efficient general-purpose read summarization program that counts mapped reads for genomic features such as genes, exons, promoter, gene bodies, genomic bins and chromosomal locations. It can be used to count both RNA-seq and genomic DNA-seq reads.",
              "homepage": "http://bioinf.wehi.edu.au/featureCounts/",
              "documentation": "http://bioinf.wehi.edu.au/subread-package/SubreadUsersGuide.pdf",
              "doi": "10.1093/bioinformatics/btt656",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/SAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "annotation": {
              "type": "file",
              "description": "Genomic features annotation in GTF or SAF",
              "pattern": "*.{gtf,saf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "counts": {
              "type": "file",
              "description": "Counts of reads mapping to features",
              "pattern": "*featureCounts.txt"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "Summary log file",
              "pattern": "*.featureCounts.txt.summary"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@ntoda03"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "survivor_filter",
      "path": "modules/nf-core/survivor/filter/meta.yml",
      "type": "module",
      "meta": {
        "name": "survivor_filter",
        "description": "Filter a vcf file based on size and/or regions to ignore",
        "keywords": [
          "survivor",
          "filter",
          "vcf",
          "structural variants"
        ],
        "tools": [
          {
            "survivor": {
              "description": "Toolset for SV simulation, comparison and filtering",
              "homepage": "https://github.com/fritzsedlazeck/SURVIVOR/wiki",
              "documentation": "https://github.com/fritzsedlazeck/SURVIVOR/wiki",
              "tool_dev_url": "https://github.com/fritzsedlazeck/SURVIVOR",
              "doi": "10.1038/NCOMMS14061",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file to filter",
              "pattern": "*.{vcf}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file with regions to ignore (NA to disable)"
            }
          },
          {
            "minsv": {
              "type": "integer",
              "description": "Min SV size (-1 to disable)"
            }
          },
          {
            "maxsv": {
              "type": "integer",
              "description": "Max SV size (-1 to disable)"
            }
          },
          {
            "minallelefreq": {
              "type": "float",
              "description": "Min allele frequency (0-1)"
            }
          },
          {
            "minnumreads": {
              "type": "integer",
              "description": "Min number of reads support [RE flag (-1 to disable)]"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Filtered VCF file",
              "pattern": "*.{vcf}"
            }
          }
        ],
        "authors": [
          "@LlaneroHiboreo"
        ]
      }
    },
    {
      "name": "survivor_merge",
      "path": "modules/nf-core/survivor/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "survivor_merge",
        "description": "Compare or merge VCF files to generate a consensus or multi sample VCF files.",
        "keywords": [
          "survivor",
          "merge",
          "vcf",
          "structural variants"
        ],
        "tools": [
          {
            "survivor": {
              "description": "Toolset for SV simulation, comparison and filtering",
              "homepage": "https://github.com/fritzsedlazeck/SURVIVOR/wiki",
              "documentation": "https://github.com/fritzsedlazeck/SURVIVOR/wiki",
              "tool_dev_url": "https://github.com/fritzsedlazeck/SURVIVOR",
              "doi": "10.1038/NCOMMS14061",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcfs": {
              "type": "files",
              "description": "The VCF files to be merged\nGzipped VCF files are not supported: https://github.com/fritzsedlazeck/SURVIVOR/issues/158\n",
              "pattern": "*.vcf"
            }
          },
          {
            "max_distance_breakpoints": {
              "type": "integer",
              "description": "Max distance between breakpoints (0-1 percent of length, 1- number of bp)"
            }
          },
          {
            "min_supporting_callers": {
              "type": "integer",
              "description": "Minimum number of supporting caller"
            }
          },
          {
            "account_for_type": {
              "type": "integer",
              "description": "Take the type into account (1==yes, else no)"
            }
          },
          {
            "account_for_sv_strands": {
              "type": "integer",
              "description": "Take the strands of SVs into account (1==yes, else no)"
            }
          },
          {
            "estimate_distanced_by_sv_size": {
              "type": "integer",
              "description": "Estimate distance based on the size of SV (1==yes, else no)"
            }
          },
          {
            "min_sv_size": {
              "type": "integer",
              "description": "Minimum size of SVs to be taken into account"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The merged VCF file",
              "pattern": "*.vcf"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "svaba",
      "path": "modules/nf-core/svaba/meta.yml",
      "type": "module",
      "meta": {
        "name": "svaba",
        "description": "SvABA is an efficient and accurate method for detecting SVs from short-read sequencing data using genome-wide local assembly with low memory and computing requirements",
        "keywords": [
          "sv",
          "structural variants",
          "detecting svs",
          "short-read sequencing"
        ],
        "tools": [
          {
            "svaba": {
              "description": "Structural variation and indel detection by local assembly",
              "homepage": "https://github.com/walaj/svaba",
              "documentation": "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5880247/",
              "tool_dev_url": "https://github.com/walaj/svaba",
              "doi": "10.1101/gr.221028.117",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\nid: should be the identification number or sample name. If there is normal file meta should be common\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing FASTA information\nid: should be the identification number for alignment file and should be the same used to create BWA index files\ne.g. [ id:'fasta' ]\n"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing BWA information\nid: should be the identification number same as fasta file\ne.g. [ id:'bwa' ]\n"
            }
          },
          {
            "meta4": {
              "type": "map",
              "description": "Groovy Map containing dbSNP information\nid: should be the identification number for dbSNP files\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "meta5": {
              "type": "map",
              "description": "Groovy Map containing regions information\nid: should be the identification number for regions\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "tumorbam": {
              "type": "file",
              "description": "Tumor or metastatic sample, BAM, SAM or CRAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "tummorbai": {
              "type": "file",
              "description": "Index",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "normalbam": {
              "type": "file",
              "description": "Control (or normal) of matching tumor/metastatic sample, BAM, SAM or CRAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "normalbai": {
              "type": "file",
              "description": "Index",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "bwa_index": {
              "type": "file",
              "description": "BWA genome index files",
              "pattern": "Directory containing BWA index *.{amb,ann,bwt,pac,sa}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file",
              "pattern": "*.{fasta|fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "Index of FASTA file",
              "pattern": "*.{fai}"
            }
          },
          {
            "dbsnp": {
              "type": "file",
              "description": "VCF file including dbSNP variants",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "dbsnp_tbi": {
              "type": "file",
              "description": "Index of VCF file including dbSNP variants",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "regions": {
              "type": "file",
              "description": "Targeted intervals. Accepts BED file or Samtools-style string",
              "pattern": "*.bed|*.txt|*.tab"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "sv": {
              "type": "file",
              "description": "Filtered SVs for tumor only cases",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "indel": {
              "type": "file",
              "description": "Filtered Indels for tumor only cases",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "som_sv": {
              "type": "file",
              "description": "Somatic filtered SVs for tumor/normal paired samples",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "som_indel": {
              "type": "file",
              "description": "Somatic filtered Indels for tumor/normal paired samples",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "germ_sv": {
              "type": "file",
              "description": "Germline filtered SVs for tumor/normal paired samples",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "germ_indel": {
              "type": "file",
              "description": "Germline filtered Indels for tumor/normal paired samples",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "unfiltered_sv": {
              "type": "file",
              "description": "Unfiltered SVs for tumor only cases",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "unfiltered_indel": {
              "type": "file",
              "description": "Unfiltered Indels for tumor only cases",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "unfiltered_som_sv": {
              "type": "file",
              "description": "Unfiltered somatic SVs for tumor/normal paired samples",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "unfiltered_som_indel": {
              "type": "file",
              "description": "Unfiltered somatic Indels for tumor/normal paired samples",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "unfiltered_germ_sv": {
              "type": "file",
              "description": "Unfiltered germline SVs for tumor/normal paired samples",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "unfiltered_germ_indel": {
              "type": "file",
              "description": "Unfiltered germline Indels for tumor/normal paired samples",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "raw_calls": {
              "type": "file",
              "description": "Raw, unfiltered variants",
              "pattern": "*.txt.gz"
            }
          },
          {
            "discordants": {
              "type": "file",
              "description": "Information on all clusters of discordant reads identified with 2+ reads",
              "pattern": "*.txt.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file",
              "pattern": "*.txt.gz"
            }
          }
        ],
        "authors": [
          "@kubranarci"
        ]
      }
    },
    {
      "name": "svdb_merge",
      "path": "modules/nf-core/svdb/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "svdb_merge",
        "description": "The merge module merges structural variants within one or more vcf files.",
        "keywords": [
          "structural variants",
          "vcf",
          "merge"
        ],
        "tools": [
          {
            "svdb": {
              "description": "structural variant database software",
              "homepage": "https://github.com/J35P312/SVDB",
              "documentation": "https://github.com/J35P312/SVDB/blob/master/README.md",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "priority": {
              "type": "list",
              "description": "prioritise the input vcf files according to this list, e.g ['tiddit','cnvnator']"
            }
          },
          {
            "vcfs": {
              "type": "list",
              "description": "Two or more VCF files. Order of files should correspond to the order of tags used for priority.",
              "pattern": "*.{vcf,vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "merged VCF file",
              "pattern": "*_sv_merge.vcf.gz"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "svdb_query",
      "path": "modules/nf-core/svdb/query/meta.yml",
      "type": "module",
      "meta": {
        "name": "svdb_query",
        "description": "Query a structural variant database, using a vcf file as query",
        "keywords": [
          "structural variants"
        ],
        "tools": [
          {
            "svdb": {
              "description": "structural variant database software",
              "homepage": "https://github.com/J35P312/SVDB",
              "documentation": "https://github.com/J35P312/SVDB/blob/master/README.md",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "in_occs": {
              "type": "list",
              "description": "A list of allele count tags"
            }
          },
          {
            "in_frqs": {
              "type": "list",
              "description": "A list of allele frequency tags"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "query vcf file",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "vcf_db": {
              "type": "file",
              "description": "database vcf file",
              "pattern": "*.{vcf,vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "out_occs": {
              "type": "list",
              "description": "A list of allele count tags"
            }
          },
          {
            "out_frqs": {
              "type": "list",
              "description": "A list of allele frequency tags"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Annotated output VCF file",
              "pattern": "*_query.vcf"
            }
          }
        ],
        "authors": [
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "svtk_baftest",
      "path": "modules/nf-core/svtk/baftest/meta.yml",
      "type": "module",
      "meta": {
        "name": "svtk_baftest",
        "description": "Performs tests on BAF files",
        "keywords": [
          "svtk",
          "svtk/baftest",
          "baftest",
          "baf",
          "bed",
          "structural variants"
        ],
        "tools": [
          {
            "svtk": {
              "description": "Utilities for consolidating, filtering, resolving, and annotating structural variants.",
              "homepage": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "documentation": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "tool_dev_url": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "A BED file created with `svtk vcf2bed`",
              "pattern": "*.bed"
            }
          },
          {
            "baf": {
              "type": "file",
              "description": "A BAF file created with `gatk PrintSVEvidence`",
              "pattern": "*.baf.txt.gz"
            }
          },
          {
            "baf_index": {
              "type": "file",
              "description": "The index of the BAF file",
              "pattern": "*.baf.txt.gz.tbi"
            }
          },
          {
            "batch": {
              "type": "file",
              "description": "A text file containing information about the sample(s)",
              "pattern": "*.txt"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "metrics": {
              "type": "file",
              "description": "The results file from the BAF test",
              "pattern": "*.metrics"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "svtk_countsvtypes",
      "path": "modules/nf-core/svtk/countsvtypes/meta.yml",
      "type": "module",
      "meta": {
        "name": "svtk_countsvtypes",
        "description": "Count the instances of each SVTYPE observed in each sample in a VCF.",
        "keywords": [
          "svtk",
          "countsvtypes",
          "vcf",
          "structural variants"
        ],
        "tools": [
          {
            "svtk": {
              "description": "Utilities for consolidating, filtering, resolving, and annotating structural variants.",
              "homepage": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "documentation": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "tool_dev_url": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "doi": "10.1038/s41586-020-2287-8",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The VCF file containing structural variants",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "counts": {
              "type": "file",
              "description": "A tab-delimited file containing the counts of the SV types",
              "pattern": "*.tsv"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "svtk_rdtest2vcf",
      "path": "modules/nf-core/svtk/rdtest2vcf/meta.yml",
      "type": "module",
      "meta": {
        "name": "svtk_rdtest2vcf",
        "description": "Convert an RdTest-formatted bed to the standard VCF format.",
        "keywords": [
          "svtk",
          "rdtest2vcf",
          "bed",
          "rdtest",
          "vcf"
        ],
        "tools": [
          {
            "svtk": {
              "description": "Utilities for consolidating, filtering, resolving, and annotating structural variants.",
              "homepage": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "documentation": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "tool_dev_url": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "doi": "10.1038/s41586-020-2287-8",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "An RdTest-formatted bed",
              "pattern": "*.bed"
            }
          },
          {
            "samples": {
              "type": "file",
              "description": "A text file containing the names of all samples that need to be added to the VCF",
              "pattern": "*.txt"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The reference file of a FASTA file containing the contigs",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The converted VCF",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "The index of the converted VCF",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "svtk_standardize",
      "path": "modules/nf-core/svtk/standardize/meta.yml",
      "type": "module",
      "meta": {
        "name": "svtk_standardize",
        "description": "Convert SV calls to a standardized format.",
        "keywords": [
          "svtk",
          "structural variants",
          "SV",
          "vcf",
          "standardization"
        ],
        "tools": [
          {
            "svtk": {
              "description": "Utilities for consolidating, filtering, resolving, and annotating structural variants.",
              "homepage": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "documentation": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "tool_dev_url": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "args": {
              "type": "map",
              "description": "Groovy Map containing tool parameters. MUST follow the structure/keywords below and be provided via modules.config. Parameters must be set between quotes.\n```\n{\n  [\n    \"args\": \"\",\n    \"caller\": \"delly\" // Should be either delly, lumpy, manta, wham or melt\n  ]\n}\n```\n"
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "A gzipped VCF file to be standardized",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "Optional fasta index file that specifies the contigs to be used in the VCF header (defaults to all contigs of GRCh37)",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "standardized_vcf": {
              "type": "file",
              "description": "A gzipped version of the standardized VCF file",
              "pattern": "*.std.vcf.gz"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "svtk_vcf2bed",
      "path": "modules/nf-core/svtk/vcf2bed/meta.yml",
      "type": "module",
      "meta": {
        "name": "svtk_vcf2bed",
        "description": "Converts VCFs containing structural variants to BED format",
        "keywords": [
          "vcf",
          "bed",
          "vcf2bed",
          "svtk",
          "structural variants"
        ],
        "tools": [
          {
            "svtk": {
              "description": "Utilities for consolidating, filtering, resolving, and annotating structural variants.",
              "homepage": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "documentation": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "tool_dev_url": "https://github.com/broadinstitute/gatk-sv/tree/master/src/svtk",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "A VCF file created with a structural variant caller",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "The index for the VCF file",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "The created BED file",
              "pattern": "*.bed"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "svtyper_svtyper",
      "path": "modules/nf-core/svtyper/svtyper/meta.yml",
      "type": "module",
      "meta": {
        "name": "svtyper_svtyper",
        "description": "SVTyper performs breakpoint genotyping of structural variants (SVs) using whole genome sequencing data",
        "keywords": [
          "sv",
          "structural variants",
          "genotyping"
        ],
        "tools": [
          {
            "svtyper": {
              "description": "Compute genotype of structural variants based on breakpoint depth",
              "homepage": "https://github.com/hall-lab/svtyper",
              "documentation": "https://github.com/hall-lab/svtyper",
              "tool_dev_url": "https://github.com/hall-lab/svtyper",
              "doi": "10.1038/nmeth.3505",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test']\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing sample information for FASTA file\ne.g. [ id:'fasta']\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Matching VCF of alignments",
              "pattern": "*.vcf"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file used to generate alignments",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "FAI file used to generate alignments",
              "pattern": "*.{fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON file including Library information",
              "pattern": "*.json"
            }
          },
          {
            "gt_vcf": {
              "type": "file",
              "description": "Genotyped SVs",
              "pattern": "*.vcf"
            }
          },
          {
            "relevant_bam": {
              "type": "file",
              "description": "Relevant alignments",
              "pattern": "*.bam"
            }
          }
        ],
        "authors": [
          "@kubranarci"
        ]
      }
    },
    {
      "name": "tabix_bgzip",
      "path": "modules/nf-core/tabix/bgzip/meta.yml",
      "type": "module",
      "meta": {
        "name": "tabix_bgzip",
        "description": "Compresses/decompresses files",
        "keywords": [
          "compress",
          "decompress",
          "bgzip",
          "tabix"
        ],
        "tools": [
          {
            "bgzip": {
              "description": "Bgzip compresses or decompresses files in a similar manner to, and compatible with, gzip.\n",
              "homepage": "https://www.htslib.org/doc/tabix.html",
              "documentation": "http://www.htslib.org/doc/bgzip.html",
              "doi": "10.1093/bioinformatics/btp352",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "file to compress or to decompress"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "output": {
              "type": "file",
              "description": "Output compressed/decompressed file",
              "pattern": "*."
            }
          },
          {
            "gzi": {
              "type": "file",
              "description": "Optional gzip index file for compressed inputs",
              "pattern": "*.gzi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh",
          "@maxulysse",
          "@nvnieuwk"
        ]
      },
      "pipelines": [
        {
          "name": "funcscan",
          "version": "1.1.2"
        },
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "pangenome",
          "version": "dev"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "tabix_bgziptabix",
      "path": "modules/nf-core/tabix/bgziptabix/meta.yml",
      "type": "module",
      "meta": {
        "name": "tabix_bgziptabix",
        "description": "bgzip a sorted tab-delimited genome file and then create tabix index",
        "keywords": [
          "bgzip",
          "compress",
          "index",
          "tabix",
          "vcf"
        ],
        "tools": [
          {
            "tabix": {
              "description": "Generic indexer for TAB-delimited genome position files.",
              "homepage": "https://www.htslib.org/doc/tabix.html",
              "documentation": "https://www.htslib.org/doc/tabix.1.html",
              "doi": "10.1093/bioinformatics/btq671",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tab": {
              "type": "file",
              "description": "TAB-delimited genome position file",
              "pattern": "*.{bed,gff,sam,vcf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gz": {
              "type": "file",
              "description": "Output compressed file",
              "pattern": "*.{gz}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "tabix index file",
              "pattern": "*.{gz.tbi}"
            }
          },
          {
            "csi": {
              "type": "file",
              "description": "tabix alternate index file",
              "pattern": "*.{gz.csi}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxulysse",
          "@DLBPointon"
        ]
      },
      "pipelines": [
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "tabix_tabix",
      "path": "modules/nf-core/tabix/tabix/meta.yml",
      "type": "module",
      "meta": {
        "name": "tabix_tabix",
        "description": "create tabix index from a sorted bgzip tab-delimited genome file",
        "keywords": [
          "index",
          "tabix",
          "vcf"
        ],
        "tools": [
          {
            "tabix": {
              "description": "Generic indexer for TAB-delimited genome position files.",
              "homepage": "https://www.htslib.org/doc/tabix.html",
              "documentation": "https://www.htslib.org/doc/tabix.1.html",
              "doi": "10.1093/bioinformatics/btq671",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tab": {
              "type": "file",
              "description": "TAB-delimited genome position file compressed with bgzip",
              "pattern": "*.{bed.gz,gff.gz,sam.gz,vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "tabix index file",
              "pattern": "*.{tbi}"
            }
          },
          {
            "csi": {
              "type": "file",
              "description": "coordinate sorted index file",
              "pattern": "*.{csi}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh",
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "tailfindr",
      "path": "modules/nf-core/tailfindr/meta.yml",
      "type": "module",
      "meta": {
        "name": "tailfindr",
        "description": "Estimating poly(A)-tail lengths from basecalled fast5 files produced by Nanopore sequencing of RNA and DNA",
        "keywords": [
          "polya tail",
          "fast5",
          "nanopore"
        ],
        "tools": [
          {
            "tailfindr": {
              "description": "An R package for estimating poly(A)-tail lengths in Oxford Nanopore RNA and DNA reads.",
              "homepage": "https://github.com/adnaniazi/tailfindr",
              "documentation": "https://github.com/adnaniazi/tailfindr/blob/master/README.md",
              "tool_dev_url": "https://github.com/adnaniazi/tailfindr",
              "doi": "10.1261/rna.071332.119",
              "licence": "['AGPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fast5": {
              "type": "file",
              "description": "fast5 file",
              "pattern": "*.fast5"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "csv_gz": {
              "type": "file",
              "description": "Compressed csv file",
              "pattern": "*.csv.gz"
            }
          }
        ],
        "authors": [
          "@lucacozzuto"
        ]
      }
    },
    {
      "name": "taxpasta_merge",
      "path": "modules/nf-core/taxpasta/merge/meta.yml",
      "type": "module",
      "meta": {
        "name": "taxpasta_merge",
        "description": "Standardise and merge two or more taxonomic profiles into a single table",
        "keywords": [
          "taxonomic profile",
          "standardise",
          "standardisation",
          "metagenomics",
          "taxonomic profiling",
          "otu tables",
          "taxon tables"
        ],
        "tools": [
          {
            "taxpasta": {
              "description": "TAXonomic Profile Aggregation and STAndardisation",
              "homepage": "https://taxpasta.readthedocs.io/",
              "documentation": "https://taxpasta.readthedocs.io/",
              "tool_dev_url": "https://github.com/taxprofiler/taxpasta",
              "licence": "['Apache-2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "profiles": {
              "type": "file",
              "description": "A list of taxonomic profiler output files (typically in text format, mandatory)",
              "pattern": "*.{tsv,csv,arrow,parquet,biom}"
            }
          },
          {
            "samplesheet": {
              "type": "file",
              "description": "A samplesheet describing the sample name and a filepath to a taxonomic abundance profile that needs to be relative from the work environment. The profiles must be provided even if you give a samplesheet as argument (optional)",
              "pattern": "*.{tsv,csv,ods,xlsx,arrow,parquet}"
            }
          },
          {
            "taxonomy": {
              "type": "directory",
              "description": "Directory containing at a minimum nodes.dmp and names.dmp files (optional)",
              "pattern": "*/"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "merged_profiles": {
              "type": "file",
              "description": "Output file with standardised multiple profiles in one go and have all profiles combined into a single table.",
              "pattern": "*.{tsv,csv,ods,xlsx,arrow,parquet,biom}"
            }
          }
        ],
        "authors": [
          "@sofstam",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        }
      ]
    },
    {
      "name": "taxpasta_standardise",
      "path": "modules/nf-core/taxpasta/standardise/meta.yml",
      "type": "module",
      "meta": {
        "name": "taxpasta_standardise",
        "description": "Standardise the output of a wide range of taxonomic profilers",
        "keywords": [
          "taxonomic profile",
          "standardise",
          "standardisation",
          "metagenomics",
          "taxonomic profiling",
          "otu tables",
          "taxon tables"
        ],
        "tools": [
          {
            "taxpasta": {
              "description": "TAXonomic Profile Aggregation and STAndardisation",
              "homepage": "https://taxpasta.readthedocs.io/",
              "documentation": "https://taxpasta.readthedocs.io/",
              "tool_dev_url": "https://github.com/taxprofiler/taxpasta",
              "licence": "['Apache-2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "profile": {
              "type": "file",
              "description": "profiler output file (mandatory)",
              "pattern": "*"
            }
          },
          {
            "taxonomy": {
              "type": "directory",
              "description": "Directory containing at a minimum nodes.dmp and names.dmp files (optional)",
              "pattern": "*/"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "standardised_profile": {
              "type": "file",
              "description": "Standardised taxonomic profile",
              "pattern": "*.{tsv,csv,arrow,parquet,biom}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Midnighter"
        ]
      }
    },
    {
      "name": "tbprofiler_profile",
      "path": "modules/nf-core/tbprofiler/profile/meta.yml",
      "type": "module",
      "meta": {
        "name": "tbprofiler_profile",
        "description": "A tool to detect resistance and lineages of M. tuberculosis genomes",
        "keywords": [
          "Mycobacterium tuberculosis",
          "resistance",
          "serotype"
        ],
        "tools": [
          {
            "tbprofiler": {
              "description": "Profiling tool for Mycobacterium tuberculosis to detect drug resistance and lineage from WGS data",
              "homepage": "https://github.com/jodyphelan/TBProfiler",
              "documentation": "https://jodyphelan.gitbook.io/tb-profiler/",
              "tool_dev_url": "https://github.com/jodyphelan/TBProfiler",
              "doi": "10.1186/s13073-019-0650-x",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "FASTQ file",
              "pattern": "*.{fastq.gz,fq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file with alignment details",
              "pattern": "*.bam"
            }
          },
          {
            "csv": {
              "type": "file",
              "description": "Optional CSV formated result file of resistance and strain type",
              "pattern": "*.csv"
            }
          },
          {
            "json": {
              "type": "file",
              "description": "JSON formated result file of resistance and strain type",
              "pattern": "*.json"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Optional text file of resistance and strain type",
              "pattern": "*.txt"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF with variant info again refernce genomes",
              "pattern": "*.vcf"
            }
          }
        ],
        "authors": [
          "@rpetit3"
        ]
      }
    },
    {
      "name": "tiara_tiara",
      "path": "modules/nf-core/tiara/tiara/meta.yml",
      "type": "module",
      "meta": {
        "name": "tiara_tiara",
        "description": "Domain-level classification of contigs to bacterial, archaeal, eukaryotic, or organelle",
        "keywords": [
          "contigs",
          "metagenomics",
          "classify"
        ],
        "tools": [
          {
            "tiara": {
              "description": "Deep-learning-based approach for identification of eukaryotic sequences in the metagenomic data powered by PyTorch.",
              "homepage": "https://ibe-uw.github.io/tiara/",
              "documentation": "https://ibe-uw.github.io/tiara/\"",
              "tool_dev_url": "https://github.com/ibe-uw/tiara",
              "doi": "10.1093/bioinformatics/btab672",
              "licence": "MIT"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file of assembled contigs.",
              "pattern": "*.{fa,fa.gz,fasta,fasta.gz,fna,fna.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "classifications": {
              "type": "file",
              "description": "TSV file containing per-contig classification probabilities and overall classifications. Gzipped if flag --gz is set.",
              "pattern": "*.{txt,txt.gz}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Log file containing tiara model parameters. Gzipped if flag --gz is set.",
              "pattern": "log_*.{txt,txt.gz}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "(optional) - fasta files for each domain category specified in command flag `-tf`, containing classified contigs\n",
              "pattern": "*.{fasta,fasta.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@prototaxites"
        ]
      }
    },
    {
      "name": "tiddit_cov",
      "path": "modules/nf-core/tiddit/cov/meta.yml",
      "type": "module",
      "meta": {
        "name": "tiddit_cov",
        "description": "Computes the coverage of different regions from the bam file.",
        "keywords": [
          "coverage",
          "bam",
          "statistics",
          "chromosomal rearrangements"
        ],
        "tools": [
          {
            "tiddit": {
              "description": "TIDDIT - structural variant calling.",
              "homepage": "https://github.com/SciLifeLab/TIDDIT",
              "documentation": "https://github.com/SciLifeLab/TIDDIT/blob/master/README.md",
              "doi": "10.12688/f1000research.11168.1",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome file. Only needed when passing in CRAM instead of BAM.\nIf not using CRAM, please pass an empty file instead.\n",
              "pattern": "*.fasta"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "cov": {
              "type": "file",
              "description": "The coverage of different regions. Optional.",
              "pattern": "*.tab"
            }
          },
          {
            "wig": {
              "type": "file",
              "description": "The coverage of different regions in WIG format. Optional.",
              "pattern": "*.wig"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@projectoriented",
          "@ramprasadn"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "tiddit_sv",
      "path": "modules/nf-core/tiddit/sv/meta.yml",
      "type": "module",
      "meta": {
        "name": "tiddit_sv",
        "description": "Identify chromosomal rearrangements.",
        "keywords": [
          "structural",
          "variants",
          "vcf"
        ],
        "tools": [
          {
            "sv": {
              "description": "Search for structural variants.",
              "homepage": "https://github.com/SciLifeLab/TIDDIT",
              "documentation": "https://github.com/SciLifeLab/TIDDIT/blob/master/README.md",
              "doi": "10.12688/f1000research.11168.1",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "BAM/CRAM index file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Input FASTA file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "bwa_index": {
              "type": "file",
              "description": "BWA genome index files",
              "pattern": "Directory containing BWA index *.{amb,ann,bwt,pac,sa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "vcf",
              "pattern": "*.{vcf}"
            }
          },
          {
            "ploidy": {
              "type": "file",
              "description": "tab",
              "pattern": "*.{ploidies.tab}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "transdecoder_longorf",
      "path": "modules/nf-core/transdecoder/longorf/meta.yml",
      "type": "module",
      "meta": {
        "name": "transdecoder_longorf",
        "description": "TransDecoder itentifies candidate coding regions within transcript sequences. it is used to build gff file.",
        "keywords": [
          "eucaryotes",
          "gff"
        ],
        "tools": [
          {
            "transdecoder": {
              "description": "TransDecoder identifies candidate coding regions within transcript sequences, such as those generated by de novo RNA-Seq transcript assembly using Trinity, or constructed based on RNA-Seq alignments to the genome using Tophat and Cufflinks.",
              "homepage": "https://github.com/TransDecoder",
              "documentation": "https://github.com/TransDecoder/TransDecoder/wiki",
              "tool_dev_url": "https://github.com/TransDecoder/TransDecoder",
              "licence": [
                "Broad Institute"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "fasta file",
              "pattern": "*.{fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "pep": {
              "type": "Amino acids fasta file",
              "description": "all ORFs meeting the minimum length criteria, regardless of coding potential. file",
              "pattern": "*.{pep}"
            }
          },
          {
            "gff3": {
              "type": "gff file",
              "description": "positions of all ORFs as found in the target transcripts. file",
              "pattern": "*.{gff3}"
            }
          },
          {
            "cds": {
              "type": "fasta file",
              "description": "the nucleotide coding sequence for all detected ORFs. file",
              "pattern": "*{cds}"
            }
          },
          {
            "dat": {
              "type": "tsv file",
              "description": "nucleotide frequencies",
              "pattern": "*{dat}"
            }
          },
          {
            "folder": {
              "type": "directory",
              "description": "contains all the files from the run"
            }
          }
        ],
        "authors": [
          "@Danilo2771"
        ]
      }
    },
    {
      "name": "transdecoder_predict",
      "path": "modules/nf-core/transdecoder/predict/meta.yml",
      "type": "module",
      "meta": {
        "name": "transdecoder_predict",
        "description": "TransDecoder identifies candidate coding regions within transcript sequences. It is used to build gff file. You can use this module after transdecoder_longorf",
        "keywords": [
          "eukaryotes",
          "gff"
        ],
        "tools": [
          {
            "transdecoder": {
              "description": "TransDecoder identifies candidate coding regions within transcript sequences, such as those generated by de novo RNA-Seq transcript assembly using Trinity, or constructed based on RNA-Seq alignments to the genome using Tophat and Cufflinks.",
              "homepage": "https://github.com/TransDecoder",
              "documentation": "https://github.com/TransDecoder/TransDecoder/wiki",
              "tool_dev_url": "https://github.com/TransDecoder/TransDecoder",
              "licence": [
                "Broad Institute"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "fasta file",
              "pattern": "*.{fasta}"
            }
          },
          {
            "fold": {
              "type": "directory",
              "description": "Output from the module transdecoder_longorf",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "pep": {
              "type": "amino acids fasta file",
              "description": "All ORFs meeting the minimum length criteria, regardless of coding potential",
              "pattern": "*.{pep}"
            }
          },
          {
            "gff3": {
              "type": "gff3 file",
              "description": "Positions of all ORFs as found in the target transcripts",
              "pattern": "*.{gff3}"
            }
          },
          {
            "cds": {
              "type": "nucleotide fasta file",
              "description": "the nucleotide coding sequence for all detected ORFs",
              "pattern": "*{cds}"
            }
          },
          {
            "bed": {
              "type": "bed file",
              "description": "bed file",
              "pattern": "*{bed}"
            }
          }
        ],
        "authors": [
          "@Danilo2771"
        ]
      }
    },
    {
      "name": "trimgalore",
      "path": "modules/nf-core/trimgalore/meta.yml",
      "type": "module",
      "meta": {
        "name": "trimgalore",
        "description": "Trim FastQ files using Trim Galore!",
        "keywords": [
          "trimming",
          "adapters",
          "sequencing adapters",
          "fastq"
        ],
        "tools": [
          {
            "trimgalore": {
              "description": "A wrapper tool around Cutadapt and FastQC to consistently apply quality\nand adapter trimming to FastQ files, with some extra functionality for\nMspI-digested RRBS-type (Reduced Representation Bisufite-Seq) libraries.\n",
              "homepage": "https://www.bioinformatics.babraham.ac.uk/projects/trim_galore/",
              "documentation": "https://github.com/FelixKrueger/TrimGalore/blob/master/Docs/Trim_Galore_User_Guide.md",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input adapter trimmed FastQ files of size 1 and 2 for\nsingle-end and paired-end data, respectively.\n",
              "pattern": "*{3prime,5prime,trimmed,val}*.fq.gz"
            }
          },
          {
            "unpaired": {
              "type": "file",
              "description": "FastQ files containing unpaired reads from read 1 or read 2\n",
              "pattern": "*unpaired*.fq.gz"
            }
          },
          {
            "html": {
              "type": "file",
              "description": "FastQC report (optional)",
              "pattern": "*_{fastqc.html}"
            }
          },
          {
            "zip": {
              "type": "file",
              "description": "FastQC report archive (optional)",
              "pattern": "*_{fastqc.zip}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Trim Galore! trimming report",
              "pattern": "*_{report.txt}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@ewels",
          "@FelixKrueger"
        ]
      },
      "subworkflows": [
        "fastq_fastqc_umitools_trimgalore"
      ],
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "methylseq",
          "version": "2.4.0"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "ssds",
          "version": "dev"
        }
      ]
    },
    {
      "name": "trimmomatic",
      "path": "modules/nf-core/trimmomatic/meta.yml",
      "type": "module",
      "meta": {
        "name": "trimmomatic",
        "description": "Performs quality and adapter trimming on paired end and single end reads",
        "keywords": [
          "trimming",
          "adapter trimming",
          "quality trimming"
        ],
        "tools": [
          {
            "trimmomatic": {
              "description": "A flexible read trimming tool for Illumina NGS data",
              "homepage": "http://www.usadellab.org/cms/?page=trimmomatic",
              "documentation": "https://github.com/usadellab/Trimmomatic",
              "doi": "10.1093/bioinformatics/btu170",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Input FastQ files of size 1 or 2 for single-end and paired-end data, respectively.\n",
              "pattern": "*.fastq.gz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "trimmed_reads": {
              "type": "file",
              "description": "The trimmed/modified paired end fastq reads",
              "pattern": "*.paired.trim*.fastq.gz"
            }
          },
          {
            "unpaired_reads": {
              "type": "file",
              "description": "The trimmed/modified unpaired end fastq reads",
              "pattern": "*.unpaired.trim_*.fastq.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "trimmomatic log file",
              "pattern": "*.log"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "trimmomatic summary file of surviving and dropped reads",
              "pattern": "*.summary"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@alyssa-ab"
        ]
      }
    },
    {
      "name": "trinity",
      "path": "modules/nf-core/trinity/meta.yml",
      "type": "module",
      "meta": {
        "name": "trinity",
        "description": "Assembles a de novo transcriptome from RNAseq reads",
        "keywords": [
          "assembly",
          "de novo assembler",
          "fasta",
          "fastq"
        ],
        "tools": [
          {
            "trinity": {
              "description": "Trinity assembles transcript sequences from Illumina RNA-Seq data.",
              "homepage": "https://github.com/trinityrnaseq/trinityrnaseq/wiki",
              "documentation": "https://github.com/trinityrnaseq/trinityrnaseq/wiki",
              "tool_dev_url": "https://github.com/trinityrnaseq/trinityrnaseq/",
              "doi": "10.1038/nbt.1883",
              "licence": "['BSD-3-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "fasta/fastq file of reads to be assembled into a transcriptome",
              "pattern": "*.{fa|fasta|fq|fastq}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "transcript_fasta": {
              "type": "file",
              "description": "de novo assembled transcripts fasta file compressed",
              "pattern": "*.fa.gz"
            }
          }
        ],
        "authors": [
          "@timslittle"
        ]
      }
    },
    {
      "name": "ucsc_bedclip",
      "path": "modules/nf-core/ucsc/bedclip/meta.yml",
      "type": "module",
      "meta": {
        "name": "ucsc_bedclip",
        "description": "Remove lines from bed file that refer to off-chromosome locations.",
        "keywords": [
          "bed",
          "genomics",
          "ucsc"
        ],
        "tools": [
          {
            "ucsc": {
              "description": "Remove lines from bed file that refer to off-chromosome locations.",
              "homepage": "http://hgdownload.cse.ucsc.edu/admin/exe/",
              "licence": [
                "varies; see http://genome.ucsc.edu/license"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bedgraph": {
              "type": "file",
              "description": "bedGraph file",
              "pattern": "*.{bedgraph}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bedgraph": {
              "type": "file",
              "description": "bedGraph file",
              "pattern": "*.{bedgraph}"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "ucsc_bedgraphtobigwig",
      "path": "modules/nf-core/ucsc/bedgraphtobigwig/meta.yml",
      "type": "module",
      "meta": {
        "name": "ucsc_bedgraphtobigwig",
        "description": "Convert a bedGraph file to bigWig format.",
        "keywords": [
          "bedgraph",
          "bigwig",
          "ucsc",
          "bedgraphtobigwig",
          "converter"
        ],
        "tools": [
          {
            "ucsc": {
              "description": "Convert a bedGraph file to bigWig format.",
              "homepage": "http://hgdownload.cse.ucsc.edu/admin/exe/",
              "documentation": "https://genome.ucsc.edu/goldenPath/help/bigWig.html",
              "licence": [
                "varies; see http://genome.ucsc.edu/license"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bedgraph": {
              "type": "file",
              "description": "bedGraph file",
              "pattern": "*.{bedGraph}"
            }
          },
          {
            "sizes": {
              "type": "file",
              "description": "chromosome sizes file",
              "pattern": "*.{sizes}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bigwig": {
              "type": "file",
              "description": "bigWig file",
              "pattern": "*.{bigWig}"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "ssds",
          "version": "dev"
        }
      ]
    },
    {
      "name": "ucsc_bedtobigbed",
      "path": "modules/nf-core/ucsc/bedtobigbed/meta.yml",
      "type": "module",
      "meta": {
        "name": "ucsc_bedtobigbed",
        "description": "Convert file from bed to bigBed format",
        "keywords": [
          "bed",
          "bigbed",
          "ucsc",
          "bedtobigbed",
          "converter"
        ],
        "tools": [
          {
            "ucsc": {
              "description": "Convert file from bed to bigBed format",
              "homepage": "http://hgdownload.cse.ucsc.edu/admin/exe/",
              "documentation": "https://genome.ucsc.edu/goldenPath/help/bigBed.html",
              "licence": [
                "varies; see http://genome.ucsc.edu/license"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "bed file",
              "pattern": "*.{bed}"
            }
          },
          {
            "sizes": {
              "type": "file",
              "description": "chromosome sizes file",
              "pattern": "*.{sizes}"
            }
          },
          {
            "autosql": {
              "type": "file",
              "description": "autoSql file to describe the columns of the BED file",
              "pattern": "*.{as}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bigbed": {
              "type": "file",
              "description": "bigBed file",
              "pattern": "*.{bigBed}"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      }
    },
    {
      "name": "ucsc_bigwigaverageoverbed",
      "path": "modules/nf-core/ucsc/bigwigaverageoverbed/meta.yml",
      "type": "module",
      "meta": {
        "name": "ucsc_bigwigaverageoverbed",
        "description": "compute average score of bigwig over bed file",
        "keywords": [
          "bigwig",
          "bedGraph",
          "ucsc"
        ],
        "tools": [
          {
            "ucsc": {
              "description": "Compute average score of big wig over each bed, which may have introns.",
              "homepage": "http://hgdownload.cse.ucsc.edu/admin/exe/",
              "documentation": "http://www.genome.ucsc.edu/goldenPath/help/bigWig.html",
              "licence": [
                "varies; see http://genome.ucsc.edu/license"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "bed file",
              "pattern": "*.{bed}"
            }
          },
          {
            "bigwig": {
              "type": "file",
              "description": "bigwig file",
              "pattern": "*.{bigwig,bw}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "tab": {
              "type": "file",
              "description": "tab file",
              "pattern": "*.{tab}"
            }
          }
        ],
        "authors": [
          "@jianhong"
        ]
      },
      "pipelines": [
        {
          "name": "hicar",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "ucsc_gtftogenepred",
      "path": "modules/nf-core/ucsc/gtftogenepred/meta.yml",
      "type": "module",
      "meta": {
        "name": "ucsc_gtftogenepred",
        "description": "compute average score of bigwig over bed file",
        "keywords": [
          "gtf",
          "genepred",
          "refflat",
          "ucsc",
          "gtftogenepred"
        ],
        "tools": [
          {
            "ucsc": {
              "description": "Convert GTF files to GenePred format",
              "homepage": "http://hgdownload.cse.ucsc.edu/admin/exe/",
              "licence": [
                "varies; see http://genome.ucsc.edu/license"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "GTF file",
              "pattern": "*.{gtf}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "genepred": {
              "type": "file",
              "description": "genepred file",
              "pattern": "*.{genepred}"
            }
          },
          {
            "refflat": {
              "type": "file",
              "description": "refflat file",
              "pattern": "*.{refflat}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@BarryDigby",
          "@anoronh4"
        ]
      }
    },
    {
      "name": "ucsc_liftover",
      "path": "modules/nf-core/ucsc/liftover/meta.yml",
      "type": "module",
      "meta": {
        "name": "ucsc_liftover",
        "description": "convert between genome builds",
        "keywords": [
          "bed",
          "ucsc",
          "ucsc/liftover"
        ],
        "tools": [
          {
            "ucsc": {
              "description": "Move annotations from one assembly to another",
              "homepage": "http://hgdownload.cse.ucsc.edu/admin/exe/",
              "licence": [
                "varies; see http://genome.ucsc.edu/license"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Browser Extensible Data (BED) file",
              "pattern": "*.{bed}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "version": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          },
          {
            "lifted": {
              "type": "file",
              "description": "BED file containing successfully lifted variants",
              "pattern": "*.{lifted.bed}"
            }
          },
          {
            "unlifted": {
              "type": "file",
              "description": "BED file containing variants that couldn't be lifted",
              "pattern": "*.{unlifted.bed}"
            }
          }
        ],
        "authors": [
          "@nebfield"
        ]
      }
    },
    {
      "name": "ucsc_wigtobigwig",
      "path": "modules/nf-core/ucsc/wigtobigwig/meta.yml",
      "type": "module",
      "meta": {
        "name": "ucsc_wigtobigwig",
        "description": "Convert ascii format wig file to binary big wig format",
        "keywords": [
          "wig",
          "bigwig",
          "ucsc"
        ],
        "tools": [
          {
            "ucsc": {
              "description": "Convert ascii format wig file (in fixedStep, variableStep\nor bedGraph format) to binary big wig format\n",
              "homepage": "http://www.genome.ucsc.edu/goldenPath/help/bigWig.html",
              "licence": [
                "varies; see http://genome.ucsc.edu/license"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "wig": {
              "type": "file",
              "description": "wig file",
              "pattern": "*.{wig}"
            }
          },
          {
            "chromsizes": {
              "type": "file",
              "description": "chromosome sizes file"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bw": {
              "type": "file",
              "description": "bigwig file",
              "pattern": "*.{bw}"
            }
          }
        ],
        "authors": [
          "@jianhong",
          "@projectoriented"
        ]
      },
      "pipelines": [
        {
          "name": "hicar",
          "version": "1.0.0"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "ultra_align",
      "path": "modules/nf-core/ultra/align/meta.yml",
      "type": "module",
      "meta": {
        "name": "ultra_align",
        "description": "uLTRA aligner - A wrapper around minimap2 to improve small exon detection - Map reads on genome",
        "keywords": [
          "uLTRA",
          "align",
          "minimap2",
          "long_read",
          "isoseq",
          "ont"
        ],
        "tools": [
          {
            "ultra": {
              "description": "Splice aligner of long transcriptomic reads to genome.",
              "homepage": "https://github.com/ksahlin/uLTRA",
              "documentation": "https://github.com/ksahlin/uLTRA",
              "tool_dev_url": "https://github.com/ksahlin/uLTRA",
              "doi": "10.1093/bioinformatics/btab540",
              "licence": "['GNU GPLV3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "A fasta or fastq file of reads to align",
              "pattern": "*.{fa,fasta,fastq}"
            }
          },
          {
            "genome": {
              "type": "file",
              "description": "A fasta file of reference genome",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "pickle": {
              "type": "file",
              "description": "Pickle files generated by uLTRA index",
              "pattern": "*.pickle"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "Database generated by uLTRA index",
              "pattern": "*.db"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "The aligned reads in bam format",
              "pattern": "*.bam"
            }
          }
        ],
        "authors": [
          "@sguizard"
        ]
      },
      "pipelines": [
        {
          "name": "isoseq",
          "version": "1.1.4"
        }
      ]
    },
    {
      "name": "ultra_index",
      "path": "modules/nf-core/ultra/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "ultra_index",
        "description": "uLTRA aligner - A wrapper around minimap2 to improve small exon detection - Index gtf file for reads alignment",
        "keywords": [
          "uLTRA",
          "index",
          "minimap2",
          "long_read",
          "isoseq",
          "ont"
        ],
        "tools": [
          {
            "ultra": {
              "description": "Splice aligner of long transcriptomic reads to genome.",
              "homepage": "https://github.com/ksahlin/uLTRA",
              "documentation": "https://github.com/ksahlin/uLTRA",
              "tool_dev_url": "https://github.com/ksahlin/uLTRA",
              "doi": "10.1093/bioinformatics/btab540",
              "licence": "['GNU GPLV3']"
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "A fasta file of the genome to use as reference for mapping",
              "pattern": "*.{fasta, fa}"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "An annotation file of the reference genome in GTF format",
              "pattern": "*.gtf"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "pickle": {
              "type": "file",
              "description": "Index files generated by uLTRA index",
              "pattern": "*.pickle"
            }
          },
          {
            "pickle": {
              "type": "file",
              "description": "database file generated by uLTRA index",
              "pattern": "*.db"
            }
          }
        ],
        "authors": [
          "@sguizard"
        ]
      },
      "pipelines": [
        {
          "name": "isoseq",
          "version": "1.1.4"
        }
      ]
    },
    {
      "name": "ultra_pipeline",
      "path": "modules/nf-core/ultra/pipeline/meta.yml",
      "type": "module",
      "meta": {
        "name": "ultra_pipeline",
        "description": "uLTRA aligner - A wrapper around minimap2 to improve small exon detection",
        "keywords": [
          "uLTRA",
          "minimap2"
        ],
        "tools": [
          {
            "ultra": {
              "description": "Splice aligner of long transcriptomic reads to genome.",
              "homepage": "https://github.com/ksahlin/uLTRA",
              "documentation": "https://github.com/ksahlin/uLTRA",
              "tool_dev_url": "https://github.com/ksahlin/uLTRA",
              "doi": "10.1093/bioinformatics/btab540",
              "licence": [
                "GNU GPLV3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "A fasta or fastq file of reads to align",
              "pattern": "*.{fasta,fastq}"
            }
          },
          {
            "genome": {
              "type": "file",
              "description": "fasta file of reference genome",
              "pattern": "*.fasta"
            }
          },
          {
            "gtf": {
              "type": "file",
              "description": "A annotation of use the genome",
              "pattern": "*.gtf"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "sam": {
              "type": "file",
              "description": "The aligned reads in sam format",
              "pattern": "*.sam"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@sguizard",
          "@lassefolkersen",
          "@ksahlin"
        ]
      }
    },
    {
      "name": "ultraplex",
      "path": "modules/nf-core/ultraplex/meta.yml",
      "type": "module",
      "meta": {
        "name": "ultraplex",
        "description": "Ultraplex is an all-in-one software package for processing and demultiplexing fastq files.",
        "keywords": [
          "demultiplex",
          "fastq",
          "umi"
        ],
        "tools": [
          {
            "ultraplex": {
              "description": "fastq demultiplexer",
              "homepage": "https://github.com/ulelab/ultraplex",
              "documentation": "https://github.com/ulelab/ultraplex",
              "tool_dev_url": "https://github.com/ulelab/ultraplex",
              "doi": "10.5281/zenodo.465128",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Zipped FASTQ file",
              "pattern": "*.{fastq.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Demultiplexed sample FASTQ files",
              "pattern": "*[!no_match].fastq.gz"
            }
          },
          {
            "no_match_fastq": {
              "type": "file",
              "description": "FASTQ file containing reads that could not be demultiplexed",
              "pattern": "*no_match.fastq.gz"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "File containing demultiplexing log",
              "pattern": "*.log"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@CharlotteAnne",
          "@oscarwilkins",
          "@chris-cheshire",
          "@marc-jones",
          "@iraiosub",
          "@samirelanduk"
        ]
      }
    },
    {
      "name": "umicollapse",
      "path": "modules/nf-core/umicollapse/meta.yml",
      "type": "module",
      "meta": {
        "name": "umicollapse",
        "description": "Deduplicate reads based on the mapping co-ordinate and the UMI attached to the read.",
        "keywords": [
          "umicollapse",
          "deduplication",
          "genomics"
        ],
        "tools": [
          {
            "umicollapse": {
              "description": "UMICollapse contains tools for dealing with Unique Molecular Identifiers (UMIs)/Random Molecular Tags (RMTs).",
              "homepage": "https://github.com/Daniel-Liu-c0deb0t/UMICollapse",
              "documentation": "https://github.com/Daniel-Liu-c0deb0t/UMICollapse",
              "tool_dev_url": "https://github.com/Daniel-Liu-c0deb0t/UMICollapse",
              "doi": "10.7717/peerj.8275",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\n  e.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file containing reads to be deduplicated via UMIs.\n",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index files corresponding to the input BAM file.\n",
              "pattern": "*.{bai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\n  e.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file with deduplicated UMIs.",
              "pattern": "*.{bam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@CharlotteAnne",
          "@chris-cheshire"
        ]
      }
    },
    {
      "name": "umitools_dedup",
      "path": "modules/nf-core/umitools/dedup/meta.yml",
      "type": "module",
      "meta": {
        "name": "umitools_dedup",
        "description": "Deduplicate reads based on the mapping co-ordinate and the UMI attached to the read.",
        "keywords": [
          "umitools",
          "deduplication",
          "dedup"
        ],
        "tools": [
          {
            "umi_tools": {
              "description": "UMI-tools contains tools for dealing with Unique Molecular Identifiers (UMIs)/Random Molecular Tags (RMTs) and single cell RNA-Seq cell barcodes\n",
              "documentation": "https://umi-tools.readthedocs.io/en/latest/",
              "license": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file containing reads to be deduplicated via UMIs.\n",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index files corresponding to the input BAM file.\n",
              "pattern": "*.{bai}"
            }
          },
          {
            "get_output_stats": {
              "type": "boolean",
              "description": "Whether or not to generate output stats.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file with deduplicated UMIs.",
              "pattern": "*.{bam}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "File with logging information",
              "pattern": "*.{log}"
            }
          },
          {
            "tsv_edit_distance": {
              "type": "file",
              "description": "Reports the (binned) average edit distance between the UMIs at each position.",
              "pattern": "*edit_distance.tsv"
            }
          },
          {
            "tsv_per_umi": {
              "type": "file",
              "description": "UMI-level summary statistics.",
              "pattern": "*per_umi.tsv"
            }
          },
          {
            "tsv_umi_per_position": {
              "type": "file",
              "description": "Tabulates the counts for unique combinations of UMI and position.",
              "pattern": "*per_position.tsv"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@grst",
          "@klkeys"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "umitools_extract",
      "path": "modules/nf-core/umitools/extract/meta.yml",
      "type": "module",
      "meta": {
        "name": "umitools_extract",
        "description": "Extracts UMI barcode from a read and add it to the read name, leaving any sample barcode in place",
        "keywords": [
          "umitools",
          "extract"
        ],
        "tools": [
          {
            "umi_tools": {
              "description": "UMI-tools contains tools for dealing with Unique Molecular Identifiers (UMIs)/Random Molecular Tags (RMTs) and single cell RNA-Seq cell barcodes\n",
              "documentation": "https://umi-tools.readthedocs.io/en/latest/",
              "license": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "list",
              "description": "List of input FASTQ files whose UMIs will be extracted.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Extracted FASTQ files. | For single-end reads, pattern is \\${prefix}.umi_extract.fastq.gz. | For paired-end reads, pattern is \\${prefix}.umi_extract_{1,2}.fastq.gz.\n",
              "pattern": "*.{fastq.gz}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Logfile for umi_tools",
              "pattern": "*.{log}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@grst"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "unicycler",
      "path": "modules/nf-core/unicycler/meta.yml",
      "type": "module",
      "meta": {
        "name": "unicycler",
        "description": "Assembles bacterial genomes",
        "keywords": [
          "genome",
          "assembly",
          "genome assembler",
          "small genome"
        ],
        "tools": [
          {
            "unicycler": {
              "description": "Hybrid assembly pipeline for bacterial genomes",
              "homepage": "https://github.com/rrwick/Unicycler",
              "documentation": "https://github.com/rrwick/Unicycler",
              "tool_dev_url": "https://github.com/rrwick/Unicycler",
              "doi": "10.1371/journal.pcbi.1005595",
              "licence": [
                "GPL v3"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "shortreads": {
              "type": "file",
              "description": "List of input Illumina FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "longreads": {
              "type": "file",
              "description": "List of input FastQ files of size 1, PacBio or Nanopore long reads.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "scaffolds": {
              "type": "file",
              "description": "Fasta file containing scaffolds",
              "pattern": "*.{scaffolds.fa.gz}"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "gfa file containing assembly",
              "pattern": "*.{assembly.gfa.gz}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "unicycler log file",
              "pattern": "*.{log}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@JoseEspinosa",
          "@drpatelh",
          "@d4straub"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "universc",
      "path": "modules/nf-core/universc/meta.yml",
      "type": "module",
      "meta": {
        "name": "universc",
        "description": "Module to run UniverSC an open-source pipeline to demultiplex and process single-cell RNA-Seq data",
        "keywords": [
          "demultiplex",
          "align",
          "single-cell",
          "scRNA-Seq",
          "count",
          "umi"
        ],
        "tools": [
          {
            "universc": {
              "description": "UniverSC: a flexible cross-platform single-cell data processing pipeline",
              "homepage": "https://hub.docker.com/r/tomkellygenetics/universc",
              "documentation": "https://raw.githubusercontent.com/minoda-lab/universc/master/man/launch_universc.sh",
              "tool_dev_url": "https://github.com/minoda-lab/universc",
              "doi": "10.1101/2021.01.19.427209",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "FASTQ or FASTQ.GZ file, list of 2 files for paired-end data",
              "pattern": "*.{fastq,fq,fastq.gz,fq.gz}"
            }
          }
        ],
        "output": [
          {
            "outs": {
              "type": "file",
              "description": "Files containing the outputs of Cell Ranger",
              "pattern": "sample-${meta.id}/outs/*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software version",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@kbattenb",
          "@tomkellygenetics"
        ]
      },
      "pipelines": [
        {
          "name": "scrnaseq",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "untar",
      "path": "modules/nf-core/untar/meta.yml",
      "type": "module",
      "meta": {
        "name": "untar",
        "description": "Extract files.",
        "keywords": [
          "untar",
          "uncompress",
          "extract"
        ],
        "tools": [
          {
            "untar": {
              "description": "Extract tar.gz files.\n",
              "documentation": "https://www.gnu.org/software/tar/manual/",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "archive": {
              "type": "file",
              "description": "File to be untar",
              "pattern": "*.{tar}.{gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "untar": {
              "type": "directory",
              "description": "Directory containing contents of archive",
              "pattern": "*/"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh",
          "@matthdsm",
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "chipseq",
          "version": "2.0.0"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "demultiplex",
          "version": "1.3.2"
        },
        {
          "name": "funcscan",
          "version": "1.1.2"
        },
        {
          "name": "hgtseq",
          "version": "1.1.0"
        },
        {
          "name": "nanoseq",
          "version": "3.1.0"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "proteinfold",
          "version": "1.0.0"
        },
        {
          "name": "raredisease",
          "version": "1.0.0"
        },
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "rnavar",
          "version": "1.0.0"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        },
        {
          "name": "spatialtranscriptomics",
          "version": "dev"
        },
        {
          "name": "taxprofiler",
          "version": "1.0.1"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "untarfiles",
      "path": "modules/nf-core/untarfiles/meta.yml",
      "type": "module",
      "meta": {
        "name": "untarfiles",
        "description": "Extract files.",
        "keywords": [
          "untar",
          "uncompress",
          "files"
        ],
        "tools": [
          {
            "untar": {
              "description": "Extract tar.gz files.\n",
              "documentation": "https://www.gnu.org/software/tar/manual/",
              "licence": [
                "GPL-3.0-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "archive": {
              "type": "file",
              "description": "File to be untar",
              "pattern": "*.{tar}.{gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "files": {
              "type": "string",
              "description": "A list containing references to individual archive files",
              "pattern": "*/**"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@joseespinosa",
          "@drpatelh",
          "@matthdsm",
          "@jfy133",
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "unzip",
      "path": "modules/nf-core/unzip/meta.yml",
      "type": "module",
      "meta": {
        "name": "unzip",
        "description": "Unzip ZIP archive files",
        "keywords": [
          "unzip",
          "decompression"
        ],
        "tools": [
          {
            "unzip": {
              "description": "p7zip is a quick port of 7z.exe and 7za.exe (command line version of 7zip, see www.7-zip.org) for Unix.",
              "homepage": "https://sourceforge.net/projects/p7zip/",
              "documentation": "https://sourceforge.net/projects/p7zip/",
              "tool_dev_url": "https://sourceforge.net/projects/p7zip\"",
              "licence": [
                "LGPL-2.1-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "archive": {
              "type": "file",
              "description": "ZIP file",
              "pattern": "*.zip"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "unzipped_archive": {
              "type": "directory",
              "description": "Directory contents of the unzipped archive",
              "pattern": "${archive.baseName}/"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "unzipfiles",
      "path": "modules/nf-core/unzipfiles/meta.yml",
      "type": "module",
      "meta": {
        "name": "unzipfiles",
        "description": "Unzip ZIP archive files",
        "keywords": [
          "unzip",
          "decompression"
        ],
        "tools": [
          {
            "unzip": {
              "description": "p7zip is a quick port of 7z.exe and 7za.exe (command line version of 7zip, see www.7-zip.org) for Unix.",
              "homepage": "https://sourceforge.net/projects/p7zip/",
              "documentation": "https://sourceforge.net/projects/p7zip/",
              "tool_dev_url": "https://sourceforge.net/projects/p7zip\"",
              "licence": [
                "LGPL-2.1-or-later"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "archive": {
              "type": "file",
              "description": "ZIP file",
              "pattern": "*.zip"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "files": {
              "type": "list",
              "description": "A list containing references to individual archive files",
              "pattern": "*/**"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@jfy133",
          "@pinin4fjords"
        ]
      }
    },
    {
      "name": "upd",
      "path": "modules/nf-core/upd/meta.yml",
      "type": "module",
      "meta": {
        "name": "upd",
        "description": "Simple software to call UPD regions from germline exome/wgs trios.",
        "keywords": [
          "upd",
          "uniparental",
          "disomy"
        ],
        "tools": [
          {
            "upd": {
              "description": "Simple software to call UPD regions from germline exome/wgs trios.",
              "homepage": "https://github.com/bjhall/upd",
              "documentation": "https://github.com/bjhall/upd",
              "tool_dev_url": "https://github.com/bjhall/upd",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf,vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file",
              "pattern": "*.{bed}"
            }
          }
        ],
        "authors": [
          "@hrydbeck"
        ]
      }
    },
    {
      "name": "vardictjava",
      "path": "modules/nf-core/vardictjava/meta.yml",
      "type": "module",
      "meta": {
        "name": "vardictjava",
        "description": "The Java port of the VarDict variant caller",
        "keywords": [
          "variant calling",
          "VarDict",
          "AstraZeneca"
        ],
        "tools": [
          {
            "vardictjava": {
              "description": "Java port of the VarDict variant discovery program",
              "homepage": "https://github.com/AstraZeneca-NGS/VarDictJava",
              "documentation": "https://github.com/AstraZeneca-NGS/VarDictJava",
              "tool_dev_url": "https://github.com/AstraZeneca-NGS/VarDictJava",
              "doi": "10.1093/nar/gkw227 ",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/SAM file",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Index of the BAM file",
              "pattern": "*.bai"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED with the regions of interest",
              "pattern": "*.bed"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA of the reference genome",
              "pattern": "*.{fa,fasta}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the FASTA of the reference genome",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file output",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "variantbam",
      "path": "modules/nf-core/variantbam/meta.yml",
      "type": "module",
      "meta": {
        "name": "variantbam",
        "description": "Filtering, downsampling and profiling alignments in BAM/CRAM formats",
        "keywords": [
          "filter",
          "bam",
          "subsample",
          "downsample",
          "downsample bam",
          "subsample bam"
        ],
        "tools": [
          {
            "variantbam": {
              "description": "Filtering and profiling of next-generational sequencing data using region-specific rules",
              "homepage": "https://github.com/walaj/VariantBam",
              "documentation": "https://github.com/walaj/VariantBam#table-of-contents",
              "tool_dev_url": "https://github.com/walaj/VariantBam",
              "doi": "10.1093/bioinformatics/btw111",
              "licence": [
                "Apache-2.0"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM file",
              "pattern": "*.{bam,cram}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Filtered or downsampled BAM file",
              "pattern": "*.{bam}"
            }
          }
        ],
        "authors": [
          "@bjohnnyd"
        ]
      }
    },
    {
      "name": "varlociraptor_estimatealignmentproperties",
      "path": "modules/nf-core/varlociraptor/estimatealignmentproperties/meta.yml",
      "type": "module",
      "meta": {
        "name": "varlociraptor_estimatealignmentproperties",
        "description": "In order to judge about candidate indel and structural variants, Varlociraptor needs to know about certain properties of the underlying sequencing experiment in combination with the used read aligner.",
        "keywords": [
          "estimation",
          "alignment",
          "variants"
        ],
        "tools": [
          {
            "varlociraptor": {
              "description": "Flexible, uncertainty-aware variant calling with parameter free filtration via FDR control.",
              "homepage": "https://varlociraptor.github.io/docs/estimating/",
              "documentation": "https://varlociraptor.github.io/docs/estimating/",
              "tool_dev_url": "https://github.com/varlociraptor/varlociraptor",
              "doi": "10.1186/s13059-020-01993-6",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference fasta file",
              "pattern": "*.{fasta}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference index information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index for reference fasta file (must be with samtools index)",
              "pattern": "*.{fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "alignment_properties_json": {
              "type": "file",
              "description": "File containing alignment properties",
              "pattern": "*.alignment-properties.json"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      }
    },
    {
      "name": "varlociraptor_preprocess",
      "path": "modules/nf-core/varlociraptor/preprocess/meta.yml",
      "type": "module",
      "meta": {
        "name": "varlociraptor_preprocess",
        "description": "Obtains per-sample observations for the actual calling process with varlociraptor calls",
        "keywords": [
          "observations",
          "variants",
          "preprocessing"
        ],
        "tools": [
          {
            "varlociraptor": {
              "description": "Flexible, uncertainty-aware variant calling with parameter free filtration via FDR control.",
              "homepage": "https://varlociraptor.github.io/docs/estimating/",
              "documentation": "https://varlociraptor.github.io/docs/calling/",
              "tool_dev_url": "https://github.com/varlociraptor/varlociraptor",
              "doi": "10.1186/s13059-020-01993-6",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "candidates": {
              "type": "file",
              "description": "Sorted BCF/VCF file",
              "pattern": "*.{bcf,vcf,vcf.gz}"
            }
          },
          {
            "alignment_json": {
              "type": "file",
              "description": "File containing alignment properties obtained with varlociraptor/estimatealignmentproperties",
              "pattern": "*.json"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference fasta file",
              "pattern": "*.{fasta}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference index information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index for reference fasta file (must be with samtools index)",
              "pattern": "*.{fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf_gz": {
              "type": "file",
              "description": "Compressed VCF file containing sample observations",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "bcf": {
              "type": "file",
              "description": "BCF file containing sample observations",
              "pattern": "*.bcf"
            }
          }
        ],
        "authors": [
          "@FriederikeHanssen"
        ]
      }
    },
    {
      "name": "vcf2db",
      "path": "modules/nf-core/vcf2db/meta.yml",
      "type": "module",
      "meta": {
        "name": "vcf2db",
        "description": "A tool to create a Gemini-compatible DB file from an annotated VCF",
        "keywords": [
          "vcf2db",
          "vcf",
          "gemini"
        ],
        "tools": [
          {
            "vcf2db": {
              "description": "Create a gemini-compatible database from a VCF",
              "homepage": "https://github.com/quinlan-lab/vcf2db",
              "documentation": "https://github.com/quinlan-lab/vcf2db",
              "tool_dev_url": "https://github.com/quinlan-lab/vcf2db",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "ped": {
              "type": "file",
              "description": "PED file",
              "pattern": "*.ped"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "Gemini-compatible database file",
              "pattern": "*.db"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "vcf2maf",
      "path": "modules/nf-core/vcf2maf/meta.yml",
      "type": "module",
      "meta": {
        "name": "vcf2maf",
        "description": "vcf2maf",
        "keywords": [
          "vcf",
          "maf",
          "annotation"
        ],
        "tools": [
          {
            "vcf2maf": {
              "description": "\"Convert a VCF into a MAF where each variant is annotated to only one of all possible gene isoforms using vcf2maf. vcf2maf is designed to work with VEP, so it is recommended to have VEP and vcf2maf installed when running this module. Running VEP requires a VEP cache to be present. It is recommended to set the --species and --ncbi-build in ext.args (use the module config). If you wish to skip VEP, add `--inhibit-vep` to ext.args. It may also be necessary to set --tumor-id and --normal-id for correct parsing of the VCF.\"\n",
              "homepage": "https://github.com/mskcc/vcf2maf",
              "documentation": "https://github.com/mskcc/vcf2maf",
              "tool_dev_url": "https://github.com/mskcc/vcf2maf",
              "doi": "10.5281/zenodo.593251",
              "licence": "['Apache-2.0']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "vcf to convert to MAF format. Must be uncompressed.\n"
            }
          },
          {
            "vep_cache": {
              "type": "file",
              "description": "Path to VEP cache dir. Required for correct running of VEP.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "maf": {
              "type": "file",
              "description": "MAF file produced from VCF",
              "pattern": "*.maf"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@adamrtalbot"
        ]
      }
    },
    {
      "name": "vcfanno",
      "path": "modules/nf-core/vcfanno/meta.yml",
      "type": "module",
      "meta": {
        "name": "vcfanno",
        "description": "quickly annotate your VCF with any number of INFO fields from any number of VCFs or BED files",
        "keywords": [
          "vcf",
          "bed",
          "annotate",
          "variant",
          "lua",
          "toml"
        ],
        "tools": [
          {
            "vcfanno": {
              "description": "annotate a VCF with other VCFs/BEDs/tabixed files",
              "documentation": "https://github.com/brentp/vcfanno#vcfanno",
              "tool_dev_url": "https://github.com/brentp/vcfanno",
              "doi": "10.1186/s13059-016-0973-5",
              "license": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "query VCF file",
              "pattern": "*.{vcf, vcf.gz}"
            }
          },
          {
            "vcf_tabix": {
              "type": "file",
              "description": "tabix index of query VCF - only needed if vcf is compressed",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "specific_resources": {
              "type": "map",
              "description": "A list of sample specific reference files defined in toml config, must also include indices if bgzipped."
            }
          },
          {
            "toml": {
              "type": "file",
              "description": "configuration file with reference file basenames",
              "pattern": "*.toml"
            }
          },
          {
            "lua": {
              "type": "file",
              "description": "Lua file for custom annotations",
              "pattern": "*.lua"
            }
          },
          {
            "resources": {
              "type": "map",
              "description": "List of reference files defined in toml config, must also include indices if bgzipped."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Annotated VCF file",
              "pattern": "*.vcf"
            }
          }
        ],
        "authors": [
          "@projectoriented",
          "@matthdsm"
        ]
      },
      "pipelines": [
        {
          "name": "raredisease",
          "version": "1.0.0"
        }
      ]
    },
    {
      "name": "vcflib_vcfbreakmulti",
      "path": "modules/nf-core/vcflib/vcfbreakmulti/meta.yml",
      "type": "module",
      "meta": {
        "name": "vcflib_vcfbreakmulti",
        "description": "If multiple alleles are specified in a single record, break the record into several lines preserving allele-specific INFO fields",
        "keywords": [
          "vcflib",
          "vcflib/vcfbreakmulti"
        ],
        "tools": [
          {
            "vcflib": {
              "description": "Command-line tools for manipulating VCF files",
              "homepage": "https://github.com/vcflib/vcflib",
              "documentation": "https://github.com/vcflib/vcflib#USAGE",
              "doi": "10.1101/2021.05.21.445151",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF file",
              "pattern": "*.{.vcf.gz,vcf}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index of VCF file",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF file",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "authors": [
          "@lucpen"
        ]
      }
    },
    {
      "name": "vcflib_vcffilter",
      "path": "modules/nf-core/vcflib/vcffilter/meta.yml",
      "type": "module",
      "meta": {
        "name": "vcflib_vcffilter",
        "description": "Command line tools for parsing and manipulating VCF files.",
        "keywords": [
          "filter",
          "variant",
          "vcf",
          "quality"
        ],
        "tools": [
          {
            "vcflib": {
              "description": "Command line tools for parsing and manipulating VCF files.",
              "homepage": "https://github.com/vcflib/vcflib",
              "documentation": "https://github.com/vcflib/vcflib",
              "tool_dev_url": "https://github.com/vcflib/vcflib",
              "doi": "10.1371/journal.pcbi.1009123",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test_sample_1' ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "VCF file",
              "pattern": "*.{vcf,vcf.gz}"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index file",
              "pattern": "*.{tbi}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Filtered VCF file",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@zachary-foster"
        ]
      }
    },
    {
      "name": "vcflib_vcfuniq",
      "path": "modules/nf-core/vcflib/vcfuniq/meta.yml",
      "type": "module",
      "meta": {
        "name": "vcflib_vcfuniq",
        "description": "List unique genotypes. Like GNU uniq, but for VCF records. Remove records which have the same position, ref, and alt as the previous record.",
        "keywords": [
          "vcf",
          "uniq",
          "deduplicate"
        ],
        "tools": [
          {
            "vcflib": {
              "description": "Command-line tools for manipulating VCF files",
              "homepage": "https://github.com/vcflib/vcflib",
              "documentation": "https://github.com/vcflib/vcflib#USAGE",
              "doi": "10.1101/2021.05.21.445151",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index of VCF file",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF file",
              "pattern": "*.vcf.gz"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "vcftools",
      "path": "modules/nf-core/vcftools/meta.yml",
      "type": "module",
      "meta": {
        "name": "vcftools",
        "description": "A set of tools written in Perl and C++ for working with VCF files",
        "keywords": [
          "VCF",
          "sort"
        ],
        "tools": [
          {
            "vcftools": {
              "description": "A set of tools written in Perl and C++ for working with VCF files. This package only contains the C++ libraries whereas the package perl-vcftools-vcf contains the perl libraries",
              "homepage": "http://vcftools.sourceforge.net/",
              "documentation": "http://vcftools.sourceforge.net/man_latest.html",
              "licence": [
                "LGPL"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "variant_file": {
              "type": "file",
              "description": "variant input file which can be vcf, vcf.gz, or bcf format."
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "bed file which can be used with different arguments in vcftools (optional)"
            }
          },
          {
            "diff_variant_file": {
              "type": "file",
              "description": "secondary variant file which can be used with the 'diff' suite of tools (optional)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "vcf file (optional)",
              "pattern": "*.vcf"
            }
          },
          {
            "bcf": {
              "type": "file",
              "description": "bcf file (optional)",
              "pattern": "*.bcf"
            }
          },
          {
            "frq": {
              "type": "file",
              "description": "Allele frequency for each site (optional)",
              "pattern": "*.frq"
            }
          },
          {
            "frq_count": {
              "type": "file",
              "description": "Allele counts for each site (optional)",
              "pattern": "*.frq.count"
            }
          },
          {
            "idepth": {
              "type": "file",
              "description": "mean depth per individual (optional)",
              "pattern": "*.idepth"
            }
          },
          {
            "ldepth": {
              "type": "file",
              "description": "depth per site summed across individuals (optional)",
              "pattern": "*.ildepth"
            }
          },
          {
            "ldepth_mean": {
              "type": "file",
              "description": "mean depth per site calculated across individuals (optional)",
              "pattern": "*.ldepth.mean"
            }
          },
          {
            "gdepth": {
              "type": "file",
              "description": "depth for each genotype in vcf file (optional)",
              "pattern": "*.gdepth"
            }
          },
          {
            "hap_ld": {
              "type": "file",
              "description": "r2, D, and D’ statistics using phased haplotypes (optional)",
              "pattern": "*.hap.ld"
            }
          },
          {
            "geno_ld": {
              "type": "file",
              "description": "squared correlation coefficient between genotypes encoded as 0, 1 and 2 to represent the number of non-reference alleles in each individual (optional)",
              "pattern": "*.geno.ld"
            }
          },
          {
            "geno_chisq": {
              "type": "file",
              "description": "test for genotype independence via the chi-squared statistic (optional)",
              "pattern": "*.geno.chisq"
            }
          },
          {
            "list_hap_ld": {
              "type": "file",
              "description": "r2 statistics of the sites contained in the provided input file verses all other sites (optional)",
              "pattern": "*.list.hap.ld"
            }
          },
          {
            "list_geno_ld": {
              "type": "file",
              "description": "r2 statistics of the sites contained in the provided input file verses all other sites (optional)",
              "pattern": "*.list.geno.ld"
            }
          },
          {
            "interchrom_hap_ld": {
              "type": "file",
              "description": "r2 statistics for sites (haplotypes) on different chromosomes (optional)",
              "pattern": "*.interchrom.hap.ld"
            }
          },
          {
            "interchrom_geno_ld": {
              "type": "file",
              "description": "r2 statistics for sites (genotypes) on different chromosomes (optional)",
              "pattern": "*.interchrom.geno.ld"
            }
          },
          {
            "tstv": {
              "type": "file",
              "description": "Transition / Transversion ratio in bins of size defined in options (optional)",
              "pattern": "*.TsTv"
            }
          },
          {
            "tstv_summary": {
              "type": "file",
              "description": "Summary of all Transitions and Transversions (optional)",
              "pattern": "*.TsTv.summary"
            }
          },
          {
            "tstv_count": {
              "type": "file",
              "description": "Transition / Transversion ratio as a function of alternative allele count (optional)",
              "pattern": "*.TsTv.count"
            }
          },
          {
            "tstv_qual": {
              "type": "file",
              "description": "Transition / Transversion ratio as a function of SNP quality threshold (optional)",
              "pattern": "*.TsTv.qual"
            }
          },
          {
            "filter_summary": {
              "type": "file",
              "description": "Summary of the number of SNPs and Ts/Tv ratio for each FILTER category (optional)",
              "pattern": "*.FILTER.summary"
            }
          },
          {
            "sites_pi": {
              "type": "file",
              "description": "Nucleotide divergency on a per-site basis (optional)",
              "pattern": "*.sites.pi"
            }
          },
          {
            "windowed_pi": {
              "type": "file",
              "description": "Nucleotide diversity in windows, with window size determined by options (optional)",
              "pattern": "*windowed.pi"
            }
          },
          {
            "weir_fst": {
              "type": "file",
              "description": "Fst estimate from Weir and Cockerham’s 1984 paper (optional)",
              "pattern": "*.weir.fst"
            }
          },
          {
            "heterozygosity": {
              "type": "file",
              "description": "Heterozygosity on a per-individual basis (optional)",
              "pattern": "*.het"
            }
          },
          {
            "hwe": {
              "type": "file",
              "description": "Contains the Observed numbers of Homozygotes and Heterozygotes and the corresponding Expected numbers under HWE (optional)",
              "pattern": "*.hwe"
            }
          },
          {
            "tajima_d": {
              "type": "file",
              "description": "Tajima’s D statistic in bins with size of the specified number in options (optional)",
              "pattern": "*.Tajima.D"
            }
          },
          {
            "freq_burden": {
              "type": "file",
              "description": "Number of variants within each individual of a specific frequency in options (optional)",
              "pattern": "*.ifreqburden"
            }
          },
          {
            "lroh": {
              "type": "file",
              "description": "Long Runs of Homozygosity (optional)",
              "pattern": "*.LROH"
            }
          },
          {
            "relatedness": {
              "type": "file",
              "description": "Relatedness statistic based on the method of Yang et al, Nature Genetics 2010 (doi:10.1038/ng.608) (optional)",
              "pattern": "*.relatedness"
            }
          },
          {
            "relatedness2": {
              "type": "file",
              "description": "Relatedness statistic based on the method of Manichaikul et al., BIOINFORMATICS 2010 (doi:10.1093/bioinformatics/btq559) (optional)",
              "pattern": "*.relatedness2"
            }
          },
          {
            "lqual": {
              "type": "file",
              "description": "per-site SNP quality (optional)",
              "pattern": "*.lqual"
            }
          },
          {
            "missing_individual": {
              "type": "file",
              "description": "Missingness on a per-individual basis (optional)",
              "pattern": "*.imiss"
            }
          },
          {
            "missing_site": {
              "type": "file",
              "description": "Missingness on a per-site basis (optional)",
              "pattern": "*.lmiss"
            }
          },
          {
            "snp_density": {
              "type": "file",
              "description": "Number and density of SNPs in bins of size defined by option (optional)",
              "pattern": "*.snpden"
            }
          },
          {
            "kept_sites": {
              "type": "file",
              "description": "All sites that have been kept after filtering (optional)",
              "pattern": "*.kept.sites"
            }
          },
          {
            "removed_sites": {
              "type": "file",
              "description": "All sites that have been removed after filtering (optional)",
              "pattern": "*.removed.sites"
            }
          },
          {
            "singeltons": {
              "type": "file",
              "description": "Location of singletons, and the individual they occur in (optional)",
              "pattern": "*.singeltons"
            }
          },
          {
            "indel_hist": {
              "type": "file",
              "description": "Histogram file of the length of all indels (including SNPs) (optional)",
              "pattern": "*.indel_hist"
            }
          },
          {
            "hapcount": {
              "type": "file",
              "description": "Unique haplotypes within user specified bins (optional)",
              "pattern": "*.hapcount"
            }
          },
          {
            "mendel": {
              "type": "file",
              "description": "Mendel errors identified in trios (optional)",
              "pattern": "*.mendel"
            }
          },
          {
            "format": {
              "type": "file",
              "description": "Extracted information from the genotype fields in the VCF file relating to a specfied FORMAT identifier (optional)",
              "pattern": "*.FORMAT"
            }
          },
          {
            "info": {
              "type": "file",
              "description": "Extracted information from the INFO field in the VCF file (optional)",
              "pattern": "*.INFO"
            }
          },
          {
            "genotypes_matrix": {
              "type": "file",
              "description": "Genotypes output as large matrix.\nGenotypes of each individual on a separate line.\nGenotypes are represented as 0, 1 and 2, where the number represent that number of non-reference alleles.\nMissing genotypes are represented by -1 (optional)\n",
              "pattern": "*.012"
            }
          },
          {
            "genotypes_matrix_individual": {
              "type": "file",
              "description": "Details the individuals included in the main genotypes_matrix file (optional)",
              "pattern": "*.012.indv"
            }
          },
          {
            "genotypes_matrix_position": {
              "type": "file",
              "description": "Details the site locations included in the main genotypes_matrix file (optional)",
              "pattern": "*.012.pos"
            }
          },
          {
            "impute_hap": {
              "type": "file",
              "description": "Phased haplotypes in IMPUTE reference-panel format (optional)",
              "pattern": "*.impute.hap"
            }
          },
          {
            "impute_hap_legend": {
              "type": "file",
              "description": "Impute haplotype legend file (optional)",
              "pattern": "*.impute.hap.legend"
            }
          },
          {
            "impute_hap_indv": {
              "type": "file",
              "description": "Impute haplotype individuals file (optional)",
              "pattern": "*.impute.hap.indv"
            }
          },
          {
            "ldhat_sites": {
              "type": "file",
              "description": "Output data in LDhat format, sites (optional)",
              "pattern": "*.ldhat.sites"
            }
          },
          {
            "ldhat_locs": {
              "type": "file",
              "description": "output data in LDhat format, locations (optional)",
              "pattern": "*.ldhat.locs"
            }
          },
          {
            "beagle_gl": {
              "type": "file",
              "description": "Genotype likelihoods for biallelic sites (optional)",
              "pattern": "*.BEAGLE.GL"
            }
          },
          {
            "beagle_pl": {
              "type": "file",
              "description": "Genotype likelihoods for biallelic sites (optional)",
              "pattern": "*.BEAGLE.PL"
            }
          },
          {
            "ped": {
              "type": "file",
              "description": "output the genotype data in PLINK PED format (optional)",
              "pattern": "*.ped"
            }
          },
          {
            "map_": {
              "type": "file",
              "description": "output the genotype data in PLINK PED format (optional)",
              "pattern": "*.map"
            }
          },
          {
            "tped": {
              "type": "file",
              "description": "output the genotype data in PLINK PED format (optional)",
              "pattern": "*.tped"
            }
          },
          {
            "tfam": {
              "type": "file",
              "description": "output the genotype data in PLINK PED format (optional)",
              "pattern": "*.tfam"
            }
          },
          {
            "diff_sites_in_files": {
              "type": "file",
              "description": "Sites that are common / unique to each file specified in optional inputs (optional)",
              "pattern": "*.diff.sites.in.files"
            }
          },
          {
            "diff_indv_in_files": {
              "type": "file",
              "description": "Individuals that are common / unique to each file specified in optional inputs (optional)",
              "pattern": "*.diff.indv.in.files"
            }
          },
          {
            "diff_sites": {
              "type": "file",
              "description": "Discordance on a site by site basis, specified in optional inputs (optional)",
              "pattern": "*.diff.sites"
            }
          },
          {
            "diff_indv": {
              "type": "file",
              "description": "Discordance on a individual by individual basis, specified in optional inputs (optional)",
              "pattern": "*.diff.indv"
            }
          },
          {
            "diff_discd_matrix": {
              "type": "file",
              "description": "Discordance matrix between files specified in optional inputs (optional)",
              "pattern": "*.diff.discordance.matrix"
            }
          },
          {
            "diff_switch_error": {
              "type": "file",
              "description": "Switch errors found between sites (optional)",
              "pattern": "*.diff.switch"
            }
          }
        ],
        "authors": [
          "@Mark-S-Hill"
        ]
      },
      "pipelines": [
        {
          "name": "rnadnavar",
          "version": "dev"
        },
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "verifybamid_verifybamid",
      "path": "modules/nf-core/verifybamid/verifybamid/meta.yml",
      "type": "module",
      "meta": {
        "name": "VERIFYBAMID_VERIFYBAMID",
        "description": "Detecting and estimating inter-sample DNA contamination became a crucial quality assessment step to ensure high quality sequence reads and reliable downstream analysis.",
        "keywords": [
          "qc",
          "contamination",
          "bam"
        ],
        "tools": [
          {
            "verifybamid": {
              "description": "verifyBamID is a software that verifies whether the reads in particular file match previously known genotypes for an individual (or group of individuals), and checks whether the reads are contaminated as a mixture of two samples.",
              "homepage": "https://genome.sph.umich.edu/wiki/VerifyBamID",
              "documentation": "http://genome.sph.umich.edu/wiki/VerifyBamID",
              "tool_dev_url": "https://github.com/statgen/verifyBamID",
              "doi": "10.1016/j.ajhg.2012.09.004",
              "licence": "['GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file, a sorted, indexed, base quality recalibrated, and duplication-marked BAM file.\nIt also requires to contain \"@RG\" header lines to annotation different readGroups (sequencing runs and lanes).\nThe SM tag in the \"@RG\" header should match with one of the genotyped sample.\n",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file BAI",
              "pattern": "*.bai"
            }
          },
          {
            "refvcf": {
              "type": "file",
              "description": "The input VCF file contains\n(1) external genotype information and/or\n(2) allele frequency information as AF entry or AC/AN entries in the INFO field.\n",
              "pattern": "*.{vcf,vcf.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Detailed summary of the verifyBamID result.",
              "pattern": "*.log"
            }
          },
          {
            "selfsm": {
              "type": "file",
              "description": "Per-sample statistics describing how well the sample matches to the annotated sample.",
              "pattern": "*.selfSM"
            }
          },
          {
            "depthsm": {
              "type": "file",
              "description": "The depth distribution of the sequence reads per sample",
              "pattern": "*.depthSM"
            }
          },
          {
            "selfrg": {
              "type": "file",
              "description": "Per-readGroup statistics describing how well each lane matches to the annotated sample. (available only without --ignoreRG option)",
              "pattern": "*.selfRG"
            }
          },
          {
            "depthrg": {
              "type": "file",
              "description": "The depth distribution of the sequence reads per readGroup. (available only without --ignoreRG option)",
              "pattern": "*.depthRG"
            }
          },
          {
            "bestsm": {
              "type": "file",
              "description": "Per-sample best-match statistics with best-matching sample among the genotyped sample (available only with --best option)",
              "pattern": "*.bestSM"
            }
          },
          {
            "bestrg": {
              "type": "file",
              "description": "Per-readgroup best-match statistics with best-matching sample among the genotyped sample (available only with --best and without --ignoreRG option)",
              "pattern": "*.bestRG"
            }
          }
        ],
        "authors": [
          "@manifestoso"
        ]
      }
    },
    {
      "name": "verifybamid_verifybamid2",
      "path": "modules/nf-core/verifybamid/verifybamid2/meta.yml",
      "type": "module",
      "meta": {
        "name": "VERIFYBAMID_VERIFYBAMID2",
        "description": "Detecting and estimating inter-sample DNA contamination became a crucial quality assessment step to ensure high quality sequence reads and reliable downstream analysis.",
        "keywords": [
          "contamination",
          "bam"
        ],
        "tools": [
          {
            "verifybamid2": {
              "description": "A robust tool for DNA contamination estimation from sequence reads using ancestry-agnostic method.",
              "homepage": "http://griffan.github.io/VerifyBamID",
              "documentation": "http://griffan.github.io/VerifyBamID",
              "tool_dev_url": "https://github.com/Griffan/VerifyBamID",
              "doi": "10.1101/gr.246934.118",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAI/CRAI/CSI index file",
              "pattern": "*.{bai,crai,csi}"
            }
          },
          {
            "svd_ud": {
              "type": "file",
              "description": ".UD matrix file from SVD result of genotype matrix",
              "pattern": "*.UD"
            }
          },
          {
            "svd_mu": {
              "type": "file",
              "description": ".mu matrix file of genotype matrix",
              "pattern": "*.mu"
            }
          },
          {
            "svd_bed": {
              "type": "file",
              "description": ".Bed file for markers used in this analysis,format(chr\\tpos-1\\tpos\\trefAllele\\taltAllele)[Required]",
              "pattern": "*.bed"
            }
          },
          {
            "references": {
              "type": "file",
              "description": "reference file [Required]",
              "pattern": "*.fasta"
            }
          },
          {
            "refvcf": {
              "type": "file",
              "description": "Reference panel VCF with genotype information, for generation of .UD .mu .bed files [Optional]",
              "pattern": "*.vcf"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "mu": {
              "type": "file",
              "description": ".mu matrix file of genotype matrix from customized reference vcf input",
              "pattern": "*.mu"
            }
          },
          {
            "ud": {
              "type": "file",
              "description": ".UD matrix file from customized reference vcf input",
              "pattern": "*.UD"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": ".Bed file from customized reference marker vcf input",
              "pattern": "*.bed"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Detailed summary of the VerifyBamId2 results",
              "pattern": "*.log"
            }
          },
          {
            "self_sm": {
              "type": "file",
              "description": "Shares the same format as legacy VB1 and the key information FREEMIX indicates the estimated contamination level.",
              "pattern": "*.selfSM"
            }
          },
          {
            "ancenstry": {
              "type": "file",
              "description": "PC coordinates for both intended sample and contaminating sample, with each row being one PC.",
              "pattern": "*.Ancestry"
            }
          }
        ],
        "authors": [
          "@manifestoso"
        ]
      }
    },
    {
      "name": "vg_construct",
      "path": "modules/nf-core/vg/construct/meta.yml",
      "type": "module",
      "meta": {
        "name": "vg_construct",
        "description": "Constructs a graph from a reference and variant calls or a multiple sequence alignment file",
        "keywords": [
          "vg",
          "graph",
          "construct",
          "fasta",
          "vcf",
          "structural variants"
        ],
        "tools": [
          {
            "vg": {
              "description": "Variation graph data structures, interchange formats, alignment, genotyping,\nand variant calling methods.\n",
              "homepage": "https://github.com/vgteam/vg",
              "documentation": "https://github.com/vgteam/vg/wiki",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file(s)",
              "description": "Either one or more VCF files containing different contigs or a multiple sequence alignment file\n",
              "pattern": "*.{vcf.gz,fa,fasta,fna,clustal}"
            }
          },
          {
            "tbis": {
              "type": "file(s)",
              "description": "The index files for the VCF files",
              "pattern": "*.tbi"
            }
          },
          {
            "insertions_fasta": {
              "type": "file",
              "description": "A FASTA file containing insertion sequences (referred to in the VCF file(s))",
              "pattern": "*.{fa,fasta,fna}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference FASTA file (cannot be used in combination with `msa`, but is required when using `vcfs`)",
              "pattern": "*.{fa,fasta,fna}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the reference FASTA file",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "graph": {
              "type": "file",
              "description": "The constructed graph",
              "pattern": "*.vg"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "vg_deconstruct",
      "path": "modules/nf-core/vg/deconstruct/meta.yml",
      "type": "module",
      "meta": {
        "name": "vg_deconstruct",
        "description": "Deconstruct snarls present in a variation graph in GFA format to variants in VCF format",
        "keywords": [
          "vcf",
          "gfa",
          "graph",
          "pangenome graph",
          "variation graph",
          "graph projection to vcf"
        ],
        "tools": [
          {
            "vg": {
              "description": "Variation graph data structures, interchange formats, alignment, genotyping,\nand variant calling methods.\n",
              "homepage": "https://github.com/vgteam/vg",
              "documentation": "https://github.com/vgteam/vg/wiki",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "gfa": {
              "type": "file",
              "description": "Variation graph in GFA format",
              "pattern": "*.{gfa}"
            }
          },
          {
            "pb": {
              "type": "file",
              "description": "Optional snarls file (from vg snarls) to avoid recomputing. Usually ends with \"pb\". See \"vg snarls\".",
              "pattern": "*.{pb}"
            }
          },
          {
            "gbwt": {
              "type": "file",
              "description": "Optional GBWT file (from vg gbwt) so to only consider alt traversals that correspond to GBWT threads FILE.",
              "pattern": "*.{gbwt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Variants in VCF format",
              "pattern": "*.{vcf}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@heuermh, @subwaystation"
        ]
      }
    },
    {
      "name": "vg_index",
      "path": "modules/nf-core/vg/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "vg_index",
        "description": "write your description here",
        "keywords": [
          "vg",
          "index",
          "graph",
          "structural_variants"
        ],
        "tools": [
          {
            "vg": {
              "description": "Variation graph data structures, interchange formats, alignment, genotyping,\nand variant calling methods.\n",
              "homepage": "https://github.com/vgteam/vg",
              "documentation": "https://github.com/vgteam/vg/wiki",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "input": {
              "type": "file(s)",
              "description": "One or more input graph files created with `vg/construct`",
              "pattern": "*.vg"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "xg": {
              "type": "file",
              "description": "File containing a succint, queryable version of the input graph(s) or read for GCSA or distance indexing",
              "pattern": "*.xg"
            }
          },
          {
            "vg_index": {
              "type": "file",
              "description": "An index of the graph(s) created when `--index-sorted-vg` is supplied.",
              "pattern": "*.vgi"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "vrhyme_extractunbinned",
      "path": "modules/nf-core/vrhyme/extractunbinned/meta.yml",
      "type": "module",
      "meta": {
        "name": "vrhyme_extractunbinned",
        "description": "Extracting sequences that were unbinnned by vRhyme into a FASTA file",
        "keywords": [
          "bin",
          "binning",
          "link",
          "vrhyme",
          "extractunbinned"
        ],
        "tools": [
          {
            "vrhyme": {
              "description": "vRhyme functions by utilizing coverage variance comparisons and supervised machine learning classification of sequence features to construct viral metagenome-assembled genomes (vMAGs).",
              "homepage": "https://github.com/AnantharamanLab/vRhyme",
              "documentation": "https://github.com/AnantharamanLab/vRhyme",
              "tool_dev_url": "https://github.com/AnantharamanLab/vRhyme",
              "doi": "10.1093/nar/gkac341",
              "licence": "['GPL v3 license', 'GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA file containing contigs/scaffolds input into vRhyme",
              "pattern": "*.{fasta,fna,fa}"
            }
          },
          {
            "membership": {
              "type": "file",
              "description": "TSV file containing information regarding which bins input sequences were placed information",
              "pattern": "*.{tsv}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "unbinnned_sequences": {
              "type": "file",
              "description": "FASTA file containing sequences unbinned by vRhyme",
              "pattern": "*_unbinned_sequences.fasta"
            }
          }
        ],
        "authors": [
          "@CarsonJM"
        ]
      }
    },
    {
      "name": "vrhyme_linkbins",
      "path": "modules/nf-core/vrhyme/linkbins/meta.yml",
      "type": "module",
      "meta": {
        "name": "vrhyme_linkbins",
        "description": "Linking bins output by vRhyme to create one sequences per bin",
        "keywords": [
          "bin",
          "binning",
          "link",
          "vrhyme",
          "linkbins"
        ],
        "tools": [
          {
            "vrhyme": {
              "description": "vRhyme functions by utilizing coverage variance comparisons and supervised machine learning classification of sequence features to construct viral metagenome-assembled genomes (vMAGs).",
              "homepage": "https://github.com/AnantharamanLab/vRhyme",
              "documentation": "https://github.com/AnantharamanLab/vRhyme",
              "tool_dev_url": "https://github.com/AnantharamanLab/vRhyme",
              "doi": "10.1093/nar/gkac341",
              "licence": "['GPL v3 license', 'GPL v3']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bins": {
              "type": "directory",
              "description": "Directory file containing bin FASTA files output by vRhyme (each bin having multiple sequences)"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "linked_bins": {
              "type": "file",
              "description": "FASTA file containing all bins that have been linked by N's",
              "pattern": "*_linked_bins.fasta"
            }
          }
        ],
        "authors": [
          "@CarsonJM"
        ]
      }
    },
    {
      "name": "vrhyme_vrhyme",
      "path": "modules/nf-core/vrhyme/vrhyme/meta.yml",
      "type": "module",
      "meta": {
        "name": "vrhyme_vrhyme",
        "description": "Binning virus genomes from metagenomes",
        "keywords": [
          "binning",
          "bin",
          "phage",
          "virus",
          "vrhyme"
        ],
        "tools": [
          {
            "vrhyme": {
              "description": "vRhyme functions by utilizing coverage variance comparisons and supervised machine learning classification of sequence features to construct viral metagenome-assembled genomes (vMAGs).",
              "homepage": "https://github.com/AnantharamanLab/vRhyme",
              "documentation": "https://github.com/AnantharamanLab/vRhyme",
              "tool_dev_url": "https://github.com/AnantharamanLab/vRhyme",
              "doi": "10.1093/nar/gkac341",
              "licence": "['GPL v3', 'GPL v3 license']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Preprocessed FASTQ file containing sample reads",
              "pattern": "*.{fastq}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Contigs/scaffolds identified as viral",
              "pattern": "*.{fna,fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bins": {
              "type": "directory",
              "description": "Directory containing bin FASTA files",
              "pattern": "**/vRhyme_best_bins_fasta/"
            }
          },
          {
            "membership": {
              "type": "file",
              "description": "TSV file describing the contig/scaffold membership of each bin",
              "pattern": "vRhyme_best_bins.*.membership.tsv"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "TSV file summarizing the attributes of each bin",
              "pattern": "vRhyme_best_bins.*.summary.tsv"
            }
          }
        ],
        "authors": [
          "@CarsonJM"
        ]
      }
    },
    {
      "name": "vsearch_cluster",
      "path": "modules/nf-core/vsearch/cluster/meta.yml",
      "type": "module",
      "meta": {
        "name": "vsearch_cluster",
        "description": "Cluster sequences using a single-pass, greedy centroid-based clustering algorithm.",
        "keywords": [
          "vsearch",
          "clustering",
          "microbiome"
        ],
        "tools": [
          {
            "vsearch": {
              "description": "VSEARCH is a versatile open-source tool for microbiome analysis, including chimera detection, clustering, dereplication and rereplication, extraction, FASTA/FASTQ/SFF file processing, masking, orienting, pair-wise alignment, restriction site cutting, searching, shuffling, sorting, subsampling, and taxonomic classification of amplicon sequences for metagenomics, genomics, and population genetics. (USEARCH alternative)",
              "homepage": "https://github.com/torognes/vsearch",
              "documentation": "https://github.com/torognes/vsearch/releases/download/v2.21.1/vsearch_manual.pdf",
              "tool_dev_url": "https://github.com/torognes/vsearch",
              "doi": "10.7717/peerj.2584",
              "licence": [
                "GPL v3-or-later OR BSD-2-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test' ]"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Sequences to cluster in FASTA format",
              "pattern": "*.{fasta,fa,fasta.gz,fa.gz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "aln": {
              "type": "file",
              "description": "Results in pairwise alignment format",
              "pattern": "*.aln.gz"
            }
          },
          {
            "biom": {
              "type": "file",
              "description": "Results in an OTU table in the biom version 1.0 file format",
              "pattern": "*.biom.gz"
            }
          },
          {
            "mothur": {
              "type": "file",
              "description": "Results in an OTU table in the mothur ’shared’ tab-separated plain text file format",
              "pattern": "*.mothur.tsv.gz"
            }
          },
          {
            "otu": {
              "type": "file",
              "description": "Results in an OTU table in the classic tab-separated plain text format",
              "pattern": "*.otu.tsv.gz"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Results written in bam format",
              "pattern": "*.bam"
            }
          },
          {
            "out": {
              "type": "file",
              "description": "Results in tab-separated output, columns defined by user",
              "pattern": "*.out.tsv.gz"
            }
          },
          {
            "blast": {
              "type": "file",
              "description": "Tab delimited results in blast-like tabular format",
              "pattern": "*.blast.tsv.gz"
            }
          },
          {
            "uc": {
              "type": "file",
              "description": "Tab delimited results in a uclust-like format with 10 columns",
              "pattern": "*.uc.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@mirpedrol"
        ]
      },
      "pipelines": [
        {
          "name": "crisprseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "vsearch_sintax",
      "path": "modules/nf-core/vsearch/sintax/meta.yml",
      "type": "module",
      "meta": {
        "name": "vsearch_sintax",
        "description": "Taxonomic classification using the sintax algorithm.",
        "keywords": [
          "vsearch",
          "sintax"
        ],
        "tools": [
          {
            "vsearch": {
              "description": "VSEARCH is a versatile open-source tool for microbiome analysis, including chimera detection, clustering, dereplication and rereplication, extraction, FASTA/FASTQ/SFF file processing, masking, orienting, pair-wise alignment, restriction site cutting, searching, shuffling, sorting, subsampling, and taxonomic classification of amplicon sequences for metagenomics, genomics, and population genetics. (USEARCH alternative)",
              "homepage": "https://github.com/torognes/vsearch",
              "tool_dev_url": "https://github.com/torognes/vsearch",
              "doi": "10.7717/peerj.2584",
              "licence": "['GPL v3-or-later OR BSD-2-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing query file information e.g. [ id:'test' ]"
            }
          },
          {
            "queryfasta": {
              "type": "file",
              "description": "Query sequences in FASTA or FASTQ format",
              "pattern": "*.{fasta,fa,fna,faa,fastq,fq}"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "Reference database file in FASTA or UDB format",
              "pattern": "*"
            }
          }
        ],
        "output": [
          {
            "tsv": {
              "type": "file",
              "description": "Results written to tab-delimited file",
              "pattern": "*.{tsv}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@jtangrot"
        ]
      },
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        }
      ]
    },
    {
      "name": "vsearch_sort",
      "path": "modules/nf-core/vsearch/sort/meta.yml",
      "type": "module",
      "meta": {
        "name": "vsearch_sort",
        "description": "Sort fasta entries by decreasing abundance (--sortbysize) or sequence length (--sortbylength).",
        "keywords": [
          "vsearch/sort",
          "vsearch",
          "sort",
          "amplicon sequences",
          "metagenomics",
          "genomics",
          "population genetics"
        ],
        "tools": [
          {
            "vsearch": {
              "description": "VSEARCH is a versatile open-source tool for microbiome analysis, including chimera detection, clustering, dereplication and rereplication, extraction, FASTA/FASTQ/SFF file processing, masking, orienting, pair-wise alignment, restriction site cutting, searching, shuffling, sorting, subsampling, and taxonomic classification of amplicon sequences for metagenomics, genomics, and population genetics. (USEARCH alternative)",
              "homepage": "https://github.com/torognes/vsearch",
              "documentation": "https://github.com/torognes/vsearch/releases/download/v2.21.1/vsearch_manual.pdf",
              "tool_dev_url": "https://github.com/torognes/vsearch",
              "doi": "10.7717/peerj.2584",
              "licence": [
                "GPL v3-or-later OR BSD-2-clause"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test' ]"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Sequences to be sorted in FASTA format",
              "pattern": "*.{fasta,fa,fasta.gz,fa.gz}"
            }
          },
          {
            "sort_arg": {
              "type": "string",
              "description": "Argument to provide to sort algorithm. Sort by abundance with --sortbysize or by sequence length with --sortbylength.",
              "enum": [
                "--sortbysize",
                "--sortbylength"
              ]
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Sorted FASTA file",
              "pattern": "*.{fasta}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@mirpedrol"
        ]
      },
      "pipelines": [
        {
          "name": "crisprseq",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "vsearch_usearchglobal",
      "path": "modules/nf-core/vsearch/usearchglobal/meta.yml",
      "type": "module",
      "meta": {
        "name": "vsearch_usearchglobal",
        "description": "Compare target sequences to fasta-formatted query sequences using global pairwise alignment.",
        "keywords": [
          "vsearch",
          "usearch",
          "alignment",
          "fasta"
        ],
        "tools": [
          {
            "vsearch": {
              "description": "VSEARCH is a versatile open-source tool for microbiome analysis, including chimera detection, clustering, dereplication and rereplication, extraction, FASTA/FASTQ/SFF file processing, masking, orienting, pair-wise alignment, restriction site cutting, searching, shuffling, sorting, subsampling, and taxonomic classification of amplicon sequences for metagenomics, genomics, and population genetics. (USEARCH alternative)",
              "homepage": "https://github.com/torognes/vsearch",
              "tool_dev_url": "https://github.com/torognes/vsearch",
              "doi": "10.7717/peerj.2584",
              "licence": "['GPL v3-or-later OR BSD-2-clause']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test' ]"
            }
          },
          {
            "queryfasta": {
              "type": "file",
              "description": "Query sequences in FASTA format",
              "pattern": "*.{fasta,fa,fna,faa}"
            }
          },
          {
            "db": {
              "type": "file",
              "description": "Reference database file in FASTA or UDB format",
              "pattern": "*"
            }
          },
          {
            "idcutoff": {
              "type": "real",
              "description": "Reject the sequence match if the pairwise identity is lower than the given id cutoff value (value ranging from 0.0 to 1.0 included)"
            }
          },
          {
            "outoption": {
              "type": "string",
              "description": "Specify the type of output file to be generated by selecting one of the vsearch output file options",
              "pattern": "alnout|biomout|blast6out|mothur_shared_out|otutabout|samout|uc|userout|lcaout"
            }
          },
          {
            "user_columns": {
              "type": "string",
              "description": "If using the `userout` option, specify which columns to include in output, with fields separated with `+` (e.g. query+target+id). See USEARCH manual for valid options. For other output options, use an empty string."
            }
          }
        ],
        "output": [
          {
            "aln": {
              "type": "file",
              "description": "Results in pairwise alignment format",
              "pattern": "*.{aln}"
            }
          },
          {
            "biom": {
              "type": "file",
              "description": "Results in an OTU table in the biom version 1.0 file format",
              "pattern": "*.{biom}"
            }
          },
          {
            "lca": {
              "type": "file",
              "description": "Last common ancestor (LCA) information about the hits of each query in tab-separated format",
              "pattern": "*.{lca}"
            }
          },
          {
            "mothur": {
              "type": "file",
              "description": "Results in an OTU table in the mothur ’shared’ tab-separated plain text file format",
              "pattern": "*.{mothur}"
            }
          },
          {
            "otu": {
              "type": "file",
              "description": "Results in an OTU table in the classic tab-separated plain text format",
              "pattern": "*.{otu}"
            }
          },
          {
            "sam": {
              "type": "file",
              "description": "Results written in sam format",
              "pattern": "*.{sam}"
            }
          },
          {
            "tsv": {
              "type": "file",
              "description": "Results in tab-separated output, columns defined by user",
              "pattern": "*.{tsv}"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Tab delimited results in blast-like tabular format",
              "pattern": "*.{txt}"
            }
          },
          {
            "uc": {
              "type": "file",
              "description": "Tab delimited results in a uclust-like format with 10 columns",
              "pattern": "*.{uc}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@jtangrot"
        ]
      },
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        }
      ]
    },
    {
      "name": "wfmash",
      "path": "modules/nf-core/wfmash/meta.yml",
      "type": "module",
      "meta": {
        "name": "wfmash",
        "description": "a pangenome-scale aligner",
        "keywords": [
          "long read alignment",
          "pangenome-scale",
          "all versus all",
          "mashmap",
          "wavefront"
        ],
        "tools": [
          {
            "wfmash": {
              "description": "a pangenome-scale aligner",
              "homepage": "https://github.com/waveygang/wfmash",
              "documentation": "https://github.com/waveygang/wfmash",
              "tool_dev_url": "https://github.com/waveygang/wfmash",
              "doi": "10.5281/zenodo.6949373",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta_gz": {
              "type": "file",
              "description": "BGZIPPED FASTA target file to create the mappings from.",
              "pattern": "{fa.gz,fna.gz,fasta.gz}"
            }
          },
          {
            "paf": {
              "type": "file",
              "description": "Optional inpute file in PAF format to derive the precise alignments for.",
              "pattern": "*.{paf}"
            }
          },
          {
            "query_self": {
              "type": "boolean",
              "description": "If set to true, the input FASTA will also be used as the query FASTA."
            }
          },
          {
            "gzi": {
              "type": "file",
              "description": "The GZI index of the input FASTA file.",
              "pattern": "*.{gzi}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "The FASTA index of the input FASTA file.",
              "pattern": "*.{fai}"
            }
          },
          {
            "fasta_query_list": {
              "type": "file",
              "description": "Optional inpute file in FASTA format specifying the query sequences as a list.",
              "pattern": "*.{fa,fna,fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "paf": {
              "type": "file",
              "description": "Alignments in PAF format",
              "pattern": "*.{paf}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@subwaystation"
        ]
      },
      "pipelines": [
        {
          "name": "pangenome",
          "version": "dev"
        }
      ]
    },
    {
      "name": "wgsim",
      "path": "modules/nf-core/wgsim/meta.yml",
      "type": "module",
      "meta": {
        "name": "wgsim",
        "description": "simulating sequence reads from a reference genome",
        "keywords": [
          "simulate",
          "fasta",
          "reads"
        ],
        "tools": [
          {
            "wgsim": {
              "description": "simulating sequence reads from a reference genome",
              "homepage": "https://github.com/lh3/wgsim",
              "documentation": "https://github.com/lh3/wgsim",
              "tool_dev_url": "https://github.com/lh3/wgsim",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Genome fasta file",
              "pattern": "*.{fa,fasta}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Simulated FASTQ read files",
              "pattern": "*.{fastq}"
            }
          }
        ],
        "authors": [
          "@priyanka-surana"
        ]
      }
    },
    {
      "name": "whamg",
      "path": "modules/nf-core/whamg/meta.yml",
      "type": "module",
      "meta": {
        "name": "whamg",
        "description": "The wham suite consists of two programs, wham and whamg. wham, the original tool, is a very sensitive method with a high false discovery rate. The second program, whamg, is more accurate and better suited for general structural variant (SV) discovery.",
        "keywords": [
          "whamg",
          "wham",
          "vcf",
          "bam",
          "variant calling"
        ],
        "tools": [
          {
            "whamg": {
              "description": "Structural variant detection and association testing",
              "homepage": "https://github.com/zeeev/wham",
              "documentation": "https://github.com/zeeev/wham",
              "tool_dev_url": "https://github.com/zeeev/wham",
              "doi": "10.1371/journal.pcbi.1004572",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/SAM file",
              "pattern": "*.{bam,sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index file",
              "pattern": "*.bai"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference Fasta file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "Index of the reference Fasta",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Compressed VCF file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Index of the VCF file",
              "pattern": "*.vcf.gz.tbi"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "windowmasker_convert",
      "path": "modules/nf-core/windowmasker/convert/meta.yml",
      "type": "module",
      "meta": {
        "name": "windowmasker_convert",
        "description": "Masks out highly repetitive DNA sequences with low complexity in a genome",
        "keywords": [
          "fasta",
          "blast",
          "windowmasker"
        ],
        "tools": [
          {
            "windowmasker": {
              "description": "A program to mask highly repetitive and low complexity DNA sequences within a genome.",
              "homepage": "https://blast.ncbi.nlm.nih.gov/Blast.cgi",
              "documentation": "ftp://ftp.ncbi.nlm.nih.gov/pub/agarwala/windowmasker/README.windowmasker",
              "doi": "10.1016/S0022-2836(05)80360-2",
              "licence": [
                "US-Government-Work"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "counts": {
              "type": "file",
              "description": "valid unit counts file",
              "pattern": "*.{ascii,binary,oascii,obinary,txt}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "counts": {
              "type": "file",
              "description": "valid unit counts file",
              "pattern": "*.{ascii,binary,oascii,obinary}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@alxndrdiaz"
        ]
      }
    },
    {
      "name": "windowmasker_mkcounts",
      "path": "modules/nf-core/windowmasker/mkcounts/meta.yml",
      "type": "module",
      "meta": {
        "name": "windowmasker_mkcounts",
        "description": "A program to generate frequency counts of repetitive units.",
        "keywords": [
          "fasta",
          "interval",
          "windowmasker"
        ],
        "tools": [
          {
            "windowmasker": {
              "description": "A program to mask highly repetitive and low complexity DNA sequences within a genome.\n",
              "homepage": "https://github.com/ncbi/ncbi-cxx-toolkit-public",
              "documentation": "https://ncbi.github.io/cxx-toolkit/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ref": {
              "type": "file",
              "description": "An input nucleotide fasta file."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "intervals": {
              "type": "file",
              "description": "An output file containing genomic locations of low\ncomplexity and highly repetitive regions\n",
              "pattern": "${prefix}.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@DLBPointon"
        ]
      }
    },
    {
      "name": "windowmasker_ustat",
      "path": "modules/nf-core/windowmasker/ustat/meta.yml",
      "type": "module",
      "meta": {
        "name": "windowmasker_ustat",
        "description": "A program to take a counts file and creates a file of genomic co-ordinates to be masked.",
        "keywords": [
          "fasta",
          "interval",
          "windowmasker"
        ],
        "tools": [
          {
            "windowmasker": {
              "description": "A program to mask highly repetitive and low complexity DNA sequences within a genome.\n",
              "homepage": "https://github.com/ncbi/ncbi-cxx-toolkit-public",
              "documentation": "https://ncbi.github.io/cxx-toolkit/",
              "licence": [
                "MIT"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "counts": {
              "type": "file",
              "description": "Contains count data of repetitive regions."
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ref": {
              "type": "file",
              "description": "An input nucleotide fasta file."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "wm_intervals": {
              "type": "file",
              "description": "An output file containing genomic locations of low\ncomplexity and highly repetitive regions\n",
              "pattern": "${output}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@DLBPointon"
        ]
      }
    },
    {
      "name": "wisecondorx_convert",
      "path": "modules/nf-core/wisecondorx/convert/meta.yml",
      "type": "module",
      "meta": {
        "name": "wisecondorx_convert",
        "description": "Convert and filter aligned reads to .npz",
        "keywords": [
          "bam",
          "cram",
          "copy-number"
        ],
        "tools": [
          {
            "wisecondorx": {
              "description": "WIthin-SamplE COpy Number aberration DetectOR, including sex chromosomes",
              "homepage": "https://github.com/CenterForMedicalGeneticsGhent/WisecondorX",
              "documentation": "https://github.com/CenterForMedicalGeneticsGhent/WisecondorX",
              "tool_dev_url": "https://github.com/CenterForMedicalGeneticsGhent/WisecondorX",
              "doi": "10.1093/nar/gky1263",
              "licence": "['Attribution-NonCommercial-ShareAlike CC BY-NC-SA']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Reads in BAM/CRAM format",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "index of the BAM/CRAM file",
              "pattern": "*.{bai,crai}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference fasta meta information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference FASTA file (mandatory when using CRAM files)",
              "pattern": "*.{fasta,fa,fna}"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing reference fasta index meta information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta_fai": {
              "type": "file",
              "description": "The index of the reference FASTA file (mandatory when using CRAM files)",
              "pattern": "*.fai"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "npz": {
              "type": "file",
              "description": "The output NPZ file",
              "pattern": "*.npz"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "wisecondorx_gender",
      "path": "modules/nf-core/wisecondorx/gender/meta.yml",
      "type": "module",
      "meta": {
        "name": "wisecondorx_gender",
        "description": "Returns the gender of a .npz resulting from convert, based on a Gaussian mixture model trained during the newref phase",
        "keywords": [
          "copy number analysis",
          "gender determination",
          "npz"
        ],
        "tools": [
          {
            "wisecondorx": {
              "description": "WIthin-SamplE COpy Number aberration DetectOR, including sex chromosomes",
              "homepage": "https://github.com/CenterForMedicalGeneticsGhent/WisecondorX",
              "documentation": "https://github.com/CenterForMedicalGeneticsGhent/WisecondorX",
              "tool_dev_url": "https://github.com/CenterForMedicalGeneticsGhent/WisecondorX",
              "doi": "10.1093/nar/gky1263",
              "licence": "['Attribution-NonCommercial-ShareAlike CC BY-NC-SA']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "npz": {
              "type": "file",
              "description": "Single sample NPZ file (from which to determine the gender)",
              "pattern": "*.npz"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "Reference NPZ file",
              "pattern": "*.npz"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "gender": {
              "type": "string",
              "description": "The gender of the input NPZ file",
              "pattern": "(fe)?male"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "wisecondorx_newref",
      "path": "modules/nf-core/wisecondorx/newref/meta.yml",
      "type": "module",
      "meta": {
        "name": "wisecondorx_newref",
        "description": "Create a new reference using healthy reference samples",
        "keywords": [
          "reference",
          "copy number alterations",
          "npz"
        ],
        "tools": [
          {
            "wisecondorx": {
              "description": "WIthin-SamplE COpy Number aberration DetectOR, including sex chromosomes",
              "homepage": "https://github.com/CenterForMedicalGeneticsGhent/WisecondorX",
              "documentation": "https://github.com/CenterForMedicalGeneticsGhent/WisecondorX",
              "tool_dev_url": "https://github.com/CenterForMedicalGeneticsGhent/WisecondorX",
              "doi": "10.1093/nar/gky1263",
              "licence": "['Attribution-NonCommercial-ShareAlike CC BY-NC-SA']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "inputs": {
              "type": "file",
              "description": "Multiple NPZ files from healthy patients",
              "pattern": "*.{npz}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "npz": {
              "type": "file",
              "description": "The reference NPZ file",
              "pattern": "*.{npz}"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "wisecondorx_predict",
      "path": "modules/nf-core/wisecondorx/predict/meta.yml",
      "type": "module",
      "meta": {
        "name": "wisecondorx_predict",
        "description": "Find copy number aberrations",
        "keywords": [
          "copy number variation",
          "bed",
          "npz",
          "png"
        ],
        "tools": [
          {
            "wisecondorx": {
              "description": "WIthin-SamplE COpy Number aberration DetectOR, including sex chromosomes",
              "homepage": "https://github.com/CenterForMedicalGeneticsGhent/WisecondorX",
              "documentation": "https://github.com/CenterForMedicalGeneticsGhent/WisecondorX",
              "tool_dev_url": "https://github.com/CenterForMedicalGeneticsGhent/WisecondorX",
              "doi": "10.1093/nar/gky1263",
              "licence": "['Attribution-NonCommercial-ShareAlike CC BY-NC-SA']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "npz": {
              "type": "file",
              "description": "An NPZ file created with WisecondorX convert",
              "pattern": "*.npz"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reference": {
              "type": "file",
              "description": "A reference NPZ file created with WisecondorX newref",
              "pattern": "*.npz"
            }
          },
          {
            "meta3": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "blacklist": {
              "type": "file",
              "description": "OPTIONAL - A BED file containing blacklist regions (used mainly when the reference is small)",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "abberations_bed": {
              "type": "file",
              "description": "OPTIONAL - Output abberations in BED format. This gets created with the `--bed` option",
              "pattern": "*_aberrations.bed"
            }
          },
          {
            "bins_bed": {
              "type": "file",
              "description": "OPTIONAL - Output bins in BED format. This gets created with the `--bed` option",
              "pattern": "*_bins.bed"
            }
          },
          {
            "segments_bed": {
              "type": "file",
              "description": "OPTIONAL - Output segments in BED format. This gets created with the `--bed` option",
              "pattern": "*_segments.bed"
            }
          },
          {
            "chr_statistics": {
              "type": "file",
              "description": "OPTIONAL - Statistics per chromosome in TXT format. This gets created with the `--bed` option",
              "pattern": "*_chr_statistics.txt"
            }
          },
          {
            "chr_plots": {
              "type": "list",
              "description": "OPTIONAL - A list containing the CNV plots of each chromosome. This gets created with the `--plot` option",
              "pattern": "[!genome_wide]*.png"
            }
          },
          {
            "genome_plot": {
              "type": "file",
              "description": "OPTIONAL - A plot containing the CNV information of the whole genome",
              "pattern": "genome_wide.png"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "yahs",
      "path": "modules/nf-core/yahs/meta.yml",
      "type": "module",
      "meta": {
        "name": "yahs",
        "description": "Performs assembly scaffolding using YaHS",
        "keywords": [
          "scaffolding",
          "assembly",
          "yahs",
          "hic"
        ],
        "tools": [
          {
            "yahs": {
              "description": "YaHS, yet another Hi-C scaffolding tool.",
              "homepage": "https://github.com/c-zhou/yahs",
              "documentation": "https://github.com/c-zhou/yahs",
              "tool_dev_url": "https://github.com/c-zhou/yahs",
              "doi": "10.1093/bioinformatics/btac808",
              "licence": "['MIT']"
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "hic_map": {
              "type": "file",
              "description": "BED file containing coordinates of read alignments",
              "pattern": "*.{bed,bam,bin}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "FASTA reference file",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "index of the reference file",
              "pattern": "*.{fai}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "scaffolds_fasta": {
              "type": "file",
              "description": "FASTA file with resulting contigs",
              "pattern": "*scaffolds_final.fa"
            }
          },
          {
            "scaffolds_agp": {
              "type": "file",
              "description": "AGP file containing contigs placing coordinates",
              "pattern": "*scaffolds_final.agp"
            }
          },
          {
            "binary": {
              "type": "file",
              "description": "BIN file with alignment results of Hi-C reads to the contigs in internal YaHS binary format",
              "pattern": "*bin"
            }
          }
        ],
        "authors": [
          "@ksenia-krasheninnikova"
        ]
      }
    },
    {
      "name": "yara_index",
      "path": "modules/nf-core/yara/index/meta.yml",
      "type": "module",
      "meta": {
        "name": "yara_index",
        "description": "Builds a YARA index for a reference genome",
        "keywords": [
          "build",
          "index",
          "fasta",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "yara": {
              "description": "Yara is an exact tool for aligning DNA sequencing reads to reference genomes.",
              "homepage": "https://github.com/seqan/seqan",
              "documentation": "https://github.com/seqan/seqan",
              "tool_dev_url": "https://github.com/seqan/seqan",
              "licence": [
                "https://raw.githubusercontent.com/seqan/seqan/develop/apps/yara/LICENSE"
              ]
            }
          }
        ],
        "input": [
          {
            "fasta": {
              "type": "file",
              "description": "Input genome fasta file"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "YARA genome index files",
              "pattern": "yara.*"
            }
          }
        ],
        "authors": [
          "@apeltzer"
        ]
      },
      "pipelines": [
        {
          "name": "hlatyping",
          "version": "2.0.0"
        }
      ]
    },
    {
      "name": "yara_mapper",
      "path": "modules/nf-core/yara/mapper/meta.yml",
      "type": "module",
      "meta": {
        "name": "yara_mapper",
        "description": "Align reads to a reference genome using YARA",
        "keywords": [
          "align",
          "genome",
          "reference"
        ],
        "tools": [
          {
            "yara": {
              "description": "Yara is an exact tool for aligning DNA sequencing reads to reference genomes.",
              "homepage": "https://github.com/seqan/seqan",
              "documentation": "https://github.com/seqan/seqan",
              "tool_dev_url": "https://github.com/seqan/seqan",
              "licence": [
                "https://raw.githubusercontent.com/seqan/seqan/develop/apps/yara/LICENSE"
              ]
            }
          }
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "YARA genome index files"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM file",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Sorted BAM file index",
              "pattern": "*.{bai}"
            }
          }
        ],
        "authors": [
          "@apeltzer"
        ]
      },
      "pipelines": [
        {
          "name": "hlatyping",
          "version": "2.0.0"
        }
      ]
    }
  ],
  "subworkflows": [
    {
      "name": "bam_create_som_pon_gatk",
      "path": "subworkflows/nf-core/bam_create_som_pon_gatk/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bam_create_som_pon_gatk",
        "description": "Perform variant calling on a set of normal samples using mutect2 panel of normals mode. Group them into a genomicsdbworkspace using genomicsdbimport, then use this to create a panel of normals using createsomaticpanelofnormals.",
        "keywords": [
          "gatk4",
          "mutect2",
          "genomicsdbimport",
          "createsomaticpanelofnormals",
          "variant_calling",
          "genomicsdb_workspace",
          "panel_of_normals"
        ],
        "modules": [
          "gatk4/mutect2",
          "gatk4/genomicsdbimport",
          "gatk4/createsomaticpanelofnormals"
        ],
        "input": [
          {
            "ch_mutect2_in": {
              "type": "list",
              "description": "An input channel containing the following files:\n- input: One or more BAM/CRAM files\n- input_index: The index/indices from the BAM/CRAM file(s)\n- interval_file: An interval file to be used with the mutect call\nStructure: [ meta, input, input_index, interval_file ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "mutect2_vcf": {
              "type": "list",
              "description": "List of compressed vcf files to be used to make the gendb workspace",
              "pattern": "[ *.vcf.gz ]"
            }
          },
          {
            "mutect2_index": {
              "type": "list",
              "description": "List of indexes of mutect2_vcf files",
              "pattern": "[ *vcf.gz.tbi ]"
            }
          },
          {
            "mutect2_stats": {
              "type": "list",
              "description": "List of stats files that pair with mutect2_vcf files",
              "pattern": "[ *vcf.gz.stats ]"
            }
          },
          {
            "genomicsdb": {
              "type": "directory",
              "description": "Directory containing the files that compose the genomicsdb workspace.",
              "pattern": "path/name_of_workspace"
            }
          },
          {
            "pon_vcf": {
              "type": "file",
              "description": "Panel of normal as compressed vcf file",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "pon_index": {
              "type": "file",
              "description": "Index of pon_vcf file",
              "pattern": "*vcf.gz.tbi"
            }
          }
        ],
        "authors": [
          "@GCJMackenzie"
        ]
      }
    },
    {
      "name": "bam_dedup_stats_samtools_umitools",
      "path": "subworkflows/nf-core/bam_dedup_stats_samtools_umitools/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bam_dedup_stats_samtools_umitools",
        "description": "UMI-tools dedup, index BAM file and run samtools stats, flagstat and idxstats",
        "keywords": [
          "umi",
          "dedup",
          "index",
          "bam",
          "sam",
          "cram"
        ],
        "modules": [
          "umitools/dedup",
          "samtools/index",
          "samtools/stats",
          "samtools/idxstats",
          "samtools/flagstat"
        ],
        "input": [
          {
            "ch_bam_bai": {
              "description": "input BAM file\nStructure: [ val(meta), path(bam), path(bai) ]\n"
            }
          },
          {
            "val_get_dedup_stats": {
              "type": "boolean",
              "description": "Generate output stats when running \"umi_tools dedup\"\n"
            }
          }
        ],
        "output": [
          {
            "bam": {
              "description": "Umi deduplicated BAM/SAM file\nStructure: [ val(meta), path(bam) ]\n"
            }
          },
          {
            "bai": {
              "description": "Umi deduplicated BAM/SAM samtools index\nStructure: [ val(meta), path(bai) ]\n"
            }
          },
          {
            "csi": {
              "description": "CSI samtools index\nStructure: [ val(meta), path(csi) ]\n"
            }
          },
          {
            "stats": {
              "description": "File containing samtools stats output\nStructure: [ val(meta), path(stats) ]\n"
            }
          },
          {
            "flagstat": {
              "description": "File containing samtools flagstat output\nStructure: [ val(meta), path(flagstat) ]\n"
            }
          },
          {
            "idxstats": {
              "description": "File containing samtools idxstats output\nStructure: [ val(meta), path(idxstats) ]\n"
            }
          },
          {
            "versions": {
              "description": "Files containing software versions\nStructure: [ path(versions.yml) ]\n"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@KamilMaliszArdigen"
        ]
      },
      "pipelines": [
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "bam_docounts_contamination_angsd",
      "path": "subworkflows/nf-core/bam_docounts_contamination_angsd/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bam_docounts_contamination_angsd",
        "description": "Calculate contamination of the X-chromosome with ANGSD",
        "keywords": [
          "angsd",
          "bam",
          "contamination",
          "docounts"
        ],
        "modules": [
          "angsd/docounts",
          "angsd/contamination"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM or CRAM file",
              "pattern": "*.{bam,cram}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM/SAM samtools index",
              "pattern": "*.{bai,csi}"
            }
          },
          {
            "hapmap_file": {
              "type": "file",
              "description": "Hapmap file"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\n"
            }
          },
          {
            "txt": {
              "type": "file",
              "description": "Contamination estimation file",
              "pattern": "*.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@scarlhoff"
        ]
      }
    },
    {
      "name": "bam_markduplicates_picard",
      "path": "subworkflows/nf-core/bam_markduplicates_picard/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bam_markduplicates_picard",
        "description": "Picard MarkDuplicates, index BAM file and run samtools stats, flagstat and idxstats",
        "keywords": [
          "markduplicates",
          "bam",
          "sam",
          "cram"
        ],
        "modules": [
          "picard/markduplicates",
          "samtools/index",
          "samtools/stats",
          "samtools/idxstats",
          "samtools/flagstat"
        ],
        "input": [
          {
            "ch_bam": {
              "description": "BAM/CRAM/SAM file\nStructure: [ val(meta), path(bam) ]\n"
            }
          },
          {
            "ch_fasta": {
              "description": "Reference genome fasta file\nStructure: [ path(fasta) ]\n"
            }
          },
          {
            "ch_fasta": {
              "description": "Index of the reference genome fasta file\nStructure: [ path(fai) ]\n"
            }
          }
        ],
        "output": [
          {
            "bam": {
              "description": "processed BAM/CRAM/SAM file\nStructure: [ val(meta), path(bam) ]\n"
            }
          },
          {
            "bai": {
              "description": "BAM/CRAM/SAM samtools index\nStructure: [ val(meta), path(bai) ]\n"
            }
          },
          {
            "csi": {
              "description": "CSI samtools index\nStructure: [ val(meta), path(csi) ]\n"
            }
          },
          {
            "stats": {
              "description": "File containing samtools stats output\nStructure: [ val(meta), path(stats) ]\n"
            }
          },
          {
            "flagstat": {
              "description": "File containing samtools flagstat output\nStructure: [ val(meta), path(flagstat) ]\n"
            }
          },
          {
            "idxstats": {
              "description": "File containing samtools idxstats output\nStructure: [ val(meta), path(idxstats) ]\n"
            }
          },
          {
            "versions": {
              "description": "Files containing software versions\nStructure: [ path(versions.yml) ]\n"
            }
          }
        ],
        "authors": [
          "@dmarron",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bam_ngscheckmate",
      "path": "subworkflows/nf-core/bam_ngscheckmate/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bam_ngscheckmate",
        "description": "Take a set of bam files and run NGSCheckMate to determine whether samples match with each other, using a set of SNPs.",
        "keywords": [
          "ngscheckmate",
          "qc",
          "bam",
          "snp"
        ],
        "modules": [
          "bcftools/mpileup",
          "ngscheckmate/ncm"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM files for each sample",
              "pattern": "*.{bam}"
            }
          },
          {
            "snp_bed": {
              "type": "file",
              "description": "BED file containing the SNPs to analyse. NGSCheckMate provides some default ones for hg19/hg38.",
              "pattern": "*.{bed}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "fasta file for the genome",
              "pattern": "*.{fasta}"
            }
          }
        ],
        "output": [
          {
            "pdf": {
              "type": "file",
              "description": "A pdf containing a dendrogram showing how the samples match up",
              "pattern": "*.{pdf}"
            }
          },
          {
            "corr_matrix": {
              "type": "file",
              "description": "A text file containing the correlation matrix between each sample",
              "pattern": "*corr_matrix.txt"
            }
          },
          {
            "matched": {
              "type": "file",
              "description": "A txt file containing only the samples that match with each other",
              "pattern": "*matched.txt"
            }
          },
          {
            "all": {
              "type": "file",
              "description": "A txt file containing all the sample comparisons, whether they match or not",
              "pattern": "*all.txt"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "vcf files for each sample giving the SNP calls",
              "pattern": "*.vcf"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@SPPearce"
        ]
      }
    },
    {
      "name": "bam_qc_picard",
      "path": "subworkflows/nf-core/bam_qc_picard/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bam_qc",
        "description": "Produces comprehensive statistics from BAM file",
        "keywords": [
          "statistics",
          "counts",
          "hs_metrics",
          "wgs_metrics",
          "bam",
          "sam",
          "cram"
        ],
        "modules": [
          "picard/collectmultiplemetrics",
          "picard/collectwgsmetrics",
          "picard/collecthsmetrics"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM/CRAM/SAM file index",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "bait_intervals": {
              "type": "optional file",
              "description": "An interval list or bed file that contains the locations of the baits used.",
              "pattern": "baits.{interval_list,bed,bed.gz}"
            }
          },
          {
            "target_intervals": {
              "type": "optional file",
              "description": "An interval list or bed file that contains the locations of the targets.",
              "pattern": "targets.{interval_list,bed,bed.gz}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta": {
              "type": "optional file",
              "description": "Reference fasta file",
              "pattern": "*.{fasta,fa,fna}"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta_fai": {
              "type": "optional file",
              "description": "Reference fasta file index",
              "pattern": "*.{fasta,fa,fna}.fai"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'genome' ]\n"
            }
          },
          {
            "fasta_dict": {
              "type": "optional file",
              "description": "Reference fasta sequence dictionary",
              "pattern": "*.{dict}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "coverage_metrics": {
              "type": "file",
              "description": "Alignment metrics files generated by picard CollectHsMetrics or CollectWgsMetrics",
              "pattern": "*_metrics.txt"
            }
          },
          {
            "multiple_metrics": {
              "type": "file",
              "description": "Alignment metrics files generated by picard CollectMultipleMetrics",
              "pattern": "*_{metrics}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "bam_rseqc",
      "path": "subworkflows/nf-core/bam_rseqc/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bam_rseqc",
        "description": "Subworkflow to run multiple commands in the RSeqC package",
        "keywords": [
          "rnaseq",
          "experiment",
          "inferexperiment",
          "bamstat",
          "innerdistance",
          "junctionannotation",
          "junctionsaturation",
          "readdistribution",
          "readduplication",
          "tin"
        ],
        "modules": [
          "rseqc"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file to calculate statistics",
              "pattern": "*.{bam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "Index for input BAM file",
              "pattern": "*.{bai}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file for the reference gene model",
              "pattern": "*.{bed}"
            }
          },
          {
            "rseqc_modules": {
              "type": "list",
              "description": "List of rseqc modules to run\ne.g. [ 'bam_stat', 'infer_experiment' ]\n"
            }
          }
        ],
        "output": [
          {
            "bamstat_txt": {
              "type": "file",
              "description": "bam statistics report",
              "pattern": "*.bam_stat.txt"
            }
          },
          {
            "innerdistance_distance": {
              "type": "file",
              "description": "the inner distances",
              "pattern": "*.inner_distance.txt"
            }
          },
          {
            "innerdistance_freq": {
              "type": "file",
              "description": "frequencies of different insert sizes",
              "pattern": "*.inner_distance_freq.txt"
            }
          },
          {
            "innerdistance_mean": {
              "type": "file",
              "description": "mean/median values of inner distances",
              "pattern": "*.inner_distance_mean.txt"
            }
          },
          {
            "innerdistance_pdf": {
              "type": "file",
              "description": "distribution plot of inner distances",
              "pattern": "*.inner_distance_plot.pdf"
            }
          },
          {
            "innerdistance_rscript": {
              "type": "file",
              "description": "script to reproduce the plot",
              "pattern": "*.inner_distance_plot.R"
            }
          },
          {
            "inferexperiment_txt": {
              "type": "file",
              "description": "infer_experiment results report",
              "pattern": "*.infer_experiment.txt"
            }
          },
          {
            "junctionannotation_bed": {
              "type": "file",
              "description": "bed file of annotated junctions",
              "pattern": "*.junction.bed"
            }
          },
          {
            "junctionannotation_interact_bed": {
              "type": "file",
              "description": "Interact bed file",
              "pattern": "*.Interact.bed"
            }
          },
          {
            "junctionannotation_xls": {
              "type": "file",
              "description": "xls file with junction information",
              "pattern": "*.xls"
            }
          },
          {
            "junctionannotation_pdf": {
              "type": "file",
              "description": "junction plot",
              "pattern": "*.junction.pdf"
            }
          },
          {
            "junctionannotation_events_pdf": {
              "type": "file",
              "description": "events plot",
              "pattern": "*.events.pdf"
            }
          },
          {
            "junctionannotation_rscript": {
              "type": "file",
              "description": "Rscript to reproduce the plots",
              "pattern": "*.r"
            }
          },
          {
            "junctionannotation_log": {
              "type": "file",
              "description": "Log file generated by tool",
              "pattern": "*.log"
            }
          },
          {
            "junctionsaturation_pdf": {
              "type": "file",
              "description": "Junction saturation report",
              "pattern": "*.pdf"
            }
          },
          {
            "junctionsaturation_rscript": {
              "type": "file",
              "description": "Junction saturation R-script",
              "pattern": "*.r"
            }
          },
          {
            "readdistribution_txt": {
              "type": "file",
              "description": "the read distribution report",
              "pattern": "*.read_distribution.txt"
            }
          },
          {
            "readduplication_seq_xls": {
              "type": "file",
              "description": "Read duplication rate determined from mapping position of read",
              "pattern": "*seq.DupRate.xls"
            }
          },
          {
            "readduplication_pos_xls": {
              "type": "file",
              "description": "Read duplication rate determined from sequence of read",
              "pattern": "*pos.DupRate.xls"
            }
          },
          {
            "readduplication_pdf": {
              "type": "file",
              "description": "plot of duplication rate",
              "pattern": "*.pdf"
            }
          },
          {
            "readduplication_rscript": {
              "type": "file",
              "description": "script to reproduce the plot",
              "pattern": "*.R"
            }
          },
          {
            "tin_txt": {
              "type": "file",
              "description": "TXT file containing tin.py results summary",
              "pattern": "*.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@kevinmenden"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "bam_sort_stats_samtools",
      "path": "subworkflows/nf-core/bam_sort_stats_samtools/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bam_sort_stats_samtools",
        "description": "Sort SAM/BAM/CRAM file",
        "keywords": [
          "sort",
          "bam",
          "sam",
          "cram"
        ],
        "modules": [
          "samtools/sort",
          "samtools/index",
          "samtools/stats",
          "samtools/idxstats",
          "samtools/flagstat"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome fasta file",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "crai": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "File containing samtools stats output",
              "pattern": "*.{stats}"
            }
          },
          {
            "flagstat": {
              "type": "file",
              "description": "File containing samtools flagstat output",
              "pattern": "*.{flagstat}"
            }
          },
          {
            "idxstats": {
              "type": "file",
              "description": "File containing samtools idxstats output",
              "pattern": "*.{idxstats}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@ewels"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bam_split_by_region",
      "path": "subworkflows/nf-core/bam_split_by_region/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bam_split_by_region",
        "description": "Split the reads in the input bam by specified genomic region.",
        "keywords": [
          "split",
          "bam",
          "sam",
          "cram",
          "index"
        ],
        "modules": [
          "samtools/view",
          "samtools/index"
        ],
        "input": [
          {
            "ch_bam": {
              "description": "The input channel of this subworkflow containing:\n- meta: Groovy Map containing sample information => doesn't have a field called 'genomic_region'\n- bam: BAM/CRAM/SAM file\n- bai: Index for BAM/CRAM/SAM file\n- regions_file: A file containing the genomic regions used to separate the reads in the\n    input bam. This should be a BED or TSV file containing either a single\n    column of chromosome names, two columns (chromosome name and position),\n    or three columns (chromosome name, start position, and end position).\nStructure: [ val(meta), path(bam), path(bai), path(regions_file) ]\n"
            }
          }
        ],
        "output": [
          {
            "bam_bai": {
              "description": "BAM/CRAM/SAM file, the meta contains a new 'genomic_region' field with the included regions\nStructure: [ val(meta), path(bam), path(bai) ]\n"
            }
          },
          {
            "versions": {
              "description": "Files containing software versions\nStructure: [ path(versions.yml) ]\n"
            }
          }
        ],
        "authors": [
          "@TCLamnidis"
        ]
      }
    },
    {
      "name": "bam_stats_samtools",
      "path": "subworkflows/nf-core/bam_stats_samtools/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bam_stats_samtools",
        "description": "Produces comprehensive statistics from SAM/BAM/CRAM file",
        "keywords": [
          "statistics",
          "counts",
          "bam",
          "sam",
          "cram"
        ],
        "modules": [
          "samtools/stats",
          "samtools/idxstats",
          "samtools/flagstat"
        ],
        "input": [
          {
            "ch_bam_bai": {
              "description": "The input channel containing the BAM/CRAM and it's index\nStructure: [ val(meta), path(bam), path(bai) ]\n"
            }
          },
          {
            "ch_fasta": {
              "description": "Reference genome fasta file\nStructure: [ path(fasta) ]\n"
            }
          }
        ],
        "output": [
          {
            "stats": {
              "description": "File containing samtools stats output\nStructure: [ val(meta), path(stats) ]\n"
            }
          },
          {
            "flagstat": {
              "description": "File containing samtools flagstat output\nStructure: [ val(meta), path(flagstat) ]\n"
            }
          },
          {
            "idxstats": {
              "description": "File containing samtools idxstats output\nStructure: [ val(meta), path(idxstats)]\n"
            }
          },
          {
            "versions": {
              "description": "Files containing software versions\nStructure: [ path(versions.yml) ]\n"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "circdna",
          "version": "1.0.4"
        },
        {
          "name": "circrna",
          "version": "dev"
        },
        {
          "name": "cutandrun",
          "version": "3.1"
        },
        {
          "name": "nascent",
          "version": "2.1.1"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "bam_tumor_normal_somatic_variant_calling_gatk",
      "path": "subworkflows/nf-core/bam_tumor_normal_somatic_variant_calling_gatk/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bam_tumor_normal_somatic_variant_calling_gatk",
        "description": "Perform variant calling on a paired tumor normal set of samples using mutect2 tumor normal mode.\nf1r2 output of mutect2 is run through learnreadorientationmodel to get the artifact priors.\nRun the input bam files through getpileupsummarries and then calculatecontamination to get the contamination and segmentation tables.\nFilter the mutect2 output vcf using filtermutectcalls, artifact priors and the contamination & segmentation tables for additional filtering.\n",
        "keywords": [
          "gatk4",
          "mutect2",
          "learnreadorientationmodel",
          "getpileupsummaries",
          "calculatecontamination",
          "filtermutectcalls",
          "variant_calling",
          "tumor_only",
          "filtered_vcf"
        ],
        "modules": [
          "gatk4/mutect2",
          "gatk4/learnreadorientationmodel",
          "gatk4/getpileupsummaries",
          "gatk4/calculatecontamination",
          "gatk4/filtermutectcalls"
        ],
        "input": [
          {
            "ch_input": {
              "description": "The tumor and normal BAM files, in that order, also able to take CRAM as an input\nCan contain an optional list of sample headers contained in the normal sample input file.\nStructure: [ val(meta), path(input), path(input_index), val(which_norm) ]\n"
            }
          },
          {
            "ch_fasta": {
              "description": "The reference fasta file\nStructure: [ path(fasta) ]\n"
            }
          },
          {
            "ch_fai": {
              "description": "Index of reference fasta file\nStructure: [ path(fai) ]\n"
            }
          },
          {
            "ch_dict": {
              "description": "GATK sequence dictionary\nStructure: [ path(dict) ]\n"
            }
          },
          {
            "ch_germline_resource": {
              "description": "Population vcf of germline sequencing, containing allele fractions.\nStructure: [ path(germline_resources) ]\n"
            }
          },
          {
            "ch_germline_resource_tbi": {
              "description": "Index file for the germline resource.\nStructure: [ path(germline_resources_tbi) ]\n"
            }
          },
          {
            "ch_panel_of_normals": {
              "description": "Vcf file to be used as a panel of normals.\nStructure: [ path(panel_of_normals) ]\n"
            }
          },
          {
            "ch_panel_of_normals_tbi": {
              "description": "Index for the panel of normals.\nStructure: [ path(panel_of_normals_tbi) ]\n"
            }
          },
          {
            "ch_interval_file": {
              "description": "File containing intervals.\nStructure: [ path(interval_files) ]\n"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "description": "Files containing software versions\nStructure: [ path(versions.yml) ]\n"
            }
          },
          {
            "mutect2_vcf": {
              "description": "Compressed vcf file to be used for variant_calling.\nStructure: [ val(meta), path(vcf) ]\n"
            }
          },
          {
            "mutect2_tbi": {
              "description": "Indexes of the mutect2_vcf file\nStructure: [ val(meta), path(tbi) ]\n"
            }
          },
          {
            "mutect2_stats": {
              "description": "Stats files for the mutect2 vcf\nStructure: [ val(meta), path(stats) ]\n"
            }
          },
          {
            "mutect2_f1r2": {
              "description": "File containing information to be passed to LearnReadOrientationModel.\nStructure: [ val(meta), path(f1r2) ]\n"
            }
          },
          {
            "artifact_priors": {
              "description": "File containing artifact-priors to be used by filtermutectcalls.\nStructure: [ val(meta), path(artifact_priors) ]\n"
            }
          },
          {
            "pileup_table_tumor": {
              "description": "File containing the tumor pileup summary table, kept separate as calculatecontamination needs them individually specified.\nStructure: [ val(meta), path(table) ]\n"
            }
          },
          {
            "pileup_table_normal": {
              "description": "File containing the normal pileup summary table, kept separate as calculatecontamination needs them individually specified.\nStructure: [ val(meta), path(table) ]\n"
            }
          },
          {
            "contamination_table": {
              "description": "File containing the contamination table.\nStructure: [ val(meta), path(table) ]\n"
            }
          },
          {
            "segmentation_table": {
              "description": "Output table containing segmentation of tumor minor allele fractions.\nStructure: [ val(meta), path(table) ]\n"
            }
          },
          {
            "filtered_vcf": {
              "description": "File containing filtered mutect2 calls.\nStructure: [ val(meta), path(vcf) ]\n"
            }
          },
          {
            "filtered_tbi": {
              "description": "Tbi file that pairs with filtered vcf.\nStructure: [ val(meta), path(tbi) ]\n"
            }
          },
          {
            "filtered_stats": {
              "description": "File containing statistics of the filtermutectcalls run.\nStructure: [ val(meta), path(stats) ]\n"
            }
          }
        ],
        "authors": [
          "@GCJMackenzie"
        ]
      }
    },
    {
      "name": "bam_tumor_only_somatic_variant_calling_gatk",
      "path": "subworkflows/nf-core/bam_tumor_only_somatic_variant_calling_gatk/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "gatk_tumor_only_somatic_variant_calling",
        "description": "Perform variant calling on a single tumor sample using mutect2 tumor only mode.\nRun the input bam file through getpileupsummarries and then calculatecontaminationto get the contamination and segmentation tables.\nFilter the mutect2 output vcf using filtermutectcalls and the contamination & segmentation tables for additional filtering.\n",
        "keywords": [
          "gatk4",
          "mutect2",
          "getpileupsummaries",
          "calculatecontamination",
          "filtermutectcalls",
          "variant_calling",
          "tumor_only",
          "filtered_vcf"
        ],
        "modules": [
          "gatk4/mutect2",
          "gatk4/getpileupsummaries",
          "gatk4/calculatecontamination",
          "gatk4/filtermutectcalls"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "input": {
              "type": "list",
              "description": "list containing one BAM file, also able to take CRAM as an input",
              "pattern": "[ *.{bam/cram} ]"
            }
          },
          {
            "input_index": {
              "type": "list",
              "description": "list containing one BAM file indexe, also able to take CRAM index as an input",
              "pattern": "[ *.{bam.bai/cram.crai} ]"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "Index of reference fasta file",
              "pattern": "*.fasta.fai"
            }
          },
          {
            "dict": {
              "type": "file",
              "description": "GATK sequence dictionary",
              "pattern": "*.dict"
            }
          },
          {
            "germline_resource": {
              "type": "file",
              "description": "Population vcf of germline sequencing, containing allele fractions.",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "germline_resource_tbi": {
              "type": "file",
              "description": "Index file for the germline resource.",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "panel_of_normals": {
              "type": "file",
              "description": "vcf file to be used as a panel of normals.",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "panel_of_normals_tbi": {
              "type": "file",
              "description": "Index for the panel of normals.",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "interval_file": {
              "type": "file",
              "description": "File containing intervals.",
              "pattern": "*.interval_list"
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "mutect2_vcf": {
              "type": "file",
              "description": "Compressed vcf file to be used for variant_calling.",
              "pattern": "[ *.vcf.gz ]"
            }
          },
          {
            "mutect2_tbi": {
              "type": "file",
              "description": "Indexes of the mutect2_vcf file",
              "pattern": "[ *vcf.gz.tbi ]"
            }
          },
          {
            "mutect2_stats": {
              "type": "file",
              "description": "Stats files for the mutect2 vcf",
              "pattern": "[ *vcf.gz.stats ]"
            }
          },
          {
            "pileup_table": {
              "type": "file",
              "description": "File containing the pileup summary table.",
              "pattern": "*.pileups.table"
            }
          },
          {
            "contamination_table": {
              "type": "file",
              "description": "File containing the contamination table.",
              "pattern": "*.contamination.table"
            }
          },
          {
            "segmentation_table": {
              "type": "file",
              "description": "Output table containing segmentation of tumor minor allele fractions.",
              "pattern": "*.segmentation.table"
            }
          },
          {
            "filtered_vcf": {
              "type": "file",
              "description": "file containing filtered mutect2 calls.",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "filtered_tbi": {
              "type": "file",
              "description": "tbi file that pairs with filtered vcf.",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "filtered_stats": {
              "type": "file",
              "description": "file containing statistics of the filtermutectcalls run.",
              "pattern": "*.filteringStats.tsv"
            }
          }
        ],
        "authors": [
          "@GCJMackenzie"
        ]
      }
    },
    {
      "name": "bam_variant_calling_sort_freebayes_bcftools",
      "path": "subworkflows/nf-core/bam_variant_calling_sort_freebayes_bcftools/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bam_variant_calling_sort_freebayes_bcftools",
        "description": "Call variants using freebayes, then sort and index",
        "keywords": [
          "variant",
          "sort",
          "index",
          "bam",
          "cram",
          "vcf"
        ],
        "modules": [
          "freebayes",
          "bcftools/sort",
          "bcftools/index"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "input1": {
              "type": "file",
              "description": "BAM/CRAM/SAM file;",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "index1": {
              "type": "file",
              "description": "Index BAI/CRAI/CSI file",
              "pattern": "*.{bai,crai,csi}"
            }
          },
          {
            "input2": {
              "type": "file",
              "description": "BAM/CRAM/SAM file; used to run variant calling with pair (normal vs tumor)",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "index2": {
              "type": "file",
              "description": "Index BAI/CRAI/CSI file",
              "pattern": "*.{bai,crai,csi}"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "Optional - Limit analysis to targets listed in this BED-format FILE.",
              "pattern": "*.bed"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "reference fasta file",
              "pattern": ".{fa,fa.gz,fasta,fasta.gz}"
            }
          },
          {
            "fai": {
              "type": "file",
              "description": "reference fasta file index",
              "pattern": "*.{fa,fasta}.fai"
            }
          },
          {
            "samples": {
              "type": "file",
              "description": "Optional - Limit analysis to samples listed (one per line) in the FILE.",
              "pattern": "*.txt"
            }
          },
          {
            "populations": {
              "type": "file",
              "description": "Optional - Each line of FILE should list a sample and a population which it is part of.",
              "pattern": "*.txt"
            }
          },
          {
            "cnv": {
              "type": "file",
              "description": "A copy number map BED file, which has either a sample-level ploidy:\nsample_name copy_number\nor a region-specific format:\nseq_name start end sample_name copy_number\n",
              "pattern": "*.bed"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "Sorted VCF file",
              "pattern": "*.{vcf.gz}"
            }
          },
          {
            "csi": {
              "type": "file",
              "description": "Default VCF file index file",
              "pattern": "*.csi"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "Alternative VCF file index file (activated with -t parameter)",
              "pattern": "*.tbi"
            }
          }
        ],
        "authors": [
          "@priyanka-surana",
          "@FriederikeHanssen",
          "@ramprasadn"
        ]
      }
    },
    {
      "name": "bam_variant_demix_boot_freyja",
      "path": "subworkflows/nf-core/bam_variant_demix_boot_freyja/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bam_variant_demix_boot_freyja",
        "description": "Recover relative lineage abundances from mixed SARS-CoV-2 samples from a sequencing dataset (BAM aligned to the Hu-1 reference)",
        "keywords": [
          "bam",
          "variants",
          "cram"
        ],
        "modules": [
          "freyja/variants",
          "freyja/demix",
          "freyja/update",
          "freyja/boot"
        ],
        "input": [
          {
            "ch_bam": {
              "type": "file",
              "description": "Structure: [ val(meta), path(bam) ]\nGroovy Map containing sample information e.g. [ id:'test', single_end:false ] and sorted BAM file\n"
            }
          },
          {
            "ch_fasta": {
              "type": "file",
              "description": "Structure: [ val(meta), path(fasta) ]\nGroovy Map containing sample information e.g. [ id:'test', single_end:false ] and the fasta reference used for the sorted BAM file\n"
            }
          },
          {
            "val_repeats": {
              "type": "value (int)",
              "description": "Number of bootstrap repeats to perform"
            }
          },
          {
            "val_db_name": {
              "type": "value (string)",
              "description": "Name of the dir where UShER's files will be stored"
            }
          },
          {
            "ch_barcodes": {
              "type": "file",
              "description": "Structure: path(barcodes)\nFile containing lineage defining barcodes\n"
            }
          },
          {
            "ch_lineages_meta": {
              "type": "file",
              "description": "Structure: path(lineages_meta)\nFile containing lineage metadata that correspond to barcodes\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "variants": {
              "type": "file",
              "description": "Structure: [ val(meta), path(variants) ]\nFile containing identified variants in a gff-like format\n"
            }
          },
          {
            "depths": {
              "type": "file",
              "description": "Structure: [ val(meta), path(variants) ]\nFile containing depth of the variants\n"
            }
          },
          {
            "demix": {
              "type": "file",
              "description": "Structure: [ val(meta), path(demix) ]\na tsv file that includes the lineages present, their corresponding abundances, and summarization by constellation\n"
            }
          },
          {
            "lineages": {
              "type": "file",
              "description": "Structure: [ val(meta), path(lineages) ]\na csv file that includes the lineages present and their corresponding abundances\n"
            }
          },
          {
            "summarized": {
              "type": "file",
              "description": "Structure: [ val(meta), path(lineages) ]\na csv file that includes the lineages present but summarized by constellation and their corresponding abundances\n"
            }
          },
          {
            "barcodes": {
              "type": "file",
              "description": "path(barcodes) a csv file that includes the lineages present but summarized by constellation and their corresponding abundances"
            }
          },
          {
            "lineages_meta": {
              "type": "file",
              "description": "path(lineages_meta) a csv file that includes the lineages present but summarized by constellation and their corresponding abundances"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Joon-Klaps"
        ]
      }
    },
    {
      "name": "bcl_demultiplex",
      "path": "subworkflows/nf-core/bcl_demultiplex/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bcl_demultiplex",
        "description": "Demultiplex Illumina BCL data using bcl-convert or bcl2fastq",
        "keywords": [
          "bcl",
          "bclconvert",
          "bcl2fastq",
          "demultiplex",
          "fastq"
        ],
        "modules": [
          "bcl2fastq",
          "bclconvert"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'string', lane: int ]\n"
            }
          },
          {
            "samplesheet": {
              "type": "file",
              "description": "CSV file containing information about samples to be demultiplexed in Illumina SampleSheet format\n"
            }
          },
          {
            "flowcell": {
              "type": "file",
              "description": "Directory or tar archive containing Illumina BCL data, sequencer output directory"
            }
          },
          {
            "demultiplexer": {
              "type": "string",
              "description": "Which demultiplexer to use, bcl2fastq or bclconvert"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Demultiplexed fastq files",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "reports": {
              "type": "file",
              "description": "Demultiplexing reports",
              "pattern": "Reports/*"
            }
          },
          {
            "interop": {
              "type": "file",
              "description": "InterOp files",
              "pattern": "InterOp/*"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "Demultiplexing statistics (bcl2fastq only)",
              "pattern": "Stats/*"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      },
      "pipelines": [
        {
          "name": "demultiplex",
          "version": "1.3.2"
        }
      ]
    },
    {
      "name": "bed_scatter_bedtools",
      "path": "subworkflows/nf-core/bed_scatter_bedtools/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bed_scatter_bedtools",
        "description": "Scatters inputted BED files by the amount specified.\nThe configuration in nextflow.config should be added to your modules.config for the subworkflow to work.\n",
        "keywords": [
          "bed",
          "scatter",
          "bedtools"
        ],
        "modules": [
          "bedtools/split"
        ],
        "input": [
          {
            "ch_bed": {
              "description": "The input channel containing the BED file and an integer stating the amount of files it should be split into\nStructure: [ val(meta), path(bed), val(scatter_count) ]\n"
            }
          }
        ],
        "output": [
          {
            "scattered_beds": {
              "description": "One channel entry per scattered BED file (all BED files from the same source are transposed but contain the same meta)\nStructure: [ val(meta), path(bed), val(scatter_count) ]\n"
            }
          },
          {
            "versions": {
              "description": "Files containing software versions\nStructure: [ path(versions.yml) ]\n"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "bedgraph_bedclip_bedgraphtobigwig",
      "path": "subworkflows/nf-core/bedgraph_bedclip_bedgraphtobigwig/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "bedgraph_bedclip_bedgraphtobigwig",
        "description": "Convert bedgraph to bigwig with clip",
        "keywords": [
          "bedgraph",
          "bigwig",
          "clip",
          "conversion"
        ],
        "modules": [
          "ucsc/bedclip",
          "ucsc/bedgraphtobigwig"
        ],
        "input": [
          {
            "bedgraph": {
              "type": "file",
              "description": "bedGraph file which should be converted",
              "pattern": "*.bedGraph"
            }
          },
          {
            "sizes": {
              "type": "file",
              "description": "File with chromosome sizes",
              "pattern": "*.sizes"
            }
          }
        ],
        "output": [
          {
            "bigwig": {
              "type": "file",
              "description": "bigWig coverage file relative to genes on the input file",
              "pattern": ".bigWig"
            }
          },
          {
            "bedgraph": {
              "type": "file",
              "description": "bedGraph file after clipping",
              "pattern": "*.bedGraph"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@KamilMaliszArdigen"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "fasta_binning_concoct",
      "path": "subworkflows/nf-core/fasta_binning_concoct/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fasta_binning_concoct",
        "description": "Runs the CONCOCT workflow of contig binning",
        "keywords": [
          "concoct",
          "binning",
          "metagenomics",
          "contigs"
        ],
        "modules": [
          "concoct/cutupfasta",
          "concoct/concoctcoveragetable",
          "concoct/concoct",
          "concoct/mergecutupclustering",
          "concoct/extractfastabins"
        ],
        "input": [
          {
            "ch_fasta": {
              "type": "file",
              "description": "Structure: [ val(meta), path(fasta)]\nFile containing raw assembled contigs in FASTA format.\n"
            }
          },
          {
            "ch_bam": {
              "type": "file",
              "description": "Structure: [ val(meta), path(bam), path(bai)]\nBAM and associated index files file representing reads mapped against each\ncontig in ch_fasta. Meta must be identical between ch_fasta and ch_bam entries.\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "coverage_table": {
              "type": "file",
              "description": "Structure: [ val(meta), path(tsv)]\n(Sub)contig coverage table\n"
            }
          },
          {
            "original_csv": {
              "type": "file",
              "description": "Structure: [ val(meta), path(csv) ]\nOriginal CONCOCT GT1000 output\n"
            }
          },
          {
            "raw_clustering_csv": {
              "type": "file",
              "description": "Structure: [ val(meta), path(csv) ]\nCSV containing information which subcontig is assigned to which cluster\n"
            }
          },
          {
            "pca_original": {
              "type": "file",
              "description": "Structure: [ val(meta), path(csv) ]\nCSV file containing untransformed PCA component values\n"
            }
          },
          {
            "pca_transformed": {
              "type": "file",
              "description": "Structure: [ val(meta), path(csv) ]\nCSV file transformed PCA component values\n"
            }
          },
          {
            "cluster_table": {
              "type": "file",
              "description": "Structure: [ val(meta), path(csv) ]\nCSV file containing final cluster assignments of original input contigs\n"
            }
          },
          {
            "bin": {
              "type": "file",
              "description": "Structure: [ val(meta), path(fasta) ]\nFASTA files containing CONCOCT predicted bin clusters, named numerically\nby CONCOCT cluster ID\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      },
      "pipelines": [
        {
          "name": "mag",
          "version": "2.3.2"
        }
      ]
    },
    {
      "name": "fasta_clean_fcs",
      "path": "subworkflows/nf-core/fasta_clean_fcs/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fasta_clean_fcs",
        "description": "Foreign Contamination Screen (FCS) is a tool suite for identifying and removing contaminant sequences in genome assemblies",
        "keywords": [
          "contamination screening",
          "cleaning",
          "assemblies",
          "fasta"
        ],
        "modules": [
          "fcs/fcsadaptor",
          "fcs/fcsgx"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "assembly": {
              "type": "file",
              "description": "assembly fasta file",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fcsadaptor_cleaned_assembly": {
              "type": "file",
              "description": "Cleaned assembly in fasta format",
              "pattern": "*.{cleaned_sequences.fa.gz}"
            }
          },
          {
            "fcsadaptor_report": {
              "type": "file",
              "description": "Report of identified adaptors",
              "pattern": "*.{fcs_adaptor_report.txt}"
            }
          },
          {
            "fcsadaptor_log": {
              "type": "file",
              "description": "Log file",
              "pattern": "*.{fcs_adaptor.log}"
            }
          },
          {
            "fcsadaptor_pipeline_args": {
              "type": "file",
              "description": "Run arguments",
              "pattern": "*.{pipeline_args.yaml}"
            }
          },
          {
            "fcsadaptor_skipped_trims": {
              "type": "file",
              "description": "Skipped trim information",
              "pattern": "*.{skipped_trims.jsonl}"
            }
          },
          {
            "fcs_gx_report": {
              "type": "file",
              "description": "Report containing the contig identifier and recommended action (EXCLUDE, TRIM, FIX, REVIEW)",
              "pattern": "*.fcs_gx_report.txt"
            }
          },
          {
            "fcsgx_taxonomy_report": {
              "type": "file",
              "description": "Report containing the contig identifier and mapped contaminant species",
              "pattern": "*.taxonomy.rpt"
            }
          }
        ],
        "authors": [
          "@scorreard"
        ]
      }
    },
    {
      "name": "fasta_index_dna",
      "path": "subworkflows/nf-core/fasta_index_dna/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fasta_index_dna",
        "description": "Generate aligner index for a reference genome.\nPlease note, this workflow requires input CHANNELS. Input values will cause errors\n",
        "keywords": [
          "fasta",
          "index",
          "bowtie2",
          "bwamem",
          "bwamem2",
          "dragmap",
          "snapaligner"
        ],
        "modules": [
          "bowtie2/build",
          "bwa/index",
          "bwamem2/index",
          "dragmap/hashtable",
          "snapaligner/index"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome fasta file"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing altliftover information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "altliftover": {
              "type": "file",
              "description": "Sam formatted liftover file for the reference genome alt contigs\nSee: https://github.com/lh3/bwa/blob/master/README-alt.md\nDownload from: https://sourceforge.net/projects/bio-bwa/files/bwakit\n"
            }
          },
          {
            "val_aligner": {
              "type": "string",
              "description": "Aligner to use for alignment",
              "enum": [
                "bowtie2",
                "bwa",
                "bwamem2",
                "dragmap",
                "snap"
              ]
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "aligner index"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@matthdsm",
          "@ramprasadn"
        ]
      }
    },
    {
      "name": "fasta_newick_epang_gappa",
      "path": "subworkflows/nf-core/fasta_newick_epang_gappa/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fasta_newick_epang_gappa",
        "description": "Run phylogenetic placement with a number of query sequences plus a reference alignment and phylogeny. Used in nf-core/phyloplace.",
        "keywords": [
          "phylogenetic placement",
          "phylogenetics",
          "alignment",
          "fasta",
          "newick"
        ],
        "modules": [
          "hmmer/hmmbuild",
          "hmmer/hmmalign",
          "hmmer/eslalimask",
          "hmmer/eslreformat",
          "mafft",
          "epang/place",
          "epang/split",
          "gappa/examinegraft",
          "gappa/examineassign",
          "gappa/examineheattree"
        ],
        "input": [
          {
            "ch_pp_data": {
              "type": "map",
              "description": "Structure: [\n  meta: val(meta),\n  data: [\n    alignmethod:  'hmmer',\n    queryseqfile: path(\"*.faa\"),\n    refseqfile:   path(\"*.alnfaa\"),\n    refphylogeny: path(\"*.newick\"),\n    model:        \"LG\",\n    taxonomy:     path(\"*.tsv\")\n  ]\n]\n"
            }
          },
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "queryseqfile": {
              "type": "file",
              "description": "Fasta file with query sequences",
              "pattern": "*.{faa,fna,fa,fasta,fa,faa.gz,fna.gz,fa.gz,fasta.gz,fa.gz}"
            }
          },
          {
            "refseqfile": {
              "type": "file",
              "description": "File with reference sequences; aligned unless an hmmfile is provided",
              "pattern": "*.{faa,fna,fa,fasta,fa,phy,aln,alnfaa,alnfna,alnfa,mfa,faa.gz,fna.gz,fa.gz,fasta.gz,fa.gz,phy.gz,aln.gz,alnfaa.gz,alnfna.gz,alnfa.gz,mfa.gz}"
            }
          },
          {
            "refphylogeny": {
              "type": "file",
              "description": "Newick file with reference phylogenetic tree",
              "pattern": "*.{newick,tree}"
            }
          },
          {
            "hmmfile": {
              "type": "file",
              "description": "HMM file to use for alignment; implies that refseqfile is not aligned. Optional.",
              "pattern": "*.{hmm,HMM,hmm.gz,HMM.gz}"
            }
          },
          {
            "model": {
              "type": "string",
              "description": "Phylogenetic model to use in placement, e.g. 'LG+F' or 'GTR+I+F'"
            }
          },
          {
            "alignmethod": {
              "type": "string",
              "description": "Method used for alignment, 'hmmer' or 'mafft'"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "epang": {
              "type": "directory",
              "description": "All output from EPA-NG",
              "pattern": "*"
            }
          },
          {
            "jplace": {
              "type": "file",
              "description": "jplace file from EPA-NG",
              "pattern": "*.jplace"
            }
          },
          {
            "grafted_phylogeny": {
              "type": "file",
              "description": "Newick file with query sequences placed in reference tree",
              "pattern": "*.newick"
            }
          },
          {
            "taxonomy_profile": {
              "type": "file",
              "description": "Tab separated file with taxonomy information from classification",
              "pattern": "*.tsv"
            }
          },
          {
            "taxonomy_per_query": {
              "type": "file",
              "description": "Tab separated file with taxonomy information per query from classification",
              "pattern": "*.tsv"
            }
          },
          {
            "heattree": {
              "type": "file",
              "description": "Heattree in SVG format",
              "pattern": "*.svg"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@erikrikarddaniel"
        ]
      },
      "pipelines": [
        {
          "name": "ampliseq",
          "version": "2.6.1"
        }
      ]
    },
    {
      "name": "fastq_align_bowtie2",
      "path": "subworkflows/nf-core/fastq_align_bowtie2/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fastq_align_bowtie2",
        "description": "Align reads to a reference genome using bowtie2 then sort with samtools",
        "keywords": [
          "align",
          "fasta",
          "genome",
          "reference"
        ],
        "modules": [
          "bowtie2/align",
          "samtools/sort",
          "samtools/index",
          "samtools/stats",
          "samtools/idxstats",
          "samtools/flagstat"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ch_reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "ch_index": {
              "type": "file",
              "description": "Bowtie2 genome index files",
              "pattern": "*.ebwt"
            }
          },
          {
            "save_unaligned": {
              "type": "boolean",
              "description": "Save reads that do not map to the reference (true) or discard them (false)\n(default: false)\n"
            }
          },
          {
            "sort_bam": {
              "type": "boolean",
              "description": "Save reads that do not map to the reference (true) or discard them (false)\n",
              "default": false
            }
          },
          {
            "ch_fasta": {
              "type": "file",
              "description": "Reference fasta file",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Unaligned FastQ files",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Alignment log",
              "pattern": "*.log"
            }
          }
        ],
        "authors": [
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "viralrecon",
          "version": "2.6.0"
        }
      ]
    },
    {
      "name": "fastq_align_bwa",
      "path": "subworkflows/nf-core/fastq_align_bwa/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fastq_align_bwa",
        "description": "Align reads to a reference genome using bwa then sort with samtools",
        "keywords": [
          "align",
          "fasta",
          "genome",
          "reference"
        ],
        "modules": [
          "bwa/align",
          "samtools/sort",
          "samtools/index",
          "samtools/stats",
          "samtools/idxstats",
          "samtools/flagstat"
        ],
        "input": [
          {
            "ch_reads": {
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\nStructure: [ val(meta), [ path(reads) ] ]\n"
            }
          },
          {
            "ch_index": {
              "description": "BWA genome index files\nStructure: [ val(meta2), path(index) ]\n"
            }
          },
          {
            "val_sort_bam": {
              "type": "boolean",
              "description": "If true bwa modules sort resulting bam files",
              "pattern": "true|false"
            }
          },
          {
            "ch_fasta": {
              "type": "file",
              "description": "Optional reference fasta file. This only needs to be given if val_sort_bam = true\nStructure: [ path(fasta) ]\n"
            }
          }
        ],
        "output": [
          {
            "bam_orig": {
              "description": "BAM file produced by bwa\nStructure: [ val(meta), path(bam) ]\n"
            }
          },
          {
            "bam": {
              "description": "BAM file ordered by samtools\nStructure: [ val(meta), path(bam) ]\n"
            }
          },
          {
            "bai": {
              "description": "BAI index of the ordered BAM file\nStructure: [ val(meta), path(bai) ]\n"
            }
          },
          {
            "csi": {
              "description": "CSI index of the ordered BAM file\nStructure: [ val(meta), path(csi) ]\n"
            }
          },
          {
            "stats": {
              "description": "File containing samtools stats output\nStructure: [ val(meta), path(stats) ]\n"
            }
          },
          {
            "flagstat": {
              "description": "File containing samtools flagstat output\nStructure: [ val(meta), path(flagstat) ]\n"
            }
          },
          {
            "idxstats": {
              "description": "File containing samtools idxstats output\nStructure: [ val(meta), path(idxstats) ]\n"
            }
          },
          {
            "versions": {
              "description": "Files containing software versions\nStructure: [ path(versions.yml) ]\n"
            }
          }
        ],
        "authors": [
          "@JoseEspinosa"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        }
      ]
    },
    {
      "name": "fastq_align_bwaaln",
      "path": "subworkflows/nf-core/fastq_align_bwaaln/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fastq_align_bwaaln_samtools",
        "description": "Align FASTQ files against reference genome with the bwa aln short-read aligner producing a sorted and indexed BAM files",
        "keywords": [
          "bwa",
          "aln",
          "fasta",
          "bwa",
          "align",
          "map"
        ],
        "modules": [
          "bwa/aln",
          "bwa/sampe",
          "bwa/samse",
          "samtools/index"
        ],
        "input": [
          {
            "ch_reads": {
              "description": "Structure: [ val(meta), path(fastq) ]\nOne or two FASTQ files for single or paired end data respectively.\n"
            }
          },
          {
            "ch_index": {
              "description": "Structure: [ val(meta), path(index) ]\nA directory containing bwa aln reference indices as from `bwa index`\nContains files ending in extensions such as .amb, .ann, .bwt etc.\n"
            }
          }
        ],
        "output": [
          {
            "bam": {
              "description": "Structure: [ val(meta), path(bam) ]\nSorted BAM/CRAM/SAM file\n"
            }
          },
          {
            "bai": {
              "description": "Structure: [ val(meta), path(bai) ]\nBAM/CRAM/SAM samtools index file\n"
            }
          },
          {
            "csi": {
              "description": "Structure: [ val(meta), path(csi) ]\nBAM/CRAM/SAM samtools index file for larger references\n"
            }
          },
          {
            "versions": {
              "description": "Files containing software versions\nStructure: [ path(versions.yml) ]\n"
            }
          }
        ],
        "authors": [
          "@jfy133"
        ]
      }
    },
    {
      "name": "fastq_align_chromap",
      "path": "subworkflows/nf-core/fastq_align_chromap/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fastq_align_chromap",
        "description": "Align high throughput chromatin profiles using Chromap then sort with samtools",
        "keywords": [
          "align",
          "fasta",
          "genome",
          "reference",
          "chromatin profiles",
          "chip-seq",
          "atac-seq",
          "hic"
        ],
        "modules": [
          "chromap/chromap",
          "samtools/sort",
          "samtools/index",
          "samtools/stats",
          "samtools/idxstats",
          "samtools/flagstat"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "ch_reads": {
              "type": "file",
              "description": "Structure: [val(meta), path(reads)]\nList of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "ch_index": {
              "type": "file",
              "description": "Structure: [val(meta2), path(index)]\nChromap genome index files\n",
              "pattern": "*.index"
            }
          },
          {
            "ch_fasta": {
              "type": "file",
              "description": "Structure: [val(meta2), path(fasta)]\nReference fasta file\n",
              "pattern": "*.{fasta,fa}"
            }
          },
          {
            "ch_barcodes": {
              "type": "file",
              "description": "Structure: [path(barcodes)]\nCell barcode files\n"
            }
          },
          {
            "ch_whitelist": {
              "type": "file",
              "description": "Structure: [path(whitelist)]\nCell barcode whitelist file\n"
            }
          },
          {
            "ch_chr_order": {
              "type": "file",
              "description": "Structure: [path(chr_order)]\nCustom chromosome order\n"
            }
          },
          {
            "ch_pairs_chr_order": {
              "type": "file",
              "description": "Structure: [path(pairs_chr_order)]\nNatural chromosome order for pairs flipping\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index (currently only for snapaligner)",
              "pattern": "*.bai"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "File containing samtools stats output",
              "pattern": "*.{stats}"
            }
          },
          {
            "flagstat": {
              "type": "file",
              "description": "File containing samtools flagstat output",
              "pattern": "*.{flagstat}"
            }
          },
          {
            "idxstats": {
              "type": "file",
              "description": "File containing samtools idxstats output",
              "pattern": "*.{idxstats}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@JoseEspinosa"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        }
      ]
    },
    {
      "name": "fastq_align_dna",
      "path": "subworkflows/nf-core/fastq_align_dna/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fastq_align_dna",
        "description": "Align fastq files to a reference genome",
        "keywords": [
          "fastq",
          "bam",
          "sort",
          "bwamem",
          "bwamem2",
          "dragmap",
          "snapaligner"
        ],
        "modules": [
          "bowtie2/align",
          "bwa/mem",
          "bwamem2/mem",
          "dragmap/align",
          "snapaligner/align"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "meta2": {
              "type": "map",
              "description": "Groovy Map containing reference information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "Aligner genome index files",
              "pattern": "Directory containing aligner index"
            }
          },
          {
            "aligner": {
              "type": "string",
              "description": "Aligner to use for alignment",
              "enum": [
                "bowtie2",
                "bwa",
                "bwamem2",
                "dragmap",
                "snap"
              ]
            }
          },
          {
            "sort_bam": {
              "type": "boolean",
              "description": "sort output"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "BAM file",
              "pattern": "*.bam"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM index (currently only for snapaligner)",
              "pattern": "*.bai"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Alignment report (currently only for dragmap)",
              "pattern": "*.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@matthdsm"
        ]
      }
    },
    {
      "name": "fastq_align_hisat2",
      "path": "subworkflows/nf-core/fastq_align_hisat2/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fastq_align_hisat2",
        "description": "Align reads to a reference genome using hisat2 then sort with samtools",
        "keywords": [
          "align",
          "sort",
          "rnaseq",
          "genome",
          "fastq",
          "bam",
          "sam",
          "cram"
        ],
        "modules": [
          "hisat2/align",
          "samtools/stats",
          "samtools/idxstats",
          "samtools/flagstat"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "index": {
              "type": "file",
              "description": "HISAT2 genome index file",
              "pattern": "*.ht2"
            }
          },
          {
            "splicesites": {
              "type": "file",
              "description": "Splices sites in gtf file",
              "pattern": "*.{txt}"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "Reference genome fasta file",
              "pattern": "*.{fasta,fa}"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Output BAM file containing read alignments",
              "pattern": "*.{bam}"
            }
          },
          {
            "summary": {
              "type": "file",
              "description": "Aligment log",
              "pattern": "*.log"
            }
          },
          {
            "fastq": {
              "type": "file",
              "description": "Optional output FASTQ file containing unaligned reads",
              "pattern": ".fastq.gz"
            }
          },
          {
            "bam": {
              "type": "file",
              "description": "Sorted BAM/CRAM/SAM file",
              "pattern": "*.{bam,cram,sam}"
            }
          },
          {
            "bai": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "crai": {
              "type": "file",
              "description": "BAM/CRAM/SAM index file",
              "pattern": "*.{bai,crai,sai}"
            }
          },
          {
            "stats": {
              "type": "file",
              "description": "File containing samtools stats output",
              "pattern": "*.{stats}"
            }
          },
          {
            "flagstat": {
              "type": "file",
              "description": "File containing samtools flagstat output",
              "pattern": "*.{flagstat}"
            }
          },
          {
            "idxstats": {
              "type": "file",
              "description": "File containing samtools idxstats output",
              "pattern": "*.{idxstats}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@priyanka-surana"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "fastq_align_star",
      "path": "subworkflows/nf-core/fastq_align_star/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fastq_align_star",
        "description": "Align reads to a reference genome using bowtie2 then sort with samtools",
        "keywords": [
          "align",
          "fasta",
          "genome",
          "reference"
        ],
        "modules": [
          "star/align",
          "samtools/sort",
          "samtools/index",
          "samtools/stats",
          "samtools/idxstats",
          "samtools/flagstat"
        ],
        "input": [
          {
            "ch_reads": {
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\nStructure: [ val(meta), [ path(reads) ] ]\n"
            }
          },
          {
            "ch_index": {
              "type": "directory",
              "description": "STAR genome index",
              "pattern": "star"
            }
          },
          {
            "ch_gtf": {
              "type": "file",
              "description": "GTF file used to set the splice junctions with the --sjdbGTFfile flag\n",
              "pattern": "*.gtf"
            }
          },
          {
            "val_star_ignore_sjdbgtf": {
              "type": "boolean",
              "description": "If true the --sjdbGTFfile flag is set\n",
              "pattern": "true|false"
            }
          },
          {
            "val_seq_platform": {
              "type": "string",
              "description": "Sequencing platform to be added to the bam header using the --outSAMattrRGline flag\n"
            }
          },
          {
            "val_seq_center": {
              "type": "string",
              "description": "Sequencing center to be added to the bam header using the --outSAMattrRGline flag\n"
            }
          },
          {
            "ch_fasta": {
              "type": "file",
              "description": "Reference genome fasta file",
              "pattern": "*.{fasta,fa,fna}"
            }
          }
        ],
        "output": [
          {
            "orig_bam": {
              "description": "Output BAM file containing read alignments\nStructure: [ val(meta), path(bam) ]\n"
            }
          },
          {
            "log_final": {
              "description": "STAR final log file\nStructure: [ val(meta), path(log_final) ]\n"
            }
          },
          {
            "log_out": {
              "description": "STAR log out file\nStructure: [ val(meta), path(log_out) ]\n"
            }
          },
          {
            "log_progress": {
              "description": "STAR log progress file\nStructure: [ val(meta), path(log_progress) ]\n"
            }
          },
          {
            "bam_sorted": {
              "description": "Sorted BAM file of read alignments (optional)\nStructure: [ val(meta), path(bam) ]\n"
            }
          },
          {
            "bam_transcript": {
              "description": "Output BAM file of transcriptome alignment (optional)\nStructure: [ val(meta), path(bam) ]\n"
            }
          },
          {
            "fastq": {
              "description": "Unmapped FastQ files (optional)\nStructure: [ val(meta), path(fastq) ]\n"
            }
          },
          {
            "tab": {
              "description": "STAR output tab file(s) (optional)\nStructure: [ val(meta), path(tab) ]\n"
            }
          },
          {
            "stats": {
              "description": "File containing samtools stats output\nStructure: [ val(meta), path(stats) ]\n"
            }
          },
          {
            "bam": {
              "description": "BAM file ordered by samtools\nStructure: [ val(meta), path(bam) ]\n"
            }
          },
          {
            "bai": {
              "description": "BAI index of the ordered BAM file\nStructure: [ val(meta), path(bai) ]\n"
            }
          },
          {
            "flagstat": {
              "description": "File containing samtools flagstat output\nStructure: [ val(meta), path(flagstat) ]\n"
            }
          },
          {
            "idxstats": {
              "description": "File containing samtools idxstats output\nStructure: [ val(meta), path(idxstats) ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@JoseEspinosa"
        ]
      }
    },
    {
      "name": "fastq_contam_seqtk_kraken",
      "path": "subworkflows/nf-core/fastq_contam_seqtk_kraken/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "FASTQ_CONTAM_SEQTK_KRAKEN",
        "description": "Produces a contamination report from FastQ input after subsampling",
        "keywords": [
          "statistics",
          "fastq",
          "contamination"
        ],
        "modules": [
          "kraken/kraken2",
          "seqtk/sample"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data, respectively"
            }
          },
          {
            "sample_size": {
              "type": "string",
              "description": "Number of reads to subsample for contamination detection."
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "report": {
              "type": "file",
              "description": "Kraken2 contamination report",
              "pattern": "*.txt"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@apeltzer"
        ]
      }
    },
    {
      "name": "fastq_create_umi_consensus_fgbio",
      "path": "subworkflows/nf-core/fastq_create_umi_consensus_fgbio/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fgbio_create_umi_consensus",
        "description": "This workflow uses the suite FGBIO to identify and remove UMI tags from FASTQ reads\nconvert them to unmapped BAM file, map them to the reference genome,\nand finally use the mapped information to group UMIs and generate consensus reads in each group\n",
        "keywords": [
          "fgbio",
          "umi",
          "samblaster",
          "samtools",
          "bwa"
        ],
        "modules": [
          "bwa/index",
          "bwa/mem",
          "fgbio/fastqtobam",
          "fgbio/groupreadsbyumi",
          "fgbio/callmolecularconsensusreads",
          "samblaster",
          "samtools/bam2fq"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "reads": {
              "type": "list",
              "description": "list umi-tagged reads",
              "pattern": "[ *.{fastq.gz/fq.gz} ]"
            }
          },
          {
            "fasta": {
              "type": "file",
              "description": "The reference fasta file",
              "pattern": "*.fasta"
            }
          },
          {
            "read_structure": {
              "type": "string",
              "description": "A read structure should always be provided for each of the fastq files.\nIf single end, the string will contain only one structure (i.e. \"2M11S+T\"), if paired-end the string\nwill contain two structures separated by a blank space (i.e. \"2M11S+T 2M11S+T\").\nIf the read does not contain any UMI, the structure will be +T (i.e. only template of any length).\nhttps://github.com/fulcrumgenomics/fgbio/wiki/Read-Structures\n"
            }
          },
          {
            "groupreadsbyumi_strategy": {
              "type": "string",
              "description": "",
              "Reguired argument": "defines the UMI assignment strategy.",
              "enum": [
                "Identity",
                "Edit",
                "Adjacency",
                "Paired"
              ]
            }
          }
        ],
        "output": [
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          },
          {
            "ubam": {
              "type": "file",
              "description": "unmapped bam file",
              "pattern": "*.bam"
            }
          },
          {
            "groupbam": {
              "type": "file",
              "description": "mapped bam file, where reads are grouped by UMI tag",
              "pattern": "*.bam"
            }
          },
          {
            "consensusbam": {
              "type": "file",
              "description": "mapped bam file, where reads are created as consensus of those\nbelonging to the same UMI group\n",
              "pattern": "*.bam"
            }
          }
        ],
        "authors": [
          "@lescai"
        ]
      }
    },
    {
      "name": "fastq_download_prefetch_fasterqdump_sratools",
      "path": "subworkflows/nf-core/fastq_download_prefetch_fasterqdump_sratools/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fastq_download_prefetch_fasterqdump_sratools",
        "description": "Download FASTQ sequencing reads from the NCBI's Sequence Read Archive (SRA).",
        "keywords": [
          "SRA",
          "NCBI",
          "sequencing",
          "fastq",
          "prefetch",
          "fasterq-dump"
        ],
        "modules": [
          "custom/sratoolsncbisettings",
          "sratools/prefetch",
          "sratools/fasterqdump"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "id": {
              "type": "string",
              "description": "SRA run identifier.\n"
            }
          },
          {
            "certificate": {
              "type": "file",
              "description": "Path to a JWT cart file used to access protected dbGAP data on SRA using the sra-toolkit\n",
              "pattern": "*.cart"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Extracted FASTQ file or files if the sequencing reads are paired-end.",
              "pattern": "*.fastq.gz"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Midnighter",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "fetchngs",
          "version": "1.10.0"
        }
      ]
    },
    {
      "name": "fastq_fastqc_umitools_fastp",
      "path": "subworkflows/nf-core/fastq_fastqc_umitools_fastp/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fastq_fastqc_umitools_fastp",
        "description": "Read QC, UMI extraction and trimming",
        "keywords": [
          "fastq",
          "fastqc",
          "qc",
          "UMI",
          "trimming",
          "fastp"
        ],
        "modules": [
          "fastqc",
          "umitools/extract",
          "fastp"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "skip_fastqc": {
              "type": "boolean",
              "description": "Skip fastqc process\n"
            }
          },
          {
            "with_umi": {
              "type": "boolean",
              "description": "With or without umi detection\n"
            }
          },
          {
            "skip_umi_extract": {
              "type": "boolean",
              "description": "With or without umi extrection\n"
            }
          },
          {
            "umi_discard_read": {
              "type": "integer",
              "description": "Discard R1 / R2 if required\n"
            }
          },
          {
            "skip_trimming": {
              "type": "boolean",
              "description": "Allows to skip trimgalore execution\n"
            }
          },
          {
            "adapter_fasta": {
              "type": "file",
              "description": "Fasta file of adapter sequences\n"
            }
          },
          {
            "save_trimmed_fail": {
              "type": "boolean",
              "description": "Save trimmed fastqs of failed samples\n"
            }
          },
          {
            "save_merged": {
              "type": "boolean",
              "description": "Save merged fastqs\n"
            }
          },
          {
            "min_trimmed_reads": {
              "type": "integer",
              "description": "Inputs with fewer than this reads will be filtered out of the \"reads\" output channel\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Extracted FASTQ files. | For single-end reads, pattern is \\${prefix}.umi_extract.fastq.gz. |\n  For paired-end reads, pattern is \\${prefix}.umi_extract_{1,2}.fastq.gz.\n",
              "pattern": "*.{fastq.gz}"
            }
          },
          {
            "fastqc_html": {
              "type": "file",
              "description": "FastQC report",
              "pattern": "*_{fastqc.html}"
            }
          },
          {
            "fastqc_zip": {
              "type": "file",
              "description": "FastQC report archive",
              "pattern": "*_{fastqc.zip}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Logfile for umi_tools",
              "pattern": "*.{log}"
            }
          },
          {
            "trim_json": {
              "type": "file",
              "description": "FastP Trimming report",
              "pattern": "*.{fastp.json}"
            }
          },
          {
            "trim_html": {
              "type": "file",
              "description": "FastP Trimming report",
              "pattern": "*.{fastp.html}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Logfile FastP",
              "pattern": "*.{fastp.log}"
            }
          },
          {
            "trim_reads_fail": {
              "type": "file",
              "description": "Trimmed fastq files failing QC",
              "pattern": "*.{fastq.gz}"
            }
          },
          {
            "trim_reads_merged": {
              "type": "file",
              "description": "Trimmed and merged fastq files",
              "pattern": "*.{fastq.gz}"
            }
          },
          {
            "trim_read_count": {
              "type": "integer",
              "description": "Number of reads after trimming"
            }
          },
          {
            "fastqc_trim_html": {
              "type": "file",
              "description": "FastQC report",
              "pattern": "*_{fastqc.html}"
            }
          },
          {
            "fastqc_trim_zip": {
              "type": "file",
              "description": "FastQC report archive",
              "pattern": "*_{fastqc.zip}"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@robsyme"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "fastq_fastqc_umitools_trimgalore",
      "path": "subworkflows/nf-core/fastq_fastqc_umitools_trimgalore/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fastq_fastqc_umitools_trimgalore",
        "description": "Read QC, UMI extraction and trimming",
        "keywords": [
          "fastq",
          "fastqc",
          "qc",
          "UMI",
          "trimming",
          "trimgalore"
        ],
        "modules": [
          "fastqc",
          "umitools/extract",
          "trimgalore"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "skip_fastqc": {
              "type": "boolean",
              "description": "Skip fastqc process\n"
            }
          },
          {
            "with_umi": {
              "type": "boolean",
              "description": "With or without umi detection\n"
            }
          },
          {
            "skip_umi_extract": {
              "type": "boolean",
              "description": "With or without umi extrection\n"
            }
          },
          {
            "skip_trimming": {
              "type": "boolean",
              "description": "Allows to skip trimgalore execution\n"
            }
          },
          {
            "umi_discard_read": {
              "type": "integer",
              "description": "Discard R1 / R2 if required\n"
            }
          },
          {
            "min_trimmed_reads": {
              "type": "integer",
              "description": "Inputs with fewer than this reads will be filtered out of the \"reads\" output channel\n"
            }
          }
        ],
        "output": [
          {
            "reads": {
              "type": "file",
              "description": "Extracted FASTQ files. | For single-end reads, pattern is \\${prefix}.umi_extract.fastq.gz. |\n  For paired-end reads, pattern is \\${prefix}.umi_extract_{1,2}.fastq.gz.\n",
              "pattern": "*.{fastq.gz}"
            }
          },
          {
            "fastqc_html": {
              "type": "file",
              "description": "FastQC report",
              "pattern": "*_{fastqc.html}"
            }
          },
          {
            "fastqc_zip": {
              "type": "file",
              "description": "FastQC report archive",
              "pattern": "*_{fastqc.zip}"
            }
          },
          {
            "log": {
              "type": "file",
              "description": "Logfile for umi_tools",
              "pattern": "*.{log}"
            }
          },
          {
            "trim_unpaired": {
              "type": "file",
              "description": "FastQ files containing unpaired reads from read 1 or read 2\n",
              "pattern": "*unpaired*.fq.gz"
            }
          },
          {
            "trim_html": {
              "type": "file",
              "description": "FastQC report (optional)",
              "pattern": "*_{fastqc.html}"
            }
          },
          {
            "trim_zip": {
              "type": "file",
              "description": "FastQC report archive (optional)",
              "pattern": "*_{fastqc.zip}"
            }
          },
          {
            "trim_log": {
              "type": "file",
              "description": "Trim Galore! trimming report",
              "pattern": "*_{report.txt}"
            }
          },
          {
            "trim_read_count": {
              "type": "integer",
              "description": "Number of reads remaining after trimming for all input samples"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@drpatelh",
          "@KamilMaliszArdigen"
        ]
      },
      "pipelines": [
        {
          "name": "atacseq",
          "version": "2.0"
        },
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "fastq_subsample_fq_salmon",
      "path": "subworkflows/nf-core/fastq_subsample_fq_salmon/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fastq_subsample_fq_salmon",
        "description": "Subsample fastq",
        "keywords": [
          "fastq",
          "subsample",
          "strandedness"
        ],
        "modules": [
          "fq/subsample",
          "salmon/quant"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "ch_reads": {
              "type": "file",
              "description": "List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively.\n"
            }
          },
          {
            "ch_genome_fasta": {
              "type": "file",
              "description": "Genome fasta file",
              "pattern": "Path to genome sequence in fasta format"
            }
          },
          {
            "ch_transcript_fasta": {
              "type": "file",
              "description": "Transcript fasta file",
              "pattern": "Path to transcript sequence in fasta format"
            }
          },
          {
            "ch_gtf": {
              "type": "file",
              "description": "GTF features file",
              "pattern": "Path features in GTF format"
            }
          },
          {
            "ch_index": {
              "type": "file",
              "description": "Salmon index files",
              "pattern": "Directory containing Salmon index"
            }
          },
          {
            "make_index": {
              "type": "boolean",
              "description": "Whether to create salmon index before running salmon quant"
            }
          }
        ],
        "output": [
          {
            "index": {
              "type": "directory",
              "description": "Directory containing salmon index",
              "pattern": "salmon"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Subsampled fastq reads.",
              "pattern": "*.{fq,fastq}{,.gz}"
            }
          },
          {
            "results": {
              "type": "directory",
              "description": "Folder containing the quantification results for a specific sample",
              "pattern": "${prefix}"
            }
          },
          {
            "json_info": {
              "type": "file",
              "description": "File containing meta information from Salmon quant\nWhich could be used to infer strandedness among other things\n",
              "pattern": "*info.json"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@robsyme",
          "@drpatelh"
        ]
      },
      "pipelines": [
        {
          "name": "rnaseq",
          "version": "3.12.0"
        }
      ]
    },
    {
      "name": "fastq_trim_fastp_fastqc",
      "path": "subworkflows/nf-core/fastq_trim_fastp_fastqc/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "fastq_trim_fastp_fastqc",
        "description": "Read QC, fastp trimming and read qc",
        "keywords": [
          "qc",
          "quality_control",
          "adapters",
          "trimming",
          "fastq"
        ],
        "modules": [
          "fastqc",
          "fastp"
        ],
        "input": [
          {
            "ch_reads": {
              "type": "file",
              "description": "Structure: [ val(meta), path (reads) ]\nGroovy Map containing sample information\ne.g. [ id:'test', single_end:false ], List of input FastQ files of size 1 and 2 for single-end and paired-end data,\nrespectively. If you wish to run interleaved paired-end data,  supply as single-end data\nbut with `--interleaved_in` in your `modules.conf`'s `ext.args` for the module.\n"
            }
          },
          {
            "ch_adapter_fasta": {
              "type": "file",
              "description": "Structure: path(adapter_fasta)\nFile in FASTA format containing possible adapters to remove.\n"
            }
          },
          {
            "val_save_trimmed_fail": {
              "type": "boolean",
              "description": "Structure: val(save_trimmed_fail)\nSpecify true to save files that failed to pass trimming thresholds ending in `*.fail.fastq.gz`\n"
            }
          },
          {
            "val_save_merged": {
              "type": "boolean",
              "description": "Structure: val(save_merged)\nSpecify true to save all merged reads to the a file ending in `*.merged.fastq.gz`\n"
            }
          },
          {
            "val_skip_fastqc": {
              "type": "boolean",
              "description": "Structure: val(skip_fastqc)\nskip the fastqc process if true\n"
            }
          },
          {
            "val_skip_fastp": {
              "type": "boolean",
              "description": "Structure: val(skip_fastp)\nskip the fastp process if true\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "value",
              "description": "Groovy Map containing sample information e.g. [ id:'test', single_end:false ]"
            }
          },
          {
            "reads": {
              "type": "file",
              "description": "Structure: [ val(meta), path(reads) ]\nThe trimmed/modified/unmerged fastq reads\n"
            }
          },
          {
            "trim_json": {
              "type": "file",
              "description": "Structure: [ val(meta), path(trim_json) ]\nResults in JSON format\n"
            }
          },
          {
            "trim_html": {
              "type": "file",
              "description": "Structure: [ val(meta), path(trim_html) ]\nResults in HTML format\n"
            }
          },
          {
            "trim_log": {
              "type": "file",
              "description": "Structure: [ val(meta), path(trim_log) ]\nfastq log file\n"
            }
          },
          {
            "trim_reads_fail": {
              "type": "file",
              "description": "Structure: [ val(meta), path(trim_reads_fail) ]\nReads the failed the preprocessing\n"
            }
          },
          {
            "trim_reads_merged": {
              "type": "file",
              "description": "Structure: [ val(meta), path(trim_reads_merged) ]\nReads that were successfully merged\n"
            }
          },
          {
            "fastqc_raw_html": {
              "type": "file",
              "description": "Structure: [ val(meta), path(fastqc_raw_html) ]\nRaw fastQC report\n"
            }
          },
          {
            "fastqc_raw_zip": {
              "type": "file",
              "description": "Structure: [ val(meta), path(fastqc_raw_zip) ]\nRaw fastQC report archive\n"
            }
          },
          {
            "fastqc_trim_html": {
              "type": "file",
              "description": "Structure: [ val(meta), path(fastqc_trim_html) ]\nTrimmed fastQC report\n"
            }
          },
          {
            "fastqc_trim_zip": {
              "type": "file",
              "description": "Structure: [ val(meta), path(fastqc_trim_zip) ]\nTrimmed fastQC report archive\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@Joon-Klaps"
        ]
      }
    },
    {
      "name": "multiple_impute_glimpse2",
      "path": "subworkflows/nf-core/multiple_impute_glimpse2/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "multiple_imputation_glimpse2",
        "description": "Impute VCF/BCF files, but also CRAM and BAM files with Glimpse2",
        "keywords": [
          "glimpse",
          "chunk",
          "phase",
          "ligate",
          "split_reference"
        ],
        "modules": [
          "glimpse2/chunk",
          "glimpse/2phase",
          "glimpse2/ligate",
          "glimpse2/split_reference",
          "bcftools/index"
        ],
        "input": [
          {
            "ch_input": {
              "type": "file",
              "description": "Target dataset in CRAM, BAM or VCF/BCF format.\nIndex file of the input file.\nFile with sample names and ploidy information.\nStructure: [ meta, file, index, txt ]\n"
            }
          },
          {
            "ch_ref": {
              "type": "file",
              "description": "Reference panel of haplotypes in VCF/BCF format.\nIndex file of the Reference panel file.\nTarget region, usually a full chromosome (e.g. chr20:1000000-2000000 or chr20).\nThe file could possibly be without GT field (for efficiency reasons a file containing only the positions is recommended).\nStructure: [ meta, vcf, csi, region ]\n"
            }
          },
          {
            "ch_map": {
              "type": "file",
              "description": "File containing the genetic map.\nStructure: [ meta, gmap ]\n"
            }
          },
          {
            "ch_fasta": {
              "type": "file",
              "description": "Reference genome in fasta format.\nReference genome index in fai format\nStructure: [ meta, fasta, fai ]\n"
            }
          }
        ],
        "output": [
          {
            "chunk_chr": {
              "type": "file",
              "description": "Tab delimited output txt file containing buffer and imputation regions.\nStructure: [meta, txt]\n"
            }
          },
          {
            "merged_variants": {
              "type": "file",
              "description": "Output VCF/BCF file for the merged regions.\nPhased information (HS field) is updated accordingly for the full region.\nStructure: [ val(meta), bcf ]\n"
            }
          },
          {
            "merged_variants_index": {
              "type": "file",
              "description": "Index file of the ligated phased variants files."
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@LouisLeNezet"
        ]
      }
    },
    {
      "name": "vcf_annotate_ensemblvep",
      "path": "subworkflows/nf-core/vcf_annotate_ensemblvep/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "vcf_annotate_ensemblvep",
        "description": "Perform annotation with ensemblvep and bgzip + tabix index the resulting VCF file",
        "keywords": [
          "vcf",
          "annotation",
          "ensemblvep"
        ],
        "modules": [
          "ensemblvep/vep",
          "tabix/tabix"
        ],
        "input": [
          {
            "ch_vcf": {
              "description": "vcf file to annotate\nStructure: [ val(meta), path(vcf), [path(custom_file1), path(custom_file2)... (optionnal)] ]\n"
            }
          },
          {
            "ch_fasta": {
              "description": "Reference genome fasta file (optional)\nStructure: [ val(meta2), path(fasta) ]\n"
            }
          },
          {
            "val_genome": {
              "type": "string",
              "description": "genome to use"
            }
          },
          {
            "val_species": {
              "type": "string",
              "description": "species to use"
            }
          },
          {
            "val_cache_version": {
              "type": "integer",
              "description": "cache version to use"
            }
          },
          {
            "ch_cache": {
              "description": "the root cache folder for ensemblvep (optional)\nStructure: [ val(meta3), path(cache) ]\n"
            }
          },
          {
            "ch_extra_files": {
              "description": "any extra files needed by plugins for ensemblvep (optional)\nStructure: [ path(file1), path(file2)... ]\n"
            }
          }
        ],
        "output": [
          {
            "vcf_tbi": {
              "description": "Compressed vcf file + tabix index\nStructure: [ val(meta), path(vcf), path(tbi) ]\n"
            }
          },
          {
            "json": {
              "description": "json file\nStructure: [ val(meta), path(json) ]\n"
            }
          },
          {
            "tab": {
              "description": "tab file\nStructure: [ val(meta), path(tab) ]\n"
            }
          },
          {
            "reports": {
              "type": "file",
              "description": "html reports",
              "pattern": "*.html"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxulysse",
          "@matthdsm",
          "@nvnieuwk"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "vcf_annotate_ensemblvep_snpeff",
      "path": "subworkflows/nf-core/vcf_annotate_ensemblvep_snpeff/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "vcf_annotate_ensemblvep_snpeff",
        "description": "Perform annotation with ensemblvep and/or snpeff and bgzip + tabix index the resulting VCF file. This subworkflow uses the scatter-gather method to run VEP/snpEff in parallel to increase throughput. The input VCF is split into multiple smaller VCFs of fixed size, which are annotated separately and concatenated back together to a single output file per sample. Only VCF/BCF outputs are currently supported.\n",
        "keywords": [
          "vcf",
          "annotation",
          "ensemblvep",
          "snpeff"
        ],
        "modules": [
          "ensemblvep/vep",
          "snpeff/snpeff",
          "tabix/tabix",
          "bcftools/pluginscatter",
          "bcftools/concat"
        ],
        "input": [
          {
            "ch_vcf": {
              "description": "vcf file to annotate\nStructure: [ val(meta), path(vcf), path(tbi) ]\n"
            }
          },
          {
            "ch_fasta": {
              "description": "Reference genome fasta file (optional)\nStructure: [ val(meta2), path(fasta) ]\n"
            }
          },
          {
            "val_vep_genome": {
              "type": "string",
              "description": "genome to use for ensemblvep"
            }
          },
          {
            "val_vep_species": {
              "type": "string",
              "description": "species to use for ensemblvep"
            }
          },
          {
            "val_vep_cache_version": {
              "type": "integer",
              "description": "cache version to use for ensemblvep"
            }
          },
          {
            "ch_vep_cache": {
              "description": "the root cache folder for ensemblvep (optional)\nStructure: [ path(cache) ]\n"
            }
          },
          {
            "ch_vep_extra_files": {
              "description": "any extra files needed by plugins for ensemblvep (optional)\nStructure: [ path(file1), path(file2)... ]\n"
            }
          },
          {
            "val_snpeff_db": {
              "type": "string",
              "description": "database to use for snpeff"
            }
          },
          {
            "ch_snpeff_cache": {
              "description": "the root cache folder for snpeff (optional)\nStructure: [ path(cache) ]\n"
            }
          },
          {
            "val_tools_to_use": {
              "type": "list",
              "description": "The tools to use. Options => '[\"ensemblvep\", \"snpeff\"]'"
            }
          },
          {
            "val_sites_per_chunk": {
              "type": "integer",
              "description": "The amount of variants per scattered VCF.\nSet this value to `null`, `[]` or `false` to disable scattering.\n"
            }
          }
        ],
        "output": [
          {
            "vcf_tbi": {
              "description": "Compressed vcf file + tabix index\nStructure: [ val(meta), path(vcf), path(tbi) ]\n"
            }
          },
          {
            "reports": {
              "type": "file",
              "description": "html reports",
              "pattern": "*.html"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@maxulysse",
          "@matthdsm",
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "vcf_annotate_snpeff",
      "path": "subworkflows/nf-core/vcf_annotate_snpeff/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "vcf_annotate_snpeff",
        "description": "Perform annotation with snpEff and bgzip + tabix index the resulting VCF file",
        "keywords": [
          "vcf",
          "annotation",
          "snpeff"
        ],
        "modules": [
          "snpeff",
          "tabix/bgziptabix"
        ],
        "input": [
          {
            "ch_vcf": {
              "description": "vcf file\nStructure: [ val(meta), path(vcf) ]\n"
            }
          },
          {
            "val_snpeff_db": {
              "type": "string",
              "description": "db version to use"
            }
          },
          {
            "ch_snpeff_cache": {
              "description": "path to root cache folder for snpEff (optional)\nStructure: [ path(cache) ]\n"
            }
          }
        ],
        "output": [
          {
            "vcf_tbi": {
              "description": "Compressed vcf file + tabix index\nStructure: [ val(meta), path(vcf), path(tbi) ]\n"
            }
          },
          {
            "reports": {
              "description": "html reports\nStructure: [ path(html) ]\n"
            }
          },
          {
            "versions": {
              "description": "Files containing software versions\nStructure: [ path(versions.yml) ]\n"
            }
          }
        ],
        "authors": [
          "@maxulysse"
        ]
      },
      "pipelines": [
        {
          "name": "sarek",
          "version": "3.2.3"
        }
      ]
    },
    {
      "name": "vcf_extract_relate_somalier",
      "path": "subworkflows/nf-core/vcf_extract_relate_somalier/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "vcf_extract_relate_somalier",
        "description": "Perform somalier extraction and relate stats on input VCFs",
        "keywords": [
          "somalier",
          "stats",
          "vcf",
          "ped",
          "relatedness"
        ],
        "modules": [
          "tabix/tabix",
          "somalier/extract",
          "somalier/relate"
        ],
        "input": [
          {
            "ch_vcfs": {
              "description": "The input VCFs to perform the stats on, optionally with their indices.\nThis channel can also contain the number of samples in the same family/group\nto check relatedness. This is advised to add as it can improve the efficiency of your pipeline\nStructure: [ val(meta), path(vcf), path(tbi), val(count) ]\n"
            }
          },
          {
            "ch_fasta": {
              "description": "The reference FASTA used to create the VCF files\nStructure: [ path(fasta) ]\n"
            }
          },
          {
            "ch_fasta_fai": {
              "description": "The index of the reference FASTA\nStructure: [ path(fasta_fai) ]\n"
            }
          },
          {
            "ch_somalier_sites": {
              "description": "A VCF containing the common sites for Somalier\nStructure: [ path(somalier_sites_vcf) ]\n"
            }
          },
          {
            "ch_peds": {
              "description": "A channel containing an optional PED file for the corresponding families. This channel has to be given, but can be like `[meta, []]`.\nWhen you don't want to use a PED file, you must supply a channel\ncontaining the meta and an empty value (`[]`) instead of a PED\nStructure: [ val(meta), path(ped) ]\n"
            }
          },
          {
            "ch_sample_groups": {
              "description": "Optional - A text file describing how the samples should be grouped\nStructure: [ path(txt) ]\n"
            }
          },
          {
            "val_common_id": {
              "description": "Optional - A common identifier in the meta map.\nThis will be used to determine which VCFs should be used in somalier_relate.\nThis value should be given when using single sample VCFs\n"
            }
          }
        ],
        "output": [
          {
            "extract": {
              "description": "The extract file created with Somalier extract\nStructure: [ val(meta), path(extract) ]\n"
            }
          },
          {
            "html": {
              "description": "An HTML file containing an interactive graph on the relatedness of the samples\nStructure: [ val(meta), path(html) ]\n"
            }
          },
          {
            "pairs_tsv": {
              "description": "A TSV file detailing the relatedness between pairs of samples\nStructure: [ val(meta), path(tsv) ]\n"
            }
          },
          {
            "samples_tsv": {
              "description": "A TSV file detailing the relatedness between all samples with the same meta\nStructure: [ val(meta), path(tsv) ]\n"
            }
          },
          {
            "versions": {
              "description": "Files containing software versions\nStructure: [ path(versions.yml) ]\n"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "vcf_gather_bcftools",
      "path": "subworkflows/nf-core/vcf_gather_bcftools/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "vcf_gather_bcftools",
        "description": "Concatenate several VCF files using bcftools concat.\nEspecially works well with the scatter subworkflows in nf-core.\nAn additional option can be given to sort the concatenated VCF.\n",
        "keywords": [
          "concat",
          "vcf",
          "gather",
          "sort",
          "bcftools"
        ],
        "modules": [
          "bcftools/sort",
          "bcftools/concat",
          "tabix/tabix"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing at least two fields: 'id' and a common field for each VCF that needs to be merged\ne.g. [ id:'test.001', common_meta:'test' ]\n"
            }
          },
          {
            "ch_vcfs": {
              "type": "file(s)",
              "description": "VCF files and their indices that should be concatenated\nStructure: [ meta, vcf, tbi ]\n"
            }
          },
          {
            "ch_scatter_output": {
              "type": "file and integer",
              "description": "The output created from a scatter subworkflow (contains a BED file and scatter_count).\nThe BED file isn't actually used in the pipeline so can remain empty if you manually set this input channel\nStructure: [ meta, bed, scatter_count ]\n"
            }
          },
          {
            "common_meta": {
              "type": "string",
              "description": "OPTIONAL:\nThe string of the common meta to use as the new 'id'.\nPlease make sure all VCFs that need to be concatenated have the same value in the\nthe meta field specified. (and that only the ID is different between these files)\n"
            }
          },
          {
            "sort": {
              "type": "boolean",
              "description": "Whether or not to sort the output VCF,\nthis can be useful if this subworkflow isn't used in a scatter/gather workflow\n"
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "vcf": {
              "type": "file",
              "description": "The concatenated (and possible sorted) VCF file\nStructure: [ meta, vcf ]\n",
              "pattern": "*.vcf.gz"
            }
          },
          {
            "tbi": {
              "type": "file",
              "description": "The indices of the output VCFs\nStructure: [ meta, tbi ]\n",
              "pattern": "*.vcf.gz.tbi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@nvnieuwk"
        ]
      }
    },
    {
      "name": "vcf_impute_glimpse",
      "path": "subworkflows/nf-core/vcf_impute_glimpse/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "vcf_imputation_glimpse",
        "description": "Impute VCF/BCF files with Glimpse",
        "keywords": [
          "glimpse",
          "chunk",
          "phase",
          "ligate"
        ],
        "modules": [
          "glimpse/chunk",
          "glimpse/phase",
          "glimpse/ligate",
          "bcftools/index"
        ],
        "input": [
          {
            "ch_vcf": {
              "type": "file",
              "description": "Target dataset in VCF/BCF format defined at all variable positions.\nIndex file of the input VCF/BCF file containing genotype likelihoods.\nFile with sample names and ploidy information.\nTarget region, usually a full chromosome (e.g. chr20:1000000-2000000 or chr20).\nThe file could possibly be without GT field (for efficiency reasons a file containing only the positions is recommended).\nStructure: [ meta, vcf, csi, txt, region ]\n"
            }
          },
          {
            "ch_ref": {
              "type": "file",
              "description": "Reference panel of haplotypes in VCF/BCF format.\nIndex file of the Reference panel file.\nStructure: [ meta, vcf, csi ]\n"
            }
          },
          {
            "ch_map": {
              "type": "file",
              "description": "File containing the genetic map.\nStructure: [gmap]\n"
            }
          }
        ],
        "output": [
          {
            "chunk_chr": {
              "type": "file",
              "description": "Tab delimited output txt file containing buffer and imputation regions.\nStructure: [meta, txt]\n"
            }
          },
          {
            "phased_variants": {
              "type": "file",
              "description": "Output VCF/BCF file containing genotype probabilities (GP field),\nimputed dosages (DS field), best guess genotypes (GT field),\nsampled haplotypes in the last (max 16) main iterations (HS field) and info-score.\nStructure: [ val(meta), bcf ]\n"
            }
          },
          {
            "merged_variants": {
              "type": "file",
              "description": "Output VCF/BCF file for the merged regions.\nPhased information (HS field) is updated accordingly for the full region.\nStructure: [ val(meta), bcf ]\n"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@LouisLeNezet"
        ]
      }
    },
    {
      "name": "vcf_phase_shapeit5",
      "path": "subworkflows/nf-core/vcf_phase_shapeit5/meta.yml",
      "type": "subworkflow",
      "meta": {
        "name": "vcf_phase_shapeit5",
        "description": "Phase vcf panel with Shapeit5 tools",
        "keywords": [
          "chunk",
          "phase",
          "ligate",
          "index",
          "vcf"
        ],
        "modules": [
          "bedtools/makewindows",
          "shapeit5/phasecommon",
          "shapeit5/ligate",
          "bcftools/index"
        ],
        "input": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "ch_vcf": {
              "type": "file",
              "description": "Target dataset in VCF/BCF format defined at all variable positions.\nIndex file of the input VCF/BCF file containing genotype likelihoods.\nPedigree information in the following format: offspring father mother.\nTarget region, usually a full chromosome (e.g. chr20:1000000-2000000 or chr20).\nThe file could possibly be without GT field (for efficiency reasons a file containing only the positions is recommended).\nStructure: [ val(meta), path(vcf), path(csi), path(pedigree), val(region) ]\n"
            }
          },
          {
            "ch_ref": {
              "type": "file",
              "description": "Reference panel of haplotypes in VCF/BCF format.\nIndex file of the Reference panel file.\nStructure: [ val(meta), path(ref), path(csi) ]\n"
            }
          },
          {
            "ch_scaffold": {
              "type": "file",
              "description": "Scaffold of haplotypes in VCF/BCF format.\nIndex file of the Scaffold of haplotypes file.\nStructure: [ val(meta), path(scaffold), path(csi) ]\n"
            }
          },
          {
            "ch_map": {
              "type": "file",
              "description": "File containing the genetic map.",
              "Structure": [
                "val(meta)",
                "path(map)"
              ]
            }
          }
        ],
        "output": [
          {
            "meta": {
              "type": "map",
              "description": "Groovy Map containing sample information\ne.g. [ id:'test' ]\n"
            }
          },
          {
            "bed": {
              "type": "file",
              "description": "BED file containing the windows",
              "pattern": "*.bed"
            }
          },
          {
            "variants_phased": {
              "type": "file",
              "description": "Phased haplotypes in VCF/BCF format.",
              "pattern": "*.{vcf,bcf,vcf.gz,bcf.gz}"
            }
          },
          {
            "variants_index": {
              "type": "file",
              "description": "CSI bcftools index",
              "pattern": "*.csi"
            }
          },
          {
            "versions": {
              "type": "file",
              "description": "File containing software versions",
              "pattern": "versions.yml"
            }
          }
        ],
        "authors": [
          "@LouisLeNezet"
        ]
      }
    }
  ]
}