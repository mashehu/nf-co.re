---
import MarkdownWrapper from '@components/markdown/MarkdownWrapper.svelte';
import SidebarToc from '@components/sidebar/SidebarToc.svelte';
import SidebarNav from '@components/sidebar/SidebarNav.astro';
import PipelinePageLayout from '@layouts/PipelinePageLayout.astro';
import pipelines_json from '@public/pipelines.json';
import { getEntry, render } from 'astro:content';
import type { SidebarEntry } from '@utils/types';
import { createLinkOrGroup } from '@utils/functions';

import ExpandDetailsButton from '@components/sidebar/ExpandDetailsButton.svelte';

export function getStaticPaths() {
    let paths: {
        params: { pipeline: string; version: string; md_file: string };
        props: { versions: string[]; md_files: { slug: string }[]; description: string | null };
    }[] = [];
    pipelines_json.remote_workflows.forEach((pipeline) => {
        const releases = pipeline.releases;
        const extended_releases = [...releases, { tag_name: 'latest', doc_files: releases[0].doc_files }];
        extended_releases.forEach((release) => {
            const md_files = release.doc_files.map((file) => {
                return { slug: file.replace('docs/', '').replace('.mdx', '').replace('.md', '') };
            });

            md_files.forEach((md_file) => {
                paths.push({
                    params: {
                        pipeline: pipeline.name,
                        version: release.tag_name,
                        md_file: md_file.slug,
                    },
                    props: {
                        versions: releases.map((release) => release.tag_name),
                        md_files: md_files,
                        description: pipeline.description,
                    },
                });
            });
        });
    });
    return paths;
}
let { pipeline, version, md_file } = Astro.params;
const { versions, md_files, description } = Astro.props;

const section = md_file.split('/')[0];
// check if there are multiple files in the section
let leftSidebar = md_files.filter((file) => file.slug.split('/')[0] === section).length > 1;

let sections: SidebarEntry[] = [];

// add trailing slash to url if missing
let url = Astro.url.pathname.endsWith('/') ? Astro.url.pathname : Astro.url.pathname + '/';
url = url.replace(/\.html\/$/, '/');
// drop everything after docs/
const baseURL = url.split('/').slice(0, 4).join('/') + '/';
if (leftSidebar) {
    const addEntriesToSection = (sections, md_files) => {
        const docSlugs = md_files.filter((f) => f.slug.startsWith(section)).map((doc) => doc.slug);
        docSlugs.forEach((slug) => {
            const parts = slug.split('/');
            let currentLevel = sections;

            parts.forEach((part, i) => {
                const label = part.replaceAll('_', ' ').replace(/(^)\S/g, (match) => match.toUpperCase());
                const existingEntry = currentLevel.find((entry) => entry.label === label);

                if (existingEntry) {
                    if (existingEntry.type === 'group') {
                        currentLevel = existingEntry.entries;
                    } else {
                        existingEntry.type = 'group';
                        existingEntry.collapsed = Astro.url.pathname !== existingEntry.href;
                        existingEntry.entries = [];
                        existingEntry.icon = 'fa-regular fa-book';
                        currentLevel = existingEntry.entries;
                    }
                } else {
                    let newEntry: SidebarEntry;
                    newEntry = createLinkOrGroup(
                        parts.slice(0, i + 1).join('_'),
                        label,
                        baseURL + slug,
                        i === parts.length - 1,
                        Astro.url.pathname,
                    );
                    currentLevel.push(newEntry);

                    if (newEntry.type === 'group' && newEntry.entries) {
                        currentLevel = newEntry.entries;
                    }
                }
            });
        });
    };

    addEntriesToSection(sections, md_files);
}
const version_tag_name = version === 'latest' ? versions[0] : version;

const entry = await getEntry('pipeline', `${pipeline}-${version_tag_name}-docs/${md_file}.md`);
let { Content, headings } = await render(entry);
const max_heading_depth = 2;

// filter out headings that are higher than max_heading_depth
headings = headings.filter((h) => h.depth <= max_heading_depth);
---

<PipelinePageLayout
    pipeline={pipeline}
    meta_title={pipeline +
        ': ' +
        section.replace(/-/g, ' ').replace(/\w\S*/g, (w) => w.replace(/^\w/, (c) => c.toUpperCase()))}
    subtitle={description}
    headings={headings}
    version={version}
    versions={versions}
    tabItems={md_files.map((file) => file.slug)}
    md_github_url={`https://github.com/nf-core/${pipeline}/blob/${version}/docs/${md_file}.md`}
    sections={sections}
    docSearchTags={[
        { name: 'page_rank', content: '5' },
        { name: 'page_subtype', content: 'docs' },
    ]}
>
    <div class="row">
        {
            leftSidebar && (
                <div class="col-12 col-md-2 sticky-top-under d-none d-md-inline sidebar-left pt-3">
                    <SidebarNav items={sections} />
                </div>
            )
        }
        <div class:list={['col-12 pt-3 markdown-content', { 'col-md-9': !leftSidebar, 'col-md-8': leftSidebar }]}>
            <MarkdownWrapper client:load headings={headings}>
                <Content />
            </MarkdownWrapper>
        </div>
        <div class:list={['col-12 toc', { 'col-md-3': !leftSidebar, 'col-md-2': leftSidebar }]}>
            <SidebarToc headings={headings} client:idle><ExpandDetailsButton client:idle /></SidebarToc>
        </div>
    </div>
</PipelinePageLayout>
