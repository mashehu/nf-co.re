---
import SchemaListing from '@components/schema/SchemaListing.svelte';
import SidebarToc from '@components/sidebar/SidebarToc.svelte';
import { promises, existsSync } from 'fs';
import SchemaListingTocButtons from '@components/schema/SchemaListingTocButtons.svelte';
import PipelinePageLayout from '@layouts/PipelinePageLayout.astro';
import pipelines_json from '@public/pipelines.json';

export function getStaticPaths() {
    var paths: {
        params: { pipeline: string; version: string };
        props: { versions: string[]; md_files: string[]; description: string | null };
    }[] = [];
    pipelines_json.remote_workflows.forEach((pipeline) => {
        const releases = pipeline.releases;
        const extended_releases = [...releases, { tag_name: 'latest', doc_files: releases[0].doc_files }];
        extended_releases.forEach((release) => {
            const md_files = release.doc_files.map((file) =>
                file.replace('docs/', '').replace('.mdx', '').replace('.md', ''),
            );
            paths.push({
                params: {
                    pipeline: pipeline.name,
                    version: release.tag_name,
                },
                props: {
                    versions: releases.map((release) => release.tag_name),
                    md_files: md_files,
                    description: pipeline.description,
                },
            });
        });
    });
    return paths;
}
const { pipeline, version } = Astro.params;
let headings: {
    slug: string;
    text: string;
    depth: number;
    fa_icon: string;
    hidden: boolean;
}[] = [];

let { versions, md_files, description } = Astro.props;

let schema: {
    definitions: { title: string; fa_icon: string; properties: [{ hidden: boolean }] }[];
    properties: [];
    $defs: { title: string; fa_icon: string; properties: [{ hidden: boolean }] }[];
} = {
    definitions: [],
    properties: [],
    $defs: [],
};
const version_tag_name = version === 'latest' ? versions[0] : version;

const cache_key = `.cache/${pipeline}/${version_tag_name}/nextflow_schema.json`;
//check if the schema is cached

if (existsSync(cache_key)) {
    let schema_buffer = await promises.readFile(cache_key, 'utf-8');
    schema = JSON.parse(schema_buffer);
}
let schemaDefs =
    schema.definitions && Object.keys(schema.definitions).length > 0
        ? schema.definitions
        : schema.properties
          ? schema.properties
          : schema.$defs;
if (schemaDefs && Object.keys(schemaDefs).length > 0) {
    headings = Object.entries(schemaDefs).map(([key, value]) => {
        return {
            slug: key.replaceAll('_', '-'),
            text: value.title,
            depth: 1,
            fa_icon: value.fa_icon,
            hidden: value.properties && Object.values(value.properties).every((prop) => prop.hidden),
        };
    });
}
---

<PipelinePageLayout
    pipeline={pipeline}
    meta_title={pipeline + ': Parameters'}
    subtitle={description}
    headings={headings}
    version={version}
    versions={versions}
    tabItems={md_files}
    showHiddenBtn={true}
>
    <div class="row">
        <div class="col-12 col-md-10">
            <SchemaListing {schema} client:load />
        </div>
        <div class="col-12 col-md-2 toc order-first order-md-last pe-0">
            <SidebarToc {headings} client:idle>
                <SchemaListingTocButtons client:visible />
            </SidebarToc>
        </div>
    </div>
</PipelinePageLayout>

<style lang="scss"></style>
